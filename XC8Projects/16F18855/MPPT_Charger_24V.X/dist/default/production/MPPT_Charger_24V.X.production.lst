

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Thu Jul 19 16:59:59 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F18855
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	stringtext2,global,class=STRCODE,delta=2
     8                           	psect	stringtext3,global,class=STRCODE,delta=2
     9                           	psect	stringtext4,global,class=STRCODE,delta=2
    10                           	psect	stringtext5,global,class=STRCODE,delta=2
    11                           	psect	cinit,global,class=CODE,merge=1,delta=2
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    17                           	psect	clrtext,global,class=CODE,delta=2
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    25                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    29                           	psect	text8,local,class=CODE,merge=1,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    31                           	psect	text10,local,class=CODE,merge=1,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,delta=2
    44                           	psect	text23,local,class=CODE,merge=1,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,delta=2
    51                           	psect	text30,local,class=CODE,merge=1,delta=2
    52                           	psect	text31,local,class=CODE,merge=1,delta=2
    53                           	psect	text32,local,class=CODE,merge=1,delta=2
    54                           	psect	text33,local,class=CODE,merge=1,delta=2
    55                           	psect	text34,local,class=CODE,merge=1,delta=2,group=2
    56                           	psect	text35,local,class=CODE,merge=1,delta=2,group=2
    57                           	psect	text36,local,class=CODE,merge=1,delta=2
    58                           	psect	text37,local,class=CODE,merge=1,delta=2,group=2
    59                           	psect	text38,local,class=CODE,merge=1,delta=2
    60                           	psect	text39,local,class=CODE,merge=1,delta=2
    61                           	psect	text40,local,class=CODE,merge=1,delta=2,group=2
    62                           	psect	text41,local,class=CODE,merge=1,delta=2,group=2
    63                           	psect	text42,local,class=CODE,merge=1,delta=2,group=2
    64                           	psect	text43,local,class=CODE,merge=1,delta=2,group=2
    65                           	dabs	1,0x620,48
    66                           	dabs	1,0x5A0,80
    67                           	dabs	1,0x520,80
    68                           	dabs	1,0x4A0,80
    69                           	dabs	1,0x420,80
    70                           	dabs	1,0x3D0,32
    71                           	dabs	1,0x2260,0,_samples
    72                           	dabs	1,0x7E,2
    73  0000                     
    74                           ; Version 1.45
    75                           ; Generated 16/11/2017 GMT
    76                           ; 
    77                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    78                           ; All rights reserved.
    79                           ; 
    80                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    81                           ; 
    82                           ; Redistribution and use in source and binary forms, with or without modification, are
    83                           ; permitted provided that the following conditions are met:
    84                           ; 
    85                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    86                           ;        conditions and the following disclaimer.
    87                           ; 
    88                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    89                           ;        of conditions and the following disclaimer in the documentation and/or other
    90                           ;        materials provided with the distribution.
    91                           ; 
    92                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    93                           ;        software without specific prior written permission.
    94                           ; 
    95                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    96                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    97                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    98                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    99                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   100                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   101                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   102                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   103                           ; 
   104                           ; 
   105                           ; Code-generator required, PIC16F18855 Definitions
   106                           ; 
   107                           ; SFR Addresses
   108  0000                     	;# 
   109  0001                     	;# 
   110  0002                     	;# 
   111  0003                     	;# 
   112  0004                     	;# 
   113  0005                     	;# 
   114  0006                     	;# 
   115  0007                     	;# 
   116  0008                     	;# 
   117  0009                     	;# 
   118  000A                     	;# 
   119  000B                     	;# 
   120  000C                     	;# 
   121  000D                     	;# 
   122  000E                     	;# 
   123  0010                     	;# 
   124  0011                     	;# 
   125  0012                     	;# 
   126  0013                     	;# 
   127  0016                     	;# 
   128  0017                     	;# 
   129  0018                     	;# 
   130  001C                     	;# 
   131  001C                     	;# 
   132  001D                     	;# 
   133  001D                     	;# 
   134  001E                     	;# 
   135  001F                     	;# 
   136  008C                     	;# 
   137  008C                     	;# 
   138  008D                     	;# 
   139  008E                     	;# 
   140  008E                     	;# 
   141  008F                     	;# 
   142  0090                     	;# 
   143  0090                     	;# 
   144  0091                     	;# 
   145  0093                     	;# 
   146  0094                     	;# 
   147  0095                     	;# 
   148  0096                     	;# 
   149  0097                     	;# 
   150  0098                     	;# 
   151  0099                     	;# 
   152  009A                     	;# 
   153  009B                     	;# 
   154  009C                     	;# 
   155  009D                     	;# 
   156  009E                     	;# 
   157  010C                     	;# 
   158  010D                     	;# 
   159  010E                     	;# 
   160  010E                     	;# 
   161  010F                     	;# 
   162  0110                     	;# 
   163  0110                     	;# 
   164  0111                     	;# 
   165  0112                     	;# 
   166  0112                     	;# 
   167  0113                     	;# 
   168  0114                     	;# 
   169  0114                     	;# 
   170  0115                     	;# 
   171  0116                     	;# 
   172  0116                     	;# 
   173  0117                     	;# 
   174  0119                     	;# 
   175  0119                     	;# 
   176  0119                     	;# 
   177  011A                     	;# 
   178  011A                     	;# 
   179  011A                     	;# 
   180  011B                     	;# 
   181  011B                     	;# 
   182  011B                     	;# 
   183  011B                     	;# 
   184  011B                     	;# 
   185  011C                     	;# 
   186  011C                     	;# 
   187  011C                     	;# 
   188  011D                     	;# 
   189  011D                     	;# 
   190  011D                     	;# 
   191  011E                     	;# 
   192  011E                     	;# 
   193  011E                     	;# 
   194  011F                     	;# 
   195  011F                     	;# 
   196  011F                     	;# 
   197  011F                     	;# 
   198  011F                     	;# 
   199  018C                     	;# 
   200  018D                     	;# 
   201  018E                     	;# 
   202  018F                     	;# 
   203  0190                     	;# 
   204  0191                     	;# 
   205  0192                     	;# 
   206  0196                     	;# 
   207  0197                     	;# 
   208  0198                     	;# 
   209  0199                     	;# 
   210  019A                     	;# 
   211  019B                     	;# 
   212  019C                     	;# 
   213  020C                     	;# 
   214  020C                     	;# 
   215  020D                     	;# 
   216  020E                     	;# 
   217  020F                     	;# 
   218  020F                     	;# 
   219  0210                     	;# 
   220  0210                     	;# 
   221  0211                     	;# 
   222  0211                     	;# 
   223  0212                     	;# 
   224  0212                     	;# 
   225  0213                     	;# 
   226  0214                     	;# 
   227  0215                     	;# 
   228  0215                     	;# 
   229  0216                     	;# 
   230  0216                     	;# 
   231  0217                     	;# 
   232  0217                     	;# 
   233  0218                     	;# 
   234  0218                     	;# 
   235  0219                     	;# 
   236  021A                     	;# 
   237  021B                     	;# 
   238  021B                     	;# 
   239  021C                     	;# 
   240  021C                     	;# 
   241  021D                     	;# 
   242  021D                     	;# 
   243  021E                     	;# 
   244  021F                     	;# 
   245  028C                     	;# 
   246  028C                     	;# 
   247  028D                     	;# 
   248  028D                     	;# 
   249  028E                     	;# 
   250  028F                     	;# 
   251  0290                     	;# 
   252  0290                     	;# 
   253  0291                     	;# 
   254  0292                     	;# 
   255  0292                     	;# 
   256  0293                     	;# 
   257  0293                     	;# 
   258  0294                     	;# 
   259  0295                     	;# 
   260  0296                     	;# 
   261  0296                     	;# 
   262  0297                     	;# 
   263  0298                     	;# 
   264  0298                     	;# 
   265  0299                     	;# 
   266  0299                     	;# 
   267  029A                     	;# 
   268  029B                     	;# 
   269  029C                     	;# 
   270  029C                     	;# 
   271  029D                     	;# 
   272  030C                     	;# 
   273  030C                     	;# 
   274  030D                     	;# 
   275  030E                     	;# 
   276  030F                     	;# 
   277  0310                     	;# 
   278  0310                     	;# 
   279  0311                     	;# 
   280  0312                     	;# 
   281  0313                     	;# 
   282  0314                     	;# 
   283  0314                     	;# 
   284  0315                     	;# 
   285  0316                     	;# 
   286  0317                     	;# 
   287  0318                     	;# 
   288  0318                     	;# 
   289  0319                     	;# 
   290  031A                     	;# 
   291  031B                     	;# 
   292  031C                     	;# 
   293  031C                     	;# 
   294  031D                     	;# 
   295  031E                     	;# 
   296  031F                     	;# 
   297  038C                     	;# 
   298  038D                     	;# 
   299  038E                     	;# 
   300  0390                     	;# 
   301  0391                     	;# 
   302  0392                     	;# 
   303  040C                     	;# 
   304  040D                     	;# 
   305  040E                     	;# 
   306  040F                     	;# 
   307  0410                     	;# 
   308  0411                     	;# 
   309  0416                     	;# 
   310  0416                     	;# 
   311  0417                     	;# 
   312  0418                     	;# 
   313  0418                     	;# 
   314  0419                     	;# 
   315  041A                     	;# 
   316  041A                     	;# 
   317  041B                     	;# 
   318  041C                     	;# 
   319  041C                     	;# 
   320  041D                     	;# 
   321  041E                     	;# 
   322  041F                     	;# 
   323  048C                     	;# 
   324  048C                     	;# 
   325  048D                     	;# 
   326  048E                     	;# 
   327  048F                     	;# 
   328  048F                     	;# 
   329  0490                     	;# 
   330  0491                     	;# 
   331  0492                     	;# 
   332  0492                     	;# 
   333  0493                     	;# 
   334  0494                     	;# 
   335  0495                     	;# 
   336  0495                     	;# 
   337  0496                     	;# 
   338  0497                     	;# 
   339  0498                     	;# 
   340  0499                     	;# 
   341  049A                     	;# 
   342  049B                     	;# 
   343  049C                     	;# 
   344  049D                     	;# 
   345  050C                     	;# 
   346  050C                     	;# 
   347  050D                     	;# 
   348  050E                     	;# 
   349  050F                     	;# 
   350  050F                     	;# 
   351  0510                     	;# 
   352  0511                     	;# 
   353  0512                     	;# 
   354  0512                     	;# 
   355  0513                     	;# 
   356  0514                     	;# 
   357  0515                     	;# 
   358  0515                     	;# 
   359  0516                     	;# 
   360  0517                     	;# 
   361  0518                     	;# 
   362  0519                     	;# 
   363  051A                     	;# 
   364  051B                     	;# 
   365  051C                     	;# 
   366  051D                     	;# 
   367  058C                     	;# 
   368  058C                     	;# 
   369  058D                     	;# 
   370  058E                     	;# 
   371  058F                     	;# 
   372  058F                     	;# 
   373  0590                     	;# 
   374  0591                     	;# 
   375  0592                     	;# 
   376  0593                     	;# 
   377  060C                     	;# 
   378  060D                     	;# 
   379  060E                     	;# 
   380  060F                     	;# 
   381  0610                     	;# 
   382  0611                     	;# 
   383  0612                     	;# 
   384  0613                     	;# 
   385  0614                     	;# 
   386  0616                     	;# 
   387  0617                     	;# 
   388  0618                     	;# 
   389  0619                     	;# 
   390  061A                     	;# 
   391  061B                     	;# 
   392  061C                     	;# 
   393  061D                     	;# 
   394  061E                     	;# 
   395  068C                     	;# 
   396  068D                     	;# 
   397  068E                     	;# 
   398  068F                     	;# 
   399  0690                     	;# 
   400  0691                     	;# 
   401  0692                     	;# 
   402  0693                     	;# 
   403  0694                     	;# 
   404  070C                     	;# 
   405  070D                     	;# 
   406  070E                     	;# 
   407  070F                     	;# 
   408  0710                     	;# 
   409  0711                     	;# 
   410  0712                     	;# 
   411  0713                     	;# 
   412  0714                     	;# 
   413  0716                     	;# 
   414  0717                     	;# 
   415  0718                     	;# 
   416  0719                     	;# 
   417  071A                     	;# 
   418  071B                     	;# 
   419  071C                     	;# 
   420  071D                     	;# 
   421  071E                     	;# 
   422  0796                     	;# 
   423  0797                     	;# 
   424  0798                     	;# 
   425  0799                     	;# 
   426  079A                     	;# 
   427  079B                     	;# 
   428  080C                     	;# 
   429  080D                     	;# 
   430  080E                     	;# 
   431  080F                     	;# 
   432  0810                     	;# 
   433  0811                     	;# 
   434  0812                     	;# 
   435  0813                     	;# 
   436  0814                     	;# 
   437  081A                     	;# 
   438  081B                     	;# 
   439  081C                     	;# 
   440  081D                     	;# 
   441  081E                     	;# 
   442  081F                     	;# 
   443  088C                     	;# 
   444  088D                     	;# 
   445  088E                     	;# 
   446  088F                     	;# 
   447  0890                     	;# 
   448  0891                     	;# 
   449  0892                     	;# 
   450  0893                     	;# 
   451  0895                     	;# 
   452  0896                     	;# 
   453  0897                     	;# 
   454  0898                     	;# 
   455  0899                     	;# 
   456  089A                     	;# 
   457  089B                     	;# 
   458  090C                     	;# 
   459  090E                     	;# 
   460  090F                     	;# 
   461  091F                     	;# 
   462  091F                     	;# 
   463  098F                     	;# 
   464  098F                     	;# 
   465  0990                     	;# 
   466  0991                     	;# 
   467  0992                     	;# 
   468  0993                     	;# 
   469  0994                     	;# 
   470  0995                     	;# 
   471  0996                     	;# 
   472  0997                     	;# 
   473  0E0F                     	;# 
   474  0E10                     	;# 
   475  0E11                     	;# 
   476  0E12                     	;# 
   477  0E13                     	;# 
   478  0E14                     	;# 
   479  0E15                     	;# 
   480  0E16                     	;# 
   481  0E17                     	;# 
   482  0E18                     	;# 
   483  0E19                     	;# 
   484  0E1A                     	;# 
   485  0E1B                     	;# 
   486  0E1C                     	;# 
   487  0E1D                     	;# 
   488  0E1E                     	;# 
   489  0E1F                     	;# 
   490  0E20                     	;# 
   491  0E21                     	;# 
   492  0E22                     	;# 
   493  0E23                     	;# 
   494  0E24                     	;# 
   495  0E25                     	;# 
   496  0E26                     	;# 
   497  0E27                     	;# 
   498  0E28                     	;# 
   499  0E29                     	;# 
   500  0E2A                     	;# 
   501  0E2B                     	;# 
   502  0E2C                     	;# 
   503  0E2D                     	;# 
   504  0E2E                     	;# 
   505  0E2F                     	;# 
   506  0E30                     	;# 
   507  0E31                     	;# 
   508  0E32                     	;# 
   509  0E33                     	;# 
   510  0E34                     	;# 
   511  0E35                     	;# 
   512  0E36                     	;# 
   513  0E37                     	;# 
   514  0E8F                     	;# 
   515  0E90                     	;# 
   516  0E91                     	;# 
   517  0E92                     	;# 
   518  0E93                     	;# 
   519  0E94                     	;# 
   520  0E95                     	;# 
   521  0E96                     	;# 
   522  0E97                     	;# 
   523  0E9C                     	;# 
   524  0E9D                     	;# 
   525  0E9E                     	;# 
   526  0EA1                     	;# 
   527  0EA2                     	;# 
   528  0EA3                     	;# 
   529  0EA4                     	;# 
   530  0EA5                     	;# 
   531  0EA9                     	;# 
   532  0EAA                     	;# 
   533  0EAB                     	;# 
   534  0EAC                     	;# 
   535  0EB1                     	;# 
   536  0EB2                     	;# 
   537  0EB3                     	;# 
   538  0EB8                     	;# 
   539  0EB9                     	;# 
   540  0EBA                     	;# 
   541  0EBB                     	;# 
   542  0EBC                     	;# 
   543  0EBD                     	;# 
   544  0EBE                     	;# 
   545  0EC3                     	;# 
   546  0EC5                     	;# 
   547  0EC6                     	;# 
   548  0EC7                     	;# 
   549  0EC8                     	;# 
   550  0EC9                     	;# 
   551  0ECA                     	;# 
   552  0ECB                     	;# 
   553  0ECC                     	;# 
   554  0F10                     	;# 
   555  0F11                     	;# 
   556  0F12                     	;# 
   557  0F13                     	;# 
   558  0F14                     	;# 
   559  0F15                     	;# 
   560  0F16                     	;# 
   561  0F17                     	;# 
   562  0F18                     	;# 
   563  0F19                     	;# 
   564  0F1A                     	;# 
   565  0F1B                     	;# 
   566  0F1C                     	;# 
   567  0F1D                     	;# 
   568  0F1E                     	;# 
   569  0F1F                     	;# 
   570  0F20                     	;# 
   571  0F21                     	;# 
   572  0F22                     	;# 
   573  0F23                     	;# 
   574  0F24                     	;# 
   575  0F25                     	;# 
   576  0F26                     	;# 
   577  0F27                     	;# 
   578  0F38                     	;# 
   579  0F39                     	;# 
   580  0F3A                     	;# 
   581  0F3B                     	;# 
   582  0F3C                     	;# 
   583  0F3D                     	;# 
   584  0F3E                     	;# 
   585  0F3F                     	;# 
   586  0F40                     	;# 
   587  0F41                     	;# 
   588  0F43                     	;# 
   589  0F44                     	;# 
   590  0F45                     	;# 
   591  0F46                     	;# 
   592  0F47                     	;# 
   593  0F48                     	;# 
   594  0F49                     	;# 
   595  0F4A                     	;# 
   596  0F4B                     	;# 
   597  0F4C                     	;# 
   598  0F4E                     	;# 
   599  0F4F                     	;# 
   600  0F50                     	;# 
   601  0F51                     	;# 
   602  0F52                     	;# 
   603  0F53                     	;# 
   604  0F54                     	;# 
   605  0F55                     	;# 
   606  0F56                     	;# 
   607  0F57                     	;# 
   608  0F65                     	;# 
   609  0F68                     	;# 
   610  0F69                     	;# 
   611  0F6A                     	;# 
   612  0F6B                     	;# 
   613  0FE4                     	;# 
   614  0FE5                     	;# 
   615  0FE6                     	;# 
   616  0FE7                     	;# 
   617  0FE8                     	;# 
   618  0FE9                     	;# 
   619  0FEA                     	;# 
   620  0FEB                     	;# 
   621  0FED                     	;# 
   622  0FEE                     	;# 
   623  0FEF                     	;# 
   624  0000                     	;# 
   625  0001                     	;# 
   626  0002                     	;# 
   627  0003                     	;# 
   628  0004                     	;# 
   629  0005                     	;# 
   630  0006                     	;# 
   631  0007                     	;# 
   632  0008                     	;# 
   633  0009                     	;# 
   634  000A                     	;# 
   635  000B                     	;# 
   636  000C                     	;# 
   637  000D                     	;# 
   638  000E                     	;# 
   639  0010                     	;# 
   640  0011                     	;# 
   641  0012                     	;# 
   642  0013                     	;# 
   643  0016                     	;# 
   644  0017                     	;# 
   645  0018                     	;# 
   646  001C                     	;# 
   647  001C                     	;# 
   648  001D                     	;# 
   649  001D                     	;# 
   650  001E                     	;# 
   651  001F                     	;# 
   652  008C                     	;# 
   653  008C                     	;# 
   654  008D                     	;# 
   655  008E                     	;# 
   656  008E                     	;# 
   657  008F                     	;# 
   658  0090                     	;# 
   659  0090                     	;# 
   660  0091                     	;# 
   661  0093                     	;# 
   662  0094                     	;# 
   663  0095                     	;# 
   664  0096                     	;# 
   665  0097                     	;# 
   666  0098                     	;# 
   667  0099                     	;# 
   668  009A                     	;# 
   669  009B                     	;# 
   670  009C                     	;# 
   671  009D                     	;# 
   672  009E                     	;# 
   673  010C                     	;# 
   674  010D                     	;# 
   675  010E                     	;# 
   676  010E                     	;# 
   677  010F                     	;# 
   678  0110                     	;# 
   679  0110                     	;# 
   680  0111                     	;# 
   681  0112                     	;# 
   682  0112                     	;# 
   683  0113                     	;# 
   684  0114                     	;# 
   685  0114                     	;# 
   686  0115                     	;# 
   687  0116                     	;# 
   688  0116                     	;# 
   689  0117                     	;# 
   690  0119                     	;# 
   691  0119                     	;# 
   692  0119                     	;# 
   693  011A                     	;# 
   694  011A                     	;# 
   695  011A                     	;# 
   696  011B                     	;# 
   697  011B                     	;# 
   698  011B                     	;# 
   699  011B                     	;# 
   700  011B                     	;# 
   701  011C                     	;# 
   702  011C                     	;# 
   703  011C                     	;# 
   704  011D                     	;# 
   705  011D                     	;# 
   706  011D                     	;# 
   707  011E                     	;# 
   708  011E                     	;# 
   709  011E                     	;# 
   710  011F                     	;# 
   711  011F                     	;# 
   712  011F                     	;# 
   713  011F                     	;# 
   714  011F                     	;# 
   715  018C                     	;# 
   716  018D                     	;# 
   717  018E                     	;# 
   718  018F                     	;# 
   719  0190                     	;# 
   720  0191                     	;# 
   721  0192                     	;# 
   722  0196                     	;# 
   723  0197                     	;# 
   724  0198                     	;# 
   725  0199                     	;# 
   726  019A                     	;# 
   727  019B                     	;# 
   728  019C                     	;# 
   729  020C                     	;# 
   730  020C                     	;# 
   731  020D                     	;# 
   732  020E                     	;# 
   733  020F                     	;# 
   734  020F                     	;# 
   735  0210                     	;# 
   736  0210                     	;# 
   737  0211                     	;# 
   738  0211                     	;# 
   739  0212                     	;# 
   740  0212                     	;# 
   741  0213                     	;# 
   742  0214                     	;# 
   743  0215                     	;# 
   744  0215                     	;# 
   745  0216                     	;# 
   746  0216                     	;# 
   747  0217                     	;# 
   748  0217                     	;# 
   749  0218                     	;# 
   750  0218                     	;# 
   751  0219                     	;# 
   752  021A                     	;# 
   753  021B                     	;# 
   754  021B                     	;# 
   755  021C                     	;# 
   756  021C                     	;# 
   757  021D                     	;# 
   758  021D                     	;# 
   759  021E                     	;# 
   760  021F                     	;# 
   761  028C                     	;# 
   762  028C                     	;# 
   763  028D                     	;# 
   764  028D                     	;# 
   765  028E                     	;# 
   766  028F                     	;# 
   767  0290                     	;# 
   768  0290                     	;# 
   769  0291                     	;# 
   770  0292                     	;# 
   771  0292                     	;# 
   772  0293                     	;# 
   773  0293                     	;# 
   774  0294                     	;# 
   775  0295                     	;# 
   776  0296                     	;# 
   777  0296                     	;# 
   778  0297                     	;# 
   779  0298                     	;# 
   780  0298                     	;# 
   781  0299                     	;# 
   782  0299                     	;# 
   783  029A                     	;# 
   784  029B                     	;# 
   785  029C                     	;# 
   786  029C                     	;# 
   787  029D                     	;# 
   788  030C                     	;# 
   789  030C                     	;# 
   790  030D                     	;# 
   791  030E                     	;# 
   792  030F                     	;# 
   793  0310                     	;# 
   794  0310                     	;# 
   795  0311                     	;# 
   796  0312                     	;# 
   797  0313                     	;# 
   798  0314                     	;# 
   799  0314                     	;# 
   800  0315                     	;# 
   801  0316                     	;# 
   802  0317                     	;# 
   803  0318                     	;# 
   804  0318                     	;# 
   805  0319                     	;# 
   806  031A                     	;# 
   807  031B                     	;# 
   808  031C                     	;# 
   809  031C                     	;# 
   810  031D                     	;# 
   811  031E                     	;# 
   812  031F                     	;# 
   813  038C                     	;# 
   814  038D                     	;# 
   815  038E                     	;# 
   816  0390                     	;# 
   817  0391                     	;# 
   818  0392                     	;# 
   819  040C                     	;# 
   820  040D                     	;# 
   821  040E                     	;# 
   822  040F                     	;# 
   823  0410                     	;# 
   824  0411                     	;# 
   825  0416                     	;# 
   826  0416                     	;# 
   827  0417                     	;# 
   828  0418                     	;# 
   829  0418                     	;# 
   830  0419                     	;# 
   831  041A                     	;# 
   832  041A                     	;# 
   833  041B                     	;# 
   834  041C                     	;# 
   835  041C                     	;# 
   836  041D                     	;# 
   837  041E                     	;# 
   838  041F                     	;# 
   839  048C                     	;# 
   840  048C                     	;# 
   841  048D                     	;# 
   842  048E                     	;# 
   843  048F                     	;# 
   844  048F                     	;# 
   845  0490                     	;# 
   846  0491                     	;# 
   847  0492                     	;# 
   848  0492                     	;# 
   849  0493                     	;# 
   850  0494                     	;# 
   851  0495                     	;# 
   852  0495                     	;# 
   853  0496                     	;# 
   854  0497                     	;# 
   855  0498                     	;# 
   856  0499                     	;# 
   857  049A                     	;# 
   858  049B                     	;# 
   859  049C                     	;# 
   860  049D                     	;# 
   861  050C                     	;# 
   862  050C                     	;# 
   863  050D                     	;# 
   864  050E                     	;# 
   865  050F                     	;# 
   866  050F                     	;# 
   867  0510                     	;# 
   868  0511                     	;# 
   869  0512                     	;# 
   870  0512                     	;# 
   871  0513                     	;# 
   872  0514                     	;# 
   873  0515                     	;# 
   874  0515                     	;# 
   875  0516                     	;# 
   876  0517                     	;# 
   877  0518                     	;# 
   878  0519                     	;# 
   879  051A                     	;# 
   880  051B                     	;# 
   881  051C                     	;# 
   882  051D                     	;# 
   883  058C                     	;# 
   884  058C                     	;# 
   885  058D                     	;# 
   886  058E                     	;# 
   887  058F                     	;# 
   888  058F                     	;# 
   889  0590                     	;# 
   890  0591                     	;# 
   891  0592                     	;# 
   892  0593                     	;# 
   893  060C                     	;# 
   894  060D                     	;# 
   895  060E                     	;# 
   896  060F                     	;# 
   897  0610                     	;# 
   898  0611                     	;# 
   899  0612                     	;# 
   900  0613                     	;# 
   901  0614                     	;# 
   902  0616                     	;# 
   903  0617                     	;# 
   904  0618                     	;# 
   905  0619                     	;# 
   906  061A                     	;# 
   907  061B                     	;# 
   908  061C                     	;# 
   909  061D                     	;# 
   910  061E                     	;# 
   911  068C                     	;# 
   912  068D                     	;# 
   913  068E                     	;# 
   914  068F                     	;# 
   915  0690                     	;# 
   916  0691                     	;# 
   917  0692                     	;# 
   918  0693                     	;# 
   919  0694                     	;# 
   920  070C                     	;# 
   921  070D                     	;# 
   922  070E                     	;# 
   923  070F                     	;# 
   924  0710                     	;# 
   925  0711                     	;# 
   926  0712                     	;# 
   927  0713                     	;# 
   928  0714                     	;# 
   929  0716                     	;# 
   930  0717                     	;# 
   931  0718                     	;# 
   932  0719                     	;# 
   933  071A                     	;# 
   934  071B                     	;# 
   935  071C                     	;# 
   936  071D                     	;# 
   937  071E                     	;# 
   938  0796                     	;# 
   939  0797                     	;# 
   940  0798                     	;# 
   941  0799                     	;# 
   942  079A                     	;# 
   943  079B                     	;# 
   944  080C                     	;# 
   945  080D                     	;# 
   946  080E                     	;# 
   947  080F                     	;# 
   948  0810                     	;# 
   949  0811                     	;# 
   950  0812                     	;# 
   951  0813                     	;# 
   952  0814                     	;# 
   953  081A                     	;# 
   954  081B                     	;# 
   955  081C                     	;# 
   956  081D                     	;# 
   957  081E                     	;# 
   958  081F                     	;# 
   959  088C                     	;# 
   960  088D                     	;# 
   961  088E                     	;# 
   962  088F                     	;# 
   963  0890                     	;# 
   964  0891                     	;# 
   965  0892                     	;# 
   966  0893                     	;# 
   967  0895                     	;# 
   968  0896                     	;# 
   969  0897                     	;# 
   970  0898                     	;# 
   971  0899                     	;# 
   972  089A                     	;# 
   973  089B                     	;# 
   974  090C                     	;# 
   975  090E                     	;# 
   976  090F                     	;# 
   977  091F                     	;# 
   978  091F                     	;# 
   979  098F                     	;# 
   980  098F                     	;# 
   981  0990                     	;# 
   982  0991                     	;# 
   983  0992                     	;# 
   984  0993                     	;# 
   985  0994                     	;# 
   986  0995                     	;# 
   987  0996                     	;# 
   988  0997                     	;# 
   989  0E0F                     	;# 
   990  0E10                     	;# 
   991  0E11                     	;# 
   992  0E12                     	;# 
   993  0E13                     	;# 
   994  0E14                     	;# 
   995  0E15                     	;# 
   996  0E16                     	;# 
   997  0E17                     	;# 
   998  0E18                     	;# 
   999  0E19                     	;# 
  1000  0E1A                     	;# 
  1001  0E1B                     	;# 
  1002  0E1C                     	;# 
  1003  0E1D                     	;# 
  1004  0E1E                     	;# 
  1005  0E1F                     	;# 
  1006  0E20                     	;# 
  1007  0E21                     	;# 
  1008  0E22                     	;# 
  1009  0E23                     	;# 
  1010  0E24                     	;# 
  1011  0E25                     	;# 
  1012  0E26                     	;# 
  1013  0E27                     	;# 
  1014  0E28                     	;# 
  1015  0E29                     	;# 
  1016  0E2A                     	;# 
  1017  0E2B                     	;# 
  1018  0E2C                     	;# 
  1019  0E2D                     	;# 
  1020  0E2E                     	;# 
  1021  0E2F                     	;# 
  1022  0E30                     	;# 
  1023  0E31                     	;# 
  1024  0E32                     	;# 
  1025  0E33                     	;# 
  1026  0E34                     	;# 
  1027  0E35                     	;# 
  1028  0E36                     	;# 
  1029  0E37                     	;# 
  1030  0E8F                     	;# 
  1031  0E90                     	;# 
  1032  0E91                     	;# 
  1033  0E92                     	;# 
  1034  0E93                     	;# 
  1035  0E94                     	;# 
  1036  0E95                     	;# 
  1037  0E96                     	;# 
  1038  0E97                     	;# 
  1039  0E9C                     	;# 
  1040  0E9D                     	;# 
  1041  0E9E                     	;# 
  1042  0EA1                     	;# 
  1043  0EA2                     	;# 
  1044  0EA3                     	;# 
  1045  0EA4                     	;# 
  1046  0EA5                     	;# 
  1047  0EA9                     	;# 
  1048  0EAA                     	;# 
  1049  0EAB                     	;# 
  1050  0EAC                     	;# 
  1051  0EB1                     	;# 
  1052  0EB2                     	;# 
  1053  0EB3                     	;# 
  1054  0EB8                     	;# 
  1055  0EB9                     	;# 
  1056  0EBA                     	;# 
  1057  0EBB                     	;# 
  1058  0EBC                     	;# 
  1059  0EBD                     	;# 
  1060  0EBE                     	;# 
  1061  0EC3                     	;# 
  1062  0EC5                     	;# 
  1063  0EC6                     	;# 
  1064  0EC7                     	;# 
  1065  0EC8                     	;# 
  1066  0EC9                     	;# 
  1067  0ECA                     	;# 
  1068  0ECB                     	;# 
  1069  0ECC                     	;# 
  1070  0F10                     	;# 
  1071  0F11                     	;# 
  1072  0F12                     	;# 
  1073  0F13                     	;# 
  1074  0F14                     	;# 
  1075  0F15                     	;# 
  1076  0F16                     	;# 
  1077  0F17                     	;# 
  1078  0F18                     	;# 
  1079  0F19                     	;# 
  1080  0F1A                     	;# 
  1081  0F1B                     	;# 
  1082  0F1C                     	;# 
  1083  0F1D                     	;# 
  1084  0F1E                     	;# 
  1085  0F1F                     	;# 
  1086  0F20                     	;# 
  1087  0F21                     	;# 
  1088  0F22                     	;# 
  1089  0F23                     	;# 
  1090  0F24                     	;# 
  1091  0F25                     	;# 
  1092  0F26                     	;# 
  1093  0F27                     	;# 
  1094  0F38                     	;# 
  1095  0F39                     	;# 
  1096  0F3A                     	;# 
  1097  0F3B                     	;# 
  1098  0F3C                     	;# 
  1099  0F3D                     	;# 
  1100  0F3E                     	;# 
  1101  0F3F                     	;# 
  1102  0F40                     	;# 
  1103  0F41                     	;# 
  1104  0F43                     	;# 
  1105  0F44                     	;# 
  1106  0F45                     	;# 
  1107  0F46                     	;# 
  1108  0F47                     	;# 
  1109  0F48                     	;# 
  1110  0F49                     	;# 
  1111  0F4A                     	;# 
  1112  0F4B                     	;# 
  1113  0F4C                     	;# 
  1114  0F4E                     	;# 
  1115  0F4F                     	;# 
  1116  0F50                     	;# 
  1117  0F51                     	;# 
  1118  0F52                     	;# 
  1119  0F53                     	;# 
  1120  0F54                     	;# 
  1121  0F55                     	;# 
  1122  0F56                     	;# 
  1123  0F57                     	;# 
  1124  0F65                     	;# 
  1125  0F68                     	;# 
  1126  0F69                     	;# 
  1127  0F6A                     	;# 
  1128  0F6B                     	;# 
  1129  0FE4                     	;# 
  1130  0FE5                     	;# 
  1131  0FE6                     	;# 
  1132  0FE7                     	;# 
  1133  0FE8                     	;# 
  1134  0FE9                     	;# 
  1135  0FEA                     	;# 
  1136  0FEB                     	;# 
  1137  0FED                     	;# 
  1138  0FEE                     	;# 
  1139  0FEF                     	;# 
  1140  0000                     	;# 
  1141  0001                     	;# 
  1142  0002                     	;# 
  1143  0003                     	;# 
  1144  0004                     	;# 
  1145  0005                     	;# 
  1146  0006                     	;# 
  1147  0007                     	;# 
  1148  0008                     	;# 
  1149  0009                     	;# 
  1150  000A                     	;# 
  1151  000B                     	;# 
  1152  000C                     	;# 
  1153  000D                     	;# 
  1154  000E                     	;# 
  1155  0010                     	;# 
  1156  0011                     	;# 
  1157  0012                     	;# 
  1158  0013                     	;# 
  1159  0016                     	;# 
  1160  0017                     	;# 
  1161  0018                     	;# 
  1162  001C                     	;# 
  1163  001C                     	;# 
  1164  001D                     	;# 
  1165  001D                     	;# 
  1166  001E                     	;# 
  1167  001F                     	;# 
  1168  008C                     	;# 
  1169  008C                     	;# 
  1170  008D                     	;# 
  1171  008E                     	;# 
  1172  008E                     	;# 
  1173  008F                     	;# 
  1174  0090                     	;# 
  1175  0090                     	;# 
  1176  0091                     	;# 
  1177  0093                     	;# 
  1178  0094                     	;# 
  1179  0095                     	;# 
  1180  0096                     	;# 
  1181  0097                     	;# 
  1182  0098                     	;# 
  1183  0099                     	;# 
  1184  009A                     	;# 
  1185  009B                     	;# 
  1186  009C                     	;# 
  1187  009D                     	;# 
  1188  009E                     	;# 
  1189  010C                     	;# 
  1190  010D                     	;# 
  1191  010E                     	;# 
  1192  010E                     	;# 
  1193  010F                     	;# 
  1194  0110                     	;# 
  1195  0110                     	;# 
  1196  0111                     	;# 
  1197  0112                     	;# 
  1198  0112                     	;# 
  1199  0113                     	;# 
  1200  0114                     	;# 
  1201  0114                     	;# 
  1202  0115                     	;# 
  1203  0116                     	;# 
  1204  0116                     	;# 
  1205  0117                     	;# 
  1206  0119                     	;# 
  1207  0119                     	;# 
  1208  0119                     	;# 
  1209  011A                     	;# 
  1210  011A                     	;# 
  1211  011A                     	;# 
  1212  011B                     	;# 
  1213  011B                     	;# 
  1214  011B                     	;# 
  1215  011B                     	;# 
  1216  011B                     	;# 
  1217  011C                     	;# 
  1218  011C                     	;# 
  1219  011C                     	;# 
  1220  011D                     	;# 
  1221  011D                     	;# 
  1222  011D                     	;# 
  1223  011E                     	;# 
  1224  011E                     	;# 
  1225  011E                     	;# 
  1226  011F                     	;# 
  1227  011F                     	;# 
  1228  011F                     	;# 
  1229  011F                     	;# 
  1230  011F                     	;# 
  1231  018C                     	;# 
  1232  018D                     	;# 
  1233  018E                     	;# 
  1234  018F                     	;# 
  1235  0190                     	;# 
  1236  0191                     	;# 
  1237  0192                     	;# 
  1238  0196                     	;# 
  1239  0197                     	;# 
  1240  0198                     	;# 
  1241  0199                     	;# 
  1242  019A                     	;# 
  1243  019B                     	;# 
  1244  019C                     	;# 
  1245  020C                     	;# 
  1246  020C                     	;# 
  1247  020D                     	;# 
  1248  020E                     	;# 
  1249  020F                     	;# 
  1250  020F                     	;# 
  1251  0210                     	;# 
  1252  0210                     	;# 
  1253  0211                     	;# 
  1254  0211                     	;# 
  1255  0212                     	;# 
  1256  0212                     	;# 
  1257  0213                     	;# 
  1258  0214                     	;# 
  1259  0215                     	;# 
  1260  0215                     	;# 
  1261  0216                     	;# 
  1262  0216                     	;# 
  1263  0217                     	;# 
  1264  0217                     	;# 
  1265  0218                     	;# 
  1266  0218                     	;# 
  1267  0219                     	;# 
  1268  021A                     	;# 
  1269  021B                     	;# 
  1270  021B                     	;# 
  1271  021C                     	;# 
  1272  021C                     	;# 
  1273  021D                     	;# 
  1274  021D                     	;# 
  1275  021E                     	;# 
  1276  021F                     	;# 
  1277  028C                     	;# 
  1278  028C                     	;# 
  1279  028D                     	;# 
  1280  028D                     	;# 
  1281  028E                     	;# 
  1282  028F                     	;# 
  1283  0290                     	;# 
  1284  0290                     	;# 
  1285  0291                     	;# 
  1286  0292                     	;# 
  1287  0292                     	;# 
  1288  0293                     	;# 
  1289  0293                     	;# 
  1290  0294                     	;# 
  1291  0295                     	;# 
  1292  0296                     	;# 
  1293  0296                     	;# 
  1294  0297                     	;# 
  1295  0298                     	;# 
  1296  0298                     	;# 
  1297  0299                     	;# 
  1298  0299                     	;# 
  1299  029A                     	;# 
  1300  029B                     	;# 
  1301  029C                     	;# 
  1302  029C                     	;# 
  1303  029D                     	;# 
  1304  030C                     	;# 
  1305  030C                     	;# 
  1306  030D                     	;# 
  1307  030E                     	;# 
  1308  030F                     	;# 
  1309  0310                     	;# 
  1310  0310                     	;# 
  1311  0311                     	;# 
  1312  0312                     	;# 
  1313  0313                     	;# 
  1314  0314                     	;# 
  1315  0314                     	;# 
  1316  0315                     	;# 
  1317  0316                     	;# 
  1318  0317                     	;# 
  1319  0318                     	;# 
  1320  0318                     	;# 
  1321  0319                     	;# 
  1322  031A                     	;# 
  1323  031B                     	;# 
  1324  031C                     	;# 
  1325  031C                     	;# 
  1326  031D                     	;# 
  1327  031E                     	;# 
  1328  031F                     	;# 
  1329  038C                     	;# 
  1330  038D                     	;# 
  1331  038E                     	;# 
  1332  0390                     	;# 
  1333  0391                     	;# 
  1334  0392                     	;# 
  1335  040C                     	;# 
  1336  040D                     	;# 
  1337  040E                     	;# 
  1338  040F                     	;# 
  1339  0410                     	;# 
  1340  0411                     	;# 
  1341  0416                     	;# 
  1342  0416                     	;# 
  1343  0417                     	;# 
  1344  0418                     	;# 
  1345  0418                     	;# 
  1346  0419                     	;# 
  1347  041A                     	;# 
  1348  041A                     	;# 
  1349  041B                     	;# 
  1350  041C                     	;# 
  1351  041C                     	;# 
  1352  041D                     	;# 
  1353  041E                     	;# 
  1354  041F                     	;# 
  1355  048C                     	;# 
  1356  048C                     	;# 
  1357  048D                     	;# 
  1358  048E                     	;# 
  1359  048F                     	;# 
  1360  048F                     	;# 
  1361  0490                     	;# 
  1362  0491                     	;# 
  1363  0492                     	;# 
  1364  0492                     	;# 
  1365  0493                     	;# 
  1366  0494                     	;# 
  1367  0495                     	;# 
  1368  0495                     	;# 
  1369  0496                     	;# 
  1370  0497                     	;# 
  1371  0498                     	;# 
  1372  0499                     	;# 
  1373  049A                     	;# 
  1374  049B                     	;# 
  1375  049C                     	;# 
  1376  049D                     	;# 
  1377  050C                     	;# 
  1378  050C                     	;# 
  1379  050D                     	;# 
  1380  050E                     	;# 
  1381  050F                     	;# 
  1382  050F                     	;# 
  1383  0510                     	;# 
  1384  0511                     	;# 
  1385  0512                     	;# 
  1386  0512                     	;# 
  1387  0513                     	;# 
  1388  0514                     	;# 
  1389  0515                     	;# 
  1390  0515                     	;# 
  1391  0516                     	;# 
  1392  0517                     	;# 
  1393  0518                     	;# 
  1394  0519                     	;# 
  1395  051A                     	;# 
  1396  051B                     	;# 
  1397  051C                     	;# 
  1398  051D                     	;# 
  1399  058C                     	;# 
  1400  058C                     	;# 
  1401  058D                     	;# 
  1402  058E                     	;# 
  1403  058F                     	;# 
  1404  058F                     	;# 
  1405  0590                     	;# 
  1406  0591                     	;# 
  1407  0592                     	;# 
  1408  0593                     	;# 
  1409  060C                     	;# 
  1410  060D                     	;# 
  1411  060E                     	;# 
  1412  060F                     	;# 
  1413  0610                     	;# 
  1414  0611                     	;# 
  1415  0612                     	;# 
  1416  0613                     	;# 
  1417  0614                     	;# 
  1418  0616                     	;# 
  1419  0617                     	;# 
  1420  0618                     	;# 
  1421  0619                     	;# 
  1422  061A                     	;# 
  1423  061B                     	;# 
  1424  061C                     	;# 
  1425  061D                     	;# 
  1426  061E                     	;# 
  1427  068C                     	;# 
  1428  068D                     	;# 
  1429  068E                     	;# 
  1430  068F                     	;# 
  1431  0690                     	;# 
  1432  0691                     	;# 
  1433  0692                     	;# 
  1434  0693                     	;# 
  1435  0694                     	;# 
  1436  070C                     	;# 
  1437  070D                     	;# 
  1438  070E                     	;# 
  1439  070F                     	;# 
  1440  0710                     	;# 
  1441  0711                     	;# 
  1442  0712                     	;# 
  1443  0713                     	;# 
  1444  0714                     	;# 
  1445  0716                     	;# 
  1446  0717                     	;# 
  1447  0718                     	;# 
  1448  0719                     	;# 
  1449  071A                     	;# 
  1450  071B                     	;# 
  1451  071C                     	;# 
  1452  071D                     	;# 
  1453  071E                     	;# 
  1454  0796                     	;# 
  1455  0797                     	;# 
  1456  0798                     	;# 
  1457  0799                     	;# 
  1458  079A                     	;# 
  1459  079B                     	;# 
  1460  080C                     	;# 
  1461  080D                     	;# 
  1462  080E                     	;# 
  1463  080F                     	;# 
  1464  0810                     	;# 
  1465  0811                     	;# 
  1466  0812                     	;# 
  1467  0813                     	;# 
  1468  0814                     	;# 
  1469  081A                     	;# 
  1470  081B                     	;# 
  1471  081C                     	;# 
  1472  081D                     	;# 
  1473  081E                     	;# 
  1474  081F                     	;# 
  1475  088C                     	;# 
  1476  088D                     	;# 
  1477  088E                     	;# 
  1478  088F                     	;# 
  1479  0890                     	;# 
  1480  0891                     	;# 
  1481  0892                     	;# 
  1482  0893                     	;# 
  1483  0895                     	;# 
  1484  0896                     	;# 
  1485  0897                     	;# 
  1486  0898                     	;# 
  1487  0899                     	;# 
  1488  089A                     	;# 
  1489  089B                     	;# 
  1490  090C                     	;# 
  1491  090E                     	;# 
  1492  090F                     	;# 
  1493  091F                     	;# 
  1494  091F                     	;# 
  1495  098F                     	;# 
  1496  098F                     	;# 
  1497  0990                     	;# 
  1498  0991                     	;# 
  1499  0992                     	;# 
  1500  0993                     	;# 
  1501  0994                     	;# 
  1502  0995                     	;# 
  1503  0996                     	;# 
  1504  0997                     	;# 
  1505  0E0F                     	;# 
  1506  0E10                     	;# 
  1507  0E11                     	;# 
  1508  0E12                     	;# 
  1509  0E13                     	;# 
  1510  0E14                     	;# 
  1511  0E15                     	;# 
  1512  0E16                     	;# 
  1513  0E17                     	;# 
  1514  0E18                     	;# 
  1515  0E19                     	;# 
  1516  0E1A                     	;# 
  1517  0E1B                     	;# 
  1518  0E1C                     	;# 
  1519  0E1D                     	;# 
  1520  0E1E                     	;# 
  1521  0E1F                     	;# 
  1522  0E20                     	;# 
  1523  0E21                     	;# 
  1524  0E22                     	;# 
  1525  0E23                     	;# 
  1526  0E24                     	;# 
  1527  0E25                     	;# 
  1528  0E26                     	;# 
  1529  0E27                     	;# 
  1530  0E28                     	;# 
  1531  0E29                     	;# 
  1532  0E2A                     	;# 
  1533  0E2B                     	;# 
  1534  0E2C                     	;# 
  1535  0E2D                     	;# 
  1536  0E2E                     	;# 
  1537  0E2F                     	;# 
  1538  0E30                     	;# 
  1539  0E31                     	;# 
  1540  0E32                     	;# 
  1541  0E33                     	;# 
  1542  0E34                     	;# 
  1543  0E35                     	;# 
  1544  0E36                     	;# 
  1545  0E37                     	;# 
  1546  0E8F                     	;# 
  1547  0E90                     	;# 
  1548  0E91                     	;# 
  1549  0E92                     	;# 
  1550  0E93                     	;# 
  1551  0E94                     	;# 
  1552  0E95                     	;# 
  1553  0E96                     	;# 
  1554  0E97                     	;# 
  1555  0E9C                     	;# 
  1556  0E9D                     	;# 
  1557  0E9E                     	;# 
  1558  0EA1                     	;# 
  1559  0EA2                     	;# 
  1560  0EA3                     	;# 
  1561  0EA4                     	;# 
  1562  0EA5                     	;# 
  1563  0EA9                     	;# 
  1564  0EAA                     	;# 
  1565  0EAB                     	;# 
  1566  0EAC                     	;# 
  1567  0EB1                     	;# 
  1568  0EB2                     	;# 
  1569  0EB3                     	;# 
  1570  0EB8                     	;# 
  1571  0EB9                     	;# 
  1572  0EBA                     	;# 
  1573  0EBB                     	;# 
  1574  0EBC                     	;# 
  1575  0EBD                     	;# 
  1576  0EBE                     	;# 
  1577  0EC3                     	;# 
  1578  0EC5                     	;# 
  1579  0EC6                     	;# 
  1580  0EC7                     	;# 
  1581  0EC8                     	;# 
  1582  0EC9                     	;# 
  1583  0ECA                     	;# 
  1584  0ECB                     	;# 
  1585  0ECC                     	;# 
  1586  0F10                     	;# 
  1587  0F11                     	;# 
  1588  0F12                     	;# 
  1589  0F13                     	;# 
  1590  0F14                     	;# 
  1591  0F15                     	;# 
  1592  0F16                     	;# 
  1593  0F17                     	;# 
  1594  0F18                     	;# 
  1595  0F19                     	;# 
  1596  0F1A                     	;# 
  1597  0F1B                     	;# 
  1598  0F1C                     	;# 
  1599  0F1D                     	;# 
  1600  0F1E                     	;# 
  1601  0F1F                     	;# 
  1602  0F20                     	;# 
  1603  0F21                     	;# 
  1604  0F22                     	;# 
  1605  0F23                     	;# 
  1606  0F24                     	;# 
  1607  0F25                     	;# 
  1608  0F26                     	;# 
  1609  0F27                     	;# 
  1610  0F38                     	;# 
  1611  0F39                     	;# 
  1612  0F3A                     	;# 
  1613  0F3B                     	;# 
  1614  0F3C                     	;# 
  1615  0F3D                     	;# 
  1616  0F3E                     	;# 
  1617  0F3F                     	;# 
  1618  0F40                     	;# 
  1619  0F41                     	;# 
  1620  0F43                     	;# 
  1621  0F44                     	;# 
  1622  0F45                     	;# 
  1623  0F46                     	;# 
  1624  0F47                     	;# 
  1625  0F48                     	;# 
  1626  0F49                     	;# 
  1627  0F4A                     	;# 
  1628  0F4B                     	;# 
  1629  0F4C                     	;# 
  1630  0F4E                     	;# 
  1631  0F4F                     	;# 
  1632  0F50                     	;# 
  1633  0F51                     	;# 
  1634  0F52                     	;# 
  1635  0F53                     	;# 
  1636  0F54                     	;# 
  1637  0F55                     	;# 
  1638  0F56                     	;# 
  1639  0F57                     	;# 
  1640  0F65                     	;# 
  1641  0F68                     	;# 
  1642  0F69                     	;# 
  1643  0F6A                     	;# 
  1644  0F6B                     	;# 
  1645  0FE4                     	;# 
  1646  0FE5                     	;# 
  1647  0FE6                     	;# 
  1648  0FE7                     	;# 
  1649  0FE8                     	;# 
  1650  0FE9                     	;# 
  1651  0FEA                     	;# 
  1652  0FEB                     	;# 
  1653  0FED                     	;# 
  1654  0FEE                     	;# 
  1655  0FEF                     	;# 
  1656  0000                     	;# 
  1657  0001                     	;# 
  1658  0002                     	;# 
  1659  0003                     	;# 
  1660  0004                     	;# 
  1661  0005                     	;# 
  1662  0006                     	;# 
  1663  0007                     	;# 
  1664  0008                     	;# 
  1665  0009                     	;# 
  1666  000A                     	;# 
  1667  000B                     	;# 
  1668  000C                     	;# 
  1669  000D                     	;# 
  1670  000E                     	;# 
  1671  0010                     	;# 
  1672  0011                     	;# 
  1673  0012                     	;# 
  1674  0013                     	;# 
  1675  0016                     	;# 
  1676  0017                     	;# 
  1677  0018                     	;# 
  1678  001C                     	;# 
  1679  001C                     	;# 
  1680  001D                     	;# 
  1681  001D                     	;# 
  1682  001E                     	;# 
  1683  001F                     	;# 
  1684  008C                     	;# 
  1685  008C                     	;# 
  1686  008D                     	;# 
  1687  008E                     	;# 
  1688  008E                     	;# 
  1689  008F                     	;# 
  1690  0090                     	;# 
  1691  0090                     	;# 
  1692  0091                     	;# 
  1693  0093                     	;# 
  1694  0094                     	;# 
  1695  0095                     	;# 
  1696  0096                     	;# 
  1697  0097                     	;# 
  1698  0098                     	;# 
  1699  0099                     	;# 
  1700  009A                     	;# 
  1701  009B                     	;# 
  1702  009C                     	;# 
  1703  009D                     	;# 
  1704  009E                     	;# 
  1705  010C                     	;# 
  1706  010D                     	;# 
  1707  010E                     	;# 
  1708  010E                     	;# 
  1709  010F                     	;# 
  1710  0110                     	;# 
  1711  0110                     	;# 
  1712  0111                     	;# 
  1713  0112                     	;# 
  1714  0112                     	;# 
  1715  0113                     	;# 
  1716  0114                     	;# 
  1717  0114                     	;# 
  1718  0115                     	;# 
  1719  0116                     	;# 
  1720  0116                     	;# 
  1721  0117                     	;# 
  1722  0119                     	;# 
  1723  0119                     	;# 
  1724  0119                     	;# 
  1725  011A                     	;# 
  1726  011A                     	;# 
  1727  011A                     	;# 
  1728  011B                     	;# 
  1729  011B                     	;# 
  1730  011B                     	;# 
  1731  011B                     	;# 
  1732  011B                     	;# 
  1733  011C                     	;# 
  1734  011C                     	;# 
  1735  011C                     	;# 
  1736  011D                     	;# 
  1737  011D                     	;# 
  1738  011D                     	;# 
  1739  011E                     	;# 
  1740  011E                     	;# 
  1741  011E                     	;# 
  1742  011F                     	;# 
  1743  011F                     	;# 
  1744  011F                     	;# 
  1745  011F                     	;# 
  1746  011F                     	;# 
  1747  018C                     	;# 
  1748  018D                     	;# 
  1749  018E                     	;# 
  1750  018F                     	;# 
  1751  0190                     	;# 
  1752  0191                     	;# 
  1753  0192                     	;# 
  1754  0196                     	;# 
  1755  0197                     	;# 
  1756  0198                     	;# 
  1757  0199                     	;# 
  1758  019A                     	;# 
  1759  019B                     	;# 
  1760  019C                     	;# 
  1761  020C                     	;# 
  1762  020C                     	;# 
  1763  020D                     	;# 
  1764  020E                     	;# 
  1765  020F                     	;# 
  1766  020F                     	;# 
  1767  0210                     	;# 
  1768  0210                     	;# 
  1769  0211                     	;# 
  1770  0211                     	;# 
  1771  0212                     	;# 
  1772  0212                     	;# 
  1773  0213                     	;# 
  1774  0214                     	;# 
  1775  0215                     	;# 
  1776  0215                     	;# 
  1777  0216                     	;# 
  1778  0216                     	;# 
  1779  0217                     	;# 
  1780  0217                     	;# 
  1781  0218                     	;# 
  1782  0218                     	;# 
  1783  0219                     	;# 
  1784  021A                     	;# 
  1785  021B                     	;# 
  1786  021B                     	;# 
  1787  021C                     	;# 
  1788  021C                     	;# 
  1789  021D                     	;# 
  1790  021D                     	;# 
  1791  021E                     	;# 
  1792  021F                     	;# 
  1793  028C                     	;# 
  1794  028C                     	;# 
  1795  028D                     	;# 
  1796  028D                     	;# 
  1797  028E                     	;# 
  1798  028F                     	;# 
  1799  0290                     	;# 
  1800  0290                     	;# 
  1801  0291                     	;# 
  1802  0292                     	;# 
  1803  0292                     	;# 
  1804  0293                     	;# 
  1805  0293                     	;# 
  1806  0294                     	;# 
  1807  0295                     	;# 
  1808  0296                     	;# 
  1809  0296                     	;# 
  1810  0297                     	;# 
  1811  0298                     	;# 
  1812  0298                     	;# 
  1813  0299                     	;# 
  1814  0299                     	;# 
  1815  029A                     	;# 
  1816  029B                     	;# 
  1817  029C                     	;# 
  1818  029C                     	;# 
  1819  029D                     	;# 
  1820  030C                     	;# 
  1821  030C                     	;# 
  1822  030D                     	;# 
  1823  030E                     	;# 
  1824  030F                     	;# 
  1825  0310                     	;# 
  1826  0310                     	;# 
  1827  0311                     	;# 
  1828  0312                     	;# 
  1829  0313                     	;# 
  1830  0314                     	;# 
  1831  0314                     	;# 
  1832  0315                     	;# 
  1833  0316                     	;# 
  1834  0317                     	;# 
  1835  0318                     	;# 
  1836  0318                     	;# 
  1837  0319                     	;# 
  1838  031A                     	;# 
  1839  031B                     	;# 
  1840  031C                     	;# 
  1841  031C                     	;# 
  1842  031D                     	;# 
  1843  031E                     	;# 
  1844  031F                     	;# 
  1845  038C                     	;# 
  1846  038D                     	;# 
  1847  038E                     	;# 
  1848  0390                     	;# 
  1849  0391                     	;# 
  1850  0392                     	;# 
  1851  040C                     	;# 
  1852  040D                     	;# 
  1853  040E                     	;# 
  1854  040F                     	;# 
  1855  0410                     	;# 
  1856  0411                     	;# 
  1857  0416                     	;# 
  1858  0416                     	;# 
  1859  0417                     	;# 
  1860  0418                     	;# 
  1861  0418                     	;# 
  1862  0419                     	;# 
  1863  041A                     	;# 
  1864  041A                     	;# 
  1865  041B                     	;# 
  1866  041C                     	;# 
  1867  041C                     	;# 
  1868  041D                     	;# 
  1869  041E                     	;# 
  1870  041F                     	;# 
  1871  048C                     	;# 
  1872  048C                     	;# 
  1873  048D                     	;# 
  1874  048E                     	;# 
  1875  048F                     	;# 
  1876  048F                     	;# 
  1877  0490                     	;# 
  1878  0491                     	;# 
  1879  0492                     	;# 
  1880  0492                     	;# 
  1881  0493                     	;# 
  1882  0494                     	;# 
  1883  0495                     	;# 
  1884  0495                     	;# 
  1885  0496                     	;# 
  1886  0497                     	;# 
  1887  0498                     	;# 
  1888  0499                     	;# 
  1889  049A                     	;# 
  1890  049B                     	;# 
  1891  049C                     	;# 
  1892  049D                     	;# 
  1893  050C                     	;# 
  1894  050C                     	;# 
  1895  050D                     	;# 
  1896  050E                     	;# 
  1897  050F                     	;# 
  1898  050F                     	;# 
  1899  0510                     	;# 
  1900  0511                     	;# 
  1901  0512                     	;# 
  1902  0512                     	;# 
  1903  0513                     	;# 
  1904  0514                     	;# 
  1905  0515                     	;# 
  1906  0515                     	;# 
  1907  0516                     	;# 
  1908  0517                     	;# 
  1909  0518                     	;# 
  1910  0519                     	;# 
  1911  051A                     	;# 
  1912  051B                     	;# 
  1913  051C                     	;# 
  1914  051D                     	;# 
  1915  058C                     	;# 
  1916  058C                     	;# 
  1917  058D                     	;# 
  1918  058E                     	;# 
  1919  058F                     	;# 
  1920  058F                     	;# 
  1921  0590                     	;# 
  1922  0591                     	;# 
  1923  0592                     	;# 
  1924  0593                     	;# 
  1925  060C                     	;# 
  1926  060D                     	;# 
  1927  060E                     	;# 
  1928  060F                     	;# 
  1929  0610                     	;# 
  1930  0611                     	;# 
  1931  0612                     	;# 
  1932  0613                     	;# 
  1933  0614                     	;# 
  1934  0616                     	;# 
  1935  0617                     	;# 
  1936  0618                     	;# 
  1937  0619                     	;# 
  1938  061A                     	;# 
  1939  061B                     	;# 
  1940  061C                     	;# 
  1941  061D                     	;# 
  1942  061E                     	;# 
  1943  068C                     	;# 
  1944  068D                     	;# 
  1945  068E                     	;# 
  1946  068F                     	;# 
  1947  0690                     	;# 
  1948  0691                     	;# 
  1949  0692                     	;# 
  1950  0693                     	;# 
  1951  0694                     	;# 
  1952  070C                     	;# 
  1953  070D                     	;# 
  1954  070E                     	;# 
  1955  070F                     	;# 
  1956  0710                     	;# 
  1957  0711                     	;# 
  1958  0712                     	;# 
  1959  0713                     	;# 
  1960  0714                     	;# 
  1961  0716                     	;# 
  1962  0717                     	;# 
  1963  0718                     	;# 
  1964  0719                     	;# 
  1965  071A                     	;# 
  1966  071B                     	;# 
  1967  071C                     	;# 
  1968  071D                     	;# 
  1969  071E                     	;# 
  1970  0796                     	;# 
  1971  0797                     	;# 
  1972  0798                     	;# 
  1973  0799                     	;# 
  1974  079A                     	;# 
  1975  079B                     	;# 
  1976  080C                     	;# 
  1977  080D                     	;# 
  1978  080E                     	;# 
  1979  080F                     	;# 
  1980  0810                     	;# 
  1981  0811                     	;# 
  1982  0812                     	;# 
  1983  0813                     	;# 
  1984  0814                     	;# 
  1985  081A                     	;# 
  1986  081B                     	;# 
  1987  081C                     	;# 
  1988  081D                     	;# 
  1989  081E                     	;# 
  1990  081F                     	;# 
  1991  088C                     	;# 
  1992  088D                     	;# 
  1993  088E                     	;# 
  1994  088F                     	;# 
  1995  0890                     	;# 
  1996  0891                     	;# 
  1997  0892                     	;# 
  1998  0893                     	;# 
  1999  0895                     	;# 
  2000  0896                     	;# 
  2001  0897                     	;# 
  2002  0898                     	;# 
  2003  0899                     	;# 
  2004  089A                     	;# 
  2005  089B                     	;# 
  2006  090C                     	;# 
  2007  090E                     	;# 
  2008  090F                     	;# 
  2009  091F                     	;# 
  2010  091F                     	;# 
  2011  098F                     	;# 
  2012  098F                     	;# 
  2013  0990                     	;# 
  2014  0991                     	;# 
  2015  0992                     	;# 
  2016  0993                     	;# 
  2017  0994                     	;# 
  2018  0995                     	;# 
  2019  0996                     	;# 
  2020  0997                     	;# 
  2021  0E0F                     	;# 
  2022  0E10                     	;# 
  2023  0E11                     	;# 
  2024  0E12                     	;# 
  2025  0E13                     	;# 
  2026  0E14                     	;# 
  2027  0E15                     	;# 
  2028  0E16                     	;# 
  2029  0E17                     	;# 
  2030  0E18                     	;# 
  2031  0E19                     	;# 
  2032  0E1A                     	;# 
  2033  0E1B                     	;# 
  2034  0E1C                     	;# 
  2035  0E1D                     	;# 
  2036  0E1E                     	;# 
  2037  0E1F                     	;# 
  2038  0E20                     	;# 
  2039  0E21                     	;# 
  2040  0E22                     	;# 
  2041  0E23                     	;# 
  2042  0E24                     	;# 
  2043  0E25                     	;# 
  2044  0E26                     	;# 
  2045  0E27                     	;# 
  2046  0E28                     	;# 
  2047  0E29                     	;# 
  2048  0E2A                     	;# 
  2049  0E2B                     	;# 
  2050  0E2C                     	;# 
  2051  0E2D                     	;# 
  2052  0E2E                     	;# 
  2053  0E2F                     	;# 
  2054  0E30                     	;# 
  2055  0E31                     	;# 
  2056  0E32                     	;# 
  2057  0E33                     	;# 
  2058  0E34                     	;# 
  2059  0E35                     	;# 
  2060  0E36                     	;# 
  2061  0E37                     	;# 
  2062  0E8F                     	;# 
  2063  0E90                     	;# 
  2064  0E91                     	;# 
  2065  0E92                     	;# 
  2066  0E93                     	;# 
  2067  0E94                     	;# 
  2068  0E95                     	;# 
  2069  0E96                     	;# 
  2070  0E97                     	;# 
  2071  0E9C                     	;# 
  2072  0E9D                     	;# 
  2073  0E9E                     	;# 
  2074  0EA1                     	;# 
  2075  0EA2                     	;# 
  2076  0EA3                     	;# 
  2077  0EA4                     	;# 
  2078  0EA5                     	;# 
  2079  0EA9                     	;# 
  2080  0EAA                     	;# 
  2081  0EAB                     	;# 
  2082  0EAC                     	;# 
  2083  0EB1                     	;# 
  2084  0EB2                     	;# 
  2085  0EB3                     	;# 
  2086  0EB8                     	;# 
  2087  0EB9                     	;# 
  2088  0EBA                     	;# 
  2089  0EBB                     	;# 
  2090  0EBC                     	;# 
  2091  0EBD                     	;# 
  2092  0EBE                     	;# 
  2093  0EC3                     	;# 
  2094  0EC5                     	;# 
  2095  0EC6                     	;# 
  2096  0EC7                     	;# 
  2097  0EC8                     	;# 
  2098  0EC9                     	;# 
  2099  0ECA                     	;# 
  2100  0ECB                     	;# 
  2101  0ECC                     	;# 
  2102  0F10                     	;# 
  2103  0F11                     	;# 
  2104  0F12                     	;# 
  2105  0F13                     	;# 
  2106  0F14                     	;# 
  2107  0F15                     	;# 
  2108  0F16                     	;# 
  2109  0F17                     	;# 
  2110  0F18                     	;# 
  2111  0F19                     	;# 
  2112  0F1A                     	;# 
  2113  0F1B                     	;# 
  2114  0F1C                     	;# 
  2115  0F1D                     	;# 
  2116  0F1E                     	;# 
  2117  0F1F                     	;# 
  2118  0F20                     	;# 
  2119  0F21                     	;# 
  2120  0F22                     	;# 
  2121  0F23                     	;# 
  2122  0F24                     	;# 
  2123  0F25                     	;# 
  2124  0F26                     	;# 
  2125  0F27                     	;# 
  2126  0F38                     	;# 
  2127  0F39                     	;# 
  2128  0F3A                     	;# 
  2129  0F3B                     	;# 
  2130  0F3C                     	;# 
  2131  0F3D                     	;# 
  2132  0F3E                     	;# 
  2133  0F3F                     	;# 
  2134  0F40                     	;# 
  2135  0F41                     	;# 
  2136  0F43                     	;# 
  2137  0F44                     	;# 
  2138  0F45                     	;# 
  2139  0F46                     	;# 
  2140  0F47                     	;# 
  2141  0F48                     	;# 
  2142  0F49                     	;# 
  2143  0F4A                     	;# 
  2144  0F4B                     	;# 
  2145  0F4C                     	;# 
  2146  0F4E                     	;# 
  2147  0F4F                     	;# 
  2148  0F50                     	;# 
  2149  0F51                     	;# 
  2150  0F52                     	;# 
  2151  0F53                     	;# 
  2152  0F54                     	;# 
  2153  0F55                     	;# 
  2154  0F56                     	;# 
  2155  0F57                     	;# 
  2156  0F65                     	;# 
  2157  0F68                     	;# 
  2158  0F69                     	;# 
  2159  0F6A                     	;# 
  2160  0F6B                     	;# 
  2161  0FE4                     	;# 
  2162  0FE5                     	;# 
  2163  0FE6                     	;# 
  2164  0FE7                     	;# 
  2165  0FE8                     	;# 
  2166  0FE9                     	;# 
  2167  0FEA                     	;# 
  2168  0FEB                     	;# 
  2169  0FED                     	;# 
  2170  0FEE                     	;# 
  2171  0FEF                     	;# 
  2172  0000                     	;# 
  2173  0001                     	;# 
  2174  0002                     	;# 
  2175  0003                     	;# 
  2176  0004                     	;# 
  2177  0005                     	;# 
  2178  0006                     	;# 
  2179  0007                     	;# 
  2180  0008                     	;# 
  2181  0009                     	;# 
  2182  000A                     	;# 
  2183  000B                     	;# 
  2184  000C                     	;# 
  2185  000D                     	;# 
  2186  000E                     	;# 
  2187  0010                     	;# 
  2188  0011                     	;# 
  2189  0012                     	;# 
  2190  0013                     	;# 
  2191  0016                     	;# 
  2192  0017                     	;# 
  2193  0018                     	;# 
  2194  001C                     	;# 
  2195  001C                     	;# 
  2196  001D                     	;# 
  2197  001D                     	;# 
  2198  001E                     	;# 
  2199  001F                     	;# 
  2200  008C                     	;# 
  2201  008C                     	;# 
  2202  008D                     	;# 
  2203  008E                     	;# 
  2204  008E                     	;# 
  2205  008F                     	;# 
  2206  0090                     	;# 
  2207  0090                     	;# 
  2208  0091                     	;# 
  2209  0093                     	;# 
  2210  0094                     	;# 
  2211  0095                     	;# 
  2212  0096                     	;# 
  2213  0097                     	;# 
  2214  0098                     	;# 
  2215  0099                     	;# 
  2216  009A                     	;# 
  2217  009B                     	;# 
  2218  009C                     	;# 
  2219  009D                     	;# 
  2220  009E                     	;# 
  2221  010C                     	;# 
  2222  010D                     	;# 
  2223  010E                     	;# 
  2224  010E                     	;# 
  2225  010F                     	;# 
  2226  0110                     	;# 
  2227  0110                     	;# 
  2228  0111                     	;# 
  2229  0112                     	;# 
  2230  0112                     	;# 
  2231  0113                     	;# 
  2232  0114                     	;# 
  2233  0114                     	;# 
  2234  0115                     	;# 
  2235  0116                     	;# 
  2236  0116                     	;# 
  2237  0117                     	;# 
  2238  0119                     	;# 
  2239  0119                     	;# 
  2240  0119                     	;# 
  2241  011A                     	;# 
  2242  011A                     	;# 
  2243  011A                     	;# 
  2244  011B                     	;# 
  2245  011B                     	;# 
  2246  011B                     	;# 
  2247  011B                     	;# 
  2248  011B                     	;# 
  2249  011C                     	;# 
  2250  011C                     	;# 
  2251  011C                     	;# 
  2252  011D                     	;# 
  2253  011D                     	;# 
  2254  011D                     	;# 
  2255  011E                     	;# 
  2256  011E                     	;# 
  2257  011E                     	;# 
  2258  011F                     	;# 
  2259  011F                     	;# 
  2260  011F                     	;# 
  2261  011F                     	;# 
  2262  011F                     	;# 
  2263  018C                     	;# 
  2264  018D                     	;# 
  2265  018E                     	;# 
  2266  018F                     	;# 
  2267  0190                     	;# 
  2268  0191                     	;# 
  2269  0192                     	;# 
  2270  0196                     	;# 
  2271  0197                     	;# 
  2272  0198                     	;# 
  2273  0199                     	;# 
  2274  019A                     	;# 
  2275  019B                     	;# 
  2276  019C                     	;# 
  2277  020C                     	;# 
  2278  020C                     	;# 
  2279  020D                     	;# 
  2280  020E                     	;# 
  2281  020F                     	;# 
  2282  020F                     	;# 
  2283  0210                     	;# 
  2284  0210                     	;# 
  2285  0211                     	;# 
  2286  0211                     	;# 
  2287  0212                     	;# 
  2288  0212                     	;# 
  2289  0213                     	;# 
  2290  0214                     	;# 
  2291  0215                     	;# 
  2292  0215                     	;# 
  2293  0216                     	;# 
  2294  0216                     	;# 
  2295  0217                     	;# 
  2296  0217                     	;# 
  2297  0218                     	;# 
  2298  0218                     	;# 
  2299  0219                     	;# 
  2300  021A                     	;# 
  2301  021B                     	;# 
  2302  021B                     	;# 
  2303  021C                     	;# 
  2304  021C                     	;# 
  2305  021D                     	;# 
  2306  021D                     	;# 
  2307  021E                     	;# 
  2308  021F                     	;# 
  2309  028C                     	;# 
  2310  028C                     	;# 
  2311  028D                     	;# 
  2312  028D                     	;# 
  2313  028E                     	;# 
  2314  028F                     	;# 
  2315  0290                     	;# 
  2316  0290                     	;# 
  2317  0291                     	;# 
  2318  0292                     	;# 
  2319  0292                     	;# 
  2320  0293                     	;# 
  2321  0293                     	;# 
  2322  0294                     	;# 
  2323  0295                     	;# 
  2324  0296                     	;# 
  2325  0296                     	;# 
  2326  0297                     	;# 
  2327  0298                     	;# 
  2328  0298                     	;# 
  2329  0299                     	;# 
  2330  0299                     	;# 
  2331  029A                     	;# 
  2332  029B                     	;# 
  2333  029C                     	;# 
  2334  029C                     	;# 
  2335  029D                     	;# 
  2336  030C                     	;# 
  2337  030C                     	;# 
  2338  030D                     	;# 
  2339  030E                     	;# 
  2340  030F                     	;# 
  2341  0310                     	;# 
  2342  0310                     	;# 
  2343  0311                     	;# 
  2344  0312                     	;# 
  2345  0313                     	;# 
  2346  0314                     	;# 
  2347  0314                     	;# 
  2348  0315                     	;# 
  2349  0316                     	;# 
  2350  0317                     	;# 
  2351  0318                     	;# 
  2352  0318                     	;# 
  2353  0319                     	;# 
  2354  031A                     	;# 
  2355  031B                     	;# 
  2356  031C                     	;# 
  2357  031C                     	;# 
  2358  031D                     	;# 
  2359  031E                     	;# 
  2360  031F                     	;# 
  2361  038C                     	;# 
  2362  038D                     	;# 
  2363  038E                     	;# 
  2364  0390                     	;# 
  2365  0391                     	;# 
  2366  0392                     	;# 
  2367  040C                     	;# 
  2368  040D                     	;# 
  2369  040E                     	;# 
  2370  040F                     	;# 
  2371  0410                     	;# 
  2372  0411                     	;# 
  2373  0416                     	;# 
  2374  0416                     	;# 
  2375  0417                     	;# 
  2376  0418                     	;# 
  2377  0418                     	;# 
  2378  0419                     	;# 
  2379  041A                     	;# 
  2380  041A                     	;# 
  2381  041B                     	;# 
  2382  041C                     	;# 
  2383  041C                     	;# 
  2384  041D                     	;# 
  2385  041E                     	;# 
  2386  041F                     	;# 
  2387  048C                     	;# 
  2388  048C                     	;# 
  2389  048D                     	;# 
  2390  048E                     	;# 
  2391  048F                     	;# 
  2392  048F                     	;# 
  2393  0490                     	;# 
  2394  0491                     	;# 
  2395  0492                     	;# 
  2396  0492                     	;# 
  2397  0493                     	;# 
  2398  0494                     	;# 
  2399  0495                     	;# 
  2400  0495                     	;# 
  2401  0496                     	;# 
  2402  0497                     	;# 
  2403  0498                     	;# 
  2404  0499                     	;# 
  2405  049A                     	;# 
  2406  049B                     	;# 
  2407  049C                     	;# 
  2408  049D                     	;# 
  2409  050C                     	;# 
  2410  050C                     	;# 
  2411  050D                     	;# 
  2412  050E                     	;# 
  2413  050F                     	;# 
  2414  050F                     	;# 
  2415  0510                     	;# 
  2416  0511                     	;# 
  2417  0512                     	;# 
  2418  0512                     	;# 
  2419  0513                     	;# 
  2420  0514                     	;# 
  2421  0515                     	;# 
  2422  0515                     	;# 
  2423  0516                     	;# 
  2424  0517                     	;# 
  2425  0518                     	;# 
  2426  0519                     	;# 
  2427  051A                     	;# 
  2428  051B                     	;# 
  2429  051C                     	;# 
  2430  051D                     	;# 
  2431  058C                     	;# 
  2432  058C                     	;# 
  2433  058D                     	;# 
  2434  058E                     	;# 
  2435  058F                     	;# 
  2436  058F                     	;# 
  2437  0590                     	;# 
  2438  0591                     	;# 
  2439  0592                     	;# 
  2440  0593                     	;# 
  2441  060C                     	;# 
  2442  060D                     	;# 
  2443  060E                     	;# 
  2444  060F                     	;# 
  2445  0610                     	;# 
  2446  0611                     	;# 
  2447  0612                     	;# 
  2448  0613                     	;# 
  2449  0614                     	;# 
  2450  0616                     	;# 
  2451  0617                     	;# 
  2452  0618                     	;# 
  2453  0619                     	;# 
  2454  061A                     	;# 
  2455  061B                     	;# 
  2456  061C                     	;# 
  2457  061D                     	;# 
  2458  061E                     	;# 
  2459  068C                     	;# 
  2460  068D                     	;# 
  2461  068E                     	;# 
  2462  068F                     	;# 
  2463  0690                     	;# 
  2464  0691                     	;# 
  2465  0692                     	;# 
  2466  0693                     	;# 
  2467  0694                     	;# 
  2468  070C                     	;# 
  2469  070D                     	;# 
  2470  070E                     	;# 
  2471  070F                     	;# 
  2472  0710                     	;# 
  2473  0711                     	;# 
  2474  0712                     	;# 
  2475  0713                     	;# 
  2476  0714                     	;# 
  2477  0716                     	;# 
  2478  0717                     	;# 
  2479  0718                     	;# 
  2480  0719                     	;# 
  2481  071A                     	;# 
  2482  071B                     	;# 
  2483  071C                     	;# 
  2484  071D                     	;# 
  2485  071E                     	;# 
  2486  0796                     	;# 
  2487  0797                     	;# 
  2488  0798                     	;# 
  2489  0799                     	;# 
  2490  079A                     	;# 
  2491  079B                     	;# 
  2492  080C                     	;# 
  2493  080D                     	;# 
  2494  080E                     	;# 
  2495  080F                     	;# 
  2496  0810                     	;# 
  2497  0811                     	;# 
  2498  0812                     	;# 
  2499  0813                     	;# 
  2500  0814                     	;# 
  2501  081A                     	;# 
  2502  081B                     	;# 
  2503  081C                     	;# 
  2504  081D                     	;# 
  2505  081E                     	;# 
  2506  081F                     	;# 
  2507  088C                     	;# 
  2508  088D                     	;# 
  2509  088E                     	;# 
  2510  088F                     	;# 
  2511  0890                     	;# 
  2512  0891                     	;# 
  2513  0892                     	;# 
  2514  0893                     	;# 
  2515  0895                     	;# 
  2516  0896                     	;# 
  2517  0897                     	;# 
  2518  0898                     	;# 
  2519  0899                     	;# 
  2520  089A                     	;# 
  2521  089B                     	;# 
  2522  090C                     	;# 
  2523  090E                     	;# 
  2524  090F                     	;# 
  2525  091F                     	;# 
  2526  091F                     	;# 
  2527  098F                     	;# 
  2528  098F                     	;# 
  2529  0990                     	;# 
  2530  0991                     	;# 
  2531  0992                     	;# 
  2532  0993                     	;# 
  2533  0994                     	;# 
  2534  0995                     	;# 
  2535  0996                     	;# 
  2536  0997                     	;# 
  2537  0E0F                     	;# 
  2538  0E10                     	;# 
  2539  0E11                     	;# 
  2540  0E12                     	;# 
  2541  0E13                     	;# 
  2542  0E14                     	;# 
  2543  0E15                     	;# 
  2544  0E16                     	;# 
  2545  0E17                     	;# 
  2546  0E18                     	;# 
  2547  0E19                     	;# 
  2548  0E1A                     	;# 
  2549  0E1B                     	;# 
  2550  0E1C                     	;# 
  2551  0E1D                     	;# 
  2552  0E1E                     	;# 
  2553  0E1F                     	;# 
  2554  0E20                     	;# 
  2555  0E21                     	;# 
  2556  0E22                     	;# 
  2557  0E23                     	;# 
  2558  0E24                     	;# 
  2559  0E25                     	;# 
  2560  0E26                     	;# 
  2561  0E27                     	;# 
  2562  0E28                     	;# 
  2563  0E29                     	;# 
  2564  0E2A                     	;# 
  2565  0E2B                     	;# 
  2566  0E2C                     	;# 
  2567  0E2D                     	;# 
  2568  0E2E                     	;# 
  2569  0E2F                     	;# 
  2570  0E30                     	;# 
  2571  0E31                     	;# 
  2572  0E32                     	;# 
  2573  0E33                     	;# 
  2574  0E34                     	;# 
  2575  0E35                     	;# 
  2576  0E36                     	;# 
  2577  0E37                     	;# 
  2578  0E8F                     	;# 
  2579  0E90                     	;# 
  2580  0E91                     	;# 
  2581  0E92                     	;# 
  2582  0E93                     	;# 
  2583  0E94                     	;# 
  2584  0E95                     	;# 
  2585  0E96                     	;# 
  2586  0E97                     	;# 
  2587  0E9C                     	;# 
  2588  0E9D                     	;# 
  2589  0E9E                     	;# 
  2590  0EA1                     	;# 
  2591  0EA2                     	;# 
  2592  0EA3                     	;# 
  2593  0EA4                     	;# 
  2594  0EA5                     	;# 
  2595  0EA9                     	;# 
  2596  0EAA                     	;# 
  2597  0EAB                     	;# 
  2598  0EAC                     	;# 
  2599  0EB1                     	;# 
  2600  0EB2                     	;# 
  2601  0EB3                     	;# 
  2602  0EB8                     	;# 
  2603  0EB9                     	;# 
  2604  0EBA                     	;# 
  2605  0EBB                     	;# 
  2606  0EBC                     	;# 
  2607  0EBD                     	;# 
  2608  0EBE                     	;# 
  2609  0EC3                     	;# 
  2610  0EC5                     	;# 
  2611  0EC6                     	;# 
  2612  0EC7                     	;# 
  2613  0EC8                     	;# 
  2614  0EC9                     	;# 
  2615  0ECA                     	;# 
  2616  0ECB                     	;# 
  2617  0ECC                     	;# 
  2618  0F10                     	;# 
  2619  0F11                     	;# 
  2620  0F12                     	;# 
  2621  0F13                     	;# 
  2622  0F14                     	;# 
  2623  0F15                     	;# 
  2624  0F16                     	;# 
  2625  0F17                     	;# 
  2626  0F18                     	;# 
  2627  0F19                     	;# 
  2628  0F1A                     	;# 
  2629  0F1B                     	;# 
  2630  0F1C                     	;# 
  2631  0F1D                     	;# 
  2632  0F1E                     	;# 
  2633  0F1F                     	;# 
  2634  0F20                     	;# 
  2635  0F21                     	;# 
  2636  0F22                     	;# 
  2637  0F23                     	;# 
  2638  0F24                     	;# 
  2639  0F25                     	;# 
  2640  0F26                     	;# 
  2641  0F27                     	;# 
  2642  0F38                     	;# 
  2643  0F39                     	;# 
  2644  0F3A                     	;# 
  2645  0F3B                     	;# 
  2646  0F3C                     	;# 
  2647  0F3D                     	;# 
  2648  0F3E                     	;# 
  2649  0F3F                     	;# 
  2650  0F40                     	;# 
  2651  0F41                     	;# 
  2652  0F43                     	;# 
  2653  0F44                     	;# 
  2654  0F45                     	;# 
  2655  0F46                     	;# 
  2656  0F47                     	;# 
  2657  0F48                     	;# 
  2658  0F49                     	;# 
  2659  0F4A                     	;# 
  2660  0F4B                     	;# 
  2661  0F4C                     	;# 
  2662  0F4E                     	;# 
  2663  0F4F                     	;# 
  2664  0F50                     	;# 
  2665  0F51                     	;# 
  2666  0F52                     	;# 
  2667  0F53                     	;# 
  2668  0F54                     	;# 
  2669  0F55                     	;# 
  2670  0F56                     	;# 
  2671  0F57                     	;# 
  2672  0F65                     	;# 
  2673  0F68                     	;# 
  2674  0F69                     	;# 
  2675  0F6A                     	;# 
  2676  0F6B                     	;# 
  2677  0FE4                     	;# 
  2678  0FE5                     	;# 
  2679  0FE6                     	;# 
  2680  0FE7                     	;# 
  2681  0FE8                     	;# 
  2682  0FE9                     	;# 
  2683  0FEA                     	;# 
  2684  0FEB                     	;# 
  2685  0FED                     	;# 
  2686  0FEE                     	;# 
  2687  0FEF                     	;# 
  2688  0000                     	;# 
  2689  0001                     	;# 
  2690  0002                     	;# 
  2691  0003                     	;# 
  2692  0004                     	;# 
  2693  0005                     	;# 
  2694  0006                     	;# 
  2695  0007                     	;# 
  2696  0008                     	;# 
  2697  0009                     	;# 
  2698  000A                     	;# 
  2699  000B                     	;# 
  2700  000C                     	;# 
  2701  000D                     	;# 
  2702  000E                     	;# 
  2703  0010                     	;# 
  2704  0011                     	;# 
  2705  0012                     	;# 
  2706  0013                     	;# 
  2707  0016                     	;# 
  2708  0017                     	;# 
  2709  0018                     	;# 
  2710  001C                     	;# 
  2711  001C                     	;# 
  2712  001D                     	;# 
  2713  001D                     	;# 
  2714  001E                     	;# 
  2715  001F                     	;# 
  2716  008C                     	;# 
  2717  008C                     	;# 
  2718  008D                     	;# 
  2719  008E                     	;# 
  2720  008E                     	;# 
  2721  008F                     	;# 
  2722  0090                     	;# 
  2723  0090                     	;# 
  2724  0091                     	;# 
  2725  0093                     	;# 
  2726  0094                     	;# 
  2727  0095                     	;# 
  2728  0096                     	;# 
  2729  0097                     	;# 
  2730  0098                     	;# 
  2731  0099                     	;# 
  2732  009A                     	;# 
  2733  009B                     	;# 
  2734  009C                     	;# 
  2735  009D                     	;# 
  2736  009E                     	;# 
  2737  010C                     	;# 
  2738  010D                     	;# 
  2739  010E                     	;# 
  2740  010E                     	;# 
  2741  010F                     	;# 
  2742  0110                     	;# 
  2743  0110                     	;# 
  2744  0111                     	;# 
  2745  0112                     	;# 
  2746  0112                     	;# 
  2747  0113                     	;# 
  2748  0114                     	;# 
  2749  0114                     	;# 
  2750  0115                     	;# 
  2751  0116                     	;# 
  2752  0116                     	;# 
  2753  0117                     	;# 
  2754  0119                     	;# 
  2755  0119                     	;# 
  2756  0119                     	;# 
  2757  011A                     	;# 
  2758  011A                     	;# 
  2759  011A                     	;# 
  2760  011B                     	;# 
  2761  011B                     	;# 
  2762  011B                     	;# 
  2763  011B                     	;# 
  2764  011B                     	;# 
  2765  011C                     	;# 
  2766  011C                     	;# 
  2767  011C                     	;# 
  2768  011D                     	;# 
  2769  011D                     	;# 
  2770  011D                     	;# 
  2771  011E                     	;# 
  2772  011E                     	;# 
  2773  011E                     	;# 
  2774  011F                     	;# 
  2775  011F                     	;# 
  2776  011F                     	;# 
  2777  011F                     	;# 
  2778  011F                     	;# 
  2779  018C                     	;# 
  2780  018D                     	;# 
  2781  018E                     	;# 
  2782  018F                     	;# 
  2783  0190                     	;# 
  2784  0191                     	;# 
  2785  0192                     	;# 
  2786  0196                     	;# 
  2787  0197                     	;# 
  2788  0198                     	;# 
  2789  0199                     	;# 
  2790  019A                     	;# 
  2791  019B                     	;# 
  2792  019C                     	;# 
  2793  020C                     	;# 
  2794  020C                     	;# 
  2795  020D                     	;# 
  2796  020E                     	;# 
  2797  020F                     	;# 
  2798  020F                     	;# 
  2799  0210                     	;# 
  2800  0210                     	;# 
  2801  0211                     	;# 
  2802  0211                     	;# 
  2803  0212                     	;# 
  2804  0212                     	;# 
  2805  0213                     	;# 
  2806  0214                     	;# 
  2807  0215                     	;# 
  2808  0215                     	;# 
  2809  0216                     	;# 
  2810  0216                     	;# 
  2811  0217                     	;# 
  2812  0217                     	;# 
  2813  0218                     	;# 
  2814  0218                     	;# 
  2815  0219                     	;# 
  2816  021A                     	;# 
  2817  021B                     	;# 
  2818  021B                     	;# 
  2819  021C                     	;# 
  2820  021C                     	;# 
  2821  021D                     	;# 
  2822  021D                     	;# 
  2823  021E                     	;# 
  2824  021F                     	;# 
  2825  028C                     	;# 
  2826  028C                     	;# 
  2827  028D                     	;# 
  2828  028D                     	;# 
  2829  028E                     	;# 
  2830  028F                     	;# 
  2831  0290                     	;# 
  2832  0290                     	;# 
  2833  0291                     	;# 
  2834  0292                     	;# 
  2835  0292                     	;# 
  2836  0293                     	;# 
  2837  0293                     	;# 
  2838  0294                     	;# 
  2839  0295                     	;# 
  2840  0296                     	;# 
  2841  0296                     	;# 
  2842  0297                     	;# 
  2843  0298                     	;# 
  2844  0298                     	;# 
  2845  0299                     	;# 
  2846  0299                     	;# 
  2847  029A                     	;# 
  2848  029B                     	;# 
  2849  029C                     	;# 
  2850  029C                     	;# 
  2851  029D                     	;# 
  2852  030C                     	;# 
  2853  030C                     	;# 
  2854  030D                     	;# 
  2855  030E                     	;# 
  2856  030F                     	;# 
  2857  0310                     	;# 
  2858  0310                     	;# 
  2859  0311                     	;# 
  2860  0312                     	;# 
  2861  0313                     	;# 
  2862  0314                     	;# 
  2863  0314                     	;# 
  2864  0315                     	;# 
  2865  0316                     	;# 
  2866  0317                     	;# 
  2867  0318                     	;# 
  2868  0318                     	;# 
  2869  0319                     	;# 
  2870  031A                     	;# 
  2871  031B                     	;# 
  2872  031C                     	;# 
  2873  031C                     	;# 
  2874  031D                     	;# 
  2875  031E                     	;# 
  2876  031F                     	;# 
  2877  038C                     	;# 
  2878  038D                     	;# 
  2879  038E                     	;# 
  2880  0390                     	;# 
  2881  0391                     	;# 
  2882  0392                     	;# 
  2883  040C                     	;# 
  2884  040D                     	;# 
  2885  040E                     	;# 
  2886  040F                     	;# 
  2887  0410                     	;# 
  2888  0411                     	;# 
  2889  0416                     	;# 
  2890  0416                     	;# 
  2891  0417                     	;# 
  2892  0418                     	;# 
  2893  0418                     	;# 
  2894  0419                     	;# 
  2895  041A                     	;# 
  2896  041A                     	;# 
  2897  041B                     	;# 
  2898  041C                     	;# 
  2899  041C                     	;# 
  2900  041D                     	;# 
  2901  041E                     	;# 
  2902  041F                     	;# 
  2903  048C                     	;# 
  2904  048C                     	;# 
  2905  048D                     	;# 
  2906  048E                     	;# 
  2907  048F                     	;# 
  2908  048F                     	;# 
  2909  0490                     	;# 
  2910  0491                     	;# 
  2911  0492                     	;# 
  2912  0492                     	;# 
  2913  0493                     	;# 
  2914  0494                     	;# 
  2915  0495                     	;# 
  2916  0495                     	;# 
  2917  0496                     	;# 
  2918  0497                     	;# 
  2919  0498                     	;# 
  2920  0499                     	;# 
  2921  049A                     	;# 
  2922  049B                     	;# 
  2923  049C                     	;# 
  2924  049D                     	;# 
  2925  050C                     	;# 
  2926  050C                     	;# 
  2927  050D                     	;# 
  2928  050E                     	;# 
  2929  050F                     	;# 
  2930  050F                     	;# 
  2931  0510                     	;# 
  2932  0511                     	;# 
  2933  0512                     	;# 
  2934  0512                     	;# 
  2935  0513                     	;# 
  2936  0514                     	;# 
  2937  0515                     	;# 
  2938  0515                     	;# 
  2939  0516                     	;# 
  2940  0517                     	;# 
  2941  0518                     	;# 
  2942  0519                     	;# 
  2943  051A                     	;# 
  2944  051B                     	;# 
  2945  051C                     	;# 
  2946  051D                     	;# 
  2947  058C                     	;# 
  2948  058C                     	;# 
  2949  058D                     	;# 
  2950  058E                     	;# 
  2951  058F                     	;# 
  2952  058F                     	;# 
  2953  0590                     	;# 
  2954  0591                     	;# 
  2955  0592                     	;# 
  2956  0593                     	;# 
  2957  060C                     	;# 
  2958  060D                     	;# 
  2959  060E                     	;# 
  2960  060F                     	;# 
  2961  0610                     	;# 
  2962  0611                     	;# 
  2963  0612                     	;# 
  2964  0613                     	;# 
  2965  0614                     	;# 
  2966  0616                     	;# 
  2967  0617                     	;# 
  2968  0618                     	;# 
  2969  0619                     	;# 
  2970  061A                     	;# 
  2971  061B                     	;# 
  2972  061C                     	;# 
  2973  061D                     	;# 
  2974  061E                     	;# 
  2975  068C                     	;# 
  2976  068D                     	;# 
  2977  068E                     	;# 
  2978  068F                     	;# 
  2979  0690                     	;# 
  2980  0691                     	;# 
  2981  0692                     	;# 
  2982  0693                     	;# 
  2983  0694                     	;# 
  2984  070C                     	;# 
  2985  070D                     	;# 
  2986  070E                     	;# 
  2987  070F                     	;# 
  2988  0710                     	;# 
  2989  0711                     	;# 
  2990  0712                     	;# 
  2991  0713                     	;# 
  2992  0714                     	;# 
  2993  0716                     	;# 
  2994  0717                     	;# 
  2995  0718                     	;# 
  2996  0719                     	;# 
  2997  071A                     	;# 
  2998  071B                     	;# 
  2999  071C                     	;# 
  3000  071D                     	;# 
  3001  071E                     	;# 
  3002  0796                     	;# 
  3003  0797                     	;# 
  3004  0798                     	;# 
  3005  0799                     	;# 
  3006  079A                     	;# 
  3007  079B                     	;# 
  3008  080C                     	;# 
  3009  080D                     	;# 
  3010  080E                     	;# 
  3011  080F                     	;# 
  3012  0810                     	;# 
  3013  0811                     	;# 
  3014  0812                     	;# 
  3015  0813                     	;# 
  3016  0814                     	;# 
  3017  081A                     	;# 
  3018  081B                     	;# 
  3019  081C                     	;# 
  3020  081D                     	;# 
  3021  081E                     	;# 
  3022  081F                     	;# 
  3023  088C                     	;# 
  3024  088D                     	;# 
  3025  088E                     	;# 
  3026  088F                     	;# 
  3027  0890                     	;# 
  3028  0891                     	;# 
  3029  0892                     	;# 
  3030  0893                     	;# 
  3031  0895                     	;# 
  3032  0896                     	;# 
  3033  0897                     	;# 
  3034  0898                     	;# 
  3035  0899                     	;# 
  3036  089A                     	;# 
  3037  089B                     	;# 
  3038  090C                     	;# 
  3039  090E                     	;# 
  3040  090F                     	;# 
  3041  091F                     	;# 
  3042  091F                     	;# 
  3043  098F                     	;# 
  3044  098F                     	;# 
  3045  0990                     	;# 
  3046  0991                     	;# 
  3047  0992                     	;# 
  3048  0993                     	;# 
  3049  0994                     	;# 
  3050  0995                     	;# 
  3051  0996                     	;# 
  3052  0997                     	;# 
  3053  0E0F                     	;# 
  3054  0E10                     	;# 
  3055  0E11                     	;# 
  3056  0E12                     	;# 
  3057  0E13                     	;# 
  3058  0E14                     	;# 
  3059  0E15                     	;# 
  3060  0E16                     	;# 
  3061  0E17                     	;# 
  3062  0E18                     	;# 
  3063  0E19                     	;# 
  3064  0E1A                     	;# 
  3065  0E1B                     	;# 
  3066  0E1C                     	;# 
  3067  0E1D                     	;# 
  3068  0E1E                     	;# 
  3069  0E1F                     	;# 
  3070  0E20                     	;# 
  3071  0E21                     	;# 
  3072  0E22                     	;# 
  3073  0E23                     	;# 
  3074  0E24                     	;# 
  3075  0E25                     	;# 
  3076  0E26                     	;# 
  3077  0E27                     	;# 
  3078  0E28                     	;# 
  3079  0E29                     	;# 
  3080  0E2A                     	;# 
  3081  0E2B                     	;# 
  3082  0E2C                     	;# 
  3083  0E2D                     	;# 
  3084  0E2E                     	;# 
  3085  0E2F                     	;# 
  3086  0E30                     	;# 
  3087  0E31                     	;# 
  3088  0E32                     	;# 
  3089  0E33                     	;# 
  3090  0E34                     	;# 
  3091  0E35                     	;# 
  3092  0E36                     	;# 
  3093  0E37                     	;# 
  3094  0E8F                     	;# 
  3095  0E90                     	;# 
  3096  0E91                     	;# 
  3097  0E92                     	;# 
  3098  0E93                     	;# 
  3099  0E94                     	;# 
  3100  0E95                     	;# 
  3101  0E96                     	;# 
  3102  0E97                     	;# 
  3103  0E9C                     	;# 
  3104  0E9D                     	;# 
  3105  0E9E                     	;# 
  3106  0EA1                     	;# 
  3107  0EA2                     	;# 
  3108  0EA3                     	;# 
  3109  0EA4                     	;# 
  3110  0EA5                     	;# 
  3111  0EA9                     	;# 
  3112  0EAA                     	;# 
  3113  0EAB                     	;# 
  3114  0EAC                     	;# 
  3115  0EB1                     	;# 
  3116  0EB2                     	;# 
  3117  0EB3                     	;# 
  3118  0EB8                     	;# 
  3119  0EB9                     	;# 
  3120  0EBA                     	;# 
  3121  0EBB                     	;# 
  3122  0EBC                     	;# 
  3123  0EBD                     	;# 
  3124  0EBE                     	;# 
  3125  0EC3                     	;# 
  3126  0EC5                     	;# 
  3127  0EC6                     	;# 
  3128  0EC7                     	;# 
  3129  0EC8                     	;# 
  3130  0EC9                     	;# 
  3131  0ECA                     	;# 
  3132  0ECB                     	;# 
  3133  0ECC                     	;# 
  3134  0F10                     	;# 
  3135  0F11                     	;# 
  3136  0F12                     	;# 
  3137  0F13                     	;# 
  3138  0F14                     	;# 
  3139  0F15                     	;# 
  3140  0F16                     	;# 
  3141  0F17                     	;# 
  3142  0F18                     	;# 
  3143  0F19                     	;# 
  3144  0F1A                     	;# 
  3145  0F1B                     	;# 
  3146  0F1C                     	;# 
  3147  0F1D                     	;# 
  3148  0F1E                     	;# 
  3149  0F1F                     	;# 
  3150  0F20                     	;# 
  3151  0F21                     	;# 
  3152  0F22                     	;# 
  3153  0F23                     	;# 
  3154  0F24                     	;# 
  3155  0F25                     	;# 
  3156  0F26                     	;# 
  3157  0F27                     	;# 
  3158  0F38                     	;# 
  3159  0F39                     	;# 
  3160  0F3A                     	;# 
  3161  0F3B                     	;# 
  3162  0F3C                     	;# 
  3163  0F3D                     	;# 
  3164  0F3E                     	;# 
  3165  0F3F                     	;# 
  3166  0F40                     	;# 
  3167  0F41                     	;# 
  3168  0F43                     	;# 
  3169  0F44                     	;# 
  3170  0F45                     	;# 
  3171  0F46                     	;# 
  3172  0F47                     	;# 
  3173  0F48                     	;# 
  3174  0F49                     	;# 
  3175  0F4A                     	;# 
  3176  0F4B                     	;# 
  3177  0F4C                     	;# 
  3178  0F4E                     	;# 
  3179  0F4F                     	;# 
  3180  0F50                     	;# 
  3181  0F51                     	;# 
  3182  0F52                     	;# 
  3183  0F53                     	;# 
  3184  0F54                     	;# 
  3185  0F55                     	;# 
  3186  0F56                     	;# 
  3187  0F57                     	;# 
  3188  0F65                     	;# 
  3189  0F68                     	;# 
  3190  0F69                     	;# 
  3191  0F6A                     	;# 
  3192  0F6B                     	;# 
  3193  0FE4                     	;# 
  3194  0FE5                     	;# 
  3195  0FE6                     	;# 
  3196  0FE7                     	;# 
  3197  0FE8                     	;# 
  3198  0FE9                     	;# 
  3199  0FEA                     	;# 
  3200  0FEB                     	;# 
  3201  0FED                     	;# 
  3202  0FEE                     	;# 
  3203  0FEF                     	;# 
  3204  0000                     	;# 
  3205  0001                     	;# 
  3206  0002                     	;# 
  3207  0003                     	;# 
  3208  0004                     	;# 
  3209  0005                     	;# 
  3210  0006                     	;# 
  3211  0007                     	;# 
  3212  0008                     	;# 
  3213  0009                     	;# 
  3214  000A                     	;# 
  3215  000B                     	;# 
  3216  000C                     	;# 
  3217  000D                     	;# 
  3218  000E                     	;# 
  3219  0010                     	;# 
  3220  0011                     	;# 
  3221  0012                     	;# 
  3222  0013                     	;# 
  3223  0016                     	;# 
  3224  0017                     	;# 
  3225  0018                     	;# 
  3226  001C                     	;# 
  3227  001C                     	;# 
  3228  001D                     	;# 
  3229  001D                     	;# 
  3230  001E                     	;# 
  3231  001F                     	;# 
  3232  008C                     	;# 
  3233  008C                     	;# 
  3234  008D                     	;# 
  3235  008E                     	;# 
  3236  008E                     	;# 
  3237  008F                     	;# 
  3238  0090                     	;# 
  3239  0090                     	;# 
  3240  0091                     	;# 
  3241  0093                     	;# 
  3242  0094                     	;# 
  3243  0095                     	;# 
  3244  0096                     	;# 
  3245  0097                     	;# 
  3246  0098                     	;# 
  3247  0099                     	;# 
  3248  009A                     	;# 
  3249  009B                     	;# 
  3250  009C                     	;# 
  3251  009D                     	;# 
  3252  009E                     	;# 
  3253  010C                     	;# 
  3254  010D                     	;# 
  3255  010E                     	;# 
  3256  010E                     	;# 
  3257  010F                     	;# 
  3258  0110                     	;# 
  3259  0110                     	;# 
  3260  0111                     	;# 
  3261  0112                     	;# 
  3262  0112                     	;# 
  3263  0113                     	;# 
  3264  0114                     	;# 
  3265  0114                     	;# 
  3266  0115                     	;# 
  3267  0116                     	;# 
  3268  0116                     	;# 
  3269  0117                     	;# 
  3270  0119                     	;# 
  3271  0119                     	;# 
  3272  0119                     	;# 
  3273  011A                     	;# 
  3274  011A                     	;# 
  3275  011A                     	;# 
  3276  011B                     	;# 
  3277  011B                     	;# 
  3278  011B                     	;# 
  3279  011B                     	;# 
  3280  011B                     	;# 
  3281  011C                     	;# 
  3282  011C                     	;# 
  3283  011C                     	;# 
  3284  011D                     	;# 
  3285  011D                     	;# 
  3286  011D                     	;# 
  3287  011E                     	;# 
  3288  011E                     	;# 
  3289  011E                     	;# 
  3290  011F                     	;# 
  3291  011F                     	;# 
  3292  011F                     	;# 
  3293  011F                     	;# 
  3294  011F                     	;# 
  3295  018C                     	;# 
  3296  018D                     	;# 
  3297  018E                     	;# 
  3298  018F                     	;# 
  3299  0190                     	;# 
  3300  0191                     	;# 
  3301  0192                     	;# 
  3302  0196                     	;# 
  3303  0197                     	;# 
  3304  0198                     	;# 
  3305  0199                     	;# 
  3306  019A                     	;# 
  3307  019B                     	;# 
  3308  019C                     	;# 
  3309  020C                     	;# 
  3310  020C                     	;# 
  3311  020D                     	;# 
  3312  020E                     	;# 
  3313  020F                     	;# 
  3314  020F                     	;# 
  3315  0210                     	;# 
  3316  0210                     	;# 
  3317  0211                     	;# 
  3318  0211                     	;# 
  3319  0212                     	;# 
  3320  0212                     	;# 
  3321  0213                     	;# 
  3322  0214                     	;# 
  3323  0215                     	;# 
  3324  0215                     	;# 
  3325  0216                     	;# 
  3326  0216                     	;# 
  3327  0217                     	;# 
  3328  0217                     	;# 
  3329  0218                     	;# 
  3330  0218                     	;# 
  3331  0219                     	;# 
  3332  021A                     	;# 
  3333  021B                     	;# 
  3334  021B                     	;# 
  3335  021C                     	;# 
  3336  021C                     	;# 
  3337  021D                     	;# 
  3338  021D                     	;# 
  3339  021E                     	;# 
  3340  021F                     	;# 
  3341  028C                     	;# 
  3342  028C                     	;# 
  3343  028D                     	;# 
  3344  028D                     	;# 
  3345  028E                     	;# 
  3346  028F                     	;# 
  3347  0290                     	;# 
  3348  0290                     	;# 
  3349  0291                     	;# 
  3350  0292                     	;# 
  3351  0292                     	;# 
  3352  0293                     	;# 
  3353  0293                     	;# 
  3354  0294                     	;# 
  3355  0295                     	;# 
  3356  0296                     	;# 
  3357  0296                     	;# 
  3358  0297                     	;# 
  3359  0298                     	;# 
  3360  0298                     	;# 
  3361  0299                     	;# 
  3362  0299                     	;# 
  3363  029A                     	;# 
  3364  029B                     	;# 
  3365  029C                     	;# 
  3366  029C                     	;# 
  3367  029D                     	;# 
  3368  030C                     	;# 
  3369  030C                     	;# 
  3370  030D                     	;# 
  3371  030E                     	;# 
  3372  030F                     	;# 
  3373  0310                     	;# 
  3374  0310                     	;# 
  3375  0311                     	;# 
  3376  0312                     	;# 
  3377  0313                     	;# 
  3378  0314                     	;# 
  3379  0314                     	;# 
  3380  0315                     	;# 
  3381  0316                     	;# 
  3382  0317                     	;# 
  3383  0318                     	;# 
  3384  0318                     	;# 
  3385  0319                     	;# 
  3386  031A                     	;# 
  3387  031B                     	;# 
  3388  031C                     	;# 
  3389  031C                     	;# 
  3390  031D                     	;# 
  3391  031E                     	;# 
  3392  031F                     	;# 
  3393  038C                     	;# 
  3394  038D                     	;# 
  3395  038E                     	;# 
  3396  0390                     	;# 
  3397  0391                     	;# 
  3398  0392                     	;# 
  3399  040C                     	;# 
  3400  040D                     	;# 
  3401  040E                     	;# 
  3402  040F                     	;# 
  3403  0410                     	;# 
  3404  0411                     	;# 
  3405  0416                     	;# 
  3406  0416                     	;# 
  3407  0417                     	;# 
  3408  0418                     	;# 
  3409  0418                     	;# 
  3410  0419                     	;# 
  3411  041A                     	;# 
  3412  041A                     	;# 
  3413  041B                     	;# 
  3414  041C                     	;# 
  3415  041C                     	;# 
  3416  041D                     	;# 
  3417  041E                     	;# 
  3418  041F                     	;# 
  3419  048C                     	;# 
  3420  048C                     	;# 
  3421  048D                     	;# 
  3422  048E                     	;# 
  3423  048F                     	;# 
  3424  048F                     	;# 
  3425  0490                     	;# 
  3426  0491                     	;# 
  3427  0492                     	;# 
  3428  0492                     	;# 
  3429  0493                     	;# 
  3430  0494                     	;# 
  3431  0495                     	;# 
  3432  0495                     	;# 
  3433  0496                     	;# 
  3434  0497                     	;# 
  3435  0498                     	;# 
  3436  0499                     	;# 
  3437  049A                     	;# 
  3438  049B                     	;# 
  3439  049C                     	;# 
  3440  049D                     	;# 
  3441  050C                     	;# 
  3442  050C                     	;# 
  3443  050D                     	;# 
  3444  050E                     	;# 
  3445  050F                     	;# 
  3446  050F                     	;# 
  3447  0510                     	;# 
  3448  0511                     	;# 
  3449  0512                     	;# 
  3450  0512                     	;# 
  3451  0513                     	;# 
  3452  0514                     	;# 
  3453  0515                     	;# 
  3454  0515                     	;# 
  3455  0516                     	;# 
  3456  0517                     	;# 
  3457  0518                     	;# 
  3458  0519                     	;# 
  3459  051A                     	;# 
  3460  051B                     	;# 
  3461  051C                     	;# 
  3462  051D                     	;# 
  3463  058C                     	;# 
  3464  058C                     	;# 
  3465  058D                     	;# 
  3466  058E                     	;# 
  3467  058F                     	;# 
  3468  058F                     	;# 
  3469  0590                     	;# 
  3470  0591                     	;# 
  3471  0592                     	;# 
  3472  0593                     	;# 
  3473  060C                     	;# 
  3474  060D                     	;# 
  3475  060E                     	;# 
  3476  060F                     	;# 
  3477  0610                     	;# 
  3478  0611                     	;# 
  3479  0612                     	;# 
  3480  0613                     	;# 
  3481  0614                     	;# 
  3482  0616                     	;# 
  3483  0617                     	;# 
  3484  0618                     	;# 
  3485  0619                     	;# 
  3486  061A                     	;# 
  3487  061B                     	;# 
  3488  061C                     	;# 
  3489  061D                     	;# 
  3490  061E                     	;# 
  3491  068C                     	;# 
  3492  068D                     	;# 
  3493  068E                     	;# 
  3494  068F                     	;# 
  3495  0690                     	;# 
  3496  0691                     	;# 
  3497  0692                     	;# 
  3498  0693                     	;# 
  3499  0694                     	;# 
  3500  070C                     	;# 
  3501  070D                     	;# 
  3502  070E                     	;# 
  3503  070F                     	;# 
  3504  0710                     	;# 
  3505  0711                     	;# 
  3506  0712                     	;# 
  3507  0713                     	;# 
  3508  0714                     	;# 
  3509  0716                     	;# 
  3510  0717                     	;# 
  3511  0718                     	;# 
  3512  0719                     	;# 
  3513  071A                     	;# 
  3514  071B                     	;# 
  3515  071C                     	;# 
  3516  071D                     	;# 
  3517  071E                     	;# 
  3518  0796                     	;# 
  3519  0797                     	;# 
  3520  0798                     	;# 
  3521  0799                     	;# 
  3522  079A                     	;# 
  3523  079B                     	;# 
  3524  080C                     	;# 
  3525  080D                     	;# 
  3526  080E                     	;# 
  3527  080F                     	;# 
  3528  0810                     	;# 
  3529  0811                     	;# 
  3530  0812                     	;# 
  3531  0813                     	;# 
  3532  0814                     	;# 
  3533  081A                     	;# 
  3534  081B                     	;# 
  3535  081C                     	;# 
  3536  081D                     	;# 
  3537  081E                     	;# 
  3538  081F                     	;# 
  3539  088C                     	;# 
  3540  088D                     	;# 
  3541  088E                     	;# 
  3542  088F                     	;# 
  3543  0890                     	;# 
  3544  0891                     	;# 
  3545  0892                     	;# 
  3546  0893                     	;# 
  3547  0895                     	;# 
  3548  0896                     	;# 
  3549  0897                     	;# 
  3550  0898                     	;# 
  3551  0899                     	;# 
  3552  089A                     	;# 
  3553  089B                     	;# 
  3554  090C                     	;# 
  3555  090E                     	;# 
  3556  090F                     	;# 
  3557  091F                     	;# 
  3558  091F                     	;# 
  3559  098F                     	;# 
  3560  098F                     	;# 
  3561  0990                     	;# 
  3562  0991                     	;# 
  3563  0992                     	;# 
  3564  0993                     	;# 
  3565  0994                     	;# 
  3566  0995                     	;# 
  3567  0996                     	;# 
  3568  0997                     	;# 
  3569  0E0F                     	;# 
  3570  0E10                     	;# 
  3571  0E11                     	;# 
  3572  0E12                     	;# 
  3573  0E13                     	;# 
  3574  0E14                     	;# 
  3575  0E15                     	;# 
  3576  0E16                     	;# 
  3577  0E17                     	;# 
  3578  0E18                     	;# 
  3579  0E19                     	;# 
  3580  0E1A                     	;# 
  3581  0E1B                     	;# 
  3582  0E1C                     	;# 
  3583  0E1D                     	;# 
  3584  0E1E                     	;# 
  3585  0E1F                     	;# 
  3586  0E20                     	;# 
  3587  0E21                     	;# 
  3588  0E22                     	;# 
  3589  0E23                     	;# 
  3590  0E24                     	;# 
  3591  0E25                     	;# 
  3592  0E26                     	;# 
  3593  0E27                     	;# 
  3594  0E28                     	;# 
  3595  0E29                     	;# 
  3596  0E2A                     	;# 
  3597  0E2B                     	;# 
  3598  0E2C                     	;# 
  3599  0E2D                     	;# 
  3600  0E2E                     	;# 
  3601  0E2F                     	;# 
  3602  0E30                     	;# 
  3603  0E31                     	;# 
  3604  0E32                     	;# 
  3605  0E33                     	;# 
  3606  0E34                     	;# 
  3607  0E35                     	;# 
  3608  0E36                     	;# 
  3609  0E37                     	;# 
  3610  0E8F                     	;# 
  3611  0E90                     	;# 
  3612  0E91                     	;# 
  3613  0E92                     	;# 
  3614  0E93                     	;# 
  3615  0E94                     	;# 
  3616  0E95                     	;# 
  3617  0E96                     	;# 
  3618  0E97                     	;# 
  3619  0E9C                     	;# 
  3620  0E9D                     	;# 
  3621  0E9E                     	;# 
  3622  0EA1                     	;# 
  3623  0EA2                     	;# 
  3624  0EA3                     	;# 
  3625  0EA4                     	;# 
  3626  0EA5                     	;# 
  3627  0EA9                     	;# 
  3628  0EAA                     	;# 
  3629  0EAB                     	;# 
  3630  0EAC                     	;# 
  3631  0EB1                     	;# 
  3632  0EB2                     	;# 
  3633  0EB3                     	;# 
  3634  0EB8                     	;# 
  3635  0EB9                     	;# 
  3636  0EBA                     	;# 
  3637  0EBB                     	;# 
  3638  0EBC                     	;# 
  3639  0EBD                     	;# 
  3640  0EBE                     	;# 
  3641  0EC3                     	;# 
  3642  0EC5                     	;# 
  3643  0EC6                     	;# 
  3644  0EC7                     	;# 
  3645  0EC8                     	;# 
  3646  0EC9                     	;# 
  3647  0ECA                     	;# 
  3648  0ECB                     	;# 
  3649  0ECC                     	;# 
  3650  0F10                     	;# 
  3651  0F11                     	;# 
  3652  0F12                     	;# 
  3653  0F13                     	;# 
  3654  0F14                     	;# 
  3655  0F15                     	;# 
  3656  0F16                     	;# 
  3657  0F17                     	;# 
  3658  0F18                     	;# 
  3659  0F19                     	;# 
  3660  0F1A                     	;# 
  3661  0F1B                     	;# 
  3662  0F1C                     	;# 
  3663  0F1D                     	;# 
  3664  0F1E                     	;# 
  3665  0F1F                     	;# 
  3666  0F20                     	;# 
  3667  0F21                     	;# 
  3668  0F22                     	;# 
  3669  0F23                     	;# 
  3670  0F24                     	;# 
  3671  0F25                     	;# 
  3672  0F26                     	;# 
  3673  0F27                     	;# 
  3674  0F38                     	;# 
  3675  0F39                     	;# 
  3676  0F3A                     	;# 
  3677  0F3B                     	;# 
  3678  0F3C                     	;# 
  3679  0F3D                     	;# 
  3680  0F3E                     	;# 
  3681  0F3F                     	;# 
  3682  0F40                     	;# 
  3683  0F41                     	;# 
  3684  0F43                     	;# 
  3685  0F44                     	;# 
  3686  0F45                     	;# 
  3687  0F46                     	;# 
  3688  0F47                     	;# 
  3689  0F48                     	;# 
  3690  0F49                     	;# 
  3691  0F4A                     	;# 
  3692  0F4B                     	;# 
  3693  0F4C                     	;# 
  3694  0F4E                     	;# 
  3695  0F4F                     	;# 
  3696  0F50                     	;# 
  3697  0F51                     	;# 
  3698  0F52                     	;# 
  3699  0F53                     	;# 
  3700  0F54                     	;# 
  3701  0F55                     	;# 
  3702  0F56                     	;# 
  3703  0F57                     	;# 
  3704  0F65                     	;# 
  3705  0F68                     	;# 
  3706  0F69                     	;# 
  3707  0F6A                     	;# 
  3708  0F6B                     	;# 
  3709  0FE4                     	;# 
  3710  0FE5                     	;# 
  3711  0FE6                     	;# 
  3712  0FE7                     	;# 
  3713  0FE8                     	;# 
  3714  0FE9                     	;# 
  3715  0FEA                     	;# 
  3716  0FEB                     	;# 
  3717  0FED                     	;# 
  3718  0FEE                     	;# 
  3719  0FEF                     	;# 
  3720  0000                     	;# 
  3721  0001                     	;# 
  3722  0002                     	;# 
  3723  0003                     	;# 
  3724  0004                     	;# 
  3725  0005                     	;# 
  3726  0006                     	;# 
  3727  0007                     	;# 
  3728  0008                     	;# 
  3729  0009                     	;# 
  3730  000A                     	;# 
  3731  000B                     	;# 
  3732  000C                     	;# 
  3733  000D                     	;# 
  3734  000E                     	;# 
  3735  0010                     	;# 
  3736  0011                     	;# 
  3737  0012                     	;# 
  3738  0013                     	;# 
  3739  0016                     	;# 
  3740  0017                     	;# 
  3741  0018                     	;# 
  3742  001C                     	;# 
  3743  001C                     	;# 
  3744  001D                     	;# 
  3745  001D                     	;# 
  3746  001E                     	;# 
  3747  001F                     	;# 
  3748  008C                     	;# 
  3749  008C                     	;# 
  3750  008D                     	;# 
  3751  008E                     	;# 
  3752  008E                     	;# 
  3753  008F                     	;# 
  3754  0090                     	;# 
  3755  0090                     	;# 
  3756  0091                     	;# 
  3757  0093                     	;# 
  3758  0094                     	;# 
  3759  0095                     	;# 
  3760  0096                     	;# 
  3761  0097                     	;# 
  3762  0098                     	;# 
  3763  0099                     	;# 
  3764  009A                     	;# 
  3765  009B                     	;# 
  3766  009C                     	;# 
  3767  009D                     	;# 
  3768  009E                     	;# 
  3769  010C                     	;# 
  3770  010D                     	;# 
  3771  010E                     	;# 
  3772  010E                     	;# 
  3773  010F                     	;# 
  3774  0110                     	;# 
  3775  0110                     	;# 
  3776  0111                     	;# 
  3777  0112                     	;# 
  3778  0112                     	;# 
  3779  0113                     	;# 
  3780  0114                     	;# 
  3781  0114                     	;# 
  3782  0115                     	;# 
  3783  0116                     	;# 
  3784  0116                     	;# 
  3785  0117                     	;# 
  3786  0119                     	;# 
  3787  0119                     	;# 
  3788  0119                     	;# 
  3789  011A                     	;# 
  3790  011A                     	;# 
  3791  011A                     	;# 
  3792  011B                     	;# 
  3793  011B                     	;# 
  3794  011B                     	;# 
  3795  011B                     	;# 
  3796  011B                     	;# 
  3797  011C                     	;# 
  3798  011C                     	;# 
  3799  011C                     	;# 
  3800  011D                     	;# 
  3801  011D                     	;# 
  3802  011D                     	;# 
  3803  011E                     	;# 
  3804  011E                     	;# 
  3805  011E                     	;# 
  3806  011F                     	;# 
  3807  011F                     	;# 
  3808  011F                     	;# 
  3809  011F                     	;# 
  3810  011F                     	;# 
  3811  018C                     	;# 
  3812  018D                     	;# 
  3813  018E                     	;# 
  3814  018F                     	;# 
  3815  0190                     	;# 
  3816  0191                     	;# 
  3817  0192                     	;# 
  3818  0196                     	;# 
  3819  0197                     	;# 
  3820  0198                     	;# 
  3821  0199                     	;# 
  3822  019A                     	;# 
  3823  019B                     	;# 
  3824  019C                     	;# 
  3825  020C                     	;# 
  3826  020C                     	;# 
  3827  020D                     	;# 
  3828  020E                     	;# 
  3829  020F                     	;# 
  3830  020F                     	;# 
  3831  0210                     	;# 
  3832  0210                     	;# 
  3833  0211                     	;# 
  3834  0211                     	;# 
  3835  0212                     	;# 
  3836  0212                     	;# 
  3837  0213                     	;# 
  3838  0214                     	;# 
  3839  0215                     	;# 
  3840  0215                     	;# 
  3841  0216                     	;# 
  3842  0216                     	;# 
  3843  0217                     	;# 
  3844  0217                     	;# 
  3845  0218                     	;# 
  3846  0218                     	;# 
  3847  0219                     	;# 
  3848  021A                     	;# 
  3849  021B                     	;# 
  3850  021B                     	;# 
  3851  021C                     	;# 
  3852  021C                     	;# 
  3853  021D                     	;# 
  3854  021D                     	;# 
  3855  021E                     	;# 
  3856  021F                     	;# 
  3857  028C                     	;# 
  3858  028C                     	;# 
  3859  028D                     	;# 
  3860  028D                     	;# 
  3861  028E                     	;# 
  3862  028F                     	;# 
  3863  0290                     	;# 
  3864  0290                     	;# 
  3865  0291                     	;# 
  3866  0292                     	;# 
  3867  0292                     	;# 
  3868  0293                     	;# 
  3869  0293                     	;# 
  3870  0294                     	;# 
  3871  0295                     	;# 
  3872  0296                     	;# 
  3873  0296                     	;# 
  3874  0297                     	;# 
  3875  0298                     	;# 
  3876  0298                     	;# 
  3877  0299                     	;# 
  3878  0299                     	;# 
  3879  029A                     	;# 
  3880  029B                     	;# 
  3881  029C                     	;# 
  3882  029C                     	;# 
  3883  029D                     	;# 
  3884  030C                     	;# 
  3885  030C                     	;# 
  3886  030D                     	;# 
  3887  030E                     	;# 
  3888  030F                     	;# 
  3889  0310                     	;# 
  3890  0310                     	;# 
  3891  0311                     	;# 
  3892  0312                     	;# 
  3893  0313                     	;# 
  3894  0314                     	;# 
  3895  0314                     	;# 
  3896  0315                     	;# 
  3897  0316                     	;# 
  3898  0317                     	;# 
  3899  0318                     	;# 
  3900  0318                     	;# 
  3901  0319                     	;# 
  3902  031A                     	;# 
  3903  031B                     	;# 
  3904  031C                     	;# 
  3905  031C                     	;# 
  3906  031D                     	;# 
  3907  031E                     	;# 
  3908  031F                     	;# 
  3909  038C                     	;# 
  3910  038D                     	;# 
  3911  038E                     	;# 
  3912  0390                     	;# 
  3913  0391                     	;# 
  3914  0392                     	;# 
  3915  040C                     	;# 
  3916  040D                     	;# 
  3917  040E                     	;# 
  3918  040F                     	;# 
  3919  0410                     	;# 
  3920  0411                     	;# 
  3921  0416                     	;# 
  3922  0416                     	;# 
  3923  0417                     	;# 
  3924  0418                     	;# 
  3925  0418                     	;# 
  3926  0419                     	;# 
  3927  041A                     	;# 
  3928  041A                     	;# 
  3929  041B                     	;# 
  3930  041C                     	;# 
  3931  041C                     	;# 
  3932  041D                     	;# 
  3933  041E                     	;# 
  3934  041F                     	;# 
  3935  048C                     	;# 
  3936  048C                     	;# 
  3937  048D                     	;# 
  3938  048E                     	;# 
  3939  048F                     	;# 
  3940  048F                     	;# 
  3941  0490                     	;# 
  3942  0491                     	;# 
  3943  0492                     	;# 
  3944  0492                     	;# 
  3945  0493                     	;# 
  3946  0494                     	;# 
  3947  0495                     	;# 
  3948  0495                     	;# 
  3949  0496                     	;# 
  3950  0497                     	;# 
  3951  0498                     	;# 
  3952  0499                     	;# 
  3953  049A                     	;# 
  3954  049B                     	;# 
  3955  049C                     	;# 
  3956  049D                     	;# 
  3957  050C                     	;# 
  3958  050C                     	;# 
  3959  050D                     	;# 
  3960  050E                     	;# 
  3961  050F                     	;# 
  3962  050F                     	;# 
  3963  0510                     	;# 
  3964  0511                     	;# 
  3965  0512                     	;# 
  3966  0512                     	;# 
  3967  0513                     	;# 
  3968  0514                     	;# 
  3969  0515                     	;# 
  3970  0515                     	;# 
  3971  0516                     	;# 
  3972  0517                     	;# 
  3973  0518                     	;# 
  3974  0519                     	;# 
  3975  051A                     	;# 
  3976  051B                     	;# 
  3977  051C                     	;# 
  3978  051D                     	;# 
  3979  058C                     	;# 
  3980  058C                     	;# 
  3981  058D                     	;# 
  3982  058E                     	;# 
  3983  058F                     	;# 
  3984  058F                     	;# 
  3985  0590                     	;# 
  3986  0591                     	;# 
  3987  0592                     	;# 
  3988  0593                     	;# 
  3989  060C                     	;# 
  3990  060D                     	;# 
  3991  060E                     	;# 
  3992  060F                     	;# 
  3993  0610                     	;# 
  3994  0611                     	;# 
  3995  0612                     	;# 
  3996  0613                     	;# 
  3997  0614                     	;# 
  3998  0616                     	;# 
  3999  0617                     	;# 
  4000  0618                     	;# 
  4001  0619                     	;# 
  4002  061A                     	;# 
  4003  061B                     	;# 
  4004  061C                     	;# 
  4005  061D                     	;# 
  4006  061E                     	;# 
  4007  068C                     	;# 
  4008  068D                     	;# 
  4009  068E                     	;# 
  4010  068F                     	;# 
  4011  0690                     	;# 
  4012  0691                     	;# 
  4013  0692                     	;# 
  4014  0693                     	;# 
  4015  0694                     	;# 
  4016  070C                     	;# 
  4017  070D                     	;# 
  4018  070E                     	;# 
  4019  070F                     	;# 
  4020  0710                     	;# 
  4021  0711                     	;# 
  4022  0712                     	;# 
  4023  0713                     	;# 
  4024  0714                     	;# 
  4025  0716                     	;# 
  4026  0717                     	;# 
  4027  0718                     	;# 
  4028  0719                     	;# 
  4029  071A                     	;# 
  4030  071B                     	;# 
  4031  071C                     	;# 
  4032  071D                     	;# 
  4033  071E                     	;# 
  4034  0796                     	;# 
  4035  0797                     	;# 
  4036  0798                     	;# 
  4037  0799                     	;# 
  4038  079A                     	;# 
  4039  079B                     	;# 
  4040  080C                     	;# 
  4041  080D                     	;# 
  4042  080E                     	;# 
  4043  080F                     	;# 
  4044  0810                     	;# 
  4045  0811                     	;# 
  4046  0812                     	;# 
  4047  0813                     	;# 
  4048  0814                     	;# 
  4049  081A                     	;# 
  4050  081B                     	;# 
  4051  081C                     	;# 
  4052  081D                     	;# 
  4053  081E                     	;# 
  4054  081F                     	;# 
  4055  088C                     	;# 
  4056  088D                     	;# 
  4057  088E                     	;# 
  4058  088F                     	;# 
  4059  0890                     	;# 
  4060  0891                     	;# 
  4061  0892                     	;# 
  4062  0893                     	;# 
  4063  0895                     	;# 
  4064  0896                     	;# 
  4065  0897                     	;# 
  4066  0898                     	;# 
  4067  0899                     	;# 
  4068  089A                     	;# 
  4069  089B                     	;# 
  4070  090C                     	;# 
  4071  090E                     	;# 
  4072  090F                     	;# 
  4073  091F                     	;# 
  4074  091F                     	;# 
  4075  098F                     	;# 
  4076  098F                     	;# 
  4077  0990                     	;# 
  4078  0991                     	;# 
  4079  0992                     	;# 
  4080  0993                     	;# 
  4081  0994                     	;# 
  4082  0995                     	;# 
  4083  0996                     	;# 
  4084  0997                     	;# 
  4085  0E0F                     	;# 
  4086  0E10                     	;# 
  4087  0E11                     	;# 
  4088  0E12                     	;# 
  4089  0E13                     	;# 
  4090  0E14                     	;# 
  4091  0E15                     	;# 
  4092  0E16                     	;# 
  4093  0E17                     	;# 
  4094  0E18                     	;# 
  4095  0E19                     	;# 
  4096  0E1A                     	;# 
  4097  0E1B                     	;# 
  4098  0E1C                     	;# 
  4099  0E1D                     	;# 
  4100  0E1E                     	;# 
  4101  0E1F                     	;# 
  4102  0E20                     	;# 
  4103  0E21                     	;# 
  4104  0E22                     	;# 
  4105  0E23                     	;# 
  4106  0E24                     	;# 
  4107  0E25                     	;# 
  4108  0E26                     	;# 
  4109  0E27                     	;# 
  4110  0E28                     	;# 
  4111  0E29                     	;# 
  4112  0E2A                     	;# 
  4113  0E2B                     	;# 
  4114  0E2C                     	;# 
  4115  0E2D                     	;# 
  4116  0E2E                     	;# 
  4117  0E2F                     	;# 
  4118  0E30                     	;# 
  4119  0E31                     	;# 
  4120  0E32                     	;# 
  4121  0E33                     	;# 
  4122  0E34                     	;# 
  4123  0E35                     	;# 
  4124  0E36                     	;# 
  4125  0E37                     	;# 
  4126  0E8F                     	;# 
  4127  0E90                     	;# 
  4128  0E91                     	;# 
  4129  0E92                     	;# 
  4130  0E93                     	;# 
  4131  0E94                     	;# 
  4132  0E95                     	;# 
  4133  0E96                     	;# 
  4134  0E97                     	;# 
  4135  0E9C                     	;# 
  4136  0E9D                     	;# 
  4137  0E9E                     	;# 
  4138  0EA1                     	;# 
  4139  0EA2                     	;# 
  4140  0EA3                     	;# 
  4141  0EA4                     	;# 
  4142  0EA5                     	;# 
  4143  0EA9                     	;# 
  4144  0EAA                     	;# 
  4145  0EAB                     	;# 
  4146  0EAC                     	;# 
  4147  0EB1                     	;# 
  4148  0EB2                     	;# 
  4149  0EB3                     	;# 
  4150  0EB8                     	;# 
  4151  0EB9                     	;# 
  4152  0EBA                     	;# 
  4153  0EBB                     	;# 
  4154  0EBC                     	;# 
  4155  0EBD                     	;# 
  4156  0EBE                     	;# 
  4157  0EC3                     	;# 
  4158  0EC5                     	;# 
  4159  0EC6                     	;# 
  4160  0EC7                     	;# 
  4161  0EC8                     	;# 
  4162  0EC9                     	;# 
  4163  0ECA                     	;# 
  4164  0ECB                     	;# 
  4165  0ECC                     	;# 
  4166  0F10                     	;# 
  4167  0F11                     	;# 
  4168  0F12                     	;# 
  4169  0F13                     	;# 
  4170  0F14                     	;# 
  4171  0F15                     	;# 
  4172  0F16                     	;# 
  4173  0F17                     	;# 
  4174  0F18                     	;# 
  4175  0F19                     	;# 
  4176  0F1A                     	;# 
  4177  0F1B                     	;# 
  4178  0F1C                     	;# 
  4179  0F1D                     	;# 
  4180  0F1E                     	;# 
  4181  0F1F                     	;# 
  4182  0F20                     	;# 
  4183  0F21                     	;# 
  4184  0F22                     	;# 
  4185  0F23                     	;# 
  4186  0F24                     	;# 
  4187  0F25                     	;# 
  4188  0F26                     	;# 
  4189  0F27                     	;# 
  4190  0F38                     	;# 
  4191  0F39                     	;# 
  4192  0F3A                     	;# 
  4193  0F3B                     	;# 
  4194  0F3C                     	;# 
  4195  0F3D                     	;# 
  4196  0F3E                     	;# 
  4197  0F3F                     	;# 
  4198  0F40                     	;# 
  4199  0F41                     	;# 
  4200  0F43                     	;# 
  4201  0F44                     	;# 
  4202  0F45                     	;# 
  4203  0F46                     	;# 
  4204  0F47                     	;# 
  4205  0F48                     	;# 
  4206  0F49                     	;# 
  4207  0F4A                     	;# 
  4208  0F4B                     	;# 
  4209  0F4C                     	;# 
  4210  0F4E                     	;# 
  4211  0F4F                     	;# 
  4212  0F50                     	;# 
  4213  0F51                     	;# 
  4214  0F52                     	;# 
  4215  0F53                     	;# 
  4216  0F54                     	;# 
  4217  0F55                     	;# 
  4218  0F56                     	;# 
  4219  0F57                     	;# 
  4220  0F65                     	;# 
  4221  0F68                     	;# 
  4222  0F69                     	;# 
  4223  0F6A                     	;# 
  4224  0F6B                     	;# 
  4225  0FE4                     	;# 
  4226  0FE5                     	;# 
  4227  0FE6                     	;# 
  4228  0FE7                     	;# 
  4229  0FE8                     	;# 
  4230  0FE9                     	;# 
  4231  0FEA                     	;# 
  4232  0FEB                     	;# 
  4233  0FED                     	;# 
  4234  0FEE                     	;# 
  4235  0FEF                     	;# 
  4236  0000                     	;# 
  4237  0001                     	;# 
  4238  0002                     	;# 
  4239  0003                     	;# 
  4240  0004                     	;# 
  4241  0005                     	;# 
  4242  0006                     	;# 
  4243  0007                     	;# 
  4244  0008                     	;# 
  4245  0009                     	;# 
  4246  000A                     	;# 
  4247  000B                     	;# 
  4248  000C                     	;# 
  4249  000D                     	;# 
  4250  000E                     	;# 
  4251  0010                     	;# 
  4252  0011                     	;# 
  4253  0012                     	;# 
  4254  0013                     	;# 
  4255  0016                     	;# 
  4256  0017                     	;# 
  4257  0018                     	;# 
  4258  001C                     	;# 
  4259  001C                     	;# 
  4260  001D                     	;# 
  4261  001D                     	;# 
  4262  001E                     	;# 
  4263  001F                     	;# 
  4264  008C                     	;# 
  4265  008C                     	;# 
  4266  008D                     	;# 
  4267  008E                     	;# 
  4268  008E                     	;# 
  4269  008F                     	;# 
  4270  0090                     	;# 
  4271  0090                     	;# 
  4272  0091                     	;# 
  4273  0093                     	;# 
  4274  0094                     	;# 
  4275  0095                     	;# 
  4276  0096                     	;# 
  4277  0097                     	;# 
  4278  0098                     	;# 
  4279  0099                     	;# 
  4280  009A                     	;# 
  4281  009B                     	;# 
  4282  009C                     	;# 
  4283  009D                     	;# 
  4284  009E                     	;# 
  4285  010C                     	;# 
  4286  010D                     	;# 
  4287  010E                     	;# 
  4288  010E                     	;# 
  4289  010F                     	;# 
  4290  0110                     	;# 
  4291  0110                     	;# 
  4292  0111                     	;# 
  4293  0112                     	;# 
  4294  0112                     	;# 
  4295  0113                     	;# 
  4296  0114                     	;# 
  4297  0114                     	;# 
  4298  0115                     	;# 
  4299  0116                     	;# 
  4300  0116                     	;# 
  4301  0117                     	;# 
  4302  0119                     	;# 
  4303  0119                     	;# 
  4304  0119                     	;# 
  4305  011A                     	;# 
  4306  011A                     	;# 
  4307  011A                     	;# 
  4308  011B                     	;# 
  4309  011B                     	;# 
  4310  011B                     	;# 
  4311  011B                     	;# 
  4312  011B                     	;# 
  4313  011C                     	;# 
  4314  011C                     	;# 
  4315  011C                     	;# 
  4316  011D                     	;# 
  4317  011D                     	;# 
  4318  011D                     	;# 
  4319  011E                     	;# 
  4320  011E                     	;# 
  4321  011E                     	;# 
  4322  011F                     	;# 
  4323  011F                     	;# 
  4324  011F                     	;# 
  4325  011F                     	;# 
  4326  011F                     	;# 
  4327  018C                     	;# 
  4328  018D                     	;# 
  4329  018E                     	;# 
  4330  018F                     	;# 
  4331  0190                     	;# 
  4332  0191                     	;# 
  4333  0192                     	;# 
  4334  0196                     	;# 
  4335  0197                     	;# 
  4336  0198                     	;# 
  4337  0199                     	;# 
  4338  019A                     	;# 
  4339  019B                     	;# 
  4340  019C                     	;# 
  4341  020C                     	;# 
  4342  020C                     	;# 
  4343  020D                     	;# 
  4344  020E                     	;# 
  4345  020F                     	;# 
  4346  020F                     	;# 
  4347  0210                     	;# 
  4348  0210                     	;# 
  4349  0211                     	;# 
  4350  0211                     	;# 
  4351  0212                     	;# 
  4352  0212                     	;# 
  4353  0213                     	;# 
  4354  0214                     	;# 
  4355  0215                     	;# 
  4356  0215                     	;# 
  4357  0216                     	;# 
  4358  0216                     	;# 
  4359  0217                     	;# 
  4360  0217                     	;# 
  4361  0218                     	;# 
  4362  0218                     	;# 
  4363  0219                     	;# 
  4364  021A                     	;# 
  4365  021B                     	;# 
  4366  021B                     	;# 
  4367  021C                     	;# 
  4368  021C                     	;# 
  4369  021D                     	;# 
  4370  021D                     	;# 
  4371  021E                     	;# 
  4372  021F                     	;# 
  4373  028C                     	;# 
  4374  028C                     	;# 
  4375  028D                     	;# 
  4376  028D                     	;# 
  4377  028E                     	;# 
  4378  028F                     	;# 
  4379  0290                     	;# 
  4380  0290                     	;# 
  4381  0291                     	;# 
  4382  0292                     	;# 
  4383  0292                     	;# 
  4384  0293                     	;# 
  4385  0293                     	;# 
  4386  0294                     	;# 
  4387  0295                     	;# 
  4388  0296                     	;# 
  4389  0296                     	;# 
  4390  0297                     	;# 
  4391  0298                     	;# 
  4392  0298                     	;# 
  4393  0299                     	;# 
  4394  0299                     	;# 
  4395  029A                     	;# 
  4396  029B                     	;# 
  4397  029C                     	;# 
  4398  029C                     	;# 
  4399  029D                     	;# 
  4400  030C                     	;# 
  4401  030C                     	;# 
  4402  030D                     	;# 
  4403  030E                     	;# 
  4404  030F                     	;# 
  4405  0310                     	;# 
  4406  0310                     	;# 
  4407  0311                     	;# 
  4408  0312                     	;# 
  4409  0313                     	;# 
  4410  0314                     	;# 
  4411  0314                     	;# 
  4412  0315                     	;# 
  4413  0316                     	;# 
  4414  0317                     	;# 
  4415  0318                     	;# 
  4416  0318                     	;# 
  4417  0319                     	;# 
  4418  031A                     	;# 
  4419  031B                     	;# 
  4420  031C                     	;# 
  4421  031C                     	;# 
  4422  031D                     	;# 
  4423  031E                     	;# 
  4424  031F                     	;# 
  4425  038C                     	;# 
  4426  038D                     	;# 
  4427  038E                     	;# 
  4428  0390                     	;# 
  4429  0391                     	;# 
  4430  0392                     	;# 
  4431  040C                     	;# 
  4432  040D                     	;# 
  4433  040E                     	;# 
  4434  040F                     	;# 
  4435  0410                     	;# 
  4436  0411                     	;# 
  4437  0416                     	;# 
  4438  0416                     	;# 
  4439  0417                     	;# 
  4440  0418                     	;# 
  4441  0418                     	;# 
  4442  0419                     	;# 
  4443  041A                     	;# 
  4444  041A                     	;# 
  4445  041B                     	;# 
  4446  041C                     	;# 
  4447  041C                     	;# 
  4448  041D                     	;# 
  4449  041E                     	;# 
  4450  041F                     	;# 
  4451  048C                     	;# 
  4452  048C                     	;# 
  4453  048D                     	;# 
  4454  048E                     	;# 
  4455  048F                     	;# 
  4456  048F                     	;# 
  4457  0490                     	;# 
  4458  0491                     	;# 
  4459  0492                     	;# 
  4460  0492                     	;# 
  4461  0493                     	;# 
  4462  0494                     	;# 
  4463  0495                     	;# 
  4464  0495                     	;# 
  4465  0496                     	;# 
  4466  0497                     	;# 
  4467  0498                     	;# 
  4468  0499                     	;# 
  4469  049A                     	;# 
  4470  049B                     	;# 
  4471  049C                     	;# 
  4472  049D                     	;# 
  4473  050C                     	;# 
  4474  050C                     	;# 
  4475  050D                     	;# 
  4476  050E                     	;# 
  4477  050F                     	;# 
  4478  050F                     	;# 
  4479  0510                     	;# 
  4480  0511                     	;# 
  4481  0512                     	;# 
  4482  0512                     	;# 
  4483  0513                     	;# 
  4484  0514                     	;# 
  4485  0515                     	;# 
  4486  0515                     	;# 
  4487  0516                     	;# 
  4488  0517                     	;# 
  4489  0518                     	;# 
  4490  0519                     	;# 
  4491  051A                     	;# 
  4492  051B                     	;# 
  4493  051C                     	;# 
  4494  051D                     	;# 
  4495  058C                     	;# 
  4496  058C                     	;# 
  4497  058D                     	;# 
  4498  058E                     	;# 
  4499  058F                     	;# 
  4500  058F                     	;# 
  4501  0590                     	;# 
  4502  0591                     	;# 
  4503  0592                     	;# 
  4504  0593                     	;# 
  4505  060C                     	;# 
  4506  060D                     	;# 
  4507  060E                     	;# 
  4508  060F                     	;# 
  4509  0610                     	;# 
  4510  0611                     	;# 
  4511  0612                     	;# 
  4512  0613                     	;# 
  4513  0614                     	;# 
  4514  0616                     	;# 
  4515  0617                     	;# 
  4516  0618                     	;# 
  4517  0619                     	;# 
  4518  061A                     	;# 
  4519  061B                     	;# 
  4520  061C                     	;# 
  4521  061D                     	;# 
  4522  061E                     	;# 
  4523  068C                     	;# 
  4524  068D                     	;# 
  4525  068E                     	;# 
  4526  068F                     	;# 
  4527  0690                     	;# 
  4528  0691                     	;# 
  4529  0692                     	;# 
  4530  0693                     	;# 
  4531  0694                     	;# 
  4532  070C                     	;# 
  4533  070D                     	;# 
  4534  070E                     	;# 
  4535  070F                     	;# 
  4536  0710                     	;# 
  4537  0711                     	;# 
  4538  0712                     	;# 
  4539  0713                     	;# 
  4540  0714                     	;# 
  4541  0716                     	;# 
  4542  0717                     	;# 
  4543  0718                     	;# 
  4544  0719                     	;# 
  4545  071A                     	;# 
  4546  071B                     	;# 
  4547  071C                     	;# 
  4548  071D                     	;# 
  4549  071E                     	;# 
  4550  0796                     	;# 
  4551  0797                     	;# 
  4552  0798                     	;# 
  4553  0799                     	;# 
  4554  079A                     	;# 
  4555  079B                     	;# 
  4556  080C                     	;# 
  4557  080D                     	;# 
  4558  080E                     	;# 
  4559  080F                     	;# 
  4560  0810                     	;# 
  4561  0811                     	;# 
  4562  0812                     	;# 
  4563  0813                     	;# 
  4564  0814                     	;# 
  4565  081A                     	;# 
  4566  081B                     	;# 
  4567  081C                     	;# 
  4568  081D                     	;# 
  4569  081E                     	;# 
  4570  081F                     	;# 
  4571  088C                     	;# 
  4572  088D                     	;# 
  4573  088E                     	;# 
  4574  088F                     	;# 
  4575  0890                     	;# 
  4576  0891                     	;# 
  4577  0892                     	;# 
  4578  0893                     	;# 
  4579  0895                     	;# 
  4580  0896                     	;# 
  4581  0897                     	;# 
  4582  0898                     	;# 
  4583  0899                     	;# 
  4584  089A                     	;# 
  4585  089B                     	;# 
  4586  090C                     	;# 
  4587  090E                     	;# 
  4588  090F                     	;# 
  4589  091F                     	;# 
  4590  091F                     	;# 
  4591  098F                     	;# 
  4592  098F                     	;# 
  4593  0990                     	;# 
  4594  0991                     	;# 
  4595  0992                     	;# 
  4596  0993                     	;# 
  4597  0994                     	;# 
  4598  0995                     	;# 
  4599  0996                     	;# 
  4600  0997                     	;# 
  4601  0E0F                     	;# 
  4602  0E10                     	;# 
  4603  0E11                     	;# 
  4604  0E12                     	;# 
  4605  0E13                     	;# 
  4606  0E14                     	;# 
  4607  0E15                     	;# 
  4608  0E16                     	;# 
  4609  0E17                     	;# 
  4610  0E18                     	;# 
  4611  0E19                     	;# 
  4612  0E1A                     	;# 
  4613  0E1B                     	;# 
  4614  0E1C                     	;# 
  4615  0E1D                     	;# 
  4616  0E1E                     	;# 
  4617  0E1F                     	;# 
  4618  0E20                     	;# 
  4619  0E21                     	;# 
  4620  0E22                     	;# 
  4621  0E23                     	;# 
  4622  0E24                     	;# 
  4623  0E25                     	;# 
  4624  0E26                     	;# 
  4625  0E27                     	;# 
  4626  0E28                     	;# 
  4627  0E29                     	;# 
  4628  0E2A                     	;# 
  4629  0E2B                     	;# 
  4630  0E2C                     	;# 
  4631  0E2D                     	;# 
  4632  0E2E                     	;# 
  4633  0E2F                     	;# 
  4634  0E30                     	;# 
  4635  0E31                     	;# 
  4636  0E32                     	;# 
  4637  0E33                     	;# 
  4638  0E34                     	;# 
  4639  0E35                     	;# 
  4640  0E36                     	;# 
  4641  0E37                     	;# 
  4642  0E8F                     	;# 
  4643  0E90                     	;# 
  4644  0E91                     	;# 
  4645  0E92                     	;# 
  4646  0E93                     	;# 
  4647  0E94                     	;# 
  4648  0E95                     	;# 
  4649  0E96                     	;# 
  4650  0E97                     	;# 
  4651  0E9C                     	;# 
  4652  0E9D                     	;# 
  4653  0E9E                     	;# 
  4654  0EA1                     	;# 
  4655  0EA2                     	;# 
  4656  0EA3                     	;# 
  4657  0EA4                     	;# 
  4658  0EA5                     	;# 
  4659  0EA9                     	;# 
  4660  0EAA                     	;# 
  4661  0EAB                     	;# 
  4662  0EAC                     	;# 
  4663  0EB1                     	;# 
  4664  0EB2                     	;# 
  4665  0EB3                     	;# 
  4666  0EB8                     	;# 
  4667  0EB9                     	;# 
  4668  0EBA                     	;# 
  4669  0EBB                     	;# 
  4670  0EBC                     	;# 
  4671  0EBD                     	;# 
  4672  0EBE                     	;# 
  4673  0EC3                     	;# 
  4674  0EC5                     	;# 
  4675  0EC6                     	;# 
  4676  0EC7                     	;# 
  4677  0EC8                     	;# 
  4678  0EC9                     	;# 
  4679  0ECA                     	;# 
  4680  0ECB                     	;# 
  4681  0ECC                     	;# 
  4682  0F10                     	;# 
  4683  0F11                     	;# 
  4684  0F12                     	;# 
  4685  0F13                     	;# 
  4686  0F14                     	;# 
  4687  0F15                     	;# 
  4688  0F16                     	;# 
  4689  0F17                     	;# 
  4690  0F18                     	;# 
  4691  0F19                     	;# 
  4692  0F1A                     	;# 
  4693  0F1B                     	;# 
  4694  0F1C                     	;# 
  4695  0F1D                     	;# 
  4696  0F1E                     	;# 
  4697  0F1F                     	;# 
  4698  0F20                     	;# 
  4699  0F21                     	;# 
  4700  0F22                     	;# 
  4701  0F23                     	;# 
  4702  0F24                     	;# 
  4703  0F25                     	;# 
  4704  0F26                     	;# 
  4705  0F27                     	;# 
  4706  0F38                     	;# 
  4707  0F39                     	;# 
  4708  0F3A                     	;# 
  4709  0F3B                     	;# 
  4710  0F3C                     	;# 
  4711  0F3D                     	;# 
  4712  0F3E                     	;# 
  4713  0F3F                     	;# 
  4714  0F40                     	;# 
  4715  0F41                     	;# 
  4716  0F43                     	;# 
  4717  0F44                     	;# 
  4718  0F45                     	;# 
  4719  0F46                     	;# 
  4720  0F47                     	;# 
  4721  0F48                     	;# 
  4722  0F49                     	;# 
  4723  0F4A                     	;# 
  4724  0F4B                     	;# 
  4725  0F4C                     	;# 
  4726  0F4E                     	;# 
  4727  0F4F                     	;# 
  4728  0F50                     	;# 
  4729  0F51                     	;# 
  4730  0F52                     	;# 
  4731  0F53                     	;# 
  4732  0F54                     	;# 
  4733  0F55                     	;# 
  4734  0F56                     	;# 
  4735  0F57                     	;# 
  4736  0F65                     	;# 
  4737  0F68                     	;# 
  4738  0F69                     	;# 
  4739  0F6A                     	;# 
  4740  0F6B                     	;# 
  4741  0FE4                     	;# 
  4742  0FE5                     	;# 
  4743  0FE6                     	;# 
  4744  0FE7                     	;# 
  4745  0FE8                     	;# 
  4746  0FE9                     	;# 
  4747  0FEA                     	;# 
  4748  0FEB                     	;# 
  4749  0FED                     	;# 
  4750  0FEE                     	;# 
  4751  0FEF                     	;# 
  4752  0000                     	;# 
  4753  0001                     	;# 
  4754  0002                     	;# 
  4755  0003                     	;# 
  4756  0004                     	;# 
  4757  0005                     	;# 
  4758  0006                     	;# 
  4759  0007                     	;# 
  4760  0008                     	;# 
  4761  0009                     	;# 
  4762  000A                     	;# 
  4763  000B                     	;# 
  4764  000C                     	;# 
  4765  000D                     	;# 
  4766  000E                     	;# 
  4767  0010                     	;# 
  4768  0011                     	;# 
  4769  0012                     	;# 
  4770  0013                     	;# 
  4771  0016                     	;# 
  4772  0017                     	;# 
  4773  0018                     	;# 
  4774  001C                     	;# 
  4775  001C                     	;# 
  4776  001D                     	;# 
  4777  001D                     	;# 
  4778  001E                     	;# 
  4779  001F                     	;# 
  4780  008C                     	;# 
  4781  008C                     	;# 
  4782  008D                     	;# 
  4783  008E                     	;# 
  4784  008E                     	;# 
  4785  008F                     	;# 
  4786  0090                     	;# 
  4787  0090                     	;# 
  4788  0091                     	;# 
  4789  0093                     	;# 
  4790  0094                     	;# 
  4791  0095                     	;# 
  4792  0096                     	;# 
  4793  0097                     	;# 
  4794  0098                     	;# 
  4795  0099                     	;# 
  4796  009A                     	;# 
  4797  009B                     	;# 
  4798  009C                     	;# 
  4799  009D                     	;# 
  4800  009E                     	;# 
  4801  010C                     	;# 
  4802  010D                     	;# 
  4803  010E                     	;# 
  4804  010E                     	;# 
  4805  010F                     	;# 
  4806  0110                     	;# 
  4807  0110                     	;# 
  4808  0111                     	;# 
  4809  0112                     	;# 
  4810  0112                     	;# 
  4811  0113                     	;# 
  4812  0114                     	;# 
  4813  0114                     	;# 
  4814  0115                     	;# 
  4815  0116                     	;# 
  4816  0116                     	;# 
  4817  0117                     	;# 
  4818  0119                     	;# 
  4819  0119                     	;# 
  4820  0119                     	;# 
  4821  011A                     	;# 
  4822  011A                     	;# 
  4823  011A                     	;# 
  4824  011B                     	;# 
  4825  011B                     	;# 
  4826  011B                     	;# 
  4827  011B                     	;# 
  4828  011B                     	;# 
  4829  011C                     	;# 
  4830  011C                     	;# 
  4831  011C                     	;# 
  4832  011D                     	;# 
  4833  011D                     	;# 
  4834  011D                     	;# 
  4835  011E                     	;# 
  4836  011E                     	;# 
  4837  011E                     	;# 
  4838  011F                     	;# 
  4839  011F                     	;# 
  4840  011F                     	;# 
  4841  011F                     	;# 
  4842  011F                     	;# 
  4843  018C                     	;# 
  4844  018D                     	;# 
  4845  018E                     	;# 
  4846  018F                     	;# 
  4847  0190                     	;# 
  4848  0191                     	;# 
  4849  0192                     	;# 
  4850  0196                     	;# 
  4851  0197                     	;# 
  4852  0198                     	;# 
  4853  0199                     	;# 
  4854  019A                     	;# 
  4855  019B                     	;# 
  4856  019C                     	;# 
  4857  020C                     	;# 
  4858  020C                     	;# 
  4859  020D                     	;# 
  4860  020E                     	;# 
  4861  020F                     	;# 
  4862  020F                     	;# 
  4863  0210                     	;# 
  4864  0210                     	;# 
  4865  0211                     	;# 
  4866  0211                     	;# 
  4867  0212                     	;# 
  4868  0212                     	;# 
  4869  0213                     	;# 
  4870  0214                     	;# 
  4871  0215                     	;# 
  4872  0215                     	;# 
  4873  0216                     	;# 
  4874  0216                     	;# 
  4875  0217                     	;# 
  4876  0217                     	;# 
  4877  0218                     	;# 
  4878  0218                     	;# 
  4879  0219                     	;# 
  4880  021A                     	;# 
  4881  021B                     	;# 
  4882  021B                     	;# 
  4883  021C                     	;# 
  4884  021C                     	;# 
  4885  021D                     	;# 
  4886  021D                     	;# 
  4887  021E                     	;# 
  4888  021F                     	;# 
  4889  028C                     	;# 
  4890  028C                     	;# 
  4891  028D                     	;# 
  4892  028D                     	;# 
  4893  028E                     	;# 
  4894  028F                     	;# 
  4895  0290                     	;# 
  4896  0290                     	;# 
  4897  0291                     	;# 
  4898  0292                     	;# 
  4899  0292                     	;# 
  4900  0293                     	;# 
  4901  0293                     	;# 
  4902  0294                     	;# 
  4903  0295                     	;# 
  4904  0296                     	;# 
  4905  0296                     	;# 
  4906  0297                     	;# 
  4907  0298                     	;# 
  4908  0298                     	;# 
  4909  0299                     	;# 
  4910  0299                     	;# 
  4911  029A                     	;# 
  4912  029B                     	;# 
  4913  029C                     	;# 
  4914  029C                     	;# 
  4915  029D                     	;# 
  4916  030C                     	;# 
  4917  030C                     	;# 
  4918  030D                     	;# 
  4919  030E                     	;# 
  4920  030F                     	;# 
  4921  0310                     	;# 
  4922  0310                     	;# 
  4923  0311                     	;# 
  4924  0312                     	;# 
  4925  0313                     	;# 
  4926  0314                     	;# 
  4927  0314                     	;# 
  4928  0315                     	;# 
  4929  0316                     	;# 
  4930  0317                     	;# 
  4931  0318                     	;# 
  4932  0318                     	;# 
  4933  0319                     	;# 
  4934  031A                     	;# 
  4935  031B                     	;# 
  4936  031C                     	;# 
  4937  031C                     	;# 
  4938  031D                     	;# 
  4939  031E                     	;# 
  4940  031F                     	;# 
  4941  038C                     	;# 
  4942  038D                     	;# 
  4943  038E                     	;# 
  4944  0390                     	;# 
  4945  0391                     	;# 
  4946  0392                     	;# 
  4947  040C                     	;# 
  4948  040D                     	;# 
  4949  040E                     	;# 
  4950  040F                     	;# 
  4951  0410                     	;# 
  4952  0411                     	;# 
  4953  0416                     	;# 
  4954  0416                     	;# 
  4955  0417                     	;# 
  4956  0418                     	;# 
  4957  0418                     	;# 
  4958  0419                     	;# 
  4959  041A                     	;# 
  4960  041A                     	;# 
  4961  041B                     	;# 
  4962  041C                     	;# 
  4963  041C                     	;# 
  4964  041D                     	;# 
  4965  041E                     	;# 
  4966  041F                     	;# 
  4967  048C                     	;# 
  4968  048C                     	;# 
  4969  048D                     	;# 
  4970  048E                     	;# 
  4971  048F                     	;# 
  4972  048F                     	;# 
  4973  0490                     	;# 
  4974  0491                     	;# 
  4975  0492                     	;# 
  4976  0492                     	;# 
  4977  0493                     	;# 
  4978  0494                     	;# 
  4979  0495                     	;# 
  4980  0495                     	;# 
  4981  0496                     	;# 
  4982  0497                     	;# 
  4983  0498                     	;# 
  4984  0499                     	;# 
  4985  049A                     	;# 
  4986  049B                     	;# 
  4987  049C                     	;# 
  4988  049D                     	;# 
  4989  050C                     	;# 
  4990  050C                     	;# 
  4991  050D                     	;# 
  4992  050E                     	;# 
  4993  050F                     	;# 
  4994  050F                     	;# 
  4995  0510                     	;# 
  4996  0511                     	;# 
  4997  0512                     	;# 
  4998  0512                     	;# 
  4999  0513                     	;# 
  5000  0514                     	;# 
  5001  0515                     	;# 
  5002  0515                     	;# 
  5003  0516                     	;# 
  5004  0517                     	;# 
  5005  0518                     	;# 
  5006  0519                     	;# 
  5007  051A                     	;# 
  5008  051B                     	;# 
  5009  051C                     	;# 
  5010  051D                     	;# 
  5011  058C                     	;# 
  5012  058C                     	;# 
  5013  058D                     	;# 
  5014  058E                     	;# 
  5015  058F                     	;# 
  5016  058F                     	;# 
  5017  0590                     	;# 
  5018  0591                     	;# 
  5019  0592                     	;# 
  5020  0593                     	;# 
  5021  060C                     	;# 
  5022  060D                     	;# 
  5023  060E                     	;# 
  5024  060F                     	;# 
  5025  0610                     	;# 
  5026  0611                     	;# 
  5027  0612                     	;# 
  5028  0613                     	;# 
  5029  0614                     	;# 
  5030  0616                     	;# 
  5031  0617                     	;# 
  5032  0618                     	;# 
  5033  0619                     	;# 
  5034  061A                     	;# 
  5035  061B                     	;# 
  5036  061C                     	;# 
  5037  061D                     	;# 
  5038  061E                     	;# 
  5039  068C                     	;# 
  5040  068D                     	;# 
  5041  068E                     	;# 
  5042  068F                     	;# 
  5043  0690                     	;# 
  5044  0691                     	;# 
  5045  0692                     	;# 
  5046  0693                     	;# 
  5047  0694                     	;# 
  5048  070C                     	;# 
  5049  070D                     	;# 
  5050  070E                     	;# 
  5051  070F                     	;# 
  5052  0710                     	;# 
  5053  0711                     	;# 
  5054  0712                     	;# 
  5055  0713                     	;# 
  5056  0714                     	;# 
  5057  0716                     	;# 
  5058  0717                     	;# 
  5059  0718                     	;# 
  5060  0719                     	;# 
  5061  071A                     	;# 
  5062  071B                     	;# 
  5063  071C                     	;# 
  5064  071D                     	;# 
  5065  071E                     	;# 
  5066  0796                     	;# 
  5067  0797                     	;# 
  5068  0798                     	;# 
  5069  0799                     	;# 
  5070  079A                     	;# 
  5071  079B                     	;# 
  5072  080C                     	;# 
  5073  080D                     	;# 
  5074  080E                     	;# 
  5075  080F                     	;# 
  5076  0810                     	;# 
  5077  0811                     	;# 
  5078  0812                     	;# 
  5079  0813                     	;# 
  5080  0814                     	;# 
  5081  081A                     	;# 
  5082  081B                     	;# 
  5083  081C                     	;# 
  5084  081D                     	;# 
  5085  081E                     	;# 
  5086  081F                     	;# 
  5087  088C                     	;# 
  5088  088D                     	;# 
  5089  088E                     	;# 
  5090  088F                     	;# 
  5091  0890                     	;# 
  5092  0891                     	;# 
  5093  0892                     	;# 
  5094  0893                     	;# 
  5095  0895                     	;# 
  5096  0896                     	;# 
  5097  0897                     	;# 
  5098  0898                     	;# 
  5099  0899                     	;# 
  5100  089A                     	;# 
  5101  089B                     	;# 
  5102  090C                     	;# 
  5103  090E                     	;# 
  5104  090F                     	;# 
  5105  091F                     	;# 
  5106  091F                     	;# 
  5107  098F                     	;# 
  5108  098F                     	;# 
  5109  0990                     	;# 
  5110  0991                     	;# 
  5111  0992                     	;# 
  5112  0993                     	;# 
  5113  0994                     	;# 
  5114  0995                     	;# 
  5115  0996                     	;# 
  5116  0997                     	;# 
  5117  0E0F                     	;# 
  5118  0E10                     	;# 
  5119  0E11                     	;# 
  5120  0E12                     	;# 
  5121  0E13                     	;# 
  5122  0E14                     	;# 
  5123  0E15                     	;# 
  5124  0E16                     	;# 
  5125  0E17                     	;# 
  5126  0E18                     	;# 
  5127  0E19                     	;# 
  5128  0E1A                     	;# 
  5129  0E1B                     	;# 
  5130  0E1C                     	;# 
  5131  0E1D                     	;# 
  5132  0E1E                     	;# 
  5133  0E1F                     	;# 
  5134  0E20                     	;# 
  5135  0E21                     	;# 
  5136  0E22                     	;# 
  5137  0E23                     	;# 
  5138  0E24                     	;# 
  5139  0E25                     	;# 
  5140  0E26                     	;# 
  5141  0E27                     	;# 
  5142  0E28                     	;# 
  5143  0E29                     	;# 
  5144  0E2A                     	;# 
  5145  0E2B                     	;# 
  5146  0E2C                     	;# 
  5147  0E2D                     	;# 
  5148  0E2E                     	;# 
  5149  0E2F                     	;# 
  5150  0E30                     	;# 
  5151  0E31                     	;# 
  5152  0E32                     	;# 
  5153  0E33                     	;# 
  5154  0E34                     	;# 
  5155  0E35                     	;# 
  5156  0E36                     	;# 
  5157  0E37                     	;# 
  5158  0E8F                     	;# 
  5159  0E90                     	;# 
  5160  0E91                     	;# 
  5161  0E92                     	;# 
  5162  0E93                     	;# 
  5163  0E94                     	;# 
  5164  0E95                     	;# 
  5165  0E96                     	;# 
  5166  0E97                     	;# 
  5167  0E9C                     	;# 
  5168  0E9D                     	;# 
  5169  0E9E                     	;# 
  5170  0EA1                     	;# 
  5171  0EA2                     	;# 
  5172  0EA3                     	;# 
  5173  0EA4                     	;# 
  5174  0EA5                     	;# 
  5175  0EA9                     	;# 
  5176  0EAA                     	;# 
  5177  0EAB                     	;# 
  5178  0EAC                     	;# 
  5179  0EB1                     	;# 
  5180  0EB2                     	;# 
  5181  0EB3                     	;# 
  5182  0EB8                     	;# 
  5183  0EB9                     	;# 
  5184  0EBA                     	;# 
  5185  0EBB                     	;# 
  5186  0EBC                     	;# 
  5187  0EBD                     	;# 
  5188  0EBE                     	;# 
  5189  0EC3                     	;# 
  5190  0EC5                     	;# 
  5191  0EC6                     	;# 
  5192  0EC7                     	;# 
  5193  0EC8                     	;# 
  5194  0EC9                     	;# 
  5195  0ECA                     	;# 
  5196  0ECB                     	;# 
  5197  0ECC                     	;# 
  5198  0F10                     	;# 
  5199  0F11                     	;# 
  5200  0F12                     	;# 
  5201  0F13                     	;# 
  5202  0F14                     	;# 
  5203  0F15                     	;# 
  5204  0F16                     	;# 
  5205  0F17                     	;# 
  5206  0F18                     	;# 
  5207  0F19                     	;# 
  5208  0F1A                     	;# 
  5209  0F1B                     	;# 
  5210  0F1C                     	;# 
  5211  0F1D                     	;# 
  5212  0F1E                     	;# 
  5213  0F1F                     	;# 
  5214  0F20                     	;# 
  5215  0F21                     	;# 
  5216  0F22                     	;# 
  5217  0F23                     	;# 
  5218  0F24                     	;# 
  5219  0F25                     	;# 
  5220  0F26                     	;# 
  5221  0F27                     	;# 
  5222  0F38                     	;# 
  5223  0F39                     	;# 
  5224  0F3A                     	;# 
  5225  0F3B                     	;# 
  5226  0F3C                     	;# 
  5227  0F3D                     	;# 
  5228  0F3E                     	;# 
  5229  0F3F                     	;# 
  5230  0F40                     	;# 
  5231  0F41                     	;# 
  5232  0F43                     	;# 
  5233  0F44                     	;# 
  5234  0F45                     	;# 
  5235  0F46                     	;# 
  5236  0F47                     	;# 
  5237  0F48                     	;# 
  5238  0F49                     	;# 
  5239  0F4A                     	;# 
  5240  0F4B                     	;# 
  5241  0F4C                     	;# 
  5242  0F4E                     	;# 
  5243  0F4F                     	;# 
  5244  0F50                     	;# 
  5245  0F51                     	;# 
  5246  0F52                     	;# 
  5247  0F53                     	;# 
  5248  0F54                     	;# 
  5249  0F55                     	;# 
  5250  0F56                     	;# 
  5251  0F57                     	;# 
  5252  0F65                     	;# 
  5253  0F68                     	;# 
  5254  0F69                     	;# 
  5255  0F6A                     	;# 
  5256  0F6B                     	;# 
  5257  0FE4                     	;# 
  5258  0FE5                     	;# 
  5259  0FE6                     	;# 
  5260  0FE7                     	;# 
  5261  0FE8                     	;# 
  5262  0FE9                     	;# 
  5263  0FEA                     	;# 
  5264  0FEB                     	;# 
  5265  0FED                     	;# 
  5266  0FEE                     	;# 
  5267  0FEF                     	;_samples
  5268                           
  5269                           	psect	idataBANK0
  5270  0006                     __pidataBANK0:	
  5271                           
  5272                           ;initializer for _batteryTemp
  5273  0006  34FA               	retlw	250
  5274  0007  3400               	retlw	0
  5275                           
  5276                           	psect	idataBANK2
  5277  1235                     __pidataBANK2:	
  5278                           
  5279                           ;initializer for _channels
  5280  1235  3414               	retlw	20
  5281  1236  3400               	retlw	0
  5282  1237  3410               	retlw	16
  5283  1238  3400               	retlw	0
  5284  1239  3416               	retlw	22
  5285  123A  3400               	retlw	0
  5286  123B  3412               	retlw	18
  5287  123C  3400               	retlw	0
  5288                           
  5289                           	psect	stringtext1
  5290  1000                     __pstringtext1:	
  5291  1000                     _fonts:	
  5292  1000  3400               	retlw	0
  5293  1001  3400               	retlw	0
  5294  1002  3400               	retlw	0
  5295  1003  3400               	retlw	0
  5296  1004  344E               	retlw	78
  5297  1005  3400               	retlw	0
  5298  1006  3406               	retlw	6
  5299  1007  3400               	retlw	0
  5300  1008  3406               	retlw	6
  5301  1009  34FF               	retlw	255
  5302  100A  34FF               	retlw	255
  5303  100B  34FF               	retlw	255
  5304  100C  3448               	retlw	72
  5305  100D  34D6               	retlw	214
  5306  100E  3424               	retlw	36
  5307  100F  3412               	retlw	18
  5308  1010  3408               	retlw	8
  5309  1011  3424               	retlw	36
  5310  1012  34FF               	retlw	255
  5311  1013  34FF               	retlw	255
  5312  1014  34FF               	retlw	255
  5313  1015  3400               	retlw	0
  5314  1016  3406               	retlw	6
  5315  1017  3400               	retlw	0
  5316  1018  3438               	retlw	56
  5317  1019  3444               	retlw	68
  5318  101A  3482               	retlw	130
  5319  101B  3482               	retlw	130
  5320  101C  3444               	retlw	68
  5321  101D  3438               	retlw	56
  5322  101E  3414               	retlw	20
  5323  101F  3408               	retlw	8
  5324  1020  343E               	retlw	62
  5325  1021  3410               	retlw	16
  5326  1022  3438               	retlw	56
  5327  1023  3410               	retlw	16
  5328  1024  34A0               	retlw	160
  5329  1025  3460               	retlw	96
  5330  1026  3400               	retlw	0
  5331  1027  3410               	retlw	16
  5332  1028  3410               	retlw	16
  5333  1029  3410               	retlw	16
  5334  102A  3460               	retlw	96
  5335  102B  3460               	retlw	96
  5336  102C  3400               	retlw	0
  5337  102D  3460               	retlw	96
  5338  102E  3418               	retlw	24
  5339  102F  3406               	retlw	6
  5340  1030  347C               	retlw	124
  5341  1031  3442               	retlw	66
  5342  1032  347C               	retlw	124
  5343  1033  3444               	retlw	68
  5344  1034  347E               	retlw	126
  5345  1035  3440               	retlw	64
  5346  1036  3464               	retlw	100
  5347  1037  3452               	retlw	82
  5348  1038  344C               	retlw	76
  5349  1039  344A               	retlw	74
  5350  103A  344A               	retlw	74
  5351  103B  3434               	retlw	52
  5352  103C  3438               	retlw	56
  5353  103D  3424               	retlw	36
  5354  103E  347E               	retlw	126
  5355  103F  344E               	retlw	78
  5356  1040  344A               	retlw	74
  5357  1041  3432               	retlw	50
  5358  1042  343C               	retlw	60
  5359  1043  344A               	retlw	74
  5360  1044  3432               	retlw	50
  5361  1045  3462               	retlw	98
  5362  1046  341A               	retlw	26
  5363  1047  3406               	retlw	6
  5364  1048  3476               	retlw	118
  5365  1049  344A               	retlw	74
  5366  104A  3476               	retlw	118
  5367  104B  344C               	retlw	76
  5368  104C  3452               	retlw	82
  5369  104D  343C               	retlw	60
  5370  104E  346C               	retlw	108
  5371  104F  346C               	retlw	108
  5372  1050  3400               	retlw	0
  5373  1051  34AC               	retlw	172
  5374  1052  346C               	retlw	108
  5375  1053  3400               	retlw	0
  5376  1054  3410               	retlw	16
  5377  1055  3428               	retlw	40
  5378  1056  3444               	retlw	68
  5379  1057  3428               	retlw	40
  5380  1058  3428               	retlw	40
  5381  1059  3428               	retlw	40
  5382  105A  3444               	retlw	68
  5383  105B  3428               	retlw	40
  5384  105C  3410               	retlw	16
  5385  105D  3402               	retlw	2
  5386  105E  3459               	retlw	89
  5387  105F  3406               	retlw	6
  5388  1060  34FF               	retlw	255
  5389  1061  34FF               	retlw	255
  5390  1062  34FF               	retlw	255
  5391  1063  347C               	retlw	124
  5392  1064  3412               	retlw	18
  5393  1065  347C               	retlw	124
  5394  1066  347E               	retlw	126
  5395  1067  345A               	retlw	90
  5396  1068  3434               	retlw	52
  5397  1069  343C               	retlw	60
  5398  106A  3442               	retlw	66
  5399  106B  3442               	retlw	66
  5400  106C  347E               	retlw	126
  5401  106D  3442               	retlw	66
  5402  106E  343C               	retlw	60
  5403  106F  347E               	retlw	126
  5404  1070  344A               	retlw	74
  5405  1071  3442               	retlw	66
  5406  1072  347E               	retlw	126
  5407  1073  340A               	retlw	10
  5408  1074  340A               	retlw	10
  5409  1075  343C               	retlw	60
  5410  1076  3452               	retlw	82
  5411  1077  3434               	retlw	52
  5412  1078  347E               	retlw	126
  5413  1079  3408               	retlw	8
  5414  107A  347E               	retlw	126
  5415  107B  3442               	retlw	66
  5416  107C  347E               	retlw	126
  5417  107D  3442               	retlw	66
  5418  107E  3430               	retlw	48
  5419  107F  3440               	retlw	64
  5420  1080  343E               	retlw	62
  5421  1081  347E               	retlw	126
  5422  1082  3418               	retlw	24
  5423  1083  3466               	retlw	102
  5424  1084  347E               	retlw	126
  5425  1085  3440               	retlw	64
  5426  1086  3440               	retlw	64
  5427  1087  347E               	retlw	126
  5428  1088  341C               	retlw	28
  5429  1089  347E               	retlw	126
  5430  108A  347E               	retlw	126
  5431  108B  3402               	retlw	2
  5432  108C  347E               	retlw	126
  5433  108D  343C               	retlw	60
  5434  108E  3442               	retlw	66
  5435  108F  343C               	retlw	60
  5436  1090  347E               	retlw	126
  5437  1091  3412               	retlw	18
  5438  1092  340C               	retlw	12
  5439  1093  347E               	retlw	126
  5440  1094  3462               	retlw	98
  5441  1095  34FE               	retlw	254
  5442  1096  347E               	retlw	126
  5443  1097  3432               	retlw	50
  5444  1098  344E               	retlw	78
  5445  1099  3444               	retlw	68
  5446  109A  344A               	retlw	74
  5447  109B  3432               	retlw	50
  5448  109C  3402               	retlw	2
  5449  109D  347E               	retlw	126
  5450  109E  3402               	retlw	2
  5451  109F  347E               	retlw	126
  5452  10A0  3440               	retlw	64
  5453  10A1  347E               	retlw	126
  5454  10A2  343E               	retlw	62
  5455  10A3  3440               	retlw	64
  5456  10A4  343E               	retlw	62
  5457  10A5  347E               	retlw	126
  5458  10A6  3438               	retlw	56
  5459  10A7  347E               	retlw	126
  5460  10A8  3466               	retlw	102
  5461  10A9  3418               	retlw	24
  5462  10AA  3466               	retlw	102
  5463  10AB  340E               	retlw	14
  5464  10AC  3470               	retlw	112
  5465  10AD  340E               	retlw	14
  5466  10AE  3462               	retlw	98
  5467  10AF  345A               	retlw	90
  5468  10B0  3446               	retlw	70
  5469  10B1  3400               	retlw	0
  5470  10B2  347E               	retlw	126
  5471  10B3  3442               	retlw	66
  5472  10B4  3406               	retlw	6
  5473  10B5  3418               	retlw	24
  5474  10B6  3460               	retlw	96
  5475  10B7  3442               	retlw	66
  5476  10B8  347E               	retlw	126
  5477  10B9  3400               	retlw	0
  5478  10BA  3404               	retlw	4
  5479  10BB  3402               	retlw	2
  5480  10BC  3404               	retlw	4
  5481  10BD  3440               	retlw	64
  5482  10BE  3440               	retlw	64
  5483  10BF  3440               	retlw	64
  5484  10C0  3400               	retlw	0
  5485  10C1  3402               	retlw	2
  5486  10C2  3404               	retlw	4
  5487  10C3  3474               	retlw	116
  5488  10C4  3454               	retlw	84
  5489  10C5  3478               	retlw	120
  5490  10C6  347E               	retlw	126
  5491  10C7  3448               	retlw	72
  5492  10C8  3430               	retlw	48
  5493  10C9  3430               	retlw	48
  5494  10CA  3448               	retlw	72
  5495  10CB  3448               	retlw	72
  5496  10CC  3430               	retlw	48
  5497  10CD  3448               	retlw	72
  5498  10CE  347E               	retlw	126
  5499  10CF  3438               	retlw	56
  5500  10D0  3454               	retlw	84
  5501  10D1  3458               	retlw	88
  5502  10D2  347C               	retlw	124
  5503  10D3  340A               	retlw	10
  5504  10D4  3402               	retlw	2
  5505  10D5  3498               	retlw	152
  5506  10D6  34A4               	retlw	164
  5507  10D7  347C               	retlw	124
  5508  10D8  347E               	retlw	126
  5509  10D9  3408               	retlw	8
  5510  10DA  3470               	retlw	112
  5511  10DB  3448               	retlw	72
  5512  10DC  347A               	retlw	122
  5513  10DD  3440               	retlw	64
  5514  10DE  3488               	retlw	136
  5515  10DF  34FA               	retlw	250
  5516  10E0  3400               	retlw	0
  5517  10E1  347E               	retlw	126
  5518  10E2  3418               	retlw	24
  5519  10E3  3464               	retlw	100
  5520  10E4  3442               	retlw	66
  5521  10E5  347E               	retlw	126
  5522  10E6  3440               	retlw	64
  5523  10E7  347C               	retlw	124
  5524  10E8  3438               	retlw	56
  5525  10E9  347C               	retlw	124
  5526  10EA  347C               	retlw	124
  5527  10EB  3404               	retlw	4
  5528  10EC  3478               	retlw	120
  5529  10ED  3438               	retlw	56
  5530  10EE  3444               	retlw	68
  5531  10EF  3438               	retlw	56
  5532  10F0  34FC               	retlw	252
  5533  10F1  3424               	retlw	36
  5534  10F2  3418               	retlw	24
  5535  10F3  3418               	retlw	24
  5536  10F4  3424               	retlw	36
  5537  10F5  34FC               	retlw	252
  5538  10F6  3478               	retlw	120
  5539  10F7  3404               	retlw	4
  5540  10F8  3404               	retlw	4
  5541  10F9  3448               	retlw	72
  5542  10FA  3454               	retlw	84
  5543  10FB  3424               	retlw	36
  5544  10FC  3404               	retlw	4
  5545  10FD  343E               	retlw	62
  5546  10FE  3444               	retlw	68
  5547  10FF  347C               	retlw	124
  5548  1100  3440               	retlw	64
  5549  1101  347C               	retlw	124
  5550  1102  343C               	retlw	60
  5551  1103  3440               	retlw	64
  5552  1104  343C               	retlw	60
  5553  1105  347C               	retlw	124
  5554  1106  3430               	retlw	48
  5555  1107  347C               	retlw	124
  5556  1108  346C               	retlw	108
  5557  1109  3410               	retlw	16
  5558  110A  346C               	retlw	108
  5559  110B  349C               	retlw	156
  5560  110C  34A0               	retlw	160
  5561  110D  347C               	retlw	124
  5562  110E  3464               	retlw	100
  5563  110F  3454               	retlw	84
  5564  1110  344C               	retlw	76
  5565  1111  340C               	retlw	12
  5566  1112  3412               	retlw	18
  5567  1113  340C               	retlw	12
  5568  1114  34FF               	retlw	255
  5569  1115  34FF               	retlw	255
  5570  1116  34FF               	retlw	255
  5571  1117  34FF               	retlw	255
  5572  1118  34FF               	retlw	255
  5573  1119  34FF               	retlw	255
  5574  111A  34FF               	retlw	255
  5575  111B  34FF               	retlw	255
  5576  111C  34FF               	retlw	255
  5577  111D  34FF               	retlw	255
  5578  111E  34FF               	retlw	255
  5579  111F  34FF               	retlw	255
  5580  1120  34FF               	retlw	255
  5581  1121  34FF               	retlw	255
  5582  1122  34FF               	retlw	255
  5583  1123  34FF               	retlw	255
  5584  1124  34FF               	retlw	255
  5585  1125  34FF               	retlw	255
  5586  1126  34FC               	retlw	252
  5587  1127  3440               	retlw	64
  5588  1128  347C               	retlw	124
  5589  1129  34FF               	retlw	255
  5590  112A  34FF               	retlw	255
  5591  112B  34FF               	retlw	255
  5592  112C  34FF               	retlw	255
  5593  112D  34FF               	retlw	255
  5594  112E  34FF               	retlw	255
  5595  112F                     __end_of_fonts:	
  5596                           
  5597                           	psect	stringtext2
  5598  1800                     __pstringtext2:	
  5599  1800                     log@coeff:	
  5600  1800  3400               	retlw	0
  5601  1801  3400               	retlw	0
  5602  1802  3400               	retlw	0
  5603  1803  3400               	retlw	0
  5604  1804  3480               	retlw	128
  5605  1805  343F               	retlw	63
  5606  1806  34F0               	retlw	240
  5607  1807  34FF               	retlw	255
  5608  1808  34BE               	retlw	190
  5609  1809  34E2               	retlw	226
  5610  180A  34A9               	retlw	169
  5611  180B  343E               	retlw	62
  5612  180C  3483               	retlw	131
  5613  180D  3476               	retlw	118
  5614  180E  34BE               	retlw	190
  5615  180F  34AE               	retlw	174
  5616  1810  342B               	retlw	43
  5617  1811  343E               	retlw	62
  5618  1812  343C               	retlw	60
  5619  1813  34C3               	retlw	195
  5620  1814  34BD               	retlw	189
  5621  1815  34D2               	retlw	210
  5622  1816  3413               	retlw	19
  5623  1817  343D               	retlw	61
  5624  1818  3478               	retlw	120
  5625  1819  34D3               	retlw	211
  5626  181A  34BB               	retlw	187
  5627  181B                     __end_oflog@coeff:	
  5628  0013                     _TRISC	set	19
  5629  0012                     _TRISB	set	18
  5630  0011                     _TRISA	set	17
  5631  0018                     _LATC	set	24
  5632  0017                     _LATB	set	23
  5633  0016                     _LATA	set	22
  5634  0016                     _LATAbits	set	22
  5635  0011                     _TRISAbits	set	17
  5636  00B5                     _LATA5	set	181
  5637  006A                     _RB2	set	106
  5638  005F                     _GIE	set	95
  5639  0093                     _ADCON0	set	147
  5640  009D                     _ADACQ	set	157
  5641  009C                     _ADPRE	set	156
  5642  009B                     _ADCAP	set	155
  5643  009A                     _ADREF	set	154
  5644  0098                     _ADCLK	set	152
  5645  0097                     _ADSTAT	set	151
  5646  0099                     _ADACT	set	153
  5647  0096                     _ADCON3	set	150
  5648  0095                     _ADCON2	set	149
  5649  0094                     _ADCON1	set	148
  5650  008C                     _ADRESL	set	140
  5651  008D                     _ADRESH	set	141
  5652  0093                     _ADCON0bits	set	147
  5653  009E                     _ADPCH	set	158
  5654  0113                     _ADSTPTH	set	275
  5655  0112                     _ADSTPTL	set	274
  5656  0111                     _ADUTHH	set	273
  5657  0110                     _ADUTHL	set	272
  5658  010F                     _ADLTHH	set	271
  5659  010E                     _ADLTHL	set	270
  5660  010D                     _ADRPT	set	269
  5661  021E                     _CCPTMRS0bits	set	542
  5662  021F                     _CCPTMRS1bits	set	543
  5663  0294                     _T4CONbits	set	660
  5664  0292                     _T4TMR	set	658
  5665  0293                     _T4PR	set	659
  5666  0297                     _T4RST	set	663
  5667  0295                     _T4HLT	set	661
  5668  0296                     _T4CLKCON	set	662
  5669  0294                     _T4CON	set	660
  5670  028E                     _T2CONbits	set	654
  5671  028C                     _T2TMR	set	652
  5672  028D                     _T2PR	set	653
  5673  0291                     _T2RST	set	657
  5674  028F                     _T2HLT	set	655
  5675  0290                     _T2CLKCON	set	656
  5676  028E                     _T2CON	set	654
  5677  030C                     _CCPR1L	set	780
  5678  030D                     _CCPR1H	set	781
  5679  030E                     _CCP1CONbits	set	782
  5680  0390                     _PWM7DCL	set	912
  5681  0391                     _PWM7DCH	set	913
  5682  0392                     _PWM7CON	set	914
  5683  038C                     _PWM6DCL	set	908
  5684  038D                     _PWM6DCH	set	909
  5685  038E                     _PWM6CON	set	910
  5686  0710                     _PIR4bits	set	1808
  5687  0716                     _PIE0bits	set	1814
  5688  0892                     _OSCTUNE	set	2194
  5689  0893                     _OSCFRQ	set	2195
  5690  0891                     _OSCEN	set	2193
  5691  088F                     _OSCCON3	set	2191
  5692  088D                     _OSCCON1	set	2189
  5693  090C                     _FVRCON	set	2316
  5694  0E8F                     _PPSLOCKbits	set	3727
  5695  0E8F                     _PPSLOCK	set	3727
  5696  0F1D                     _RB5PPS	set	3869
  5697  0F17                     _RA7PPS	set	3863
  5698  0F16                     _RA6PPS	set	3862
  5699  0F4E                     _ANSELC	set	3918
  5700  0F43                     _ANSELB	set	3907
  5701  0F38                     _ANSELA	set	3896
  5702  0F65                     _WPUE	set	3941
  5703  0F4F                     _WPUC	set	3919
  5704  0F44                     _WPUB	set	3908
  5705  0F39                     _WPUA	set	3897
  5706  181B                     STR_3:	
  5707  181B  3452               	retlw	82	;'R'
  5708  181C  3465               	retlw	101	;'e'
  5709  181D  3466               	retlw	102	;'f'
  5710  181E  343A               	retlw	58	;':'
  5711  181F  3400               	retlw	0
  5712                           
  5713                           	psect	stringtext3
  5714  1820                     __pstringtext3:	
  5715  1820                     STR_2:	
  5716  1820  344F               	retlw	79	;'O'
  5717  1821  3475               	retlw	117	;'u'
  5718  1822  3474               	retlw	116	;'t'
  5719  1823  343A               	retlw	58	;':'
  5720  1824  3400               	retlw	0
  5721                           
  5722                           	psect	stringtext4
  5723  1825                     __pstringtext4:	
  5724  1825                     STR_1:	
  5725  1825  3449               	retlw	73	;'I'
  5726  1826  346E               	retlw	110	;'n'
  5727  1827  343A               	retlw	58	;':'
  5728  1828  3400               	retlw	0
  5729                           
  5730                           	psect	stringtext5
  5731  0000                     __pstringtext5:	
  5732                           
  5733                           ; #config settings
  5734  0000                     
  5735                           	psect	cinit
  5736  07B5                     start_initialization:	
  5737  07B5                     __initialization:		;BIGRAM
  5738                           
  5739                           ; Initialize objects allocated to BANK0
  5740  07B5  3180  2006  3187   	fcall	__pidataBANK0	;fetch initializer
  5741  07B8  00ED               	movwf	__pdataBANK0& (0+127)
  5742  07B9  3180  2007  3187   	fcall	__pidataBANK0+1	;fetch initializer
  5743  07BC  00EE               	movwf	(__pdataBANK0+1)& (0+127)
  5744                           
  5745                           ; Initialize objects allocated to BANK2
  5746  07BD  3035               	movlw	low __pidataBANK2
  5747  07BE  0084               	movwf	4
  5748  07BF  3092               	movlw	(high __pidataBANK2)| (0+128)
  5749  07C0  0085               	movwf	5
  5750  07C1  0022               	movlb	2	; select bank2
  5751  07C2  0012               	moviw fsr0++
  5752  07C3  00B5               	movwf	__pdataBANK2& (0+127)
  5753  07C4  0012               	moviw fsr0++
  5754  07C5  00B6               	movwf	(__pdataBANK2+1)& (0+127)
  5755  07C6  0012               	moviw fsr0++
  5756  07C7  00B7               	movwf	(__pdataBANK2+2)& (0+127)
  5757  07C8  0012               	moviw fsr0++
  5758  07C9  00B8               	movwf	(__pdataBANK2+3)& (0+127)
  5759  07CA  0012               	moviw fsr0++
  5760  07CB  00B9               	movwf	(__pdataBANK2+4)& (0+127)
  5761  07CC  0012               	moviw fsr0++
  5762  07CD  00BA               	movwf	(__pdataBANK2+5)& (0+127)
  5763  07CE  0012               	moviw fsr0++
  5764  07CF  00BB               	movwf	(__pdataBANK2+6)& (0+127)
  5765  07D0  0012               	moviw fsr0++
  5766  07D1  00BC               	movwf	(__pdataBANK2+7)& (0+127)
  5767                           
  5768                           ; Clear objects allocated to BIGRAM
  5769  07D2  3060               	movlw	low (0+8800)
  5770  07D3  0084               	movwf	4
  5771  07D4  3022               	movlw	high (0+8800)
  5772  07D5  0085               	movwf	5
  5773  07D6  3090               	movlw	144
  5774  07D7  00FE               	movwf	btemp
  5775  07D8  3001               	movlw	1
  5776  07D9  00FF               	movwf	btemp+1
  5777  07DA  3192  2246  3187   	fcall	clear_ram0
  5778                           
  5779                           ; Clear objects allocated to BANK0
  5780  07DD  305C               	movlw	low __pbssBANK0
  5781  07DE  0084               	movwf	4
  5782  07DF  3000               	movlw	high __pbssBANK0
  5783  07E0  0085               	movwf	5
  5784  07E1  3011               	movlw	17
  5785  07E2  00FE               	movwf	btemp
  5786  07E3  3000               	movlw	0
  5787  07E4  00FF               	movwf	btemp+1
  5788  07E5  3192  2246  3187   	fcall	clear_ram0
  5789                           
  5790                           ; Clear objects allocated to BANK1
  5791  07E8  30A0               	movlw	low __pbssBANK1
  5792  07E9  0084               	movwf	4
  5793  07EA  3000               	movlw	high __pbssBANK1
  5794  07EB  0085               	movwf	5
  5795  07EC  3037               	movlw	55
  5796  07ED  00FE               	movwf	btemp
  5797  07EE  3000               	movlw	0
  5798  07EF  00FF               	movwf	btemp+1
  5799  07F0  3192  2246  3187   	fcall	clear_ram0
  5800                           
  5801                           ; Clear objects allocated to BANK2
  5802  07F3  3020               	movlw	low __pbssBANK2
  5803  07F4  0084               	movwf	4
  5804  07F5  3001               	movlw	high __pbssBANK2
  5805  07F6  0085               	movwf	5
  5806  07F7  3015               	movlw	21
  5807  07F8  00FE               	movwf	btemp
  5808  07F9  3000               	movlw	0
  5809  07FA  00FF               	movwf	btemp+1
  5810  07FB  3192  2246         	fcall	clear_ram0
  5811  07FD                     end_of_initialization:	
  5812                           ;End of C runtime variable initialization code
  5813                           
  5814  07FD                     __end_of__initialization:	
  5815  07FD  0020               	movlb	0
  5816  07FE  3182  2A28         	ljmp	_main	;jump to C main() function
  5817                           
  5818                           	psect	bssBANK0
  5819  005C                     __pbssBANK0:	
  5820  005C                     _Vref:	
  5821  005C                     	ds	4
  5822  0060                     _readButtons:	
  5823  0060                     	ds	2
  5824  0062                     _VHoldMode:	
  5825  0062                     	ds	2
  5826  0064                     _Imode:	
  5827  0064                     	ds	2
  5828  0066                     _batteryState:	
  5829  0066                     	ds	2
  5830  0068                     _sampleIndex:	
  5831  0068                     	ds	2
  5832  006A                     _j:	
  5833  006A                     	ds	1
  5834  006B                     _lastButton:	
  5835  006B                     	ds	1
  5836  006C                     _button:	
  5837  006C                     	ds	1
  5838                           
  5839                           	psect	dataBANK0
  5840  006D                     __pdataBANK0:	
  5841  006D                     _batteryTemp:	
  5842  006D                     	ds	2
  5843                           
  5844                           	psect	bssBANK1
  5845  00A0                     __pbssBANK1:	
  5846  00A0                     _Ianalogs:	
  5847  00A0                     	ds	8
  5848  00A8                     _Vanalogs:	
  5849  00A8                     	ds	8
  5850  00B0                     _voltage:	
  5851  00B0                     	ds	8
  5852  00B8                     _current:	
  5853  00B8                     	ds	8
  5854  00C0                     _stateCounter:	
  5855  00C0                     	ds	4
  5856  00C4                     _Iref:	
  5857  00C4                     	ds	4
  5858  00C8                     _IminCount:	
  5859  00C8                     	ds	4
  5860  00CC                     _Imin:	
  5861  00CC                     	ds	4
  5862  00D0                     _errno:	
  5863  00D0                     	ds	2
  5864  00D2                     _Iout:	
  5865  00D2                     	ds	2
  5866  00D4                     _cc_cv:	
  5867  00D4                     	ds	2
  5868  00D6                     _x:	
  5869  00D6                     	ds	1
  5870                           
  5871                           	psect	bssBANK2
  5872  0120                     __pbssBANK2:	
  5873  0120                     _totals:	
  5874  0120                     	ds	16
  5875  0130                     LCDWriteInt@F14390:	
  5876  0130                     	ds	5
  5877                           
  5878                           	psect	dataBANK2
  5879  0135                     __pdataBANK2:	
  5880  0135                     _channels:	
  5881  0135                     	ds	8
  5882                           
  5883                           	psect	clrtext
  5884  1246                     clear_ram0:	
  5885                           ;	Called with FSR0 containing the base address, and
  5886                           ;	btemp/btemp+1 has the size to clear
  5887                           
  5888  1246  0064               	clrwdt	;clear the watchdog before getting into this loop
  5889  1247                     clrloop0:	
  5890  1247  0180               	clrf	0	;clear RAM location pointed to by FSR
  5891  1248  3101               	addfsr 0,1
  5892  1249  3001               	movlw	1
  5893  124A  02FE               	subwf	126,f
  5894  124B  3000               	movlw	0
  5895  124C  3BFF               	subwfb	127,f
  5896  124D  087F               	movf	127,w
  5897  124E  047E               	iorwf	126,w
  5898  124F  1903               	btfsc	3,2
  5899  1250  3400               	retlw	0	;all done for this memory range, return
  5900  1251  2A47               	goto	clrloop0	;have we reached the end yet?
  5901                           
  5902                           	psect	cstackBANK1
  5903  00D7                     __pcstackBANK1:	
  5904  00D7                     main@efficiency:	
  5905                           
  5906                           ; 3 bytes @ 0x0
  5907  00D7                     	ds	3
  5908  00DA                     main@faultCount:	
  5909                           
  5910                           ; 2 bytes @ 0x3
  5911  00DA                     	ds	2
  5912  00DC                     main@faultNotReset:	
  5913                           
  5914                           ; 2 bytes @ 0x5
  5915  00DC                     	ds	2
  5916  00DE                     main@displayRefresh:	
  5917                           
  5918                           ; 1 bytes @ 0x7
  5919  00DE                     	ds	1
  5920  00DF                     main@slowLoop:	
  5921                           
  5922                           ; 1 bytes @ 0x8
  5923  00DF                     	ds	1
  5924  00E0                     main@MPPT1:	
  5925                           
  5926                           ; 2 bytes @ 0x9
  5927  00E0                     	ds	2
  5928  00E2                     main@MPPT0:	
  5929                           
  5930                           ; 2 bytes @ 0xB
  5931  00E2                     	ds	2
  5932  00E4                     main@menuButton:	
  5933                           
  5934                           ; 1 bytes @ 0xD
  5935  00E4                     	ds	1
  5936  00E5                     main@j:	
  5937                           
  5938                           ; 1 bytes @ 0xE
  5939  00E5                     	ds	1
  5940  00E6                     main@IOutTotal:	
  5941                           
  5942                           ; 2 bytes @ 0xF
  5943  00E6                     	ds	2
  5944  00E8                     main@tempFanOutput:	
  5945                           
  5946                           ; 2 bytes @ 0x11
  5947  00E8                     	ds	2
  5948  00EA                     main@dutyCycle1:	
  5949                           
  5950                           ; 2 bytes @ 0x13
  5951  00EA                     	ds	2
  5952  00EC                     main@dutyCycle6:	
  5953                           
  5954                           ; 2 bytes @ 0x15
  5955  00EC                     	ds	2
  5956  00EE                     main@dutyCycle7:	
  5957                           
  5958                           ; 2 bytes @ 0x17
  5959  00EE                     	ds	2
  5960                           
  5961                           	psect	cstackCOMMON
  5962  0070                     __pcstackCOMMON:	
  5963  0070                     ?___ftge:	
  5964  0070                     ?_LCDWrite:	
  5965                           ; 1 bit 
  5966                           
  5967  0070                     ?_OSCILLATOR_Initialize:	
  5968                           ; 1 bytes @ 0x0
  5969                           
  5970  0070                     ??_OSCILLATOR_Initialize:	
  5971                           ; 1 bytes @ 0x0
  5972                           
  5973  0070                     ?_TMR2_Initialize:	
  5974                           ; 1 bytes @ 0x0
  5975                           
  5976  0070                     ??_TMR2_Initialize:	
  5977                           ; 1 bytes @ 0x0
  5978                           
  5979  0070                     ?_TMR4_Initialize:	
  5980                           ; 1 bytes @ 0x0
  5981                           
  5982  0070                     ??_TMR4_Initialize:	
  5983                           ; 1 bytes @ 0x0
  5984                           
  5985  0070                     ?_calculateCurrent0:	
  5986                           ; 1 bytes @ 0x0
  5987                           
  5988  0070                     ?_calculateCurrent1:	
  5989                           ; 1 bytes @ 0x0
  5990                           
  5991  0070                     ?_calculateCurrent2:	
  5992                           ; 1 bytes @ 0x0
  5993                           
  5994  0070                     ?_calculateCurrent3:	
  5995                           ; 1 bytes @ 0x0
  5996                           
  5997  0070                     ?_ADC_Initialize:	
  5998                           ; 1 bytes @ 0x0
  5999                           
  6000  0070                     ??_ADC_Initialize:	
  6001                           ; 1 bytes @ 0x0
  6002                           
  6003  0070                     ?_Init_Battery_State_Machine:	
  6004                           ; 1 bytes @ 0x0
  6005                           
  6006  0070                     ?_Battery_State_Machine:	
  6007                           ; 1 bytes @ 0x0
  6008                           
  6009  0070                     ?_cc_cv_mode:	
  6010                           ; 1 bytes @ 0x0
  6011                           
  6012  0070                     ?_readButton:	
  6013                           ; 1 bytes @ 0x0
  6014                           
  6015  0070                     ?_LCDWriteCharacter:	
  6016                           ; 1 bytes @ 0x0
  6017                           
  6018  0070                     ?_LCDClear:	
  6019                           ; 1 bytes @ 0x0
  6020                           
  6021  0070                     ?_LCDInit:	
  6022                           ; 1 bytes @ 0x0
  6023                           
  6024  0070                     ?_PIN_MANAGER_Initialize:	
  6025                           ; 1 bytes @ 0x0
  6026                           
  6027  0070                     ??_PIN_MANAGER_Initialize:	
  6028                           ; 1 bytes @ 0x0
  6029                           
  6030  0070                     ?_PWM_Initialize:	
  6031                           ; 1 bytes @ 0x0
  6032                           
  6033  0070                     ??_PWM_Initialize:	
  6034                           ; 1 bytes @ 0x0
  6035                           
  6036  0070                     ?_PWM6_LoadDutyValue:	
  6037                           ; 1 bytes @ 0x0
  6038                           
  6039  0070                     ?_PWM7_LoadDutyValue:	
  6040                           ; 1 bytes @ 0x0
  6041                           
  6042  0070                     ?_PWM1_LoadDutyValue:	
  6043                           ; 1 bytes @ 0x0
  6044                           
  6045  0070                     ?_SYSTEM_Initialize:	
  6046                           ; 1 bytes @ 0x0
  6047                           
  6048  0070                     ?_main:	
  6049                           ; 1 bytes @ 0x0
  6050                           
  6051  0070                     ?_ADCRead:	
  6052                           ; 1 bytes @ 0x0
  6053                           
  6054  0070                     ?___wmul:	
  6055                           ; 2 bytes @ 0x0
  6056                           
  6057  0070                     ?___awdiv:	
  6058                           ; 2 bytes @ 0x0
  6059                           
  6060  0070                     ?___lwmod:	
  6061                           ; 2 bytes @ 0x0
  6062                           
  6063  0070                     ?___ftpack:	
  6064                           ; 2 bytes @ 0x0
  6065                           
  6066  0070                     ?_frexp:	
  6067                           ; 3 bytes @ 0x0
  6068                           
  6069  0070                     ?___aldiv:	
  6070                           ; 3 bytes @ 0x0
  6071                           
  6072  0070                     LCDWrite@data:	
  6073                           ; 4 bytes @ 0x0
  6074                           
  6075  0070                     PIN_MANAGER_Initialize@state:	
  6076                           ; 1 bytes @ 0x0
  6077                           
  6078  0070                     PWM6_LoadDutyValue@dutyCycle6:	
  6079                           ; 1 bytes @ 0x0
  6080                           
  6081  0070                     PWM7_LoadDutyValue@dutyCycle7:	
  6082                           ; 2 bytes @ 0x0
  6083                           
  6084  0070                     PWM1_LoadDutyValue@dutyCycle1:	
  6085                           ; 2 bytes @ 0x0
  6086                           
  6087  0070                     ___wmul@multiplier:	
  6088                           ; 2 bytes @ 0x0
  6089                           
  6090  0070                     ___awdiv@divisor:	
  6091                           ; 2 bytes @ 0x0
  6092                           
  6093  0070                     ___lwmod@divisor:	
  6094                           ; 2 bytes @ 0x0
  6095                           
  6096  0070                     ___ftpack@arg:	
  6097                           ; 2 bytes @ 0x0
  6098                           
  6099  0070                     ___ftge@ff1:	
  6100                           ; 3 bytes @ 0x0
  6101                           
  6102  0070                     frexp@value:	
  6103                           ; 3 bytes @ 0x0
  6104                           
  6105  0070                     ___aldiv@divisor:	
  6106                           ; 3 bytes @ 0x0
  6107                           
  6108                           
  6109                           ; 4 bytes @ 0x0
  6110  0070                     	ds	1
  6111  0071                     ??_LCDWrite:	
  6112                           
  6113                           ; 1 bytes @ 0x1
  6114  0071                     	ds	1
  6115  0072                     ??_PWM6_LoadDutyValue:	
  6116  0072                     ??_PWM7_LoadDutyValue:	
  6117                           ; 1 bytes @ 0x2
  6118                           
  6119  0072                     ??_PWM1_LoadDutyValue:	
  6120                           ; 1 bytes @ 0x2
  6121                           
  6122  0072                     LCDWrite@data_or_command:	
  6123                           ; 1 bytes @ 0x2
  6124                           
  6125  0072                     ___wmul@multiplicand:	
  6126                           ; 1 bytes @ 0x2
  6127                           
  6128  0072                     ___awdiv@dividend:	
  6129                           ; 2 bytes @ 0x2
  6130                           
  6131  0072                     ___lwmod@dividend:	
  6132                           ; 2 bytes @ 0x2
  6133                           
  6134                           
  6135                           ; 2 bytes @ 0x2
  6136  0072                     	ds	1
  6137  0073                     ??_ADCRead:	
  6138  0073                     ADCRead@channel:	
  6139                           ; 1 bytes @ 0x3
  6140                           
  6141  0073                     LCDWrite@d:	
  6142                           ; 1 bytes @ 0x3
  6143                           
  6144  0073                     ___ftpack@exp:	
  6145                           ; 1 bytes @ 0x3
  6146                           
  6147  0073                     frexp@eptr:	
  6148                           ; 1 bytes @ 0x3
  6149                           
  6150  0073                     ___ftge@ff2:	
  6151                           ; 1 bytes @ 0x3
  6152                           
  6153                           
  6154                           ; 3 bytes @ 0x3
  6155  0073                     	ds	1
  6156  0074                     ??_frexp:	
  6157  0074                     ??_readButton:	
  6158                           ; 1 bytes @ 0x4
  6159                           
  6160  0074                     ??___wmul:	
  6161                           ; 1 bytes @ 0x4
  6162                           
  6163  0074                     ??___awdiv:	
  6164                           ; 1 bytes @ 0x4
  6165                           
  6166  0074                     ??___lwmod:	
  6167                           ; 1 bytes @ 0x4
  6168                           
  6169  0074                     LCDWrite@i:	
  6170                           ; 1 bytes @ 0x4
  6171                           
  6172  0074                     ___ftpack@sign:	
  6173                           ; 1 bytes @ 0x4
  6174                           
  6175  0074                     ___wmul@product:	
  6176                           ; 1 bytes @ 0x4
  6177                           
  6178  0074                     ___aldiv@dividend:	
  6179                           ; 2 bytes @ 0x4
  6180                           
  6181                           
  6182                           ; 4 bytes @ 0x4
  6183  0074                     	ds	1
  6184  0075                     ??___ftpack:	
  6185  0075                     ?_gotoXY:	
  6186                           ; 1 bytes @ 0x5
  6187                           
  6188  0075                     ??_LCDInit:	
  6189                           ; 1 bytes @ 0x5
  6190                           
  6191  0075                     gotoXY@y:	
  6192                           ; 1 bytes @ 0x5
  6193                           
  6194  0075                     ___awdiv@counter:	
  6195                           ; 1 bytes @ 0x5
  6196                           
  6197  0075                     ___lwmod@counter:	
  6198                           ; 1 bytes @ 0x5
  6199                           
  6200                           
  6201                           ; 1 bytes @ 0x5
  6202  0075                     	ds	1
  6203  0076                     ??_gotoXY:	
  6204  0076                     ??_LCDWriteCharacter:	
  6205                           ; 1 bytes @ 0x6
  6206                           
  6207  0076                     ??___ftge:	
  6208                           ; 1 bytes @ 0x6
  6209                           
  6210  0076                     ___awdiv@sign:	
  6211                           ; 1 bytes @ 0x6
  6212                           
  6213                           
  6214                           ; 1 bytes @ 0x6
  6215  0076                     	ds	1
  6216  0077                     gotoXY@x:	
  6217  0077                     ___awdiv@quotient:	
  6218                           ; 1 bytes @ 0x7
  6219                           
  6220                           
  6221                           ; 2 bytes @ 0x7
  6222  0077                     	ds	1
  6223  0078                     ??_LCDClear:	
  6224  0078                     ??___aldiv:	
  6225                           ; 1 bytes @ 0x8
  6226                           
  6227  0078                     ?___awtoft:	
  6228                           ; 1 bytes @ 0x8
  6229                           
  6230  0078                     ___awtoft@c:	
  6231                           ; 3 bytes @ 0x8
  6232                           
  6233                           
  6234                           ; 2 bytes @ 0x8
  6235  0078                     	ds	1
  6236  0079                     LCDWriteCharacter@character:	
  6237  0079                     readIAnalog@analog_channel:	
  6238                           ; 1 bytes @ 0x9
  6239                           
  6240  0079                     LCDClear@index:	
  6241                           ; 2 bytes @ 0x9
  6242                           
  6243                           
  6244                           ; 2 bytes @ 0x9
  6245  0079                     	ds	1
  6246  007A                     LCDWriteCharacter@base:	
  6247                           
  6248                           ; 2 bytes @ 0xA
  6249  007A                     	ds	1
  6250  007B                     ??___awtoft:	
  6251  007B                     readIAnalog@value:	
  6252                           ; 1 bytes @ 0xB
  6253                           
  6254                           
  6255                           ; 2 bytes @ 0xB
  6256  007B                     	ds	1
  6257  007C                     ?_LCDWriteString:	
  6258  007C                     LCDWriteString@characters:	
  6259                           ; 1 bytes @ 0xC
  6260                           
  6261                           
  6262                           ; 2 bytes @ 0xC
  6263  007C                     	ds	1
  6264  007D                     ___awtoft@sign:	
  6265                           
  6266                           ; 1 bytes @ 0xD
  6267  007D                     	ds	1
  6268  007E                     ??_eval_poly:	
  6269  007E                     ??_tempCalc:	
  6270                           ; 1 bytes @ 0xE
  6271                           
  6272  007E                     ??___ftsub:	
  6273                           ; 1 bytes @ 0xE
  6274                           
  6275                           
  6276                           	psect	cstackBANK0
  6277  0020                     __pcstackBANK0:	
  6278                           ; 1 bytes @ 0xE
  6279                           
  6280  0020                     ??_LCDWriteString:	
  6281  0020                     ?_LCDWriteInt:	
  6282                           ; 1 bytes @ 0x0
  6283                           
  6284  0020                     ?___ftdiv:	
  6285                           ; 1 bytes @ 0x0
  6286                           
  6287  0020                     ?___ftmul:	
  6288                           ; 3 bytes @ 0x0
  6289                           
  6290  0020                     ___aldiv@counter:	
  6291                           ; 3 bytes @ 0x0
  6292                           
  6293  0020                     LCDWriteInt@value:	
  6294                           ; 1 bytes @ 0x0
  6295                           
  6296  0020                     ___ftdiv@f2:	
  6297                           ; 2 bytes @ 0x0
  6298                           
  6299  0020                     ___ftmul@f1:	
  6300                           ; 3 bytes @ 0x0
  6301                           
  6302                           
  6303                           ; 3 bytes @ 0x0
  6304  0020                     	ds	1
  6305  0021                     ___aldiv@sign:	
  6306                           
  6307                           ; 1 bytes @ 0x1
  6308  0021                     	ds	1
  6309  0022                     LCDWriteInt@fieldLength:	
  6310  0022                     ___aldiv@quotient:	
  6311                           ; 1 bytes @ 0x2
  6312                           
  6313                           
  6314                           ; 4 bytes @ 0x2
  6315  0022                     	ds	1
  6316  0023                     LCDWriteInt@numPlaces:	
  6317  0023                     ___ftdiv@f1:	
  6318                           ; 1 bytes @ 0x3
  6319                           
  6320  0023                     ___ftmul@f2:	
  6321                           ; 3 bytes @ 0x3
  6322                           
  6323                           
  6324                           ; 3 bytes @ 0x3
  6325  0023                     	ds	1
  6326  0024                     LCDWriteInt@sign:	
  6327                           
  6328                           ; 1 bytes @ 0x4
  6329  0024                     	ds	1
  6330  0025                     ??_LCDWriteInt:	
  6331                           
  6332                           ; 1 bytes @ 0x5
  6333  0025                     	ds	1
  6334  0026                     ??___ftdiv:	
  6335  0026                     ??___ftmul:	
  6336                           ; 1 bytes @ 0x6
  6337                           
  6338  0026                     ?_readIAnalog:	
  6339                           ; 1 bytes @ 0x6
  6340                           
  6341  0026                     readIAnalog@channel:	
  6342                           ; 2 bytes @ 0x6
  6343                           
  6344                           
  6345                           ; 2 bytes @ 0x6
  6346  0026                     	ds	2
  6347  0028                     ??_readIAnalog:	
  6348                           
  6349                           ; 1 bytes @ 0x8
  6350  0028                     	ds	1
  6351  0029                     LCDWriteInt@str:	
  6352                           
  6353                           ; 5 bytes @ 0x9
  6354  0029                     	ds	1
  6355  002A                     ___ftdiv@cntr:	
  6356  002A                     ___ftmul@exp:	
  6357                           ; 1 bytes @ 0xA
  6358                           
  6359                           
  6360                           ; 1 bytes @ 0xA
  6361  002A                     	ds	1
  6362  002B                     ___ftdiv@f3:	
  6363  002B                     ___ftmul@f3_as_product:	
  6364                           ; 3 bytes @ 0xB
  6365                           
  6366                           
  6367                           ; 3 bytes @ 0xB
  6368  002B                     	ds	3
  6369  002E                     LCDWriteInt@j:	
  6370  002E                     ___ftdiv@exp:	
  6371                           ; 1 bytes @ 0xE
  6372                           
  6373  002E                     ___ftmul@cntr:	
  6374                           ; 1 bytes @ 0xE
  6375                           
  6376                           
  6377                           ; 1 bytes @ 0xE
  6378  002E                     	ds	1
  6379  002F                     LCDWriteInt@i:	
  6380  002F                     ___ftdiv@sign:	
  6381                           ; 1 bytes @ 0xF
  6382                           
  6383  002F                     ___ftmul@sign:	
  6384                           ; 1 bytes @ 0xF
  6385                           
  6386                           
  6387                           ; 1 bytes @ 0xF
  6388  002F                     	ds	1
  6389  0030                     ?___ftadd:	
  6390  0030                     ?___fttol:	
  6391                           ; 3 bytes @ 0x10
  6392                           
  6393  0030                     ___ftadd@f1:	
  6394                           ; 4 bytes @ 0x10
  6395                           
  6396  0030                     ___fttol@f1:	
  6397                           ; 3 bytes @ 0x10
  6398                           
  6399                           
  6400                           ; 3 bytes @ 0x10
  6401  0030                     	ds	3
  6402  0033                     ___ftadd@f2:	
  6403                           
  6404                           ; 3 bytes @ 0x13
  6405  0033                     	ds	1
  6406  0034                     ??___fttol:	
  6407                           
  6408                           ; 1 bytes @ 0x14
  6409  0034                     	ds	2
  6410  0036                     ??___ftadd:	
  6411                           
  6412                           ; 1 bytes @ 0x16
  6413  0036                     	ds	2
  6414  0038                     ___fttol@sign1:	
  6415                           
  6416                           ; 1 bytes @ 0x18
  6417  0038                     	ds	1
  6418  0039                     ___fttol@lval:	
  6419                           
  6420                           ; 4 bytes @ 0x19
  6421  0039                     	ds	1
  6422  003A                     ___ftadd@sign:	
  6423                           
  6424                           ; 1 bytes @ 0x1A
  6425  003A                     	ds	1
  6426  003B                     ___ftadd@exp2:	
  6427                           
  6428                           ; 1 bytes @ 0x1B
  6429  003B                     	ds	1
  6430  003C                     ___ftadd@exp1:	
  6431                           
  6432                           ; 1 bytes @ 0x1C
  6433  003C                     	ds	1
  6434  003D                     ?_eval_poly:	
  6435  003D                     ?___ftsub:	
  6436                           ; 3 bytes @ 0x1D
  6437                           
  6438  003D                     ___fttol@exp1:	
  6439                           ; 3 bytes @ 0x1D
  6440                           
  6441  003D                     ___ftsub@f2:	
  6442                           ; 1 bytes @ 0x1D
  6443                           
  6444  003D                     eval_poly@x:	
  6445                           ; 3 bytes @ 0x1D
  6446                           
  6447                           
  6448                           ; 3 bytes @ 0x1D
  6449  003D                     	ds	1
  6450  003E                     ??_calculateCurrent0:	
  6451  003E                     ??_calculateCurrent1:	
  6452                           ; 1 bytes @ 0x1E
  6453                           
  6454  003E                     ??_calculateCurrent2:	
  6455                           ; 1 bytes @ 0x1E
  6456                           
  6457  003E                     ??_calculateCurrent3:	
  6458                           ; 1 bytes @ 0x1E
  6459                           
  6460  003E                     ??_Init_Battery_State_Machine:	
  6461                           ; 1 bytes @ 0x1E
  6462                           
  6463  003E                     ??_Battery_State_Machine:	
  6464                           ; 1 bytes @ 0x1E
  6465                           
  6466  003E                     ??_cc_cv_mode:	
  6467                           ; 1 bytes @ 0x1E
  6468                           
  6469                           
  6470                           ; 1 bytes @ 0x1E
  6471  003E                     	ds	2
  6472  0040                     eval_poly@d:	
  6473  0040                     ___ftsub@f1:	
  6474                           ; 2 bytes @ 0x20
  6475                           
  6476                           
  6477                           ; 3 bytes @ 0x20
  6478  0040                     	ds	2
  6479  0042                     Init_Battery_State_Machine@z:	
  6480  0042                     eval_poly@n:	
  6481                           ; 1 bytes @ 0x22
  6482                           
  6483                           
  6484                           ; 2 bytes @ 0x22
  6485  0042                     	ds	1
  6486  0043                     ??_SYSTEM_Initialize:	
  6487  0043                     Battery_State_Machine@z:	
  6488                           ; 1 bytes @ 0x23
  6489                           
  6490                           
  6491                           ; 1 bytes @ 0x23
  6492  0043                     	ds	1
  6493  0044                     eval_poly@res:	
  6494                           
  6495                           ; 3 bytes @ 0x24
  6496  0044                     	ds	1
  6497  0045                     cc_cv_mode@z:	
  6498                           
  6499                           ; 1 bytes @ 0x25
  6500  0045                     	ds	2
  6501  0047                     ?_log:	
  6502  0047                     log@x:	
  6503                           ; 3 bytes @ 0x27
  6504                           
  6505                           
  6506                           ; 3 bytes @ 0x27
  6507  0047                     	ds	3
  6508  004A                     ??_log:	
  6509                           
  6510                           ; 1 bytes @ 0x2A
  6511  004A                     	ds	1
  6512  004B                     log@exponent:	
  6513                           
  6514                           ; 2 bytes @ 0x2B
  6515  004B                     	ds	2
  6516  004D                     ?_tempCalc:	
  6517  004D                     tempCalc@analogValue:	
  6518                           ; 2 bytes @ 0x2D
  6519                           
  6520                           
  6521                           ; 2 bytes @ 0x2D
  6522  004D                     	ds	2
  6523  004F                     tempCalc@R:	
  6524                           
  6525                           ; 3 bytes @ 0x2F
  6526  004F                     	ds	3
  6527  0052                     _tempCalc$1297:	
  6528                           
  6529                           ; 3 bytes @ 0x32
  6530  0052                     	ds	3
  6531  0055                     tempCalc@steinhart:	
  6532                           
  6533                           ; 3 bytes @ 0x35
  6534  0055                     	ds	3
  6535  0058                     ??_main:	
  6536                           
  6537                           ; 1 bytes @ 0x38
  6538  0058                     	ds	4
  6539                           
  6540                           	psect	maintext
  6541  0228                     __pmaintext:	
  6542 ;;
  6543 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  6544 ;;
  6545 ;; *************** function _main *****************
  6546 ;; Defined at:
  6547 ;;		line 42 in file "main.c"
  6548 ;; Parameters:    Size  Location     Type
  6549 ;;		None
  6550 ;; Auto vars:     Size  Location     Type
  6551 ;;  efficiency      3    0[BANK1 ] float 
  6552 ;;  dutyCycle7      2   23[BANK1 ] unsigned int 
  6553 ;;  dutyCycle6      2   21[BANK1 ] unsigned int 
  6554 ;;  dutyCycle1      2   19[BANK1 ] unsigned int 
  6555 ;;  tempFanOutpu    2   17[BANK1 ] unsigned int 
  6556 ;;  IOutTotal       2   15[BANK1 ] int 
  6557 ;;  MPPT0           2   11[BANK1 ] int 
  6558 ;;  MPPT1           2    9[BANK1 ] int 
  6559 ;;  faultNotRese    2    5[BANK1 ] unsigned int 
  6560 ;;  faultCount      2    3[BANK1 ] unsigned int 
  6561 ;;  j               1   14[BANK1 ] unsigned char 
  6562 ;;  menuButton      1   13[BANK1 ] unsigned char 
  6563 ;;  slowLoop        1    8[BANK1 ] unsigned char 
  6564 ;;  displayRefre    1    7[BANK1 ] unsigned char 
  6565 ;; Return value:  Size  Location     Type
  6566 ;;                  1    wreg      void 
  6567 ;; Registers used:
  6568 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6569 ;; Tracked objects:
  6570 ;;		On entry : B1F/0
  6571 ;;		On exit  : 0/0
  6572 ;;		Unchanged: 0/0
  6573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6574 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6575 ;;      Locals:         0       0      25       0       0       0       0       0       0       0       0       0       
      +0       0
  6576 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6577 ;;      Totals:         0       4      25       0       0       0       0       0       0       0       0       0       
      +0       0
  6578 ;;Total ram usage:       29 bytes
  6579 ;; Hardware stack levels required when called:    5
  6580 ;; This function calls:
  6581 ;;		_ADCRead
  6582 ;;		_Battery_State_Machine
  6583 ;;		_LCDClear
  6584 ;;		_LCDInit
  6585 ;;		_LCDWriteCharacter
  6586 ;;		_LCDWriteInt
  6587 ;;		_LCDWriteString
  6588 ;;		_PWM1_LoadDutyValue
  6589 ;;		_PWM6_LoadDutyValue
  6590 ;;		_PWM7_LoadDutyValue
  6591 ;;		_SYSTEM_Initialize
  6592 ;;		___awtoft
  6593 ;;		___ftdiv
  6594 ;;		___fttol
  6595 ;;		_calculateCurrent0
  6596 ;;		_calculateCurrent1
  6597 ;;		_calculateCurrent2
  6598 ;;		_calculateCurrent3
  6599 ;;		_cc_cv_mode
  6600 ;;		_gotoXY
  6601 ;;		_readButton
  6602 ;;		_readIAnalog
  6603 ;;		_tempCalc
  6604 ;; This function is called by:
  6605 ;;		Startup code after reset
  6606 ;; This function uses a non-reentrant model
  6607 ;;
  6608                           
  6609                           
  6610                           ;psect for function _main
  6611  0228                     _main:	
  6612                           
  6613                           ;main.c: 44: int16_t MPPT0 = 3144;
  6614                           
  6615                           ;incstack = 0
  6616                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6617  0228  3048               	movlw	72
  6618  0229  0021               	movlb	1	; select bank1
  6619  022A  00E2               	movwf	main@MPPT0^(0+128)
  6620  022B  300C               	movlw	12
  6621  022C  00E3               	movwf	(main@MPPT0^(0+128)+1)
  6622                           
  6623                           ;main.c: 45: int16_t MPPT1 = 3144;
  6624  022D  3048               	movlw	72
  6625  022E  00E0               	movwf	main@MPPT1^(0+128)
  6626  022F  300C               	movlw	12
  6627  0230  00E1               	movwf	(main@MPPT1^(0+128)+1)
  6628                           
  6629                           ;main.c: 47: extern uint8_t batteryState[2];
  6630                           ;main.c: 48: uint8_t displayRefresh = 0;
  6631  0231  01DE               	clrf	main@displayRefresh^(0+128)
  6632                           
  6633                           ;main.c: 49: uint16_t dutyCycle6 = 1023;
  6634  0232  30FF               	movlw	255
  6635  0233  00EC               	movwf	main@dutyCycle6^(0+128)
  6636  0234  3003               	movlw	3
  6637  0235  00ED               	movwf	(main@dutyCycle6^(0+128)+1)
  6638                           
  6639                           ;main.c: 50: uint16_t dutyCycle7 = 1023;
  6640  0236  30FF               	movlw	255
  6641  0237  00EE               	movwf	main@dutyCycle7^(0+128)
  6642  0238  3003               	movlw	3
  6643  0239  00EF               	movwf	(main@dutyCycle7^(0+128)+1)
  6644                           
  6645                           ;main.c: 51: uint16_t dutyCycle1 = 260;
  6646  023A  3004               	movlw	4
  6647  023B  00EA               	movwf	main@dutyCycle1^(0+128)
  6648  023C  3001               	movlw	1
  6649  023D  00EB               	movwf	(main@dutyCycle1^(0+128)+1)
  6650                           
  6651                           ;main.c: 52: float efficiency = 0;
  6652  023E  3000               	movlw	0
  6653  023F  00D7               	movwf	main@efficiency^(0+128)
  6654  0240  3000               	movlw	0
  6655  0241  00D8               	movwf	(main@efficiency+1)^(0+128)
  6656  0242  3000               	movlw	0
  6657  0243  00D9               	movwf	(main@efficiency+2)^(0+128)
  6658                           
  6659                           ;main.c: 53: uint16_t faultCount = 0;
  6660  0244  01DA               	clrf	main@faultCount^(0+128)
  6661  0245  01DB               	clrf	(main@faultCount+1)^(0+128)
  6662                           
  6663                           ;main.c: 54: uint16_t faultNotReset = 0;
  6664  0246  01DC               	clrf	main@faultNotReset^(0+128)
  6665  0247  01DD               	clrf	(main@faultNotReset+1)^(0+128)
  6666                           
  6667                           ;main.c: 55: extern uint16_t IminCount[2];
  6668                           ;main.c: 56: extern int8_t Imode[2];
  6669                           ;main.c: 57: int16_t IOutTotal = 0;
  6670  0248  01E6               	clrf	main@IOutTotal^(0+128)
  6671  0249  01E7               	clrf	(main@IOutTotal+1)^(0+128)
  6672                           
  6673                           ;main.c: 58: extern int16_t Iref[2];
  6674                           ;main.c: 59: uint8_t j = 0;
  6675  024A  01E5               	clrf	main@j^(0+128)
  6676                           
  6677                           ;main.c: 60: uint8_t menuButton = 0;
  6678  024B  01E4               	clrf	main@menuButton^(0+128)
  6679                           
  6680                           ;main.c: 61: uint8_t slowLoop = 200;
  6681  024C  30C8               	movlw	200
  6682  024D  0020               	movlb	0	; select bank0
  6683  024E  00D8               	movwf	??_main
  6684  024F  0858               	movf	??_main,w
  6685  0250  0021               	movlb	1	; select bank1
  6686  0251  00DF               	movwf	main@slowLoop^(0+128)
  6687                           
  6688                           ;main.c: 62: uint16_t tempFanOutput = 60;
  6689  0252  303C               	movlw	60
  6690  0253  00E8               	movwf	main@tempFanOutput^(0+128)
  6691  0254  3000               	movlw	0
  6692  0255  00E9               	movwf	(main@tempFanOutput^(0+128)+1)
  6693                           
  6694                           ;main.c: 63: extern int8_t VHoldMode[2];
  6695                           ;main.c: 64: extern int16_t Vref[2];
  6696                           ;main.c: 67: SYSTEM_Initialize();
  6697  0256  3194  2451  3182   	fcall	_SYSTEM_Initialize
  6698                           
  6699                           ;main.c: 69: LCDClear();
  6700  0259  3193  238D  3182   	fcall	_LCDClear
  6701  025C                     l3195:	
  6702                           ;main.c: 71: void calculateCurrent0(void);
  6703                           ;main.c: 72: void calculateCurrent1(void);
  6704                           ;main.c: 73: void calculateCurrent2(void);
  6705                           ;main.c: 74: void calculateCurrent3(void);
  6706                           ;main.c: 88: while (1)
  6707                           
  6708                           
  6709                           ;main.c: 89: {
  6710                           ;main.c: 90: if(!(RB2))
  6711  025C  0020               	movlb	0	; select bank0
  6712  025D  190D               	btfsc	13,2	;volatile
  6713  025E  2A70               	goto	l3203
  6714                           
  6715                           ;main.c: 91: {
  6716                           ;main.c: 92: LATA5=0;
  6717  025F  1296               	bcf	22,5	;volatile
  6718                           
  6719                           ;main.c: 93: _delay((unsigned long)((400)*(32000000/4000000.0)));
  6720  0260  3005               	movlw	5
  6721  0261  0020               	movlb	0	; select bank0
  6722  0262  00D8               	movwf	??_main
  6723  0263  3026               	movlw	38
  6724  0264                     u4107:	
  6725  0264  0B89               	decfsz	9,f
  6726  0265  2A64               	goto	u4107
  6727  0266  0BD8               	decfsz	??_main,f
  6728  0267  2A64               	goto	u4107
  6729  0268  0000               	nop
  6730                           
  6731                           ;main.c: 94: faultCount+=1;
  6732  0269  3001               	movlw	1
  6733  026A  0021               	movlb	1	; select bank1
  6734  026B  07DA               	addwf	main@faultCount^(0+128),f
  6735  026C  3000               	movlw	0
  6736  026D  3DDB               	addwfc	(main@faultCount+1)^(0+128),f
  6737                           
  6738                           ;main.c: 95: LATA5=1;
  6739  026E  0020               	movlb	0	; select bank0
  6740  026F  1696               	bsf	22,5	;volatile
  6741  0270                     l3203:	
  6742                           
  6743                           ;main.c: 96: }
  6744                           ;main.c: 97: for(j=0;j<4;j++) Ianalogs[j]=readIAnalog(j);
  6745  0270  0021               	movlb	1	; select bank1
  6746  0271  01E5               	clrf	main@j^(0+128)
  6747  0272  3004               	movlw	4
  6748  0273  0265               	subwf	main@j^(0+128),w
  6749  0274  1803               	btfsc	3,0
  6750  0275  2A94               	goto	l3215
  6751  0276                     l3209:	
  6752  0276  0865               	movf	main@j^(0+128),w
  6753  0277  0020               	movlb	0	; select bank0
  6754  0278  00D8               	movwf	??_main
  6755  0279  01D9               	clrf	??_main+1
  6756  027A  0858               	movf	??_main,w
  6757  027B  00A6               	movwf	readIAnalog@channel
  6758  027C  0859               	movf	??_main+1,w
  6759  027D  00A7               	movwf	readIAnalog@channel+1
  6760  027E  318D  2583  3182   	fcall	_readIAnalog
  6761  0281  0021               	movlb	1	; select bank1
  6762  0282  3565               	lslf	main@j^(0+128),w
  6763  0283  3EA0               	addlw	(low (_Ianalogs| 0))& (0+255)
  6764  0284  0086               	movwf	6
  6765  0285  0187               	clrf	7
  6766  0286  0020               	movlb	0	; select bank0
  6767  0287  0826               	movf	?_readIAnalog,w
  6768  0288  3FC0               	movwi [0]fsr1
  6769  0289  0827               	movf	?_readIAnalog+1,w
  6770  028A  3FC1               	movwi [1]fsr1
  6771  028B  3001               	movlw	1
  6772  028C  00D8               	movwf	??_main
  6773  028D  0858               	movf	??_main,w
  6774  028E  0021               	movlb	1	; select bank1
  6775  028F  07E5               	addwf	main@j^(0+128),f
  6776  0290  3004               	movlw	4
  6777  0291  0265               	subwf	main@j^(0+128),w
  6778  0292  1C03               	skipc
  6779  0293  2A76               	goto	l3209
  6780  0294                     l3215:	
  6781                           
  6782                           ;main.c: 99: Vanalogs[0]=ADCRead(21);
  6783  0294  3015               	movlw	21
  6784  0295  3192  2295  3182   	fcall	_ADCRead
  6785  0298  0871               	movf	?_ADCRead+1,w
  6786  0299  0021               	movlb	1	; select bank1
  6787  029A  00A9               	movwf	(_Vanalogs+1)^(0+128)
  6788  029B  0870               	movf	?_ADCRead,w
  6789  029C  00A8               	movwf	_Vanalogs^(0+128)
  6790                           
  6791                           ;main.c: 101: Vanalogs[1]=ADCRead(17);
  6792  029D  3011               	movlw	17
  6793  029E  3192  2295  3182   	fcall	_ADCRead
  6794  02A1  0871               	movf	?_ADCRead+1,w
  6795  02A2  0021               	movlb	1	; select bank1
  6796  02A3  00AB               	movwf	((_Vanalogs+1)^(0+128)+2)
  6797  02A4  0870               	movf	?_ADCRead,w
  6798  02A5  00AA               	movwf	(_Vanalogs^(0+128)+2)
  6799                           
  6800                           ;main.c: 103: Vanalogs[2]=ADCRead(23);
  6801  02A6  3017               	movlw	23
  6802  02A7  3192  2295  3182   	fcall	_ADCRead
  6803  02AA  0871               	movf	?_ADCRead+1,w
  6804  02AB  0021               	movlb	1	; select bank1
  6805  02AC  00AD               	movwf	((_Vanalogs+1)^(0+128)+4)
  6806  02AD  0870               	movf	?_ADCRead,w
  6807  02AE  00AC               	movwf	(_Vanalogs^(0+128)+4)
  6808                           
  6809                           ;main.c: 105: Vanalogs[3]=ADCRead(19);
  6810  02AF  3013               	movlw	19
  6811  02B0  3192  2295  3182   	fcall	_ADCRead
  6812  02B3  0871               	movf	?_ADCRead+1,w
  6813  02B4  0021               	movlb	1	; select bank1
  6814  02B5  00AF               	movwf	((_Vanalogs+1)^(0+128)+6)
  6815  02B6  0870               	movf	?_ADCRead,w
  6816  02B7  00AE               	movwf	(_Vanalogs^(0+128)+6)
  6817                           
  6818                           ;main.c: 107: if(!(RB2))faultNotReset+=1;
  6819  02B8  0020               	movlb	0	; select bank0
  6820  02B9  190D               	btfsc	13,2	;volatile
  6821  02BA  2AC0               	goto	l3221
  6822  02BB  3001               	movlw	1
  6823  02BC  0021               	movlb	1	; select bank1
  6824  02BD  07DC               	addwf	main@faultNotReset^(0+128),f
  6825  02BE  3000               	movlw	0
  6826  02BF  3DDD               	addwfc	(main@faultNotReset+1)^(0+128),f
  6827  02C0                     l3221:	
  6828                           
  6829                           ;main.c: 109: voltage[0]=(int16_t)(Vanalogs[0]/.54503);
  6830  02C0  0021               	movlb	1	; select bank1
  6831  02C1  0829               	movf	(_Vanalogs+1)^(0+128),w
  6832  02C2  00F9               	movwf	___awtoft@c+1
  6833  02C3  0828               	movf	_Vanalogs^(0+128),w
  6834  02C4  00F8               	movwf	___awtoft@c
  6835  02C5  3193  2348  3182   	fcall	___awtoft
  6836  02C8  0878               	movf	?___awtoft,w
  6837  02C9  0020               	movlb	0	; select bank0
  6838  02CA  00A3               	movwf	___ftdiv@f1
  6839  02CB  0879               	movf	?___awtoft+1,w
  6840  02CC  00A4               	movwf	___ftdiv@f1+1
  6841  02CD  087A               	movf	?___awtoft+2,w
  6842  02CE  00A5               	movwf	___ftdiv@f1+2
  6843  02CF  3087               	movlw	135
  6844  02D0  00A0               	movwf	___ftdiv@f2
  6845  02D1  300B               	movlw	11
  6846  02D2  00A1               	movwf	___ftdiv@f2+1
  6847  02D3  303F               	movlw	63
  6848  02D4  00A2               	movwf	___ftdiv@f2+2
  6849  02D5  3180  2008  3182   	fcall	___ftdiv
  6850  02D8  0020               	movlb	0	; select bank0
  6851  02D9  0820               	movf	?___ftdiv,w
  6852  02DA  00B0               	movwf	___fttol@f1
  6853  02DB  0821               	movf	?___ftdiv+1,w
  6854  02DC  00B1               	movwf	___fttol@f1+1
  6855  02DD  0822               	movf	?___ftdiv+2,w
  6856  02DE  00B2               	movwf	___fttol@f1+2
  6857  02DF  3189  2102  3182   	fcall	___fttol
  6858  02E2  0020               	movlb	0	; select bank0
  6859  02E3  0831               	movf	?___fttol+1,w
  6860  02E4  0021               	movlb	1	; select bank1
  6861  02E5  00B1               	movwf	(_voltage+1)^(0+128)
  6862  02E6  0020               	movlb	0	; select bank0
  6863  02E7  0830               	movf	?___fttol,w
  6864  02E8  0021               	movlb	1	; select bank1
  6865  02E9  00B0               	movwf	_voltage^(0+128)
  6866                           
  6867                           ;main.c: 111: voltage[1]=(int16_t)(Vanalogs[1]/.54503);
  6868  02EA  082B               	movf	((_Vanalogs+1)^(0+128)+2),w
  6869  02EB  00F9               	movwf	___awtoft@c+1
  6870  02EC  082A               	movf	(_Vanalogs^(0+128)+2),w
  6871  02ED  00F8               	movwf	___awtoft@c
  6872  02EE  3193  2348  3182   	fcall	___awtoft
  6873  02F1  0878               	movf	?___awtoft,w
  6874  02F2  0020               	movlb	0	; select bank0
  6875  02F3  00A3               	movwf	___ftdiv@f1
  6876  02F4  0879               	movf	?___awtoft+1,w
  6877  02F5  00A4               	movwf	___ftdiv@f1+1
  6878  02F6  087A               	movf	?___awtoft+2,w
  6879  02F7  00A5               	movwf	___ftdiv@f1+2
  6880  02F8  3087               	movlw	135
  6881  02F9  00A0               	movwf	___ftdiv@f2
  6882  02FA  300B               	movlw	11
  6883  02FB  00A1               	movwf	___ftdiv@f2+1
  6884  02FC  303F               	movlw	63
  6885  02FD  00A2               	movwf	___ftdiv@f2+2
  6886  02FE  3180  2008  3182   	fcall	___ftdiv
  6887  0301  0020               	movlb	0	; select bank0
  6888  0302  0820               	movf	?___ftdiv,w
  6889  0303  00B0               	movwf	___fttol@f1
  6890  0304  0821               	movf	?___ftdiv+1,w
  6891  0305  00B1               	movwf	___fttol@f1+1
  6892  0306  0822               	movf	?___ftdiv+2,w
  6893  0307  00B2               	movwf	___fttol@f1+2
  6894  0308  3189  2102  3182   	fcall	___fttol
  6895  030B  0020               	movlb	0	; select bank0
  6896  030C  0831               	movf	?___fttol+1,w
  6897  030D  0021               	movlb	1	; select bank1
  6898  030E  00B3               	movwf	((_voltage+1)^(0+128)+2)
  6899  030F  0020               	movlb	0	; select bank0
  6900  0310  0830               	movf	?___fttol,w
  6901  0311  0021               	movlb	1	; select bank1
  6902  0312  00B2               	movwf	(_voltage^(0+128)+2)
  6903                           
  6904                           ;main.c: 113: voltage[2]=(int16_t)(Vanalogs[2]/.20885);
  6905  0313  082D               	movf	((_Vanalogs+1)^(0+128)+4),w
  6906  0314  00F9               	movwf	___awtoft@c+1
  6907  0315  082C               	movf	(_Vanalogs^(0+128)+4),w
  6908  0316  00F8               	movwf	___awtoft@c
  6909  0317  3193  2348  3182   	fcall	___awtoft
  6910  031A  0878               	movf	?___awtoft,w
  6911  031B  0020               	movlb	0	; select bank0
  6912  031C  00A3               	movwf	___ftdiv@f1
  6913  031D  0879               	movf	?___awtoft+1,w
  6914  031E  00A4               	movwf	___ftdiv@f1+1
  6915  031F  087A               	movf	?___awtoft+2,w
  6916  0320  00A5               	movwf	___ftdiv@f1+2
  6917  0321  30DD               	movlw	221
  6918  0322  00A0               	movwf	___ftdiv@f2
  6919  0323  3055               	movlw	85
  6920  0324  00A1               	movwf	___ftdiv@f2+1
  6921  0325  303E               	movlw	62
  6922  0326  00A2               	movwf	___ftdiv@f2+2
  6923  0327  3180  2008  3182   	fcall	___ftdiv
  6924  032A  0020               	movlb	0	; select bank0
  6925  032B  0820               	movf	?___ftdiv,w
  6926  032C  00B0               	movwf	___fttol@f1
  6927  032D  0821               	movf	?___ftdiv+1,w
  6928  032E  00B1               	movwf	___fttol@f1+1
  6929  032F  0822               	movf	?___ftdiv+2,w
  6930  0330  00B2               	movwf	___fttol@f1+2
  6931  0331  3189  2102  3182   	fcall	___fttol
  6932  0334  0020               	movlb	0	; select bank0
  6933  0335  0831               	movf	?___fttol+1,w
  6934  0336  0021               	movlb	1	; select bank1
  6935  0337  00B5               	movwf	((_voltage+1)^(0+128)+4)
  6936  0338  0020               	movlb	0	; select bank0
  6937  0339  0830               	movf	?___fttol,w
  6938  033A  0021               	movlb	1	; select bank1
  6939  033B  00B4               	movwf	(_voltage^(0+128)+4)
  6940                           
  6941                           ;main.c: 115: voltage[3]=(int16_t)(Vanalogs[3]/.20885);
  6942  033C  082F               	movf	((_Vanalogs+1)^(0+128)+6),w
  6943  033D  00F9               	movwf	___awtoft@c+1
  6944  033E  082E               	movf	(_Vanalogs^(0+128)+6),w
  6945  033F  00F8               	movwf	___awtoft@c
  6946  0340  3193  2348  3182   	fcall	___awtoft
  6947  0343  0878               	movf	?___awtoft,w
  6948  0344  0020               	movlb	0	; select bank0
  6949  0345  00A3               	movwf	___ftdiv@f1
  6950  0346  0879               	movf	?___awtoft+1,w
  6951  0347  00A4               	movwf	___ftdiv@f1+1
  6952  0348  087A               	movf	?___awtoft+2,w
  6953  0349  00A5               	movwf	___ftdiv@f1+2
  6954  034A  30DD               	movlw	221
  6955  034B  00A0               	movwf	___ftdiv@f2
  6956  034C  3055               	movlw	85
  6957  034D  00A1               	movwf	___ftdiv@f2+1
  6958  034E  303E               	movlw	62
  6959  034F  00A2               	movwf	___ftdiv@f2+2
  6960  0350  3180  2008  3182   	fcall	___ftdiv
  6961  0353  0020               	movlb	0	; select bank0
  6962  0354  0820               	movf	?___ftdiv,w
  6963  0355  00B0               	movwf	___fttol@f1
  6964  0356  0821               	movf	?___ftdiv+1,w
  6965  0357  00B1               	movwf	___fttol@f1+1
  6966  0358  0822               	movf	?___ftdiv+2,w
  6967  0359  00B2               	movwf	___fttol@f1+2
  6968  035A  3189  2102  3182   	fcall	___fttol
  6969  035D  0020               	movlb	0	; select bank0
  6970  035E  0831               	movf	?___fttol+1,w
  6971  035F  0021               	movlb	1	; select bank1
  6972  0360  00B7               	movwf	((_voltage+1)^(0+128)+6)
  6973  0361  0020               	movlb	0	; select bank0
  6974  0362  0830               	movf	?___fttol,w
  6975  0363  0021               	movlb	1	; select bank1
  6976  0364  00B6               	movwf	(_voltage^(0+128)+6)
  6977                           
  6978                           ;main.c: 117: calculateCurrent0();
  6979  0365  3195  2502  3182   	fcall	_calculateCurrent0
  6980                           
  6981                           ;main.c: 119: calculateCurrent1();
  6982  0368  3195  2547  3182   	fcall	_calculateCurrent1
  6983                           
  6984                           ;main.c: 121: calculateCurrent2();
  6985  036B  3195  258C  3182   	fcall	_calculateCurrent2
  6986                           
  6987                           ;main.c: 123: calculateCurrent3();
  6988  036E  3195  25D1  3182   	fcall	_calculateCurrent3
  6989                           
  6990                           ;main.c: 125: if(Imode[0])
  6991  0371  0020               	movlb	0	; select bank0
  6992  0372  0864               	movf	_Imode,w
  6993  0373  1903               	btfsc	3,2
  6994  0374  2B96               	goto	l3251
  6995                           
  6996                           ;main.c: 126: {
  6997                           ;main.c: 127: if(voltage[2]<MPPT0)
  6998  0375  0021               	movlb	1	; select bank1
  6999  0376  0835               	movf	((_voltage+1)^(0+128)+4),w
  7000  0377  3A80               	xorlw	128
  7001  0378  0020               	movlb	0	; select bank0
  7002  0379  00D8               	movwf	??_main
  7003  037A  0021               	movlb	1	; select bank1
  7004  037B  0863               	movf	(main@MPPT0+1)^(0+128),w
  7005  037C  3A80               	xorlw	128
  7006  037D  0020               	movlb	0	; select bank0
  7007  037E  0258               	subwf	??_main,w
  7008  037F  1D03               	skipz
  7009  0380  2B84               	goto	u3785
  7010  0381  0021               	movlb	1	; select bank1
  7011  0382  0862               	movf	main@MPPT0^(0+128),w
  7012  0383  0234               	subwf	(_voltage^(0+128)+4),w
  7013  0384                     u3785:	
  7014  0384  1C03               	btfss	3,0
  7015  0385  2BA7               	goto	L2
  7016                           
  7017                           ;main.c: 134: else if(voltage[2]>MPPT0)
  7018                           
  7019                           ;main.c: 132: }
  7020                           ;main.c: 133: }
  7021                           
  7022                           ;main.c: 130: {
  7023                           ;main.c: 131: dutyCycle6+=1;
  7024                           
  7025                           ;main.c: 128: {
  7026                           ;main.c: 129: if(dutyCycle6<1023)
  7027  0386  0021               	movlb	1	; select bank1
  7028  0387  0863               	movf	(main@MPPT0+1)^(0+128),w
  7029  0388  3A80               	xorlw	128
  7030  0389  0020               	movlb	0	; select bank0
  7031  038A  00D8               	movwf	??_main
  7032  038B  0021               	movlb	1	; select bank1
  7033  038C  0835               	movf	((_voltage+1)^(0+128)+4),w
  7034  038D  3A80               	xorlw	128
  7035  038E  0020               	movlb	0	; select bank0
  7036  038F  0258               	subwf	??_main,w
  7037  0390  1D03               	skipz
  7038  0391  2BC1               	goto	u3845
  7039  0392  0021               	movlb	1	; select bank1
  7040  0393  0834               	movf	(_voltage^(0+128)+4),w
  7041  0394  0262               	subwf	main@MPPT0^(0+128),w
  7042  0395  2BC1               	goto	u3845
  7043  0396                     l3251:	
  7044                           ;main.c: 142: }
  7045                           
  7046                           ;main.c: 139: }
  7047                           ;main.c: 140: }
  7048                           
  7049                           ;main.c: 137: {
  7050                           ;main.c: 138: dutyCycle6-=1;
  7051                           
  7052                           ;main.c: 135: {
  7053                           ;main.c: 136: if(dutyCycle6>0)
  7054                           
  7055                           
  7056                           ;main.c: 143: else
  7057                           ;main.c: 144: {
  7058                           ;main.c: 145: if(voltage[0]>(int16_t)Vref[0])
  7059  0396  0020               	movlb	0	; select bank0
  7060  0397  085D               	movf	_Vref+1,w
  7061  0398  3A80               	xorlw	128
  7062  0399  00D8               	movwf	??_main
  7063  039A  0021               	movlb	1	; select bank1
  7064  039B  0831               	movf	(_voltage+1)^(0+128),w
  7065  039C  3A80               	xorlw	128
  7066  039D  0020               	movlb	0	; select bank0
  7067  039E  0258               	subwf	??_main,w
  7068  039F  1D03               	skipz
  7069  03A0  2BA5               	goto	u3825
  7070  03A1  0021               	movlb	1	; select bank1
  7071  03A2  0830               	movf	_voltage^(0+128),w
  7072  03A3  0020               	movlb	0	; select bank0
  7073  03A4  025C               	subwf	_Vref,w
  7074  03A5                     u3825:	
  7075  03A5  1803               	skipnc
  7076  03A6  2BB4               	goto	l3257
  7077  03A7                     L2:	
  7078                           
  7079                           ;main.c: 146: {
  7080                           ;main.c: 147: if(dutyCycle6<1023) dutyCycle6+=1;
  7081  03A7  3003               	movlw	3
  7082  03A8  0021               	movlb	1	; select bank1
  7083  03A9  026D               	subwf	(main@dutyCycle6+1)^(0+128),w
  7084  03AA  30FF               	movlw	255
  7085  03AB  1903               	skipnz
  7086  03AC  026C               	subwf	main@dutyCycle6^(0+128),w
  7087  03AD  1803               	skipnc
  7088  03AE  2BCC               	goto	l3263
  7089  03AF  3001               	movlw	1
  7090  03B0  07EC               	addwf	main@dutyCycle6^(0+128),f
  7091  03B1  3000               	movlw	0
  7092  03B2  3DED               	addwfc	(main@dutyCycle6+1)^(0+128),f
  7093                           
  7094                           ;main.c: 148: }
  7095  03B3  2BCC               	goto	l3263
  7096  03B4                     l3257:	
  7097                           
  7098                           ;main.c: 149: else if(voltage[0]<(int16_t)Vref[0])
  7099  03B4  0021               	movlb	1	; select bank1
  7100  03B5  0831               	movf	(_voltage+1)^(0+128),w
  7101  03B6  3A80               	xorlw	128
  7102  03B7  0020               	movlb	0	; select bank0
  7103  03B8  00D8               	movwf	??_main
  7104  03B9  085D               	movf	_Vref+1,w
  7105  03BA  3A80               	xorlw	128
  7106  03BB  0258               	subwf	??_main,w
  7107  03BC  1D03               	skipz
  7108  03BD  2BC1               	goto	u3845
  7109  03BE  085C               	movf	_Vref,w
  7110  03BF  0021               	movlb	1	; select bank1
  7111  03C0  0230               	subwf	_voltage^(0+128),w
  7112  03C1                     u3845:	
  7113  03C1  1803               	skipnc
  7114  03C2  2BCC               	goto	l3263
  7115                           
  7116                           ;main.c: 150: {
  7117                           ;main.c: 151: if(dutyCycle6>0) dutyCycle6-=1;;
  7118  03C3  0021               	movlb	1	; select bank1
  7119  03C4  086C               	movf	main@dutyCycle6^(0+128),w
  7120  03C5  046D               	iorwf	(main@dutyCycle6+1)^(0+128),w
  7121  03C6  1903               	btfsc	3,2
  7122  03C7  2BCC               	goto	l3263
  7123  03C8  3001               	movlw	1
  7124  03C9  02EC               	subwf	main@dutyCycle6^(0+128),f
  7125  03CA  3000               	movlw	0
  7126  03CB  3BED               	subwfb	(main@dutyCycle6+1)^(0+128),f
  7127  03CC                     l3263:	
  7128                           ;main.c: 152: }
  7129                           
  7130                           
  7131                           ;main.c: 154: }
  7132                           ;main.c: 156: if(Imode[1])
  7133  03CC  0020               	movlb	0	; select bank0
  7134  03CD  0865               	movf	_Imode+1,w
  7135  03CE  1903               	btfsc	3,2
  7136  03CF  2BE2               	goto	l3275
  7137                           
  7138                           ;main.c: 157: {
  7139                           ;main.c: 158: if(voltage[3]<MPPT1)
  7140  03D0  0021               	movlb	1	; select bank1
  7141  03D1  0837               	movf	((_voltage+1)^(0+128)+6),w
  7142  03D2  3A80               	xorlw	128
  7143  03D3  0020               	movlb	0	; select bank0
  7144  03D4  00D8               	movwf	??_main
  7145  03D5  0021               	movlb	1	; select bank1
  7146  03D6  0861               	movf	(main@MPPT1+1)^(0+128),w
  7147  03D7  3A80               	xorlw	128
  7148  03D8  0020               	movlb	0	; select bank0
  7149  03D9  0258               	subwf	??_main,w
  7150  03DA  1D03               	skipz
  7151  03DB  2BDF               	goto	u3875
  7152  03DC  0021               	movlb	1	; select bank1
  7153  03DD  0860               	movf	main@MPPT1^(0+128),w
  7154  03DE  0236               	subwf	(_voltage^(0+128)+6),w
  7155  03DF                     u3875:	
  7156  03DF  1C03               	btfss	3,0
  7157  03E0  2BF3               	goto	L3
  7158                           
  7159                           ;main.c: 163: }
  7160                           ;main.c: 164: }
  7161                           
  7162                           ;main.c: 161: {
  7163                           ;main.c: 162: dutyCycle7+=1;
  7164                           
  7165                           ;main.c: 159: {
  7166                           ;main.c: 160: if(dutyCycle7<1023)
  7167  03E1  2C0F               	goto	L4
  7168  03E2                     l3275:	
  7169                           ;main.c: 168: }
  7170                           ;main.c: 169: }
  7171                           
  7172                           ;main.c: 166: {
  7173                           ;main.c: 167: dutyCycle7-=1;
  7174                           
  7175                           ;main.c: 165: else if(dutyCycle7>0)
  7176                           
  7177                           
  7178                           ;main.c: 170: else
  7179                           ;main.c: 171: {
  7180                           ;main.c: 172: if(voltage[1]>(int16_t)Vref[1])
  7181  03E2  0020               	movlb	0	; select bank0
  7182  03E3  085F               	movf	_Vref+3,w
  7183  03E4  3A80               	xorlw	128
  7184  03E5  00D8               	movwf	??_main
  7185  03E6  0021               	movlb	1	; select bank1
  7186  03E7  0833               	movf	((_voltage+1)^(0+128)+2),w
  7187  03E8  3A80               	xorlw	128
  7188  03E9  0020               	movlb	0	; select bank0
  7189  03EA  0258               	subwf	??_main,w
  7190  03EB  1D03               	skipz
  7191  03EC  2BF1               	goto	u3905
  7192  03ED  0021               	movlb	1	; select bank1
  7193  03EE  0832               	movf	(_voltage^(0+128)+2),w
  7194  03EF  0020               	movlb	0	; select bank0
  7195  03F0  025E               	subwf	_Vref+2,w
  7196  03F1                     u3905:	
  7197  03F1  1803               	skipnc
  7198  03F2  2C00               	goto	l3281
  7199  03F3                     L3:	
  7200                           
  7201                           ;main.c: 173: {
  7202                           ;main.c: 174: if(dutyCycle7<1023) dutyCycle7+=1;
  7203  03F3  3003               	movlw	3
  7204  03F4  0021               	movlb	1	; select bank1
  7205  03F5  026F               	subwf	(main@dutyCycle7+1)^(0+128),w
  7206  03F6  30FF               	movlw	255
  7207  03F7  1903               	skipnz
  7208  03F8  026E               	subwf	main@dutyCycle7^(0+128),w
  7209  03F9  1803               	skipnc
  7210  03FA  2C18               	goto	l3287
  7211  03FB  3001               	movlw	1
  7212  03FC  07EE               	addwf	main@dutyCycle7^(0+128),f
  7213  03FD  3000               	movlw	0
  7214  03FE  3DEF               	addwfc	(main@dutyCycle7+1)^(0+128),f
  7215                           
  7216                           ;main.c: 175: }
  7217  03FF  2C18               	goto	l3287
  7218  0400                     l3281:	
  7219                           
  7220                           ;main.c: 176: else if(voltage[1]<(int16_t)Vref[1])
  7221  0400  0021               	movlb	1	; select bank1
  7222  0401  0833               	movf	((_voltage+1)^(0+128)+2),w
  7223  0402  3A80               	xorlw	128
  7224  0403  0020               	movlb	0	; select bank0
  7225  0404  00D8               	movwf	??_main
  7226  0405  085F               	movf	_Vref+3,w
  7227  0406  3A80               	xorlw	128
  7228  0407  0258               	subwf	??_main,w
  7229  0408  1D03               	skipz
  7230  0409  2C0D               	goto	u3925
  7231  040A  085E               	movf	_Vref+2,w
  7232  040B  0021               	movlb	1	; select bank1
  7233  040C  0232               	subwf	(_voltage^(0+128)+2),w
  7234  040D                     u3925:	
  7235  040D  1803               	skipnc
  7236  040E  2C18               	goto	l3287
  7237  040F                     L4:	
  7238                           
  7239                           ;main.c: 177: {
  7240                           ;main.c: 178: if(dutyCycle7>0) dutyCycle7-=1;;
  7241  040F  0021               	movlb	1	; select bank1
  7242  0410  086E               	movf	main@dutyCycle7^(0+128),w
  7243  0411  046F               	iorwf	(main@dutyCycle7+1)^(0+128),w
  7244  0412  1903               	btfsc	3,2
  7245  0413  2C18               	goto	l3287
  7246  0414  3001               	movlw	1
  7247  0415  02EE               	subwf	main@dutyCycle7^(0+128),f
  7248  0416  3000               	movlw	0
  7249  0417  3BEF               	subwfb	(main@dutyCycle7+1)^(0+128),f
  7250  0418                     l3287:	
  7251                           ;main.c: 179: }
  7252                           
  7253                           
  7254                           ;main.c: 181: }
  7255                           ;main.c: 183: slowLoop+=1;
  7256  0418  3001               	movlw	1
  7257  0419  0020               	movlb	0	; select bank0
  7258  041A  00D8               	movwf	??_main
  7259  041B  0858               	movf	??_main,w
  7260  041C  0021               	movlb	1	; select bank1
  7261  041D  07DF               	addwf	main@slowLoop^(0+128),f
  7262                           
  7263                           ;main.c: 185: dutyCycle1=600;
  7264  041E  3058               	movlw	88
  7265  041F  00EA               	movwf	main@dutyCycle1^(0+128)
  7266  0420  3002               	movlw	2
  7267  0421  00EB               	movwf	(main@dutyCycle1^(0+128)+1)
  7268                           
  7269                           ;main.c: 188: PWM1_LoadDutyValue(dutyCycle1);
  7270  0422  086B               	movf	(main@dutyCycle1+1)^(0+128),w
  7271  0423  00F1               	movwf	PWM1_LoadDutyValue@dutyCycle1+1
  7272  0424  086A               	movf	main@dutyCycle1^(0+128),w
  7273  0425  00F0               	movwf	PWM1_LoadDutyValue@dutyCycle1
  7274  0426  3192  22AA  3182   	fcall	_PWM1_LoadDutyValue
  7275                           
  7276                           ;main.c: 189: PWM6_LoadDutyValue(dutyCycle6);
  7277  0429  0021               	movlb	1	; select bank1
  7278  042A  086D               	movf	(main@dutyCycle6+1)^(0+128),w
  7279  042B  00F1               	movwf	PWM6_LoadDutyValue@dutyCycle6+1
  7280  042C  086C               	movf	main@dutyCycle6^(0+128),w
  7281  042D  00F0               	movwf	PWM6_LoadDutyValue@dutyCycle6
  7282  042E  3192  22C0  3182   	fcall	_PWM6_LoadDutyValue
  7283                           
  7284                           ;main.c: 190: PWM7_LoadDutyValue(dutyCycle7);
  7285  0431  0021               	movlb	1	; select bank1
  7286  0432  086F               	movf	(main@dutyCycle7+1)^(0+128),w
  7287  0433  00F1               	movwf	PWM7_LoadDutyValue@dutyCycle7+1
  7288  0434  086E               	movf	main@dutyCycle7^(0+128),w
  7289  0435  00F0               	movwf	PWM7_LoadDutyValue@dutyCycle7
  7290  0436  3192  22D6  3182   	fcall	_PWM7_LoadDutyValue
  7291                           
  7292                           ;main.c: 192: menuButton = readButton();
  7293  0439  3197  277E  3182   	fcall	_readButton
  7294  043C  0020               	movlb	0	; select bank0
  7295  043D  00D8               	movwf	??_main
  7296  043E  0858               	movf	??_main,w
  7297  043F  0021               	movlb	1	; select bank1
  7298  0440  00E4               	movwf	main@menuButton^(0+128)
  7299                           
  7300                           ;main.c: 193: if(menuButton == 2) if(MPPT0>2700)MPPT1-=1;
  7301  0441  3002               	movlw	2
  7302  0442  0664               	xorwf	main@menuButton^(0+128),w
  7303  0443  1D03               	btfss	3,2
  7304  0444  2C57               	goto	l3305
  7305  0445  0863               	movf	(main@MPPT0+1)^(0+128),w
  7306  0446  3A80               	xorlw	128
  7307  0447  0020               	movlb	0	; select bank0
  7308  0448  00D8               	movwf	??_main
  7309  0449  308A               	movlw	138
  7310  044A  0258               	subwf	??_main,w
  7311  044B  1D03               	skipz
  7312  044C  2C50               	goto	u3955
  7313  044D  308D               	movlw	141
  7314  044E  0021               	movlb	1	; select bank1
  7315  044F  0262               	subwf	main@MPPT0^(0+128),w
  7316  0450                     u3955:	
  7317  0450  1C03               	skipc
  7318  0451  2C57               	goto	l3305
  7319  0452  30FF               	movlw	255
  7320  0453  0021               	movlb	1	; select bank1
  7321  0454  07E0               	addwf	main@MPPT1^(0+128),f
  7322  0455  30FF               	movlw	255
  7323  0456  3DE1               	addwfc	(main@MPPT1+1)^(0+128),f
  7324  0457                     l3305:	
  7325                           
  7326                           ;main.c: 194: if(menuButton == 3)if(MPPT1<3200)MPPT1+=1;
  7327  0457  3003               	movlw	3
  7328  0458  0021               	movlb	1	; select bank1
  7329  0459  0664               	xorwf	main@menuButton^(0+128),w
  7330  045A  1D03               	btfss	3,2
  7331  045B  2C6E               	goto	l3311
  7332  045C  0861               	movf	(main@MPPT1+1)^(0+128),w
  7333  045D  3A80               	xorlw	128
  7334  045E  0020               	movlb	0	; select bank0
  7335  045F  00D8               	movwf	??_main
  7336  0460  308C               	movlw	140
  7337  0461  0258               	subwf	??_main,w
  7338  0462  1D03               	skipz
  7339  0463  2C67               	goto	u3975
  7340  0464  3080               	movlw	128
  7341  0465  0021               	movlb	1	; select bank1
  7342  0466  0260               	subwf	main@MPPT1^(0+128),w
  7343  0467                     u3975:	
  7344  0467  1803               	skipnc
  7345  0468  2C6E               	goto	l3311
  7346  0469  3001               	movlw	1
  7347  046A  0021               	movlb	1	; select bank1
  7348  046B  07E0               	addwf	main@MPPT1^(0+128),f
  7349  046C  3000               	movlw	0
  7350  046D  3DE1               	addwfc	(main@MPPT1+1)^(0+128),f
  7351  046E                     l3311:	
  7352                           
  7353                           ;main.c: 195: if(menuButton == 1)LCDInit();
  7354  046E  0021               	movlb	1	; select bank1
  7355  046F  0364               	decf	main@menuButton^(0+128),w
  7356  0470  1D03               	btfss	3,2
  7357  0471  2C75               	goto	l3315
  7358  0472  3194  2416  3182   	fcall	_LCDInit
  7359  0475                     l3315:	
  7360                           
  7361                           ;main.c: 199: if(slowLoop>250)
  7362  0475  30FB               	movlw	251
  7363  0476  0021               	movlb	1	; select bank1
  7364  0477  025F               	subwf	main@slowLoop^(0+128),w
  7365  0478  1C03               	skipc
  7366  0479  2A5C               	goto	l3195
  7367                           
  7368                           ;main.c: 200: {
  7369                           ;main.c: 201: IOutTotal=current[0]+current[1];
  7370  047A  0838               	movf	_current^(0+128),w
  7371  047B  073A               	addwf	(_current^(0+128)+2),w
  7372  047C  00E6               	movwf	main@IOutTotal^(0+128)
  7373  047D  0839               	movf	(_current+1)^(0+128),w
  7374  047E  3D3B               	addwfc	((_current+1)^(0+128)+2),w
  7375  047F  00E7               	movwf	(main@IOutTotal+1)^(0+128)
  7376                           
  7377                           ;main.c: 204: if(IOutTotal>0)
  7378  0480  0867               	movf	(main@IOutTotal+1)^(0+128),w
  7379  0481  3A80               	xorlw	128
  7380  0482  0020               	movlb	0	; select bank0
  7381  0483  00D8               	movwf	??_main
  7382  0484  3080               	movlw	128
  7383  0485  0258               	subwf	??_main,w
  7384  0486  1D03               	skipz
  7385  0487  2C8B               	goto	u4005
  7386  0488  3001               	movlw	1
  7387  0489  0021               	movlb	1	; select bank1
  7388  048A  0266               	subwf	main@IOutTotal^(0+128),w
  7389  048B                     u4005:	
  7390  048B  1C03               	skipc
  7391  048C  2CEC               	goto	l3341
  7392                           
  7393                           ;main.c: 205: {
  7394                           ;main.c: 206: if((uint16_t)IOutTotal*4+100>dutyCycle1)dutyCycle1+=1;else dutyCycle1-=1;
  7395  048D  0021               	movlb	1	; select bank1
  7396  048E  0867               	movf	(main@IOutTotal+1)^(0+128),w
  7397  048F  0020               	movlb	0	; select bank0
  7398  0490  00D9               	movwf	??_main+1
  7399  0491  0021               	movlb	1	; select bank1
  7400  0492  0866               	movf	main@IOutTotal^(0+128),w
  7401  0493  0020               	movlb	0	; select bank0
  7402  0494  00D8               	movwf	??_main
  7403  0495  35D8               	lslf	??_main,f
  7404  0496  0DD9               	rlf	??_main+1,f
  7405  0497  35D8               	lslf	??_main,f
  7406  0498  0DD9               	rlf	??_main+1,f
  7407  0499  0858               	movf	??_main,w
  7408  049A  3E64               	addlw	100
  7409  049B  00DA               	movwf	??_main+2
  7410  049C  3000               	movlw	0
  7411  049D  3D59               	addwfc	??_main+1,w
  7412  049E  00DB               	movwf	??_main+3
  7413  049F  085B               	movf	??_main+3,w
  7414  04A0  0021               	movlb	1	; select bank1
  7415  04A1  026B               	subwf	(main@dutyCycle1+1)^(0+128),w
  7416  04A2  1D03               	skipz
  7417  04A3  2CA8               	goto	u4015
  7418  04A4  0020               	movlb	0	; select bank0
  7419  04A5  085A               	movf	??_main+2,w
  7420  04A6  0021               	movlb	1	; select bank1
  7421  04A7  026A               	subwf	main@dutyCycle1^(0+128),w
  7422  04A8                     u4015:	
  7423  04A8  1803               	skipnc
  7424  04A9  2CAF               	goto	l3325
  7425  04AA  3001               	movlw	1
  7426  04AB  07EA               	addwf	main@dutyCycle1^(0+128),f
  7427  04AC  3000               	movlw	0
  7428  04AD  3DEB               	addwfc	(main@dutyCycle1+1)^(0+128),f
  7429  04AE  2CB3               	goto	l3327
  7430  04AF                     l3325:	
  7431  04AF  3001               	movlw	1
  7432  04B0  02EA               	subwf	main@dutyCycle1^(0+128),f
  7433  04B1  3000               	movlw	0
  7434  04B2  3BEB               	subwfb	(main@dutyCycle1+1)^(0+128),f
  7435  04B3                     l3327:	
  7436                           
  7437                           ;main.c: 207: if((uint16_t)IOutTotal*4+100>tempFanOutput)if(tempFanOutput<75)tempFanOutp
      +                          ut+=1;else if(tempFanOutput>0)tempFanOutput-=1;
  7438  04B3  0867               	movf	(main@IOutTotal+1)^(0+128),w
  7439  04B4  0020               	movlb	0	; select bank0
  7440  04B5  00D9               	movwf	??_main+1
  7441  04B6  0021               	movlb	1	; select bank1
  7442  04B7  0866               	movf	main@IOutTotal^(0+128),w
  7443  04B8  0020               	movlb	0	; select bank0
  7444  04B9  00D8               	movwf	??_main
  7445  04BA  35D8               	lslf	??_main,f
  7446  04BB  0DD9               	rlf	??_main+1,f
  7447  04BC  35D8               	lslf	??_main,f
  7448  04BD  0DD9               	rlf	??_main+1,f
  7449  04BE  0858               	movf	??_main,w
  7450  04BF  3E64               	addlw	100
  7451  04C0  00DA               	movwf	??_main+2
  7452  04C1  3000               	movlw	0
  7453  04C2  3D59               	addwfc	??_main+1,w
  7454  04C3  00DB               	movwf	??_main+3
  7455  04C4  085B               	movf	??_main+3,w
  7456  04C5  0021               	movlb	1	; select bank1
  7457  04C6  0269               	subwf	(main@tempFanOutput+1)^(0+128),w
  7458  04C7  1D03               	skipz
  7459  04C8  2CCD               	goto	u4025
  7460  04C9  0020               	movlb	0	; select bank0
  7461  04CA  085A               	movf	??_main+2,w
  7462  04CB  0021               	movlb	1	; select bank1
  7463  04CC  0268               	subwf	main@tempFanOutput^(0+128),w
  7464  04CD                     u4025:	
  7465  04CD  1803               	skipnc
  7466  04CE  2CE3               	goto	l491
  7467  04CF  3000               	movlw	0
  7468  04D0  0269               	subwf	(main@tempFanOutput+1)^(0+128),w
  7469  04D1  304B               	movlw	75
  7470  04D2  1903               	skipnz
  7471  04D3  0268               	subwf	main@tempFanOutput^(0+128),w
  7472  04D4  1803               	skipnc
  7473  04D5  2CDB               	goto	l3333
  7474  04D6  3001               	movlw	1
  7475  04D7  07E8               	addwf	main@tempFanOutput^(0+128),f
  7476  04D8  3000               	movlw	0
  7477  04D9  3DE9               	addwfc	(main@tempFanOutput+1)^(0+128),f
  7478  04DA  2CE3               	goto	l491
  7479  04DB                     l3333:	
  7480  04DB  0868               	movf	main@tempFanOutput^(0+128),w
  7481  04DC  0469               	iorwf	(main@tempFanOutput+1)^(0+128),w
  7482  04DD  1903               	btfsc	3,2
  7483  04DE  2CE3               	goto	l491
  7484  04DF  3001               	movlw	1
  7485  04E0  02E8               	subwf	main@tempFanOutput^(0+128),f
  7486  04E1  3000               	movlw	0
  7487  04E2  3BE9               	subwfb	(main@tempFanOutput+1)^(0+128),f
  7488  04E3                     l491:	
  7489                           
  7490                           ;main.c: 208: dutyCycle1=tempFanOutput;
  7491  04E3  0869               	movf	(main@tempFanOutput+1)^(0+128),w
  7492  04E4  00EB               	movwf	(main@dutyCycle1+1)^(0+128)
  7493  04E5  0868               	movf	main@tempFanOutput^(0+128),w
  7494  04E6  00EA               	movwf	main@dutyCycle1^(0+128)
  7495                           
  7496                           ;main.c: 209: if(dutyCycle1<1)dutyCycle1=0;
  7497  04E7  086A               	movf	main@dutyCycle1^(0+128),w
  7498  04E8  046B               	iorwf	(main@dutyCycle1+1)^(0+128),w
  7499  04E9  1D03               	btfss	3,2
  7500  04EA  2CEF               	goto	l3343
  7501  04EB  2CED               	goto	L1
  7502  04EC                     l3341:	
  7503                           ;main.c: 210: }
  7504                           
  7505                           
  7506                           ;main.c: 211: else
  7507                           ;main.c: 212: {
  7508                           ;main.c: 213: dutyCycle1=0;
  7509  04EC  0021               	movlb	1	; select bank1
  7510  04ED                     L1:	
  7511  04ED  01EA               	clrf	main@dutyCycle1^(0+128)
  7512  04EE  01EB               	clrf	(main@dutyCycle1+1)^(0+128)
  7513  04EF                     l3343:	
  7514                           
  7515                           ;main.c: 214: }
  7516                           ;main.c: 215: if(!(RB2))
  7517  04EF  0020               	movlb	0	; select bank0
  7518  04F0  190D               	btfsc	13,2	;volatile
  7519  04F1  2D00               	goto	l3347
  7520                           
  7521                           ;main.c: 216: {
  7522                           ;main.c: 217: dutyCycle1=55;
  7523  04F2  3037               	movlw	55
  7524  04F3  0021               	movlb	1	; select bank1
  7525  04F4  00EA               	movwf	main@dutyCycle1^(0+128)
  7526  04F5  3000               	movlw	0
  7527  04F6  00EB               	movwf	(main@dutyCycle1^(0+128)+1)
  7528                           
  7529                           ;main.c: 218: batteryState[0]=CHARGE;
  7530  04F7  3004               	movlw	4
  7531  04F8  0020               	movlb	0	; select bank0
  7532  04F9  00D8               	movwf	??_main
  7533  04FA  0858               	movf	??_main,w
  7534  04FB  00E6               	movwf	_batteryState
  7535                           
  7536                           ;main.c: 219: batteryState[1]=CHARGE;
  7537  04FC  3004               	movlw	4
  7538  04FD  00D8               	movwf	??_main
  7539  04FE  0858               	movf	??_main,w
  7540  04FF  00E7               	movwf	_batteryState+1
  7541  0500                     l3347:	
  7542                           
  7543                           ;main.c: 220: }
  7544                           ;main.c: 222: ADREF = 0x00;
  7545  0500  0021               	movlb	1	; select bank1
  7546  0501  019A               	clrf	26	;volatile
  7547                           
  7548                           ;main.c: 223: batteryTemp=tempCalc(ADCRead(8));
  7549  0502  3008               	movlw	8
  7550  0503  3192  2295  3182   	fcall	_ADCRead
  7551  0506  0871               	movf	?_ADCRead+1,w
  7552  0507  0020               	movlb	0	; select bank0
  7553  0508  00CE               	movwf	tempCalc@analogValue+1
  7554  0509  0870               	movf	?_ADCRead,w
  7555  050A  00CD               	movwf	tempCalc@analogValue
  7556  050B  318B  23A6  3182   	fcall	_tempCalc
  7557  050E  0020               	movlb	0	; select bank0
  7558  050F  084E               	movf	?_tempCalc+1,w
  7559  0510  00EE               	movwf	_batteryTemp+1
  7560  0511  084D               	movf	?_tempCalc,w
  7561  0512  00ED               	movwf	_batteryTemp
  7562                           
  7563                           ;main.c: 224: ADREF = 0x03;
  7564  0513  3003               	movlw	3
  7565  0514  0021               	movlb	1	; select bank1
  7566  0515  009A               	movwf	26	;volatile
  7567                           
  7568                           ;main.c: 226: displayRefresh+=1;
  7569  0516  3001               	movlw	1
  7570  0517  0020               	movlb	0	; select bank0
  7571  0518  00D8               	movwf	??_main
  7572  0519  0858               	movf	??_main,w
  7573  051A  0021               	movlb	1	; select bank1
  7574  051B  07DE               	addwf	main@displayRefresh^(0+128),f
  7575                           
  7576                           ;main.c: 227: if(displayRefresh>80)
  7577  051C  3051               	movlw	81
  7578  051D  025E               	subwf	main@displayRefresh^(0+128),w
  7579  051E  1C03               	skipc
  7580  051F  2D25               	goto	l3361
  7581                           
  7582                           ;main.c: 228: {
  7583                           ;main.c: 229: LCDClear();
  7584  0520  3193  238D  3182   	fcall	_LCDClear
  7585                           
  7586                           ;main.c: 230: displayRefresh=0;
  7587  0523  0021               	movlb	1	; select bank1
  7588  0524  01DE               	clrf	main@displayRefresh^(0+128)
  7589  0525                     l3361:	
  7590                           
  7591                           ;main.c: 232: }
  7592                           ;main.c: 233: Battery_State_Machine(0);
  7593  0525  3000               	movlw	0
  7594  0526  3180  20B1  3182   	fcall	_Battery_State_Machine
  7595                           
  7596                           ;main.c: 234: Battery_State_Machine(1);
  7597  0529  3001               	movlw	1
  7598  052A  3180  20B1  3182   	fcall	_Battery_State_Machine
  7599                           
  7600                           ;main.c: 237: { gotoXY(0,0); LCDWriteString("In:");};
  7601  052D  01F5               	clrf	gotoXY@y
  7602  052E  3000               	movlw	0
  7603  052F  3192  226E  3182   	fcall	_gotoXY
  7604  0532  3025               	movlw	low (STR_1| (0+32768))
  7605  0533  00FC               	movwf	LCDWriteString@characters
  7606  0534  3098               	movlw	high (STR_1| (0+32768))
  7607  0535  00FD               	movwf	LCDWriteString@characters+1
  7608  0536  3192  2281  3182   	fcall	_LCDWriteString
  7609                           
  7610                           ;main.c: 238: { gotoXY(26,0); LCDWriteString("Out:");};
  7611  0539  01F5               	clrf	gotoXY@y
  7612  053A  301A               	movlw	26
  7613  053B  3192  226E  3182   	fcall	_gotoXY
  7614  053E  3020               	movlw	low (STR_2| (0+32768))
  7615  053F  00FC               	movwf	LCDWriteString@characters
  7616  0540  3098               	movlw	high (STR_2| (0+32768))
  7617  0541  00FD               	movwf	LCDWriteString@characters+1
  7618  0542  3192  2281  3182   	fcall	_LCDWriteString
  7619                           
  7620                           ;main.c: 239: { gotoXY(52,0); LCDWriteString("Ref:");};
  7621  0545  01F5               	clrf	gotoXY@y
  7622  0546  3034               	movlw	52
  7623  0547  3192  226E  3182   	fcall	_gotoXY
  7624  054A  301B               	movlw	low (STR_3| (0+32768))
  7625  054B  00FC               	movwf	LCDWriteString@characters
  7626  054C  3098               	movlw	high (STR_3| (0+32768))
  7627  054D  00FD               	movwf	LCDWriteString@characters+1
  7628  054E  3192  2281  3182   	fcall	_LCDWriteString
  7629                           
  7630                           ;main.c: 241: { gotoXY(0,1); LCDWriteInt(voltage[2],4, 2, 0);};
  7631  0551  01F5               	clrf	gotoXY@y
  7632  0552  0AF5               	incf	gotoXY@y,f
  7633  0553  3000               	movlw	0
  7634  0554  3192  226E  3182   	fcall	_gotoXY
  7635  0557  0021               	movlb	1	; select bank1
  7636  0558  0835               	movf	((_voltage+1)^(0+128)+4),w
  7637  0559  0020               	movlb	0	; select bank0
  7638  055A  00A1               	movwf	LCDWriteInt@value+1
  7639  055B  0021               	movlb	1	; select bank1
  7640  055C  0834               	movf	(_voltage^(0+128)+4),w
  7641  055D  0020               	movlb	0	; select bank0
  7642  055E  00A0               	movwf	LCDWriteInt@value
  7643  055F  3004               	movlw	4
  7644  0560  00D8               	movwf	??_main
  7645  0561  0858               	movf	??_main,w
  7646  0562  00A2               	movwf	LCDWriteInt@fieldLength
  7647  0563  3002               	movlw	2
  7648  0564  00D9               	movwf	??_main+1
  7649  0565  0859               	movf	??_main+1,w
  7650  0566  00A3               	movwf	LCDWriteInt@numPlaces
  7651  0567  01A4               	clrf	LCDWriteInt@sign
  7652  0568  318A  22ED  3182   	fcall	_LCDWriteInt
  7653                           
  7654                           ;main.c: 242: LCDWriteCharacter('V');
  7655  056B  3056               	movlw	86
  7656  056C  3196  2667  3182   	fcall	_LCDWriteCharacter
  7657                           
  7658                           ;main.c: 244: { gotoXY(26,1); LCDWriteInt(voltage[0],4, 2, 0);};
  7659  056F  01F5               	clrf	gotoXY@y
  7660  0570  0AF5               	incf	gotoXY@y,f
  7661  0571  301A               	movlw	26
  7662  0572  3192  226E  3182   	fcall	_gotoXY
  7663  0575  0021               	movlb	1	; select bank1
  7664  0576  0831               	movf	(_voltage+1)^(0+128),w
  7665  0577  0020               	movlb	0	; select bank0
  7666  0578  00A1               	movwf	LCDWriteInt@value+1
  7667  0579  0021               	movlb	1	; select bank1
  7668  057A  0830               	movf	_voltage^(0+128),w
  7669  057B  0020               	movlb	0	; select bank0
  7670  057C  00A0               	movwf	LCDWriteInt@value
  7671  057D  3004               	movlw	4
  7672  057E  00D8               	movwf	??_main
  7673  057F  0858               	movf	??_main,w
  7674  0580  00A2               	movwf	LCDWriteInt@fieldLength
  7675  0581  3002               	movlw	2
  7676  0582  00D9               	movwf	??_main+1
  7677  0583  0859               	movf	??_main+1,w
  7678  0584  00A3               	movwf	LCDWriteInt@numPlaces
  7679  0585  01A4               	clrf	LCDWriteInt@sign
  7680  0586  318A  22ED  3182   	fcall	_LCDWriteInt
  7681                           
  7682                           ;main.c: 245: LCDWriteCharacter('V');
  7683  0589  3056               	movlw	86
  7684  058A  3196  2667  3182   	fcall	_LCDWriteCharacter
  7685                           
  7686                           ;main.c: 247: { gotoXY(52,1); LCDWriteInt(Vref[0],4, 2, 0);};
  7687  058D  01F5               	clrf	gotoXY@y
  7688  058E  0AF5               	incf	gotoXY@y,f
  7689  058F  3034               	movlw	52
  7690  0590  3192  226E  3182   	fcall	_gotoXY
  7691  0593  0020               	movlb	0	; select bank0
  7692  0594  085D               	movf	_Vref+1,w
  7693  0595  00A1               	movwf	LCDWriteInt@value+1
  7694  0596  085C               	movf	_Vref,w
  7695  0597  00A0               	movwf	LCDWriteInt@value
  7696  0598  3004               	movlw	4
  7697  0599  00D8               	movwf	??_main
  7698  059A  0858               	movf	??_main,w
  7699  059B  00A2               	movwf	LCDWriteInt@fieldLength
  7700  059C  3002               	movlw	2
  7701  059D  00D9               	movwf	??_main+1
  7702  059E  0859               	movf	??_main+1,w
  7703  059F  00A3               	movwf	LCDWriteInt@numPlaces
  7704  05A0  01A4               	clrf	LCDWriteInt@sign
  7705  05A1  318A  22ED  3182   	fcall	_LCDWriteInt
  7706                           
  7707                           ;main.c: 248: LCDWriteCharacter('V');
  7708  05A4  3056               	movlw	86
  7709  05A5  3196  2667  3182   	fcall	_LCDWriteCharacter
  7710                           
  7711                           ;main.c: 250: { gotoXY(80,1); LCDWriteInt(Imode[0],1, 0, 0);};
  7712  05A8  01F5               	clrf	gotoXY@y
  7713  05A9  0AF5               	incf	gotoXY@y,f
  7714  05AA  3050               	movlw	80
  7715  05AB  3192  226E  3182   	fcall	_gotoXY
  7716  05AE  0020               	movlb	0	; select bank0
  7717  05AF  0864               	movf	_Imode,w
  7718  05B0  00A0               	movwf	LCDWriteInt@value
  7719  05B1  01A1               	clrf	LCDWriteInt@value+1
  7720  05B2  1BA0               	btfsc	LCDWriteInt@value,7
  7721  05B3  03A1               	decf	LCDWriteInt@value+1,f
  7722  05B4  01A2               	clrf	LCDWriteInt@fieldLength
  7723  05B5  0AA2               	incf	LCDWriteInt@fieldLength,f
  7724  05B6  01A3               	clrf	LCDWriteInt@numPlaces
  7725  05B7  01A4               	clrf	LCDWriteInt@sign
  7726  05B8  318A  22ED  3182   	fcall	_LCDWriteInt
  7727                           
  7728                           ;main.c: 252: { gotoXY(0,2); LCDWriteInt(current[2],3, 1, 0);};
  7729  05BB  3002               	movlw	2
  7730  05BC  0020               	movlb	0	; select bank0
  7731  05BD  00D8               	movwf	??_main
  7732  05BE  0858               	movf	??_main,w
  7733  05BF  00F5               	movwf	gotoXY@y
  7734  05C0  3000               	movlw	0
  7735  05C1  3192  226E  3182   	fcall	_gotoXY
  7736  05C4  0021               	movlb	1	; select bank1
  7737  05C5  083D               	movf	((_current+1)^(0+128)+4),w
  7738  05C6  0020               	movlb	0	; select bank0
  7739  05C7  00A1               	movwf	LCDWriteInt@value+1
  7740  05C8  0021               	movlb	1	; select bank1
  7741  05C9  083C               	movf	(_current^(0+128)+4),w
  7742  05CA  0020               	movlb	0	; select bank0
  7743  05CB  00A0               	movwf	LCDWriteInt@value
  7744  05CC  3003               	movlw	3
  7745  05CD  00D8               	movwf	??_main
  7746  05CE  0858               	movf	??_main,w
  7747  05CF  00A2               	movwf	LCDWriteInt@fieldLength
  7748  05D0  01A3               	clrf	LCDWriteInt@numPlaces
  7749  05D1  0AA3               	incf	LCDWriteInt@numPlaces,f
  7750  05D2  01A4               	clrf	LCDWriteInt@sign
  7751  05D3  318A  22ED  3182   	fcall	_LCDWriteInt
  7752                           
  7753                           ;main.c: 253: LCDWriteCharacter('A');
  7754  05D6  3041               	movlw	65
  7755  05D7  3196  2667  3182   	fcall	_LCDWriteCharacter
  7756                           
  7757                           ;main.c: 255: { gotoXY(26,2); LCDWriteInt(current[0],3, 1, 0);};
  7758  05DA  3002               	movlw	2
  7759  05DB  0020               	movlb	0	; select bank0
  7760  05DC  00D8               	movwf	??_main
  7761  05DD  0858               	movf	??_main,w
  7762  05DE  00F5               	movwf	gotoXY@y
  7763  05DF  301A               	movlw	26
  7764  05E0  3192  226E  3182   	fcall	_gotoXY
  7765  05E3  0021               	movlb	1	; select bank1
  7766  05E4  0839               	movf	(_current+1)^(0+128),w
  7767  05E5  0020               	movlb	0	; select bank0
  7768  05E6  00A1               	movwf	LCDWriteInt@value+1
  7769  05E7  0021               	movlb	1	; select bank1
  7770  05E8  0838               	movf	_current^(0+128),w
  7771  05E9  0020               	movlb	0	; select bank0
  7772  05EA  00A0               	movwf	LCDWriteInt@value
  7773  05EB  3003               	movlw	3
  7774  05EC  00D8               	movwf	??_main
  7775  05ED  0858               	movf	??_main,w
  7776  05EE  00A2               	movwf	LCDWriteInt@fieldLength
  7777  05EF  01A3               	clrf	LCDWriteInt@numPlaces
  7778  05F0  0AA3               	incf	LCDWriteInt@numPlaces,f
  7779  05F1  01A4               	clrf	LCDWriteInt@sign
  7780  05F2  318A  22ED  3182   	fcall	_LCDWriteInt
  7781                           
  7782                           ;main.c: 256: LCDWriteCharacter('A');
  7783  05F5  3041               	movlw	65
  7784  05F6  3196  2667  3182   	fcall	_LCDWriteCharacter
  7785                           
  7786                           ;main.c: 258: { gotoXY(52,2); LCDWriteInt(Iref[0],3, 1, 0);};
  7787  05F9  3002               	movlw	2
  7788  05FA  0020               	movlb	0	; select bank0
  7789  05FB  00D8               	movwf	??_main
  7790  05FC  0858               	movf	??_main,w
  7791  05FD  00F5               	movwf	gotoXY@y
  7792  05FE  3034               	movlw	52
  7793  05FF  3192  226E  3182   	fcall	_gotoXY
  7794  0602  0021               	movlb	1	; select bank1
  7795  0603  0845               	movf	(_Iref+1)^(0+128),w
  7796  0604  0020               	movlb	0	; select bank0
  7797  0605  00A1               	movwf	LCDWriteInt@value+1
  7798  0606  0021               	movlb	1	; select bank1
  7799  0607  0844               	movf	_Iref^(0+128),w
  7800  0608  0020               	movlb	0	; select bank0
  7801  0609  00A0               	movwf	LCDWriteInt@value
  7802  060A  3003               	movlw	3
  7803  060B  00D8               	movwf	??_main
  7804  060C  0858               	movf	??_main,w
  7805  060D  00A2               	movwf	LCDWriteInt@fieldLength
  7806  060E  01A3               	clrf	LCDWriteInt@numPlaces
  7807  060F  0AA3               	incf	LCDWriteInt@numPlaces,f
  7808  0610  01A4               	clrf	LCDWriteInt@sign
  7809  0611  318A  22ED  3182   	fcall	_LCDWriteInt
  7810                           
  7811                           ;main.c: 259: LCDWriteCharacter('A');
  7812  0614  3041               	movlw	65
  7813  0615  3196  2667  3182   	fcall	_LCDWriteCharacter
  7814                           
  7815                           ;main.c: 261: { gotoXY(80,2); LCDWriteInt(batteryState[0],1, 0, 0);};
  7816  0618  3002               	movlw	2
  7817  0619  0020               	movlb	0	; select bank0
  7818  061A  00D8               	movwf	??_main
  7819  061B  0858               	movf	??_main,w
  7820  061C  00F5               	movwf	gotoXY@y
  7821  061D  3050               	movlw	80
  7822  061E  3192  226E  3182   	fcall	_gotoXY
  7823  0621  0020               	movlb	0	; select bank0
  7824  0622  0866               	movf	_batteryState,w
  7825  0623  00D8               	movwf	??_main
  7826  0624  01D9               	clrf	??_main+1
  7827  0625  0858               	movf	??_main,w
  7828  0626  00A0               	movwf	LCDWriteInt@value
  7829  0627  0859               	movf	??_main+1,w
  7830  0628  00A1               	movwf	LCDWriteInt@value+1
  7831  0629  01A2               	clrf	LCDWriteInt@fieldLength
  7832  062A  0AA2               	incf	LCDWriteInt@fieldLength,f
  7833  062B  01A3               	clrf	LCDWriteInt@numPlaces
  7834  062C  01A4               	clrf	LCDWriteInt@sign
  7835  062D  318A  22ED  3182   	fcall	_LCDWriteInt
  7836                           
  7837                           ;main.c: 274: { gotoXY(0,3); LCDWriteInt(IOutTotal,4, 1, 0);};
  7838  0630  3003               	movlw	3
  7839  0631  0020               	movlb	0	; select bank0
  7840  0632  00D8               	movwf	??_main
  7841  0633  0858               	movf	??_main,w
  7842  0634  00F5               	movwf	gotoXY@y
  7843  0635  3000               	movlw	0
  7844  0636  3192  226E  3182   	fcall	_gotoXY
  7845  0639  0021               	movlb	1	; select bank1
  7846  063A  0867               	movf	(main@IOutTotal+1)^(0+128),w
  7847  063B  0020               	movlb	0	; select bank0
  7848  063C  00A1               	movwf	LCDWriteInt@value+1
  7849  063D  0021               	movlb	1	; select bank1
  7850  063E  0866               	movf	main@IOutTotal^(0+128),w
  7851  063F  0020               	movlb	0	; select bank0
  7852  0640  00A0               	movwf	LCDWriteInt@value
  7853  0641  3004               	movlw	4
  7854  0642  00D8               	movwf	??_main
  7855  0643  0858               	movf	??_main,w
  7856  0644  00A2               	movwf	LCDWriteInt@fieldLength
  7857  0645  01A3               	clrf	LCDWriteInt@numPlaces
  7858  0646  0AA3               	incf	LCDWriteInt@numPlaces,f
  7859  0647  01A4               	clrf	LCDWriteInt@sign
  7860  0648  318A  22ED  3182   	fcall	_LCDWriteInt
  7861                           
  7862                           ;main.c: 275: { gotoXY(24,3); LCDWriteInt((uint16_t)IOutTotal*4+100,4, 0, 0);};
  7863  064B  3003               	movlw	3
  7864  064C  0020               	movlb	0	; select bank0
  7865  064D  00D8               	movwf	??_main
  7866  064E  0858               	movf	??_main,w
  7867  064F  00F5               	movwf	gotoXY@y
  7868  0650  3018               	movlw	24
  7869  0651  3192  226E  3182   	fcall	_gotoXY
  7870  0654  0021               	movlb	1	; select bank1
  7871  0655  0867               	movf	(main@IOutTotal+1)^(0+128),w
  7872  0656  0020               	movlb	0	; select bank0
  7873  0657  00D9               	movwf	??_main+1
  7874  0658  0021               	movlb	1	; select bank1
  7875  0659  0866               	movf	main@IOutTotal^(0+128),w
  7876  065A  0020               	movlb	0	; select bank0
  7877  065B  00D8               	movwf	??_main
  7878  065C  35D8               	lslf	??_main,f
  7879  065D  0DD9               	rlf	??_main+1,f
  7880  065E  35D8               	lslf	??_main,f
  7881  065F  0DD9               	rlf	??_main+1,f
  7882  0660  0858               	movf	??_main,w
  7883  0661  3E64               	addlw	100
  7884  0662  00A0               	movwf	LCDWriteInt@value
  7885  0663  3000               	movlw	0
  7886  0664  3D59               	addwfc	??_main+1,w
  7887  0665  00A1               	movwf	LCDWriteInt@value+1
  7888  0666  3004               	movlw	4
  7889  0667  00DA               	movwf	??_main+2
  7890  0668  085A               	movf	??_main+2,w
  7891  0669  00A2               	movwf	LCDWriteInt@fieldLength
  7892  066A  01A3               	clrf	LCDWriteInt@numPlaces
  7893  066B  01A4               	clrf	LCDWriteInt@sign
  7894  066C  318A  22ED  3182   	fcall	_LCDWriteInt
  7895                           
  7896                           ;main.c: 276: { gotoXY(44,3); LCDWriteInt(tempFanOutput,3, 0, 0);};
  7897  066F  3003               	movlw	3
  7898  0670  0020               	movlb	0	; select bank0
  7899  0671  00D8               	movwf	??_main
  7900  0672  0858               	movf	??_main,w
  7901  0673  00F5               	movwf	gotoXY@y
  7902  0674  302C               	movlw	44
  7903  0675  3192  226E  3182   	fcall	_gotoXY
  7904  0678  0021               	movlb	1	; select bank1
  7905  0679  0869               	movf	(main@tempFanOutput+1)^(0+128),w
  7906  067A  0020               	movlb	0	; select bank0
  7907  067B  00A1               	movwf	LCDWriteInt@value+1
  7908  067C  0021               	movlb	1	; select bank1
  7909  067D  0868               	movf	main@tempFanOutput^(0+128),w
  7910  067E  0020               	movlb	0	; select bank0
  7911  067F  00A0               	movwf	LCDWriteInt@value
  7912  0680  3003               	movlw	3
  7913  0681  00D8               	movwf	??_main
  7914  0682  0858               	movf	??_main,w
  7915  0683  00A2               	movwf	LCDWriteInt@fieldLength
  7916  0684  01A3               	clrf	LCDWriteInt@numPlaces
  7917  0685  01A4               	clrf	LCDWriteInt@sign
  7918  0686  318A  22ED  3182   	fcall	_LCDWriteInt
  7919                           
  7920                           ;main.c: 277: { gotoXY(64,3); LCDWriteInt(dutyCycle1,3, 0, 0);};
  7921  0689  3003               	movlw	3
  7922  068A  0020               	movlb	0	; select bank0
  7923  068B  00D8               	movwf	??_main
  7924  068C  0858               	movf	??_main,w
  7925  068D  00F5               	movwf	gotoXY@y
  7926  068E  3040               	movlw	64
  7927  068F  3192  226E  3182   	fcall	_gotoXY
  7928  0692  0021               	movlb	1	; select bank1
  7929  0693  086B               	movf	(main@dutyCycle1+1)^(0+128),w
  7930  0694  0020               	movlb	0	; select bank0
  7931  0695  00A1               	movwf	LCDWriteInt@value+1
  7932  0696  0021               	movlb	1	; select bank1
  7933  0697  086A               	movf	main@dutyCycle1^(0+128),w
  7934  0698  0020               	movlb	0	; select bank0
  7935  0699  00A0               	movwf	LCDWriteInt@value
  7936  069A  3003               	movlw	3
  7937  069B  00D8               	movwf	??_main
  7938  069C  0858               	movf	??_main,w
  7939  069D  00A2               	movwf	LCDWriteInt@fieldLength
  7940  069E  01A3               	clrf	LCDWriteInt@numPlaces
  7941  069F  01A4               	clrf	LCDWriteInt@sign
  7942  06A0  318A  22ED  3182   	fcall	_LCDWriteInt
  7943                           
  7944                           ;main.c: 281: { gotoXY(0,4); LCDWriteInt(current[3],3, 1, 0);};
  7945  06A3  3004               	movlw	4
  7946  06A4  0020               	movlb	0	; select bank0
  7947  06A5  00D8               	movwf	??_main
  7948  06A6  0858               	movf	??_main,w
  7949  06A7  00F5               	movwf	gotoXY@y
  7950  06A8  3000               	movlw	0
  7951  06A9  3192  226E  3182   	fcall	_gotoXY
  7952  06AC  0021               	movlb	1	; select bank1
  7953  06AD  083F               	movf	((_current+1)^(0+128)+6),w
  7954  06AE  0020               	movlb	0	; select bank0
  7955  06AF  00A1               	movwf	LCDWriteInt@value+1
  7956  06B0  0021               	movlb	1	; select bank1
  7957  06B1  083E               	movf	(_current^(0+128)+6),w
  7958  06B2  0020               	movlb	0	; select bank0
  7959  06B3  00A0               	movwf	LCDWriteInt@value
  7960  06B4  3003               	movlw	3
  7961  06B5  00D8               	movwf	??_main
  7962  06B6  0858               	movf	??_main,w
  7963  06B7  00A2               	movwf	LCDWriteInt@fieldLength
  7964  06B8  01A3               	clrf	LCDWriteInt@numPlaces
  7965  06B9  0AA3               	incf	LCDWriteInt@numPlaces,f
  7966  06BA  01A4               	clrf	LCDWriteInt@sign
  7967  06BB  318A  22ED  3182   	fcall	_LCDWriteInt
  7968                           
  7969                           ;main.c: 282: LCDWriteCharacter('A');
  7970  06BE  3041               	movlw	65
  7971  06BF  3196  2667  3182   	fcall	_LCDWriteCharacter
  7972                           
  7973                           ;main.c: 284: { gotoXY(26,4); LCDWriteInt(current[1],3, 1, 0);};
  7974  06C2  3004               	movlw	4
  7975  06C3  0020               	movlb	0	; select bank0
  7976  06C4  00D8               	movwf	??_main
  7977  06C5  0858               	movf	??_main,w
  7978  06C6  00F5               	movwf	gotoXY@y
  7979  06C7  301A               	movlw	26
  7980  06C8  3192  226E  3182   	fcall	_gotoXY
  7981  06CB  0021               	movlb	1	; select bank1
  7982  06CC  083B               	movf	((_current+1)^(0+128)+2),w
  7983  06CD  0020               	movlb	0	; select bank0
  7984  06CE  00A1               	movwf	LCDWriteInt@value+1
  7985  06CF  0021               	movlb	1	; select bank1
  7986  06D0  083A               	movf	(_current^(0+128)+2),w
  7987  06D1  0020               	movlb	0	; select bank0
  7988  06D2  00A0               	movwf	LCDWriteInt@value
  7989  06D3  3003               	movlw	3
  7990  06D4  00D8               	movwf	??_main
  7991  06D5  0858               	movf	??_main,w
  7992  06D6  00A2               	movwf	LCDWriteInt@fieldLength
  7993  06D7  01A3               	clrf	LCDWriteInt@numPlaces
  7994  06D8  0AA3               	incf	LCDWriteInt@numPlaces,f
  7995  06D9  01A4               	clrf	LCDWriteInt@sign
  7996  06DA  318A  22ED  3182   	fcall	_LCDWriteInt
  7997                           
  7998                           ;main.c: 285: LCDWriteCharacter('A');
  7999  06DD  3041               	movlw	65
  8000  06DE  3196  2667  3182   	fcall	_LCDWriteCharacter
  8001                           
  8002                           ;main.c: 287: { gotoXY(52,4); LCDWriteInt(Iref[1],3, 1, 0);};
  8003  06E1  3004               	movlw	4
  8004  06E2  0020               	movlb	0	; select bank0
  8005  06E3  00D8               	movwf	??_main
  8006  06E4  0858               	movf	??_main,w
  8007  06E5  00F5               	movwf	gotoXY@y
  8008  06E6  3034               	movlw	52
  8009  06E7  3192  226E  3182   	fcall	_gotoXY
  8010  06EA  0021               	movlb	1	; select bank1
  8011  06EB  0847               	movf	((_Iref+1)^(0+128)+2),w
  8012  06EC  0020               	movlb	0	; select bank0
  8013  06ED  00A1               	movwf	LCDWriteInt@value+1
  8014  06EE  0021               	movlb	1	; select bank1
  8015  06EF  0846               	movf	(_Iref^(0+128)+2),w
  8016  06F0  0020               	movlb	0	; select bank0
  8017  06F1  00A0               	movwf	LCDWriteInt@value
  8018  06F2  3003               	movlw	3
  8019  06F3  00D8               	movwf	??_main
  8020  06F4  0858               	movf	??_main,w
  8021  06F5  00A2               	movwf	LCDWriteInt@fieldLength
  8022  06F6  01A3               	clrf	LCDWriteInt@numPlaces
  8023  06F7  0AA3               	incf	LCDWriteInt@numPlaces,f
  8024  06F8  01A4               	clrf	LCDWriteInt@sign
  8025  06F9  318A  22ED  3182   	fcall	_LCDWriteInt
  8026                           
  8027                           ;main.c: 288: LCDWriteCharacter('A');
  8028  06FC  3041               	movlw	65
  8029  06FD  3196  2667  3182   	fcall	_LCDWriteCharacter
  8030                           
  8031                           ;main.c: 290: { gotoXY(80,4); LCDWriteInt(batteryState[1],1, 0, 0);};
  8032  0700  3004               	movlw	4
  8033  0701  0020               	movlb	0	; select bank0
  8034  0702  00D8               	movwf	??_main
  8035  0703  0858               	movf	??_main,w
  8036  0704  00F5               	movwf	gotoXY@y
  8037  0705  3050               	movlw	80
  8038  0706  3192  226E  3182   	fcall	_gotoXY
  8039  0709  0020               	movlb	0	; select bank0
  8040  070A  0867               	movf	_batteryState+1,w
  8041  070B  00D8               	movwf	??_main
  8042  070C  01D9               	clrf	??_main+1
  8043  070D  0858               	movf	??_main,w
  8044  070E  00A0               	movwf	LCDWriteInt@value
  8045  070F  0859               	movf	??_main+1,w
  8046  0710  00A1               	movwf	LCDWriteInt@value+1
  8047  0711  01A2               	clrf	LCDWriteInt@fieldLength
  8048  0712  0AA2               	incf	LCDWriteInt@fieldLength,f
  8049  0713  01A3               	clrf	LCDWriteInt@numPlaces
  8050  0714  01A4               	clrf	LCDWriteInt@sign
  8051  0715  318A  22ED  3182   	fcall	_LCDWriteInt
  8052                           
  8053                           ;main.c: 294: { gotoXY(0,5); LCDWriteInt(dutyCycle6,4, 0, 0);};
  8054  0718  3005               	movlw	5
  8055  0719  0020               	movlb	0	; select bank0
  8056  071A  00D8               	movwf	??_main
  8057  071B  0858               	movf	??_main,w
  8058  071C  00F5               	movwf	gotoXY@y
  8059  071D  3000               	movlw	0
  8060  071E  3192  226E  3182   	fcall	_gotoXY
  8061  0721  0021               	movlb	1	; select bank1
  8062  0722  086D               	movf	(main@dutyCycle6+1)^(0+128),w
  8063  0723  0020               	movlb	0	; select bank0
  8064  0724  00A1               	movwf	LCDWriteInt@value+1
  8065  0725  0021               	movlb	1	; select bank1
  8066  0726  086C               	movf	main@dutyCycle6^(0+128),w
  8067  0727  0020               	movlb	0	; select bank0
  8068  0728  00A0               	movwf	LCDWriteInt@value
  8069  0729  3004               	movlw	4
  8070  072A  00D8               	movwf	??_main
  8071  072B  0858               	movf	??_main,w
  8072  072C  00A2               	movwf	LCDWriteInt@fieldLength
  8073  072D  01A3               	clrf	LCDWriteInt@numPlaces
  8074  072E  01A4               	clrf	LCDWriteInt@sign
  8075  072F  318A  22ED  3182   	fcall	_LCDWriteInt
  8076                           
  8077                           ;main.c: 295: { gotoXY(18,5); LCDWriteInt(VHoldMode[0],1, 0, 0);};
  8078  0732  3005               	movlw	5
  8079  0733  0020               	movlb	0	; select bank0
  8080  0734  00D8               	movwf	??_main
  8081  0735  0858               	movf	??_main,w
  8082  0736  00F5               	movwf	gotoXY@y
  8083  0737  3012               	movlw	18
  8084  0738  3192  226E  3182   	fcall	_gotoXY
  8085  073B  0020               	movlb	0	; select bank0
  8086  073C  0862               	movf	_VHoldMode,w
  8087  073D  00A0               	movwf	LCDWriteInt@value
  8088  073E  01A1               	clrf	LCDWriteInt@value+1
  8089  073F  1BA0               	btfsc	LCDWriteInt@value,7
  8090  0740  03A1               	decf	LCDWriteInt@value+1,f
  8091  0741  01A2               	clrf	LCDWriteInt@fieldLength
  8092  0742  0AA2               	incf	LCDWriteInt@fieldLength,f
  8093  0743  01A3               	clrf	LCDWriteInt@numPlaces
  8094  0744  01A4               	clrf	LCDWriteInt@sign
  8095  0745  318A  22ED  3182   	fcall	_LCDWriteInt
  8096                           
  8097                           ;main.c: 296: LCDWriteCharacter(' ');
  8098  0748  3020               	movlw	32
  8099  0749  3196  2667  3182   	fcall	_LCDWriteCharacter
  8100                           
  8101                           ;main.c: 297: { gotoXY(28,5); LCDWriteInt(dutyCycle7,4, 0, 0);};
  8102  074C  3005               	movlw	5
  8103  074D  0020               	movlb	0	; select bank0
  8104  074E  00D8               	movwf	??_main
  8105  074F  0858               	movf	??_main,w
  8106  0750  00F5               	movwf	gotoXY@y
  8107  0751  301C               	movlw	28
  8108  0752  3192  226E  3182   	fcall	_gotoXY
  8109  0755  0021               	movlb	1	; select bank1
  8110  0756  086F               	movf	(main@dutyCycle7+1)^(0+128),w
  8111  0757  0020               	movlb	0	; select bank0
  8112  0758  00A1               	movwf	LCDWriteInt@value+1
  8113  0759  0021               	movlb	1	; select bank1
  8114  075A  086E               	movf	main@dutyCycle7^(0+128),w
  8115  075B  0020               	movlb	0	; select bank0
  8116  075C  00A0               	movwf	LCDWriteInt@value
  8117  075D  3004               	movlw	4
  8118  075E  00D8               	movwf	??_main
  8119  075F  0858               	movf	??_main,w
  8120  0760  00A2               	movwf	LCDWriteInt@fieldLength
  8121  0761  01A3               	clrf	LCDWriteInt@numPlaces
  8122  0762  01A4               	clrf	LCDWriteInt@sign
  8123  0763  318A  22ED  3182   	fcall	_LCDWriteInt
  8124                           
  8125                           ;main.c: 298: { gotoXY(46,5); LCDWriteInt(VHoldMode[1],1, 0, 0);};
  8126  0766  3005               	movlw	5
  8127  0767  0020               	movlb	0	; select bank0
  8128  0768  00D8               	movwf	??_main
  8129  0769  0858               	movf	??_main,w
  8130  076A  00F5               	movwf	gotoXY@y
  8131  076B  302E               	movlw	46
  8132  076C  3192  226E  3182   	fcall	_gotoXY
  8133  076F  0020               	movlb	0	; select bank0
  8134  0770  0863               	movf	_VHoldMode+1,w
  8135  0771  00A0               	movwf	LCDWriteInt@value
  8136  0772  01A1               	clrf	LCDWriteInt@value+1
  8137  0773  1BA0               	btfsc	LCDWriteInt@value,7
  8138  0774  03A1               	decf	LCDWriteInt@value+1,f
  8139  0775  01A2               	clrf	LCDWriteInt@fieldLength
  8140  0776  0AA2               	incf	LCDWriteInt@fieldLength,f
  8141  0777  01A3               	clrf	LCDWriteInt@numPlaces
  8142  0778  01A4               	clrf	LCDWriteInt@sign
  8143  0779  318A  22ED  3182   	fcall	_LCDWriteInt
  8144                           
  8145                           ;main.c: 299: LCDWriteCharacter(' ');
  8146  077C  3020               	movlw	32
  8147  077D  3196  2667  3182   	fcall	_LCDWriteCharacter
  8148                           
  8149                           ;main.c: 300: { gotoXY(56,5); LCDWriteInt(batteryTemp,3, 1, 0);};
  8150  0780  3005               	movlw	5
  8151  0781  0020               	movlb	0	; select bank0
  8152  0782  00D8               	movwf	??_main
  8153  0783  0858               	movf	??_main,w
  8154  0784  00F5               	movwf	gotoXY@y
  8155  0785  3038               	movlw	56
  8156  0786  3192  226E  3182   	fcall	_gotoXY
  8157  0789  0020               	movlb	0	; select bank0
  8158  078A  086E               	movf	_batteryTemp+1,w
  8159  078B  00A1               	movwf	LCDWriteInt@value+1
  8160  078C  086D               	movf	_batteryTemp,w
  8161  078D  00A0               	movwf	LCDWriteInt@value
  8162  078E  3003               	movlw	3
  8163  078F  00D8               	movwf	??_main
  8164  0790  0858               	movf	??_main,w
  8165  0791  00A2               	movwf	LCDWriteInt@fieldLength
  8166  0792  01A3               	clrf	LCDWriteInt@numPlaces
  8167  0793  0AA3               	incf	LCDWriteInt@numPlaces,f
  8168  0794  01A4               	clrf	LCDWriteInt@sign
  8169  0795  318A  22ED  3182   	fcall	_LCDWriteInt
  8170                           
  8171                           ;main.c: 301: LCDWriteCharacter(123);
  8172  0798  307B               	movlw	123
  8173  0799  3196  2667  3182   	fcall	_LCDWriteCharacter
  8174                           
  8175                           ;main.c: 302: LCDWriteCharacter('C');
  8176  079C  3043               	movlw	67
  8177  079D  3196  2667  3182   	fcall	_LCDWriteCharacter
  8178                           
  8179                           ;main.c: 372: if(batteryState[0] > FINISHED)
  8180  07A0  3003               	movlw	3
  8181  07A1  0020               	movlb	0	; select bank0
  8182  07A2  0266               	subwf	_batteryState,w
  8183  07A3  1C03               	skipc
  8184  07A4  2FA9               	goto	l3491
  8185                           
  8186                           ;main.c: 373: {
  8187                           ;main.c: 374: cc_cv_mode(0);
  8188  07A5  3000               	movlw	0
  8189  07A6  318E  26C1  3182   	fcall	_cc_cv_mode
  8190  07A9                     l3491:	
  8191                           
  8192                           ;main.c: 375: }
  8193                           ;main.c: 376: if(batteryState[1] > FINISHED)
  8194  07A9  3003               	movlw	3
  8195  07AA  0020               	movlb	0	; select bank0
  8196  07AB  0267               	subwf	_batteryState+1,w
  8197  07AC  1C03               	skipc
  8198  07AD  2FB2               	goto	l3495
  8199                           
  8200                           ;main.c: 377: {
  8201                           ;main.c: 378: cc_cv_mode(1);
  8202  07AE  3001               	movlw	1
  8203  07AF  318E  26C1  3182   	fcall	_cc_cv_mode
  8204  07B2                     l3495:	
  8205                           
  8206                           ;main.c: 379: }
  8207                           ;main.c: 380: slowLoop=0;
  8208  07B2  0021               	movlb	1	; select bank1
  8209  07B3  01DF               	clrf	main@slowLoop^(0+128)
  8210  07B4  2A5C               	goto	l3195
  8211  07B5                     __end_of_main:	
  8212                           
  8213                           	psect	text1
  8214  0BA6                     __ptext1:	
  8215 ;; *************** function _tempCalc *****************
  8216 ;; Defined at:
  8217 ;;		line 4 in file "tempCalc.c"
  8218 ;; Parameters:    Size  Location     Type
  8219 ;;  analogValue     2   45[BANK0 ] int 
  8220 ;; Auto vars:     Size  Location     Type
  8221 ;;  steinhart       3   53[BANK0 ] float 
  8222 ;;  R               3   47[BANK0 ] float 
  8223 ;; Return value:  Size  Location     Type
  8224 ;;                  2   45[BANK0 ] int 
  8225 ;; Registers used:
  8226 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8227 ;; Tracked objects:
  8228 ;;		On entry : 0/0
  8229 ;;		On exit  : 0/0
  8230 ;;		Unchanged: 0/0
  8231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8232 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8233 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8234 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8235 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8236 ;;Total ram usage:       11 bytes
  8237 ;; Hardware stack levels used:    1
  8238 ;; Hardware stack levels required when called:    4
  8239 ;; This function calls:
  8240 ;;		___awtoft
  8241 ;;		___ftadd
  8242 ;;		___ftdiv
  8243 ;;		___ftmul
  8244 ;;		___ftsub
  8245 ;;		___fttol
  8246 ;;		_log
  8247 ;; This function is called by:
  8248 ;;		_main
  8249 ;; This function uses a non-reentrant model
  8250 ;;
  8251                           
  8252                           
  8253                           ;psect for function _tempCalc
  8254  0BA6                     _tempCalc:	
  8255                           
  8256                           ;tempCalc.c: 6: float R, steinhart;
  8257                           ;tempCalc.c: 8: R=10030/(1023/(float)analogValue-1);
  8258                           
  8259                           ;incstack = 0
  8260                           ; Regs used in _tempCalc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8261  0BA6  3000               	movlw	0
  8262  0BA7  0020               	movlb	0	; select bank0
  8263  0BA8  00B0               	movwf	___ftadd@f1
  8264  0BA9  3080               	movlw	128
  8265  0BAA  00B1               	movwf	___ftadd@f1+1
  8266  0BAB  30BF               	movlw	191
  8267  0BAC  00B2               	movwf	___ftadd@f1+2
  8268  0BAD  084E               	movf	tempCalc@analogValue+1,w
  8269  0BAE  00F9               	movwf	___awtoft@c+1
  8270  0BAF  084D               	movf	tempCalc@analogValue,w
  8271  0BB0  00F8               	movwf	___awtoft@c
  8272  0BB1  3193  2348  318B   	fcall	___awtoft
  8273  0BB4  0878               	movf	?___awtoft,w
  8274  0BB5  0020               	movlb	0	; select bank0
  8275  0BB6  00A0               	movwf	___ftdiv@f2
  8276  0BB7  0879               	movf	?___awtoft+1,w
  8277  0BB8  00A1               	movwf	___ftdiv@f2+1
  8278  0BB9  087A               	movf	?___awtoft+2,w
  8279  0BBA  00A2               	movwf	___ftdiv@f2+2
  8280  0BBB  30C0               	movlw	192
  8281  0BBC  00A3               	movwf	___ftdiv@f1
  8282  0BBD  307F               	movlw	127
  8283  0BBE  00A4               	movwf	___ftdiv@f1+1
  8284  0BBF  3044               	movlw	68
  8285  0BC0  00A5               	movwf	___ftdiv@f1+2
  8286  0BC1  3180  2008  318B   	fcall	___ftdiv
  8287  0BC4  0020               	movlb	0	; select bank0
  8288  0BC5  0820               	movf	?___ftdiv,w
  8289  0BC6  00B3               	movwf	___ftadd@f2
  8290  0BC7  0821               	movf	?___ftdiv+1,w
  8291  0BC8  00B4               	movwf	___ftadd@f2+1
  8292  0BC9  0822               	movf	?___ftdiv+2,w
  8293  0BCA  00B5               	movwf	___ftadd@f2+2
  8294  0BCB  318C  248D  318B   	fcall	___ftadd
  8295  0BCE  0020               	movlb	0	; select bank0
  8296  0BCF  0830               	movf	?___ftadd,w
  8297  0BD0  00D2               	movwf	_tempCalc$1297
  8298  0BD1  0831               	movf	?___ftadd+1,w
  8299  0BD2  00D3               	movwf	_tempCalc$1297+1
  8300  0BD3  0832               	movf	?___ftadd+2,w
  8301  0BD4  00D4               	movwf	_tempCalc$1297+2
  8302                           
  8303                           ;tempCalc.c: 6: float R, steinhart;
  8304                           ;tempCalc.c: 8: R=10030/(1023/(float)analogValue-1);
  8305  0BD5  0852               	movf	_tempCalc$1297,w
  8306  0BD6  00A0               	movwf	___ftdiv@f2
  8307  0BD7  0853               	movf	_tempCalc$1297+1,w
  8308  0BD8  00A1               	movwf	___ftdiv@f2+1
  8309  0BD9  0854               	movf	_tempCalc$1297+2,w
  8310  0BDA  00A2               	movwf	___ftdiv@f2+2
  8311  0BDB  30B8               	movlw	184
  8312  0BDC  00A3               	movwf	___ftdiv@f1
  8313  0BDD  301C               	movlw	28
  8314  0BDE  00A4               	movwf	___ftdiv@f1+1
  8315  0BDF  3046               	movlw	70
  8316  0BE0  00A5               	movwf	___ftdiv@f1+2
  8317  0BE1  3180  2008  318B   	fcall	___ftdiv
  8318  0BE4  0020               	movlb	0	; select bank0
  8319  0BE5  0820               	movf	?___ftdiv,w
  8320  0BE6  00CF               	movwf	tempCalc@R
  8321  0BE7  0821               	movf	?___ftdiv+1,w
  8322  0BE8  00D0               	movwf	tempCalc@R+1
  8323  0BE9  0822               	movf	?___ftdiv+2,w
  8324  0BEA  00D1               	movwf	tempCalc@R+2
  8325                           
  8326                           ;tempCalc.c: 10: steinhart=R/10010;
  8327  0BEB  3068               	movlw	104
  8328  0BEC  00A0               	movwf	___ftdiv@f2
  8329  0BED  301C               	movlw	28
  8330  0BEE  00A1               	movwf	___ftdiv@f2+1
  8331  0BEF  3046               	movlw	70
  8332  0BF0  00A2               	movwf	___ftdiv@f2+2
  8333  0BF1  084F               	movf	tempCalc@R,w
  8334  0BF2  00A3               	movwf	___ftdiv@f1
  8335  0BF3  0850               	movf	tempCalc@R+1,w
  8336  0BF4  00A4               	movwf	___ftdiv@f1+1
  8337  0BF5  0851               	movf	tempCalc@R+2,w
  8338  0BF6  00A5               	movwf	___ftdiv@f1+2
  8339  0BF7  3180  2008  318B   	fcall	___ftdiv
  8340  0BFA  0020               	movlb	0	; select bank0
  8341  0BFB  0820               	movf	?___ftdiv,w
  8342  0BFC  00D5               	movwf	tempCalc@steinhart
  8343  0BFD  0821               	movf	?___ftdiv+1,w
  8344  0BFE  00D6               	movwf	tempCalc@steinhart+1
  8345  0BFF  0822               	movf	?___ftdiv+2,w
  8346  0C00  00D7               	movwf	tempCalc@steinhart+2
  8347                           
  8348                           ;tempCalc.c: 11: steinhart=log(steinhart);
  8349  0C01  0855               	movf	tempCalc@steinhart,w
  8350  0C02  00C7               	movwf	log@x
  8351  0C03  0856               	movf	tempCalc@steinhart+1,w
  8352  0C04  00C8               	movwf	log@x+1
  8353  0C05  0857               	movf	tempCalc@steinhart+2,w
  8354  0C06  00C9               	movwf	log@x+2
  8355  0C07  3189  2189  318B   	fcall	_log
  8356  0C0A  0020               	movlb	0	; select bank0
  8357  0C0B  0847               	movf	?_log,w
  8358  0C0C  00D5               	movwf	tempCalc@steinhart
  8359  0C0D  0848               	movf	?_log+1,w
  8360  0C0E  00D6               	movwf	tempCalc@steinhart+1
  8361  0C0F  0849               	movf	?_log+2,w
  8362  0C10  00D7               	movwf	tempCalc@steinhart+2
  8363                           
  8364                           ;tempCalc.c: 12: steinhart/=3795.3;
  8365  0C11  3035               	movlw	53
  8366  0C12  00A0               	movwf	___ftdiv@f2
  8367  0C13  306D               	movlw	109
  8368  0C14  00A1               	movwf	___ftdiv@f2+1
  8369  0C15  3045               	movlw	69
  8370  0C16  00A2               	movwf	___ftdiv@f2+2
  8371  0C17  0855               	movf	tempCalc@steinhart,w
  8372  0C18  00A3               	movwf	___ftdiv@f1
  8373  0C19  0856               	movf	tempCalc@steinhart+1,w
  8374  0C1A  00A4               	movwf	___ftdiv@f1+1
  8375  0C1B  0857               	movf	tempCalc@steinhart+2,w
  8376  0C1C  00A5               	movwf	___ftdiv@f1+2
  8377  0C1D  3180  2008  318B   	fcall	___ftdiv
  8378  0C20  0020               	movlb	0	; select bank0
  8379  0C21  0820               	movf	?___ftdiv,w
  8380  0C22  00D5               	movwf	tempCalc@steinhart
  8381  0C23  0821               	movf	?___ftdiv+1,w
  8382  0C24  00D6               	movwf	tempCalc@steinhart+1
  8383  0C25  0822               	movf	?___ftdiv+2,w
  8384  0C26  00D7               	movwf	tempCalc@steinhart+2
  8385                           
  8386                           ;tempCalc.c: 16: steinhart+=1.0/(25+273.15);
  8387  0C27  30CF               	movlw	207
  8388  0C28  00B0               	movwf	___ftadd@f1
  8389  0C29  305B               	movlw	91
  8390  0C2A  00B1               	movwf	___ftadd@f1+1
  8391  0C2B  303B               	movlw	59
  8392  0C2C  00B2               	movwf	___ftadd@f1+2
  8393  0C2D  0855               	movf	tempCalc@steinhart,w
  8394  0C2E  00B3               	movwf	___ftadd@f2
  8395  0C2F  0856               	movf	tempCalc@steinhart+1,w
  8396  0C30  00B4               	movwf	___ftadd@f2+1
  8397  0C31  0857               	movf	tempCalc@steinhart+2,w
  8398  0C32  00B5               	movwf	___ftadd@f2+2
  8399  0C33  318C  248D  318B   	fcall	___ftadd
  8400  0C36  0020               	movlb	0	; select bank0
  8401  0C37  0830               	movf	?___ftadd,w
  8402  0C38  00D5               	movwf	tempCalc@steinhart
  8403  0C39  0831               	movf	?___ftadd+1,w
  8404  0C3A  00D6               	movwf	tempCalc@steinhart+1
  8405  0C3B  0832               	movf	?___ftadd+2,w
  8406  0C3C  00D7               	movwf	tempCalc@steinhart+2
  8407                           
  8408                           ;tempCalc.c: 17: steinhart=1.0/steinhart;
  8409  0C3D  0855               	movf	tempCalc@steinhart,w
  8410  0C3E  00A0               	movwf	___ftdiv@f2
  8411  0C3F  0856               	movf	tempCalc@steinhart+1,w
  8412  0C40  00A1               	movwf	___ftdiv@f2+1
  8413  0C41  0857               	movf	tempCalc@steinhart+2,w
  8414  0C42  00A2               	movwf	___ftdiv@f2+2
  8415  0C43  3000               	movlw	0
  8416  0C44  00A3               	movwf	___ftdiv@f1
  8417  0C45  3080               	movlw	128
  8418  0C46  00A4               	movwf	___ftdiv@f1+1
  8419  0C47  303F               	movlw	63
  8420  0C48  00A5               	movwf	___ftdiv@f1+2
  8421  0C49  3180  2008  318B   	fcall	___ftdiv
  8422  0C4C  0020               	movlb	0	; select bank0
  8423  0C4D  0820               	movf	?___ftdiv,w
  8424  0C4E  00D5               	movwf	tempCalc@steinhart
  8425  0C4F  0821               	movf	?___ftdiv+1,w
  8426  0C50  00D6               	movwf	tempCalc@steinhart+1
  8427  0C51  0822               	movf	?___ftdiv+2,w
  8428  0C52  00D7               	movwf	tempCalc@steinhart+2
  8429                           
  8430                           ;tempCalc.c: 18: steinhart-=273.15;
  8431  0C53  3093               	movlw	147
  8432  0C54  00BD               	movwf	___ftsub@f2
  8433  0C55  3088               	movlw	136
  8434  0C56  00BE               	movwf	___ftsub@f2+1
  8435  0C57  3043               	movlw	67
  8436  0C58  00BF               	movwf	___ftsub@f2+2
  8437  0C59  0855               	movf	tempCalc@steinhart,w
  8438  0C5A  00C0               	movwf	___ftsub@f1
  8439  0C5B  0856               	movf	tempCalc@steinhart+1,w
  8440  0C5C  00C1               	movwf	___ftsub@f1+1
  8441  0C5D  0857               	movf	tempCalc@steinhart+2,w
  8442  0C5E  00C2               	movwf	___ftsub@f1+2
  8443  0C5F  3192  22EC  318B   	fcall	___ftsub
  8444  0C62  0020               	movlb	0	; select bank0
  8445  0C63  083D               	movf	?___ftsub,w
  8446  0C64  00D5               	movwf	tempCalc@steinhart
  8447  0C65  083E               	movf	?___ftsub+1,w
  8448  0C66  00D6               	movwf	tempCalc@steinhart+1
  8449  0C67  083F               	movf	?___ftsub+2,w
  8450  0C68  00D7               	movwf	tempCalc@steinhart+2
  8451                           
  8452                           ;tempCalc.c: 20: steinhart*=10;
  8453  0C69  3000               	movlw	0
  8454  0C6A  00A0               	movwf	___ftmul@f1
  8455  0C6B  3020               	movlw	32
  8456  0C6C  00A1               	movwf	___ftmul@f1+1
  8457  0C6D  3041               	movlw	65
  8458  0C6E  00A2               	movwf	___ftmul@f1+2
  8459  0C6F  0855               	movf	tempCalc@steinhart,w
  8460  0C70  00A3               	movwf	___ftmul@f2
  8461  0C71  0856               	movf	tempCalc@steinhart+1,w
  8462  0C72  00A4               	movwf	___ftmul@f2+1
  8463  0C73  0857               	movf	tempCalc@steinhart+2,w
  8464  0C74  00A5               	movwf	___ftmul@f2+2
  8465  0C75  318A  2239  318B   	fcall	___ftmul
  8466  0C78  0020               	movlb	0	; select bank0
  8467  0C79  0820               	movf	?___ftmul,w
  8468  0C7A  00D5               	movwf	tempCalc@steinhart
  8469  0C7B  0821               	movf	?___ftmul+1,w
  8470  0C7C  00D6               	movwf	tempCalc@steinhart+1
  8471  0C7D  0822               	movf	?___ftmul+2,w
  8472  0C7E  00D7               	movwf	tempCalc@steinhart+2
  8473                           
  8474                           ;tempCalc.c: 24: return (int16_t)steinhart;
  8475  0C7F  0855               	movf	tempCalc@steinhart,w
  8476  0C80  00B0               	movwf	___fttol@f1
  8477  0C81  0856               	movf	tempCalc@steinhart+1,w
  8478  0C82  00B1               	movwf	___fttol@f1+1
  8479  0C83  0857               	movf	tempCalc@steinhart+2,w
  8480  0C84  00B2               	movwf	___fttol@f1+2
  8481  0C85  3189  2102         	fcall	___fttol
  8482  0C87  0020               	movlb	0	; select bank0
  8483  0C88  0831               	movf	?___fttol+1,w
  8484  0C89  00CE               	movwf	?_tempCalc+1
  8485  0C8A  0830               	movf	?___fttol,w
  8486  0C8B  00CD               	movwf	?_tempCalc
  8487  0C8C  0008               	return
  8488  0C8D                     __end_of_tempCalc:	
  8489                           
  8490                           	psect	text2
  8491  0989                     __ptext2:	
  8492 ;; *************** function _log *****************
  8493 ;; Defined at:
  8494 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\log.c"
  8495 ;; Parameters:    Size  Location     Type
  8496 ;;  x               3   39[BANK0 ] int 
  8497 ;; Auto vars:     Size  Location     Type
  8498 ;;  exponent        2   43[BANK0 ] int 
  8499 ;; Return value:  Size  Location     Type
  8500 ;;                  3   39[BANK0 ] int 
  8501 ;; Registers used:
  8502 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8503 ;; Tracked objects:
  8504 ;;		On entry : 0/0
  8505 ;;		On exit  : 0/0
  8506 ;;		Unchanged: 0/0
  8507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8508 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8509 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8510 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8511 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8512 ;;Total ram usage:        6 bytes
  8513 ;; Hardware stack levels used:    1
  8514 ;; Hardware stack levels required when called:    3
  8515 ;; This function calls:
  8516 ;;		___awtoft
  8517 ;;		___ftadd
  8518 ;;		___ftge
  8519 ;;		___ftmul
  8520 ;;		_eval_poly
  8521 ;;		_frexp
  8522 ;; This function is called by:
  8523 ;;		_tempCalc
  8524 ;; This function uses a non-reentrant model
  8525 ;;
  8526                           
  8527                           
  8528                           ;psect for function _log
  8529  0989                     _log:	
  8530                           
  8531                           ;incstack = 0
  8532                           ; Regs used in _log: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8533  0989  0020               	movlb	0	; select bank0
  8534  098A  0847               	movf	log@x,w
  8535  098B  00F0               	movwf	___ftge@ff1
  8536  098C  0848               	movf	log@x+1,w
  8537  098D  00F1               	movwf	___ftge@ff1+1
  8538  098E  0849               	movf	log@x+2,w
  8539  098F  00F2               	movwf	___ftge@ff1+2
  8540  0990  3000               	movlw	0
  8541  0991  00F3               	movwf	___ftge@ff2
  8542  0992  3000               	movlw	0
  8543  0993  00F4               	movwf	___ftge@ff2+1
  8544  0994  3000               	movlw	0
  8545  0995  00F5               	movwf	___ftge@ff2+2
  8546  0996  3194  248C  3189   	fcall	___ftge
  8547  0999  1803               	btfsc	3,0
  8548  099A  29A8               	goto	l2741
  8549  099B  3021               	movlw	33
  8550  099C  0021               	movlb	1	; select bank1
  8551  099D  00D0               	movwf	_errno^(0+128)
  8552  099E  3000               	movlw	0
  8553  099F  00D1               	movwf	(_errno^(0+128)+1)
  8554  09A0  3000               	movlw	0
  8555  09A1  0020               	movlb	0	; select bank0
  8556  09A2  00C7               	movwf	?_log
  8557  09A3  3000               	movlw	0
  8558  09A4  00C8               	movwf	?_log+1
  8559  09A5  3000               	movlw	0
  8560  09A6  00C9               	movwf	?_log+2
  8561  09A7  0008               	return
  8562  09A8                     l2741:	
  8563  09A8  0020               	movlb	0	; select bank0
  8564  09A9  0849               	movf	log@x+2,w
  8565  09AA  0448               	iorwf	log@x+1,w
  8566  09AB  0447               	iorwf	log@x,w
  8567  09AC  1D03               	skipz
  8568  09AD  29BB               	goto	l2747
  8569  09AE  3022               	movlw	34
  8570  09AF  0021               	movlb	1	; select bank1
  8571  09B0  00D0               	movwf	_errno^(0+128)
  8572  09B1  3000               	movlw	0
  8573  09B2  00D1               	movwf	(_errno^(0+128)+1)
  8574  09B3  3000               	movlw	0
  8575  09B4  0020               	movlb	0	; select bank0
  8576  09B5  00C7               	movwf	?_log
  8577  09B6  3000               	movlw	0
  8578  09B7  00C8               	movwf	?_log+1
  8579  09B8  3000               	movlw	0
  8580  09B9  00C9               	movwf	?_log+2
  8581  09BA  0008               	return
  8582  09BB                     l2747:	
  8583  09BB  3000               	movlw	0
  8584  09BC  00B0               	movwf	___ftadd@f1
  8585  09BD  3080               	movlw	128
  8586  09BE  00B1               	movwf	___ftadd@f1+1
  8587  09BF  30BF               	movlw	191
  8588  09C0  00B2               	movwf	___ftadd@f1+2
  8589  09C1  3000               	movlw	0
  8590  09C2  00A0               	movwf	___ftmul@f1
  8591  09C3  3000               	movlw	0
  8592  09C4  00A1               	movwf	___ftmul@f1+1
  8593  09C5  3040               	movlw	64
  8594  09C6  00A2               	movwf	___ftmul@f1+2
  8595  09C7  304B               	movlw	(low (log@exponent| 0))& (0+255)
  8596  09C8  00CA               	movwf	??_log
  8597  09C9  084A               	movf	??_log,w
  8598  09CA  00F3               	movwf	frexp@eptr
  8599  09CB  0847               	movf	log@x,w
  8600  09CC  00F0               	movwf	frexp@value
  8601  09CD  0848               	movf	log@x+1,w
  8602  09CE  00F1               	movwf	frexp@value+1
  8603  09CF  0849               	movf	log@x+2,w
  8604  09D0  00F2               	movwf	frexp@value+2
  8605  09D1  3194  24C7  3189   	fcall	_frexp
  8606  09D4  0870               	movf	?_frexp,w
  8607  09D5  0020               	movlb	0	; select bank0
  8608  09D6  00A3               	movwf	___ftmul@f2
  8609  09D7  0871               	movf	?_frexp+1,w
  8610  09D8  00A4               	movwf	___ftmul@f2+1
  8611  09D9  0872               	movf	?_frexp+2,w
  8612  09DA  00A5               	movwf	___ftmul@f2+2
  8613  09DB  318A  2239  3189   	fcall	___ftmul
  8614  09DE  0020               	movlb	0	; select bank0
  8615  09DF  0820               	movf	?___ftmul,w
  8616  09E0  00B3               	movwf	___ftadd@f2
  8617  09E1  0821               	movf	?___ftmul+1,w
  8618  09E2  00B4               	movwf	___ftadd@f2+1
  8619  09E3  0822               	movf	?___ftmul+2,w
  8620  09E4  00B5               	movwf	___ftadd@f2+2
  8621  09E5  318C  248D  3189   	fcall	___ftadd
  8622  09E8  0020               	movlb	0	; select bank0
  8623  09E9  0830               	movf	?___ftadd,w
  8624  09EA  00C7               	movwf	log@x
  8625  09EB  0831               	movf	?___ftadd+1,w
  8626  09EC  00C8               	movwf	log@x+1
  8627  09ED  0832               	movf	?___ftadd+2,w
  8628  09EE  00C9               	movwf	log@x+2
  8629  09EF  30FF               	movlw	255
  8630  09F0  07CB               	addwf	log@exponent,f
  8631  09F1  30FF               	movlw	255
  8632  09F2  3DCC               	addwfc	log@exponent+1,f
  8633  09F3  0847               	movf	log@x,w
  8634  09F4  00BD               	movwf	eval_poly@x
  8635  09F5  0848               	movf	log@x+1,w
  8636  09F6  00BE               	movwf	eval_poly@x+1
  8637  09F7  0849               	movf	log@x+2,w
  8638  09F8  00BF               	movwf	eval_poly@x+2
  8639  09F9  3000               	movlw	low (log@coeff| (0+32768))
  8640  09FA  00C0               	movwf	eval_poly@d
  8641  09FB  3098               	movlw	high (log@coeff| (0+32768))
  8642  09FC  00C1               	movwf	eval_poly@d+1
  8643  09FD  3008               	movlw	8
  8644  09FE  00C2               	movwf	eval_poly@n
  8645  09FF  3000               	movlw	0
  8646  0A00  00C3               	movwf	eval_poly@n+1
  8647  0A01  3196  26BB  3189   	fcall	_eval_poly
  8648  0A04  0020               	movlb	0	; select bank0
  8649  0A05  083D               	movf	?_eval_poly,w
  8650  0A06  00C7               	movwf	log@x
  8651  0A07  083E               	movf	?_eval_poly+1,w
  8652  0A08  00C8               	movwf	log@x+1
  8653  0A09  083F               	movf	?_eval_poly+2,w
  8654  0A0A  00C9               	movwf	log@x+2
  8655  0A0B  0847               	movf	log@x,w
  8656  0A0C  00B0               	movwf	___ftadd@f1
  8657  0A0D  0848               	movf	log@x+1,w
  8658  0A0E  00B1               	movwf	___ftadd@f1+1
  8659  0A0F  0849               	movf	log@x+2,w
  8660  0A10  00B2               	movwf	___ftadd@f1+2
  8661  0A11  3072               	movlw	114
  8662  0A12  00A0               	movwf	___ftmul@f1
  8663  0A13  3031               	movlw	49
  8664  0A14  00A1               	movwf	___ftmul@f1+1
  8665  0A15  303F               	movlw	63
  8666  0A16  00A2               	movwf	___ftmul@f1+2
  8667  0A17  084C               	movf	log@exponent+1,w
  8668  0A18  00F9               	movwf	___awtoft@c+1
  8669  0A19  084B               	movf	log@exponent,w
  8670  0A1A  00F8               	movwf	___awtoft@c
  8671  0A1B  3193  2348  3189   	fcall	___awtoft
  8672  0A1E  0878               	movf	?___awtoft,w
  8673  0A1F  0020               	movlb	0	; select bank0
  8674  0A20  00A3               	movwf	___ftmul@f2
  8675  0A21  0879               	movf	?___awtoft+1,w
  8676  0A22  00A4               	movwf	___ftmul@f2+1
  8677  0A23  087A               	movf	?___awtoft+2,w
  8678  0A24  00A5               	movwf	___ftmul@f2+2
  8679  0A25  318A  2239  3189   	fcall	___ftmul
  8680  0A28  0020               	movlb	0	; select bank0
  8681  0A29  0820               	movf	?___ftmul,w
  8682  0A2A  00B3               	movwf	___ftadd@f2
  8683  0A2B  0821               	movf	?___ftmul+1,w
  8684  0A2C  00B4               	movwf	___ftadd@f2+1
  8685  0A2D  0822               	movf	?___ftmul+2,w
  8686  0A2E  00B5               	movwf	___ftadd@f2+2
  8687  0A2F  318C  248D         	fcall	___ftadd
  8688  0A31  0020               	movlb	0	; select bank0
  8689  0A32  0830               	movf	?___ftadd,w
  8690  0A33  00C7               	movwf	?_log
  8691  0A34  0831               	movf	?___ftadd+1,w
  8692  0A35  00C8               	movwf	?_log+1
  8693  0A36  0832               	movf	?___ftadd+2,w
  8694  0A37  00C9               	movwf	?_log+2
  8695  0A38  0008               	return
  8696  0A39                     __end_of_log:	
  8697                           
  8698                           	psect	text3
  8699  14C7                     __ptext3:	
  8700 ;; *************** function _frexp *****************
  8701 ;; Defined at:
  8702 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
  8703 ;; Parameters:    Size  Location     Type
  8704 ;;  value           3    0[COMMON] int 
  8705 ;;  eptr            1    3[COMMON] PTR int 
  8706 ;;		 -> log@exponent(2), 
  8707 ;; Auto vars:     Size  Location     Type
  8708 ;;		None
  8709 ;; Return value:  Size  Location     Type
  8710 ;;                  3    0[COMMON] PTR int 
  8711 ;; Registers used:
  8712 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8713 ;; Tracked objects:
  8714 ;;		On entry : 0/0
  8715 ;;		On exit  : 0/0
  8716 ;;		Unchanged: 0/0
  8717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8718 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8719 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8720 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8721 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8722 ;;Total ram usage:        6 bytes
  8723 ;; Hardware stack levels used:    1
  8724 ;; This function calls:
  8725 ;;		Nothing
  8726 ;; This function is called by:
  8727 ;;		_log
  8728 ;; This function uses a non-reentrant model
  8729 ;;
  8730                           
  8731                           
  8732                           ;psect for function _frexp
  8733  14C7                     _frexp:	
  8734                           
  8735                           ;incstack = 0
  8736                           ; Regs used in _frexp: [wreg+fsr1l+fsr1h+status,2+status,0]
  8737  14C7  0872               	movf	frexp@value+2,w
  8738  14C8  0471               	iorwf	frexp@value+1,w
  8739  14C9  0470               	iorwf	frexp@value,w
  8740  14CA  1D03               	skipz
  8741  14CB  2CD9               	goto	l2537
  8742  14CC  0873               	movf	frexp@eptr,w
  8743  14CD  0086               	movwf	6
  8744  14CE  0187               	clrf	7
  8745  14CF  3000               	movlw	0
  8746  14D0  3FC0               	movwi [0]fsr1
  8747  14D1  3FC1               	movwi [1]fsr1
  8748  14D2  3000               	movlw	0
  8749  14D3  00F0               	movwf	?_frexp
  8750  14D4  3000               	movlw	0
  8751  14D5  00F1               	movwf	?_frexp+1
  8752  14D6  3000               	movlw	0
  8753  14D7  00F2               	movwf	?_frexp+2
  8754  14D8  0008               	return
  8755  14D9                     l2537:	
  8756  14D9  0872               	movf	frexp@value+2,w
  8757  14DA  397F               	andlw	127
  8758  14DB  00F4               	movwf	??_frexp
  8759  14DC  01F5               	clrf	??_frexp+1
  8760  14DD  35F4               	lslf	??_frexp,f
  8761  14DE  0DF5               	rlf	??_frexp+1,f
  8762  14DF  0873               	movf	frexp@eptr,w
  8763  14E0  0086               	movwf	6
  8764  14E1  0187               	clrf	7
  8765  14E2  0874               	movf	??_frexp,w
  8766  14E3  3FC0               	movwi [0]fsr1
  8767  14E4  0875               	movf	??_frexp+1,w
  8768  14E5  3FC1               	movwi [1]fsr1
  8769  14E6  0D71               	rlf	frexp@value+1,w
  8770  14E7  0D71               	rlf	frexp@value+1,w
  8771  14E8  3901               	andlw	1
  8772  14E9  00F4               	movwf	??_frexp
  8773  14EA  01F5               	clrf	??_frexp+1
  8774  14EB  0873               	movf	frexp@eptr,w
  8775  14EC  0086               	movwf	6
  8776  14ED  0187               	clrf	7
  8777  14EE  0874               	movf	??_frexp,w
  8778  14EF  0481               	iorwf	1,f
  8779  14F0  3141               	addfsr 1,1
  8780  14F1  0875               	movf	??_frexp+1,w
  8781  14F2  0481               	iorwf	1,f
  8782  14F3  0873               	movf	frexp@eptr,w
  8783  14F4  0086               	movwf	6
  8784  14F5  0187               	clrf	7
  8785  14F6  3082               	movlw	130
  8786  14F7  0781               	addwf	1,f
  8787  14F8  3141               	addfsr 1,1
  8788  14F9  30FF               	movlw	255
  8789  14FA  3D81               	addwfc	1,f
  8790  14FB  317F               	addfsr 1,-1
  8791  14FC  0872               	movf	frexp@value+2,w
  8792  14FD  3980               	andlw	-128
  8793  14FE  383F               	iorlw	63
  8794  14FF  00F2               	movwf	frexp@value+2
  8795  1500  13F1               	bcf	frexp@value+1,7
  8796  1501  0008               	return
  8797  1502                     __end_of_frexp:	
  8798                           
  8799                           	psect	text4
  8800  16BB                     __ptext4:	
  8801 ;; *************** function _eval_poly *****************
  8802 ;; Defined at:
  8803 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\evalpoly.c"
  8804 ;; Parameters:    Size  Location     Type
  8805 ;;  x               3   29[BANK0 ] PTR int 
  8806 ;;  d               2   32[BANK0 ] PTR const 
  8807 ;;		 -> log@coeff(27), 
  8808 ;;  n               2   34[BANK0 ] int 
  8809 ;; Auto vars:     Size  Location     Type
  8810 ;;  res             3   36[BANK0 ] int 
  8811 ;; Return value:  Size  Location     Type
  8812 ;;                  3   29[BANK0 ] int 
  8813 ;; Registers used:
  8814 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8815 ;; Tracked objects:
  8816 ;;		On entry : 0/0
  8817 ;;		On exit  : 0/0
  8818 ;;		Unchanged: 0/0
  8819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8820 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8821 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8823 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8824 ;;Total ram usage:       10 bytes
  8825 ;; Hardware stack levels used:    1
  8826 ;; Hardware stack levels required when called:    2
  8827 ;; This function calls:
  8828 ;;		___ftadd
  8829 ;;		___ftmul
  8830 ;;		___wmul
  8831 ;; This function is called by:
  8832 ;;		_log
  8833 ;; This function uses a non-reentrant model
  8834 ;;
  8835                           
  8836                           
  8837                           ;psect for function _eval_poly
  8838  16BB                     _eval_poly:	
  8839                           
  8840                           ;incstack = 0
  8841                           ; Regs used in _eval_poly: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8842  16BB  0020               	movlb	0	; select bank0
  8843  16BC  0843               	movf	eval_poly@n+1,w
  8844  16BD  00F1               	movwf	___wmul@multiplier+1
  8845  16BE  0842               	movf	eval_poly@n,w
  8846  16BF  00F0               	movwf	___wmul@multiplier
  8847  16C0  3003               	movlw	3
  8848  16C1  00F2               	movwf	___wmul@multiplicand
  8849  16C2  3000               	movlw	0
  8850  16C3  00F3               	movwf	___wmul@multiplicand+1
  8851  16C4  3188  2001  3196   	fcall	___wmul
  8852  16C7  0020               	movlb	0	; select bank0
  8853  16C8  0840               	movf	eval_poly@d,w
  8854  16C9  0770               	addwf	?___wmul,w
  8855  16CA  0084               	movwf	4
  8856  16CB  0841               	movf	eval_poly@d+1,w
  8857  16CC  3D71               	addwfc	?___wmul+1,w
  8858  16CD  0085               	movwf	5
  8859  16CE  3F00               	moviw [0]fsr0
  8860  16CF  00C4               	movwf	eval_poly@res
  8861  16D0  3F01               	moviw [1]fsr0
  8862  16D1  00C5               	movwf	eval_poly@res+1
  8863  16D2  3F02               	moviw [2]fsr0
  8864  16D3                     L5:	
  8865  16D3  00C6               	movwf	eval_poly@res+2
  8866  16D4  0842               	movf	eval_poly@n,w
  8867  16D5  0443               	iorwf	eval_poly@n+1,w
  8868  16D6  1903               	btfsc	3,2
  8869  16D7  2F14               	goto	l2555
  8870  16D8  30FF               	movlw	255
  8871  16D9  07C2               	addwf	eval_poly@n,f
  8872  16DA  30FF               	movlw	255
  8873  16DB  3DC3               	addwfc	eval_poly@n+1,f
  8874  16DC  0843               	movf	eval_poly@n+1,w
  8875  16DD  00F1               	movwf	___wmul@multiplier+1
  8876  16DE  0842               	movf	eval_poly@n,w
  8877  16DF  00F0               	movwf	___wmul@multiplier
  8878  16E0  3003               	movlw	3
  8879  16E1  00F2               	movwf	___wmul@multiplicand
  8880  16E2  3000               	movlw	0
  8881  16E3  00F3               	movwf	___wmul@multiplicand+1
  8882  16E4  3188  2001  3196   	fcall	___wmul
  8883  16E7  0020               	movlb	0	; select bank0
  8884  16E8  0840               	movf	eval_poly@d,w
  8885  16E9  0770               	addwf	?___wmul,w
  8886  16EA  0084               	movwf	4
  8887  16EB  0841               	movf	eval_poly@d+1,w
  8888  16EC  3D71               	addwfc	?___wmul+1,w
  8889  16ED  0085               	movwf	5
  8890  16EE  3F00               	moviw [0]fsr0
  8891  16EF  00B0               	movwf	___ftadd@f1
  8892  16F0  3F01               	moviw [1]fsr0
  8893  16F1  00B1               	movwf	___ftadd@f1+1
  8894  16F2  3F02               	moviw [2]fsr0
  8895  16F3  00B2               	movwf	___ftadd@f1+2
  8896  16F4  0844               	movf	eval_poly@res,w
  8897  16F5  00A0               	movwf	___ftmul@f1
  8898  16F6  0845               	movf	eval_poly@res+1,w
  8899  16F7  00A1               	movwf	___ftmul@f1+1
  8900  16F8  0846               	movf	eval_poly@res+2,w
  8901  16F9  00A2               	movwf	___ftmul@f1+2
  8902  16FA  083D               	movf	eval_poly@x,w
  8903  16FB  00A3               	movwf	___ftmul@f2
  8904  16FC  083E               	movf	eval_poly@x+1,w
  8905  16FD  00A4               	movwf	___ftmul@f2+1
  8906  16FE  083F               	movf	eval_poly@x+2,w
  8907  16FF  00A5               	movwf	___ftmul@f2+2
  8908  1700  318A  2239  3196   	fcall	___ftmul
  8909  1703  0020               	movlb	0	; select bank0
  8910  1704  0820               	movf	?___ftmul,w
  8911  1705  00B3               	movwf	___ftadd@f2
  8912  1706  0821               	movf	?___ftmul+1,w
  8913  1707  00B4               	movwf	___ftadd@f2+1
  8914  1708  0822               	movf	?___ftmul+2,w
  8915  1709  00B5               	movwf	___ftadd@f2+2
  8916  170A  318C  248D  3196   	fcall	___ftadd
  8917  170D  0020               	movlb	0	; select bank0
  8918  170E  0830               	movf	?___ftadd,w
  8919  170F  00C4               	movwf	eval_poly@res
  8920  1710  0831               	movf	?___ftadd+1,w
  8921  1711  00C5               	movwf	eval_poly@res+1
  8922  1712  0832               	movf	?___ftadd+2,w
  8923  1713  2ED3               	goto	L5
  8924  1714                     l2555:	
  8925  1714  0844               	movf	eval_poly@res,w
  8926  1715  00BD               	movwf	?_eval_poly
  8927  1716  0845               	movf	eval_poly@res+1,w
  8928  1717  00BE               	movwf	?_eval_poly+1
  8929  1718  0846               	movf	eval_poly@res+2,w
  8930  1719  00BF               	movwf	?_eval_poly+2
  8931  171A  0008               	return
  8932  171B                     __end_of_eval_poly:	
  8933                           
  8934                           	psect	text5
  8935  148C                     __ptext5:	
  8936 ;; *************** function ___ftge *****************
  8937 ;; Defined at:
  8938 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
  8939 ;; Parameters:    Size  Location     Type
  8940 ;;  ff1             3    0[COMMON] float 
  8941 ;;  ff2             3    3[COMMON] float 
  8942 ;; Auto vars:     Size  Location     Type
  8943 ;;		None
  8944 ;; Return value:  Size  Location     Type
  8945 ;;		None               void
  8946 ;; Registers used:
  8947 ;;		wreg, status,2, status,0
  8948 ;; Tracked objects:
  8949 ;;		On entry : 0/0
  8950 ;;		On exit  : 0/0
  8951 ;;		Unchanged: 0/0
  8952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8953 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8954 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8955 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8956 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8957 ;;Total ram usage:        9 bytes
  8958 ;; Hardware stack levels used:    1
  8959 ;; This function calls:
  8960 ;;		Nothing
  8961 ;; This function is called by:
  8962 ;;		_log
  8963 ;; This function uses a non-reentrant model
  8964 ;;
  8965                           
  8966                           
  8967                           ;psect for function ___ftge
  8968  148C                     ___ftge:	
  8969                           
  8970                           ;incstack = 0
  8971                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  8972  148C  1FF2               	btfss	___ftge@ff1+2,7
  8973  148D  2CA2               	goto	l2471
  8974  148E  0970               	comf	___ftge@ff1,w
  8975  148F  00F6               	movwf	??___ftge
  8976  1490  0971               	comf	___ftge@ff1+1,w
  8977  1491  00F7               	movwf	??___ftge+1
  8978  1492  0972               	comf	___ftge@ff1+2,w
  8979  1493  00F8               	movwf	??___ftge+2
  8980  1494  0AF6               	incf	??___ftge,f
  8981  1495  1903               	skipnz
  8982  1496  0AF7               	incf	??___ftge+1,f
  8983  1497  1903               	skipnz
  8984  1498  0AF8               	incf	??___ftge+2,f
  8985  1499  3000               	movlw	0
  8986  149A  0776               	addwf	??___ftge,w
  8987  149B  00F0               	movwf	___ftge@ff1
  8988  149C  3000               	movlw	0
  8989  149D  3D77               	addwfc	??___ftge+1,w
  8990  149E  00F1               	movwf	___ftge@ff1+1
  8991  149F  3080               	movlw	128
  8992  14A0  3D78               	addwfc	??___ftge+2,w
  8993  14A1  00F2               	movwf	___ftge@ff1+2
  8994  14A2                     l2471:	
  8995  14A2  1FF5               	btfss	___ftge@ff2+2,7
  8996  14A3  2CB8               	goto	l2475
  8997  14A4  0973               	comf	___ftge@ff2,w
  8998  14A5  00F6               	movwf	??___ftge
  8999  14A6  0974               	comf	___ftge@ff2+1,w
  9000  14A7  00F7               	movwf	??___ftge+1
  9001  14A8  0975               	comf	___ftge@ff2+2,w
  9002  14A9  00F8               	movwf	??___ftge+2
  9003  14AA  0AF6               	incf	??___ftge,f
  9004  14AB  1903               	skipnz
  9005  14AC  0AF7               	incf	??___ftge+1,f
  9006  14AD  1903               	skipnz
  9007  14AE  0AF8               	incf	??___ftge+2,f
  9008  14AF  3000               	movlw	0
  9009  14B0  0776               	addwf	??___ftge,w
  9010  14B1  00F3               	movwf	___ftge@ff2
  9011  14B2  3000               	movlw	0
  9012  14B3  3D77               	addwfc	??___ftge+1,w
  9013  14B4  00F4               	movwf	___ftge@ff2+1
  9014  14B5  3080               	movlw	128
  9015  14B6  3D78               	addwfc	??___ftge+2,w
  9016  14B7  00F5               	movwf	___ftge@ff2+2
  9017  14B8                     l2475:	
  9018  14B8  3080               	movlw	128
  9019  14B9  06F2               	xorwf	___ftge@ff1+2,f
  9020  14BA  3080               	movlw	128
  9021  14BB  06F5               	xorwf	___ftge@ff2+2,f
  9022  14BC  0875               	movf	___ftge@ff2+2,w
  9023  14BD  0272               	subwf	___ftge@ff1+2,w
  9024  14BE  1D03               	skipz
  9025  14BF  0008               	return
  9026  14C0  0874               	movf	___ftge@ff2+1,w
  9027  14C1  0271               	subwf	___ftge@ff1+1,w
  9028  14C2  1D03               	skipz
  9029  14C3  0008               	return
  9030  14C4  0873               	movf	___ftge@ff2,w
  9031  14C5  0270               	subwf	___ftge@ff1,w
  9032  14C6  0008               	return
  9033  14C7                     __end_of___ftge:	
  9034                           
  9035                           	psect	text6
  9036  12EC                     __ptext6:	
  9037 ;; *************** function ___ftsub *****************
  9038 ;; Defined at:
  9039 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
  9040 ;; Parameters:    Size  Location     Type
  9041 ;;  f2              3   29[BANK0 ] float 
  9042 ;;  f1              3   32[BANK0 ] float 
  9043 ;; Auto vars:     Size  Location     Type
  9044 ;;		None
  9045 ;; Return value:  Size  Location     Type
  9046 ;;                  3   29[BANK0 ] float 
  9047 ;; Registers used:
  9048 ;;		wreg, status,2, status,0, pclath, cstack
  9049 ;; Tracked objects:
  9050 ;;		On entry : 0/0
  9051 ;;		On exit  : 0/0
  9052 ;;		Unchanged: 0/0
  9053 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9054 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9055 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9056 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9057 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9058 ;;Total ram usage:        6 bytes
  9059 ;; Hardware stack levels used:    1
  9060 ;; Hardware stack levels required when called:    2
  9061 ;; This function calls:
  9062 ;;		___ftadd
  9063 ;; This function is called by:
  9064 ;;		_tempCalc
  9065 ;; This function uses a non-reentrant model
  9066 ;;
  9067                           
  9068                           
  9069                           ;psect for function ___ftsub
  9070  12EC                     ___ftsub:	
  9071                           
  9072                           ;incstack = 0
  9073                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  9074  12EC  0020               	movlb	0	; select bank0
  9075  12ED  083F               	movf	___ftsub@f2+2,w
  9076  12EE  043E               	iorwf	___ftsub@f2+1,w
  9077  12EF  043D               	iorwf	___ftsub@f2,w
  9078  12F0  1903               	skipnz
  9079  12F1  2AF4               	goto	l2887
  9080  12F2  3080               	movlw	128
  9081  12F3  06BF               	xorwf	___ftsub@f2+2,f
  9082  12F4                     l2887:	
  9083  12F4  0840               	movf	___ftsub@f1,w
  9084  12F5  00B0               	movwf	___ftadd@f1
  9085  12F6  0841               	movf	___ftsub@f1+1,w
  9086  12F7  00B1               	movwf	___ftadd@f1+1
  9087  12F8  0842               	movf	___ftsub@f1+2,w
  9088  12F9  00B2               	movwf	___ftadd@f1+2
  9089  12FA  083D               	movf	___ftsub@f2,w
  9090  12FB  00B3               	movwf	___ftadd@f2
  9091  12FC  083E               	movf	___ftsub@f2+1,w
  9092  12FD  00B4               	movwf	___ftadd@f2+1
  9093  12FE  083F               	movf	___ftsub@f2+2,w
  9094  12FF  00B5               	movwf	___ftadd@f2+2
  9095  1300  318C  248D         	fcall	___ftadd
  9096  1302  0020               	movlb	0	; select bank0
  9097  1303  0830               	movf	?___ftadd,w
  9098  1304  00BD               	movwf	?___ftsub
  9099  1305  0831               	movf	?___ftadd+1,w
  9100  1306  00BE               	movwf	?___ftsub+1
  9101  1307  0832               	movf	?___ftadd+2,w
  9102  1308  00BF               	movwf	?___ftsub+2
  9103  1309  0008               	return
  9104  130A                     __end_of___ftsub:	
  9105                           
  9106                           	psect	text7
  9107  0C8D                     __ptext7:	
  9108 ;; *************** function ___ftadd *****************
  9109 ;; Defined at:
  9110 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
  9111 ;; Parameters:    Size  Location     Type
  9112 ;;  f1              3   16[BANK0 ] float 
  9113 ;;  f2              3   19[BANK0 ] float 
  9114 ;; Auto vars:     Size  Location     Type
  9115 ;;  exp1            1   28[BANK0 ] unsigned char 
  9116 ;;  exp2            1   27[BANK0 ] unsigned char 
  9117 ;;  sign            1   26[BANK0 ] unsigned char 
  9118 ;; Return value:  Size  Location     Type
  9119 ;;                  3   16[BANK0 ] float 
  9120 ;; Registers used:
  9121 ;;		wreg, status,2, status,0, pclath, cstack
  9122 ;; Tracked objects:
  9123 ;;		On entry : 0/0
  9124 ;;		On exit  : 0/0
  9125 ;;		Unchanged: 0/0
  9126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9127 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9128 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9129 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9130 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9131 ;;Total ram usage:       13 bytes
  9132 ;; Hardware stack levels used:    1
  9133 ;; Hardware stack levels required when called:    1
  9134 ;; This function calls:
  9135 ;;		___ftpack
  9136 ;; This function is called by:
  9137 ;;		_tempCalc
  9138 ;;		___ftsub
  9139 ;;		_log
  9140 ;;		_eval_poly
  9141 ;; This function uses a non-reentrant model
  9142 ;;
  9143                           
  9144                           
  9145                           ;psect for function ___ftadd
  9146  0C8D                     ___ftadd:	
  9147                           
  9148                           ;incstack = 0
  9149                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  9150  0C8D  0020               	movlb	0	; select bank0
  9151  0C8E  0830               	movf	___ftadd@f1,w
  9152  0C8F  00B6               	movwf	??___ftadd
  9153  0C90  0831               	movf	___ftadd@f1+1,w
  9154  0C91  00B7               	movwf	??___ftadd+1
  9155  0C92  0832               	movf	___ftadd@f1+2,w
  9156  0C93  00B8               	movwf	??___ftadd+2
  9157  0C94  1003               	clrc
  9158  0C95  0D37               	rlf	??___ftadd+1,w
  9159  0C96  0D38               	rlf	??___ftadd+2,w
  9160  0C97  00B9               	movwf	??___ftadd+3
  9161  0C98  0839               	movf	??___ftadd+3,w
  9162  0C99  00BC               	movwf	___ftadd@exp1
  9163  0C9A  0833               	movf	___ftadd@f2,w
  9164  0C9B  00B6               	movwf	??___ftadd
  9165  0C9C  0834               	movf	___ftadd@f2+1,w
  9166  0C9D  00B7               	movwf	??___ftadd+1
  9167  0C9E  0835               	movf	___ftadd@f2+2,w
  9168  0C9F  00B8               	movwf	??___ftadd+2
  9169  0CA0  1003               	clrc
  9170  0CA1  0D37               	rlf	??___ftadd+1,w
  9171  0CA2  0D38               	rlf	??___ftadd+2,w
  9172  0CA3  00B9               	movwf	??___ftadd+3
  9173  0CA4  0839               	movf	??___ftadd+3,w
  9174  0CA5  00BB               	movwf	___ftadd@exp2
  9175  0CA6  083C               	movf	___ftadd@exp1,w
  9176  0CA7  1903               	btfsc	3,2
  9177  0CA8  2CB5               	goto	l2339
  9178  0CA9  083B               	movf	___ftadd@exp2,w
  9179  0CAA  023C               	subwf	___ftadd@exp1,w
  9180  0CAB  1803               	skipnc
  9181  0CAC  2CBC               	goto	l2343
  9182  0CAD  033C               	decf	___ftadd@exp1,w
  9183  0CAE  3AFF               	xorlw	255
  9184  0CAF  073B               	addwf	___ftadd@exp2,w
  9185  0CB0  00B6               	movwf	??___ftadd
  9186  0CB1  3019               	movlw	25
  9187  0CB2  0236               	subwf	??___ftadd,w
  9188  0CB3  1C03               	skipc
  9189  0CB4  2CBC               	goto	l2343
  9190  0CB5                     l2339:	
  9191  0CB5  0833               	movf	___ftadd@f2,w
  9192  0CB6  00B0               	movwf	?___ftadd
  9193  0CB7  0834               	movf	___ftadd@f2+1,w
  9194  0CB8  00B1               	movwf	?___ftadd+1
  9195  0CB9  0835               	movf	___ftadd@f2+2,w
  9196  0CBA  00B2               	movwf	?___ftadd+2
  9197  0CBB  0008               	return
  9198  0CBC                     l2343:	
  9199  0CBC  083B               	movf	___ftadd@exp2,w
  9200  0CBD  1903               	btfsc	3,2
  9201  0CBE  0008               	return
  9202  0CBF  083C               	movf	___ftadd@exp1,w
  9203  0CC0  023B               	subwf	___ftadd@exp2,w
  9204  0CC1  1803               	skipnc
  9205  0CC2  2CCB               	goto	l2349
  9206  0CC3  033B               	decf	___ftadd@exp2,w
  9207  0CC4  3AFF               	xorlw	255
  9208  0CC5  073C               	addwf	___ftadd@exp1,w
  9209  0CC6  00B6               	movwf	??___ftadd
  9210  0CC7  3019               	movlw	25
  9211  0CC8  0236               	subwf	??___ftadd,w
  9212  0CC9  1803               	btfsc	3,0
  9213  0CCA  0008               	return
  9214  0CCB                     l2349:	
  9215  0CCB  3006               	movlw	6
  9216  0CCC  00B6               	movwf	??___ftadd
  9217  0CCD  0836               	movf	??___ftadd,w
  9218  0CCE  00BA               	movwf	___ftadd@sign
  9219  0CCF  1BB2               	btfsc	___ftadd@f1+2,7
  9220  0CD0  17BA               	bsf	___ftadd@sign,7
  9221  0CD1  1BB5               	btfsc	___ftadd@f2+2,7
  9222  0CD2  173A               	bsf	___ftadd@sign,6
  9223  0CD3  17B1               	bsf	___ftadd@f1+1,7
  9224  0CD4  30FF               	movlw	255
  9225  0CD5  05B0               	andwf	___ftadd@f1,f
  9226  0CD6  30FF               	movlw	255
  9227  0CD7  05B1               	andwf	___ftadd@f1+1,f
  9228  0CD8  3000               	movlw	0
  9229  0CD9  05B2               	andwf	___ftadd@f1+2,f
  9230  0CDA  17B4               	bsf	___ftadd@f2+1,7
  9231  0CDB  30FF               	movlw	255
  9232  0CDC  05B3               	andwf	___ftadd@f2,f
  9233  0CDD  30FF               	movlw	255
  9234  0CDE  05B4               	andwf	___ftadd@f2+1,f
  9235  0CDF  3000               	movlw	0
  9236  0CE0  05B5               	andwf	___ftadd@f2+2,f
  9237  0CE1  083B               	movf	___ftadd@exp2,w
  9238  0CE2  023C               	subwf	___ftadd@exp1,w
  9239  0CE3  1803               	skipnc
  9240  0CE4  2D07               	goto	l2371
  9241  0CE5                     l2361:	
  9242  0CE5  3001               	movlw	1
  9243  0CE6                     u2345:	
  9244  0CE6  35B3               	lslf	___ftadd@f2,f
  9245  0CE7  0DB4               	rlf	___ftadd@f2+1,f
  9246  0CE8  0DB5               	rlf	___ftadd@f2+2,f
  9247  0CE9  0B89               	decfsz	9,f
  9248  0CEA  2CE6               	goto	u2345
  9249  0CEB  3001               	movlw	1
  9250  0CEC  02BB               	subwf	___ftadd@exp2,f
  9251  0CED  083B               	movf	___ftadd@exp2,w
  9252  0CEE  063C               	xorwf	___ftadd@exp1,w
  9253  0CEF  1903               	skipnz
  9254  0CF0  2D02               	goto	l2369
  9255  0CF1  3001               	movlw	1
  9256  0CF2  02BA               	subwf	___ftadd@sign,f
  9257  0CF3  083A               	movf	___ftadd@sign,w
  9258  0CF4  3907               	andlw	7
  9259  0CF5  1903               	btfsc	3,2
  9260  0CF6  2D02               	goto	l2369
  9261  0CF7  2CE5               	goto	l2361
  9262  0CF8                     l2367:	
  9263  0CF8  3001               	movlw	1
  9264  0CF9                     u2375:	
  9265  0CF9  36B2               	lsrf	___ftadd@f1+2,f
  9266  0CFA  0CB1               	rrf	___ftadd@f1+1,f
  9267  0CFB  0CB0               	rrf	___ftadd@f1,f
  9268  0CFC  0B89               	decfsz	9,f
  9269  0CFD  2CF9               	goto	u2375
  9270  0CFE  3001               	movlw	1
  9271  0CFF  00B6               	movwf	??___ftadd
  9272  0D00  0836               	movf	??___ftadd,w
  9273  0D01  07BC               	addwf	___ftadd@exp1,f
  9274  0D02                     l2369:	
  9275  0D02  083C               	movf	___ftadd@exp1,w
  9276  0D03  063B               	xorwf	___ftadd@exp2,w
  9277  0D04  1903               	btfsc	3,2
  9278  0D05  2D2C               	goto	l797
  9279  0D06  2CF8               	goto	l2367
  9280  0D07                     l2371:	
  9281  0D07  083C               	movf	___ftadd@exp1,w
  9282  0D08  023B               	subwf	___ftadd@exp2,w
  9283  0D09  1803               	skipnc
  9284  0D0A  2D2C               	goto	l797
  9285  0D0B                     l2373:	
  9286  0D0B  3001               	movlw	1
  9287  0D0C                     u2405:	
  9288  0D0C  35B0               	lslf	___ftadd@f1,f
  9289  0D0D  0DB1               	rlf	___ftadd@f1+1,f
  9290  0D0E  0DB2               	rlf	___ftadd@f1+2,f
  9291  0D0F  0B89               	decfsz	9,f
  9292  0D10  2D0C               	goto	u2405
  9293  0D11  3001               	movlw	1
  9294  0D12  02BC               	subwf	___ftadd@exp1,f
  9295  0D13  083B               	movf	___ftadd@exp2,w
  9296  0D14  063C               	xorwf	___ftadd@exp1,w
  9297  0D15  1903               	skipnz
  9298  0D16  2D28               	goto	l2381
  9299  0D17  3001               	movlw	1
  9300  0D18  02BA               	subwf	___ftadd@sign,f
  9301  0D19  083A               	movf	___ftadd@sign,w
  9302  0D1A  3907               	andlw	7
  9303  0D1B  1903               	btfsc	3,2
  9304  0D1C  2D28               	goto	l2381
  9305  0D1D  2D0B               	goto	l2373
  9306  0D1E                     l2379:	
  9307  0D1E  3001               	movlw	1
  9308  0D1F                     u2435:	
  9309  0D1F  36B5               	lsrf	___ftadd@f2+2,f
  9310  0D20  0CB4               	rrf	___ftadd@f2+1,f
  9311  0D21  0CB3               	rrf	___ftadd@f2,f
  9312  0D22  0B89               	decfsz	9,f
  9313  0D23  2D1F               	goto	u2435
  9314  0D24  3001               	movlw	1
  9315  0D25  00B6               	movwf	??___ftadd
  9316  0D26  0836               	movf	??___ftadd,w
  9317  0D27  07BB               	addwf	___ftadd@exp2,f
  9318  0D28                     l2381:	
  9319  0D28  083C               	movf	___ftadd@exp1,w
  9320  0D29  063B               	xorwf	___ftadd@exp2,w
  9321  0D2A  1D03               	skipz
  9322  0D2B  2D1E               	goto	l2379
  9323  0D2C                     l797:	
  9324  0D2C  1FBA               	btfss	___ftadd@sign,7
  9325  0D2D  2D3E               	goto	l2385
  9326  0D2E  30FF               	movlw	255
  9327  0D2F  06B0               	xorwf	___ftadd@f1,f
  9328  0D30  30FF               	movlw	255
  9329  0D31  06B1               	xorwf	___ftadd@f1+1,f
  9330  0D32  30FF               	movlw	255
  9331  0D33  06B2               	xorwf	___ftadd@f1+2,f
  9332  0D34  3001               	movlw	1
  9333  0D35  07B0               	addwf	___ftadd@f1,f
  9334  0D36  3000               	movlw	0
  9335  0D37  1803               	skipnc
  9336  0D38  3001               	movlw	1
  9337  0D39  07B1               	addwf	___ftadd@f1+1,f
  9338  0D3A  3000               	movlw	0
  9339  0D3B  1803               	skipnc
  9340  0D3C  3001               	movlw	1
  9341  0D3D  07B2               	addwf	___ftadd@f1+2,f
  9342  0D3E                     l2385:	
  9343  0D3E  1F3A               	btfss	___ftadd@sign,6
  9344  0D3F  2D50               	goto	l2389
  9345  0D40  30FF               	movlw	255
  9346  0D41  06B3               	xorwf	___ftadd@f2,f
  9347  0D42  30FF               	movlw	255
  9348  0D43  06B4               	xorwf	___ftadd@f2+1,f
  9349  0D44  30FF               	movlw	255
  9350  0D45  06B5               	xorwf	___ftadd@f2+2,f
  9351  0D46  3001               	movlw	1
  9352  0D47  07B3               	addwf	___ftadd@f2,f
  9353  0D48  3000               	movlw	0
  9354  0D49  1803               	skipnc
  9355  0D4A  3001               	movlw	1
  9356  0D4B  07B4               	addwf	___ftadd@f2+1,f
  9357  0D4C  3000               	movlw	0
  9358  0D4D  1803               	skipnc
  9359  0D4E  3001               	movlw	1
  9360  0D4F  07B5               	addwf	___ftadd@f2+2,f
  9361  0D50                     l2389:	
  9362  0D50  01BA               	clrf	___ftadd@sign
  9363  0D51  0830               	movf	___ftadd@f1,w
  9364  0D52  07B3               	addwf	___ftadd@f2,f
  9365  0D53  0831               	movf	___ftadd@f1+1,w
  9366  0D54  3DB4               	addwfc	___ftadd@f2+1,f
  9367  0D55  0832               	movf	___ftadd@f1+2,w
  9368  0D56  3DB5               	addwfc	___ftadd@f2+2,f
  9369  0D57  1FB5               	btfss	___ftadd@f2+2,7
  9370  0D58  2D6B               	goto	l2399
  9371  0D59  30FF               	movlw	255
  9372  0D5A  06B3               	xorwf	___ftadd@f2,f
  9373  0D5B  30FF               	movlw	255
  9374  0D5C  06B4               	xorwf	___ftadd@f2+1,f
  9375  0D5D  30FF               	movlw	255
  9376  0D5E  06B5               	xorwf	___ftadd@f2+2,f
  9377  0D5F  3001               	movlw	1
  9378  0D60  07B3               	addwf	___ftadd@f2,f
  9379  0D61  3000               	movlw	0
  9380  0D62  1803               	skipnc
  9381  0D63  3001               	movlw	1
  9382  0D64  07B4               	addwf	___ftadd@f2+1,f
  9383  0D65  3000               	movlw	0
  9384  0D66  1803               	skipnc
  9385  0D67  3001               	movlw	1
  9386  0D68  07B5               	addwf	___ftadd@f2+2,f
  9387  0D69  01BA               	clrf	___ftadd@sign
  9388  0D6A  0ABA               	incf	___ftadd@sign,f
  9389  0D6B                     l2399:	
  9390  0D6B  0833               	movf	___ftadd@f2,w
  9391  0D6C  00F0               	movwf	___ftpack@arg
  9392  0D6D  0834               	movf	___ftadd@f2+1,w
  9393  0D6E  00F1               	movwf	___ftpack@arg+1
  9394  0D6F  0835               	movf	___ftadd@f2+2,w
  9395  0D70  00F2               	movwf	___ftpack@arg+2
  9396  0D71  083C               	movf	___ftadd@exp1,w
  9397  0D72  00B6               	movwf	??___ftadd
  9398  0D73  0836               	movf	??___ftadd,w
  9399  0D74  00F3               	movwf	___ftpack@exp
  9400  0D75  083A               	movf	___ftadd@sign,w
  9401  0D76  00B7               	movwf	??___ftadd+1
  9402  0D77  0837               	movf	??___ftadd+1,w
  9403  0D78  00F4               	movwf	___ftpack@sign
  9404  0D79  3188  201C         	fcall	___ftpack
  9405  0D7B  0870               	movf	?___ftpack,w
  9406  0D7C  0020               	movlb	0	; select bank0
  9407  0D7D  00B0               	movwf	?___ftadd
  9408  0D7E  0871               	movf	?___ftpack+1,w
  9409  0D7F  00B1               	movwf	?___ftadd+1
  9410  0D80  0872               	movf	?___ftpack+2,w
  9411  0D81  00B2               	movwf	?___ftadd+2
  9412  0D82  0008               	return
  9413  0D83                     __end_of___ftadd:	
  9414                           
  9415                           	psect	text8
  9416  0D83                     __ptext8:	
  9417 ;; *************** function _readIAnalog *****************
  9418 ;; Defined at:
  9419 ;;		line 77 in file "adc.c"
  9420 ;; Parameters:    Size  Location     Type
  9421 ;;  channel         2    6[BANK0 ] unsigned int 
  9422 ;; Auto vars:     Size  Location     Type
  9423 ;;  value           2   11[COMMON] int 
  9424 ;;  analog_chann    2    9[COMMON] unsigned int 
  9425 ;; Return value:  Size  Location     Type
  9426 ;;                  2    6[BANK0 ] int 
  9427 ;; Registers used:
  9428 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9429 ;; Tracked objects:
  9430 ;;		On entry : 0/0
  9431 ;;		On exit  : 0/0
  9432 ;;		Unchanged: 0/0
  9433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9434 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9435 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9436 ;;      Temps:          0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9437 ;;      Totals:         4      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9438 ;;Total ram usage:       24 bytes
  9439 ;; Hardware stack levels used:    1
  9440 ;; Hardware stack levels required when called:    1
  9441 ;; This function calls:
  9442 ;;		_ADCRead
  9443 ;;		___aldiv
  9444 ;;		___wmul
  9445 ;; This function is called by:
  9446 ;;		_main
  9447 ;; This function uses a non-reentrant model
  9448 ;;
  9449                           
  9450                           
  9451                           ;psect for function _readIAnalog
  9452  0D83                     _readIAnalog:	
  9453                           
  9454                           ;adc.c: 79: int16_t value;
  9455                           ;adc.c: 81: uint16_t analog_channel = channels[channel];
  9456                           
  9457                           ;incstack = 0
  9458                           ; Regs used in _readIAnalog: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9459  0D83  0020               	movlb	0	; select bank0
  9460  0D84  3526               	lslf	readIAnalog@channel,w
  9461  0D85  3E35               	addlw	(low (_channels| (0+256)))& (0+255)
  9462  0D86  0086               	movwf	6
  9463  0D87  3001               	movlw	1	; select bank2/3
  9464  0D88  0087               	movwf	7
  9465  0D89  3F40               	moviw [0]fsr1
  9466  0D8A  00F9               	movwf	readIAnalog@analog_channel
  9467  0D8B  3F41               	moviw [1]fsr1
  9468  0D8C  00FA               	movwf	readIAnalog@analog_channel+1
  9469                           
  9470                           ;adc.c: 83: value = ADCRead(analog_channel);
  9471  0D8D  0879               	movf	readIAnalog@analog_channel,w
  9472  0D8E  3192  2295  318D   	fcall	_ADCRead
  9473  0D91  0871               	movf	?_ADCRead+1,w
  9474  0D92  00FC               	movwf	readIAnalog@value+1
  9475  0D93  0870               	movf	?_ADCRead,w
  9476  0D94  00FB               	movwf	readIAnalog@value
  9477                           
  9478                           ;adc.c: 85: totals[channel] = totals[channel]-samples[channel][sampleIndex];
  9479  0D95  0020               	movlb	0	; select bank0
  9480  0D96  0826               	movf	readIAnalog@channel,w
  9481  0D97  00A8               	movwf	??_readIAnalog
  9482  0D98  3001               	movlw	1
  9483  0D99                     u3195:	
  9484  0D99  35A8               	lslf	??_readIAnalog,f
  9485  0D9A  3EFF               	addlw	-1
  9486  0D9B  1D03               	skipz
  9487  0D9C  2D99               	goto	u3195
  9488  0D9D  3528               	lslf	??_readIAnalog,w
  9489  0D9E  3E20               	addlw	(low (_totals| (0+256)))& (0+255)
  9490  0D9F  0086               	movwf	6
  9491  0DA0  3001               	movlw	1	; select bank2/3
  9492  0DA1  0087               	movwf	7
  9493  0DA2  3F40               	moviw [0]fsr1
  9494  0DA3  00A9               	movwf	??_readIAnalog+1
  9495  0DA4  3F41               	moviw [1]fsr1
  9496  0DA5  00AA               	movwf	??_readIAnalog+2
  9497  0DA6  3F42               	moviw [2]fsr1
  9498  0DA7  00AB               	movwf	??_readIAnalog+3
  9499  0DA8  3F43               	moviw [3]fsr1
  9500  0DA9  00AC               	movwf	??_readIAnalog+4
  9501  0DAA  0869               	movf	_sampleIndex+1,w
  9502  0DAB  00AE               	movwf	??_readIAnalog+6
  9503  0DAC  0868               	movf	_sampleIndex,w
  9504  0DAD  00AD               	movwf	??_readIAnalog+5
  9505  0DAE  35AD               	lslf	??_readIAnalog+5,f
  9506  0DAF  0DAE               	rlf	??_readIAnalog+6,f
  9507  0DB0  0827               	movf	readIAnalog@channel+1,w
  9508  0DB1  00F1               	movwf	___wmul@multiplier+1
  9509  0DB2  0826               	movf	readIAnalog@channel,w
  9510  0DB3  00F0               	movwf	___wmul@multiplier
  9511  0DB4  3064               	movlw	100
  9512  0DB5  00F2               	movwf	___wmul@multiplicand
  9513  0DB6  3000               	movlw	0
  9514  0DB7  00F3               	movwf	___wmul@multiplicand+1
  9515  0DB8  3188  2001  318D   	fcall	___wmul
  9516  0DBB  3060               	movlw	96
  9517  0DBC  0020               	movlb	0	; select bank0
  9518  0DBD  00AF               	movwf	??_readIAnalog+7
  9519  0DBE  3022               	movlw	34
  9520  0DBF  00B0               	movwf	??_readIAnalog+8
  9521  0DC0  0870               	movf	?___wmul,w
  9522  0DC1  072F               	addwf	??_readIAnalog+7,w
  9523  0DC2  00B1               	movwf	??_readIAnalog+9
  9524  0DC3  0871               	movf	?___wmul+1,w
  9525  0DC4  3D30               	addwfc	??_readIAnalog+8,w
  9526  0DC5  00B2               	movwf	??_readIAnalog+10
  9527  0DC6  082D               	movf	??_readIAnalog+5,w
  9528  0DC7  0731               	addwf	??_readIAnalog+9,w
  9529  0DC8  0086               	movwf	6
  9530  0DC9  082E               	movf	??_readIAnalog+6,w
  9531  0DCA  3D32               	addwfc	??_readIAnalog+10,w
  9532  0DCB  0087               	movwf	7
  9533  0DCC  3F40               	moviw [0]fsr1
  9534  0DCD  00B3               	movwf	??_readIAnalog+11
  9535  0DCE  3F41               	moviw [1]fsr1
  9536  0DCF  00B4               	movwf	??_readIAnalog+12
  9537  0DD0  0833               	movf	??_readIAnalog+11,w
  9538  0DD1  00B5               	movwf	??_readIAnalog+13
  9539  0DD2  0834               	movf	??_readIAnalog+12,w
  9540  0DD3  00B6               	movwf	??_readIAnalog+14
  9541  0DD4  3000               	movlw	0
  9542  0DD5  1BB6               	btfsc	??_readIAnalog+14,7
  9543  0DD6  30FF               	movlw	255
  9544  0DD7  00B7               	movwf	??_readIAnalog+15
  9545  0DD8  00B8               	movwf	??_readIAnalog+16
  9546  0DD9  09B5               	comf	??_readIAnalog+13,f
  9547  0DDA  09B6               	comf	??_readIAnalog+14,f
  9548  0DDB  09B7               	comf	??_readIAnalog+15,f
  9549  0DDC  09B8               	comf	??_readIAnalog+16,f
  9550  0DDD  0AB5               	incf	??_readIAnalog+13,f
  9551  0DDE  1903               	skipnz
  9552  0DDF  0AB6               	incf	??_readIAnalog+14,f
  9553  0DE0  1903               	skipnz
  9554  0DE1  0AB7               	incf	??_readIAnalog+15,f
  9555  0DE2  1903               	skipnz
  9556  0DE3  0AB8               	incf	??_readIAnalog+16,f
  9557  0DE4  0835               	movf	??_readIAnalog+13,w
  9558  0DE5  07A9               	addwf	??_readIAnalog+1,f
  9559  0DE6  0836               	movf	??_readIAnalog+14,w
  9560  0DE7  3DAA               	addwfc	??_readIAnalog+2,f
  9561  0DE8  0837               	movf	??_readIAnalog+15,w
  9562  0DE9  3DAB               	addwfc	??_readIAnalog+3,f
  9563  0DEA  0838               	movf	??_readIAnalog+16,w
  9564  0DEB  3DAC               	addwfc	??_readIAnalog+4,f
  9565  0DEC  0826               	movf	readIAnalog@channel,w
  9566  0DED  00B9               	movwf	??_readIAnalog+17
  9567  0DEE  3001               	movlw	1
  9568  0DEF                     u3205:	
  9569  0DEF  35B9               	lslf	??_readIAnalog+17,f
  9570  0DF0  3EFF               	addlw	-1
  9571  0DF1  1D03               	skipz
  9572  0DF2  2DEF               	goto	u3205
  9573  0DF3  3539               	lslf	??_readIAnalog+17,w
  9574  0DF4  3E20               	addlw	(low (_totals| (0+256)))& (0+255)
  9575  0DF5  0086               	movwf	6
  9576  0DF6  3001               	movlw	1	; select bank2/3
  9577  0DF7  0087               	movwf	7
  9578  0DF8  0829               	movf	??_readIAnalog+1,w
  9579  0DF9  3FC0               	movwi [0]fsr1
  9580  0DFA  082A               	movf	??_readIAnalog+2,w
  9581  0DFB  3FC1               	movwi [1]fsr1
  9582  0DFC  082B               	movf	??_readIAnalog+3,w
  9583  0DFD  3FC2               	movwi [2]fsr1
  9584  0DFE  082C               	movf	??_readIAnalog+4,w
  9585  0DFF  3FC3               	movwi [3]fsr1
  9586                           
  9587                           ;adc.c: 87: samples[channel][sampleIndex] = value;
  9588  0E00  0869               	movf	_sampleIndex+1,w
  9589  0E01  00A9               	movwf	??_readIAnalog+1
  9590  0E02  0868               	movf	_sampleIndex,w
  9591  0E03  00A8               	movwf	??_readIAnalog
  9592  0E04  35A8               	lslf	??_readIAnalog,f
  9593  0E05  0DA9               	rlf	??_readIAnalog+1,f
  9594  0E06  0827               	movf	readIAnalog@channel+1,w
  9595  0E07  00F1               	movwf	___wmul@multiplier+1
  9596  0E08  0826               	movf	readIAnalog@channel,w
  9597  0E09  00F0               	movwf	___wmul@multiplier
  9598  0E0A  3064               	movlw	100
  9599  0E0B  00F2               	movwf	___wmul@multiplicand
  9600  0E0C  3000               	movlw	0
  9601  0E0D  00F3               	movwf	___wmul@multiplicand+1
  9602  0E0E  3188  2001  318D   	fcall	___wmul
  9603  0E11  3060               	movlw	96
  9604  0E12  0020               	movlb	0	; select bank0
  9605  0E13  00AA               	movwf	??_readIAnalog+2
  9606  0E14  3022               	movlw	34
  9607  0E15  00AB               	movwf	??_readIAnalog+3
  9608  0E16  0870               	movf	?___wmul,w
  9609  0E17  072A               	addwf	??_readIAnalog+2,w
  9610  0E18  00AC               	movwf	??_readIAnalog+4
  9611  0E19  0871               	movf	?___wmul+1,w
  9612  0E1A  3D2B               	addwfc	??_readIAnalog+3,w
  9613  0E1B  00AD               	movwf	??_readIAnalog+5
  9614  0E1C  0828               	movf	??_readIAnalog,w
  9615  0E1D  072C               	addwf	??_readIAnalog+4,w
  9616  0E1E  0086               	movwf	6
  9617  0E1F  0829               	movf	??_readIAnalog+1,w
  9618  0E20  3D2D               	addwfc	??_readIAnalog+5,w
  9619  0E21  0087               	movwf	7
  9620  0E22  087B               	movf	readIAnalog@value,w
  9621  0E23  3FC0               	movwi [0]fsr1
  9622  0E24  087C               	movf	readIAnalog@value+1,w
  9623  0E25  3FC1               	movwi [1]fsr1
  9624                           
  9625                           ;adc.c: 89: totals[channel] = totals[channel]+samples[channel][sampleIndex];
  9626  0E26  0826               	movf	readIAnalog@channel,w
  9627  0E27  00A8               	movwf	??_readIAnalog
  9628  0E28  3001               	movlw	1
  9629  0E29                     u3215:	
  9630  0E29  35A8               	lslf	??_readIAnalog,f
  9631  0E2A  3EFF               	addlw	-1
  9632  0E2B  1D03               	skipz
  9633  0E2C  2E29               	goto	u3215
  9634  0E2D  3528               	lslf	??_readIAnalog,w
  9635  0E2E  3E20               	addlw	(low (_totals| (0+256)))& (0+255)
  9636  0E2F  0086               	movwf	6
  9637  0E30  3001               	movlw	1	; select bank2/3
  9638  0E31  0087               	movwf	7
  9639  0E32  3F40               	moviw [0]fsr1
  9640  0E33  00A9               	movwf	??_readIAnalog+1
  9641  0E34  3F41               	moviw [1]fsr1
  9642  0E35  00AA               	movwf	??_readIAnalog+2
  9643  0E36  3F42               	moviw [2]fsr1
  9644  0E37  00AB               	movwf	??_readIAnalog+3
  9645  0E38  3F43               	moviw [3]fsr1
  9646  0E39  00AC               	movwf	??_readIAnalog+4
  9647  0E3A  0869               	movf	_sampleIndex+1,w
  9648  0E3B  00AE               	movwf	??_readIAnalog+6
  9649  0E3C  0868               	movf	_sampleIndex,w
  9650  0E3D  00AD               	movwf	??_readIAnalog+5
  9651  0E3E  35AD               	lslf	??_readIAnalog+5,f
  9652  0E3F  0DAE               	rlf	??_readIAnalog+6,f
  9653  0E40  0827               	movf	readIAnalog@channel+1,w
  9654  0E41  00F1               	movwf	___wmul@multiplier+1
  9655  0E42  0826               	movf	readIAnalog@channel,w
  9656  0E43  00F0               	movwf	___wmul@multiplier
  9657  0E44  3064               	movlw	100
  9658  0E45  00F2               	movwf	___wmul@multiplicand
  9659  0E46  3000               	movlw	0
  9660  0E47  00F3               	movwf	___wmul@multiplicand+1
  9661  0E48  3188  2001  318D   	fcall	___wmul
  9662  0E4B  3060               	movlw	96
  9663  0E4C  0020               	movlb	0	; select bank0
  9664  0E4D  00AF               	movwf	??_readIAnalog+7
  9665  0E4E  3022               	movlw	34
  9666  0E4F  00B0               	movwf	??_readIAnalog+8
  9667  0E50  0870               	movf	?___wmul,w
  9668  0E51  072F               	addwf	??_readIAnalog+7,w
  9669  0E52  00B1               	movwf	??_readIAnalog+9
  9670  0E53  0871               	movf	?___wmul+1,w
  9671  0E54  3D30               	addwfc	??_readIAnalog+8,w
  9672  0E55  00B2               	movwf	??_readIAnalog+10
  9673  0E56  082D               	movf	??_readIAnalog+5,w
  9674  0E57  0731               	addwf	??_readIAnalog+9,w
  9675  0E58  0086               	movwf	6
  9676  0E59  082E               	movf	??_readIAnalog+6,w
  9677  0E5A  3D32               	addwfc	??_readIAnalog+10,w
  9678  0E5B  0087               	movwf	7
  9679  0E5C  3F40               	moviw [0]fsr1
  9680  0E5D  00B3               	movwf	??_readIAnalog+11
  9681  0E5E  3F41               	moviw [1]fsr1
  9682  0E5F  00B4               	movwf	??_readIAnalog+12
  9683  0E60  0833               	movf	??_readIAnalog+11,w
  9684  0E61  00B5               	movwf	??_readIAnalog+13
  9685  0E62  0834               	movf	??_readIAnalog+12,w
  9686  0E63  00B6               	movwf	??_readIAnalog+14
  9687  0E64  3000               	movlw	0
  9688  0E65  1BB6               	btfsc	??_readIAnalog+14,7
  9689  0E66  30FF               	movlw	255
  9690  0E67  00B7               	movwf	??_readIAnalog+15
  9691  0E68  00B8               	movwf	??_readIAnalog+16
  9692  0E69  0835               	movf	??_readIAnalog+13,w
  9693  0E6A  07A9               	addwf	??_readIAnalog+1,f
  9694  0E6B  0836               	movf	??_readIAnalog+14,w
  9695  0E6C  3DAA               	addwfc	??_readIAnalog+2,f
  9696  0E6D  0837               	movf	??_readIAnalog+15,w
  9697  0E6E  3DAB               	addwfc	??_readIAnalog+3,f
  9698  0E6F  0838               	movf	??_readIAnalog+16,w
  9699  0E70  3DAC               	addwfc	??_readIAnalog+4,f
  9700  0E71  0826               	movf	readIAnalog@channel,w
  9701  0E72  00B9               	movwf	??_readIAnalog+17
  9702  0E73  3001               	movlw	1
  9703  0E74                     u3225:	
  9704  0E74  35B9               	lslf	??_readIAnalog+17,f
  9705  0E75  3EFF               	addlw	-1
  9706  0E76  1D03               	skipz
  9707  0E77  2E74               	goto	u3225
  9708  0E78  3539               	lslf	??_readIAnalog+17,w
  9709  0E79  3E20               	addlw	(low (_totals| (0+256)))& (0+255)
  9710  0E7A  0086               	movwf	6
  9711  0E7B  3001               	movlw	1	; select bank2/3
  9712  0E7C  0087               	movwf	7
  9713  0E7D  0829               	movf	??_readIAnalog+1,w
  9714  0E7E  3FC0               	movwi [0]fsr1
  9715  0E7F  082A               	movf	??_readIAnalog+2,w
  9716  0E80  3FC1               	movwi [1]fsr1
  9717  0E81  082B               	movf	??_readIAnalog+3,w
  9718  0E82  3FC2               	movwi [2]fsr1
  9719  0E83  082C               	movf	??_readIAnalog+4,w
  9720  0E84  3FC3               	movwi [3]fsr1
  9721                           
  9722                           ;adc.c: 91: if(channel>=(4-1))
  9723  0E85  3000               	movlw	0
  9724  0E86  0227               	subwf	readIAnalog@channel+1,w
  9725  0E87  3003               	movlw	3
  9726  0E88  1903               	skipnz
  9727  0E89  0226               	subwf	readIAnalog@channel,w
  9728  0E8A  1C03               	skipc
  9729  0E8B  2E99               	goto	l2927
  9730                           
  9731                           ;adc.c: 92: {
  9732                           ;adc.c: 93: sampleIndex+=1;
  9733  0E8C  3001               	movlw	1
  9734  0E8D  07E8               	addwf	_sampleIndex,f
  9735  0E8E  3000               	movlw	0
  9736  0E8F  3DE9               	addwfc	_sampleIndex+1,f
  9737                           
  9738                           ;adc.c: 94: if(sampleIndex >= 50)sampleIndex = 0;
  9739  0E90  3000               	movlw	0
  9740  0E91  0269               	subwf	_sampleIndex+1,w
  9741  0E92  3032               	movlw	50
  9742  0E93  1903               	skipnz
  9743  0E94  0268               	subwf	_sampleIndex,w
  9744  0E95  1C03               	skipc
  9745  0E96  2E99               	goto	l2927
  9746  0E97  01E8               	clrf	_sampleIndex
  9747  0E98  01E9               	clrf	_sampleIndex+1
  9748  0E99                     l2927:	
  9749                           
  9750                           ;adc.c: 95: }
  9751                           ;adc.c: 97: value = totals[channel]/50;
  9752  0E99  3000               	movlw	0
  9753  0E9A  00F3               	movwf	___aldiv@divisor+3
  9754  0E9B  3000               	movlw	0
  9755  0E9C  00F2               	movwf	___aldiv@divisor+2
  9756  0E9D  3000               	movlw	0
  9757  0E9E  00F1               	movwf	___aldiv@divisor+1
  9758  0E9F  3032               	movlw	50
  9759  0EA0  00F0               	movwf	___aldiv@divisor
  9760  0EA1  0826               	movf	readIAnalog@channel,w
  9761  0EA2  00A8               	movwf	??_readIAnalog
  9762  0EA3  3001               	movlw	1
  9763  0EA4                     u3255:	
  9764  0EA4  35A8               	lslf	??_readIAnalog,f
  9765  0EA5  3EFF               	addlw	-1
  9766  0EA6  1D03               	skipz
  9767  0EA7  2EA4               	goto	u3255
  9768  0EA8  3528               	lslf	??_readIAnalog,w
  9769  0EA9  3E20               	addlw	(low (_totals| (0+256)))& (0+255)
  9770  0EAA  0086               	movwf	6
  9771  0EAB  3001               	movlw	1	; select bank2/3
  9772  0EAC  0087               	movwf	7
  9773  0EAD  3F40               	moviw [0]fsr1
  9774  0EAE  00F4               	movwf	___aldiv@dividend
  9775  0EAF  3F41               	moviw [1]fsr1
  9776  0EB0  00F5               	movwf	___aldiv@dividend+1
  9777  0EB1  3F42               	moviw [2]fsr1
  9778  0EB2  00F6               	movwf	___aldiv@dividend+2
  9779  0EB3  3F43               	moviw [3]fsr1
  9780  0EB4  00F7               	movwf	___aldiv@dividend+3
  9781  0EB5  3188  2080         	fcall	___aldiv
  9782  0EB7  0871               	movf	?___aldiv+1,w
  9783  0EB8  00FC               	movwf	readIAnalog@value+1
  9784  0EB9  0870               	movf	?___aldiv,w
  9785  0EBA  00FB               	movwf	readIAnalog@value
  9786                           
  9787                           ;adc.c: 99: return value;
  9788  0EBB  087C               	movf	readIAnalog@value+1,w
  9789  0EBC  0020               	movlb	0	; select bank0
  9790  0EBD  00A7               	movwf	?_readIAnalog+1
  9791  0EBE  087B               	movf	readIAnalog@value,w
  9792  0EBF  00A6               	movwf	?_readIAnalog
  9793  0EC0  0008               	return
  9794  0EC1                     __end_of_readIAnalog:	
  9795                           
  9796                           	psect	text9
  9797  0880                     __ptext9:	
  9798 ;; *************** function ___aldiv *****************
  9799 ;; Defined at:
  9800 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\aldiv.c"
  9801 ;; Parameters:    Size  Location     Type
  9802 ;;  divisor         4    0[COMMON] long 
  9803 ;;  dividend        4    4[COMMON] long 
  9804 ;; Auto vars:     Size  Location     Type
  9805 ;;  quotient        4    2[BANK0 ] long 
  9806 ;;  sign            1    1[BANK0 ] unsigned char 
  9807 ;;  counter         1    0[BANK0 ] unsigned char 
  9808 ;; Return value:  Size  Location     Type
  9809 ;;                  4    0[COMMON] long 
  9810 ;; Registers used:
  9811 ;;		wreg, status,2, status,0
  9812 ;; Tracked objects:
  9813 ;;		On entry : 0/0
  9814 ;;		On exit  : 0/0
  9815 ;;		Unchanged: 0/0
  9816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9817 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9818 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9819 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9820 ;;      Totals:         9       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9821 ;;Total ram usage:       15 bytes
  9822 ;; Hardware stack levels used:    1
  9823 ;; This function calls:
  9824 ;;		Nothing
  9825 ;; This function is called by:
  9826 ;;		_readIAnalog
  9827 ;; This function uses a non-reentrant model
  9828 ;;
  9829                           
  9830                           
  9831                           ;psect for function ___aldiv
  9832  0880                     ___aldiv:	
  9833                           
  9834                           ;incstack = 0
  9835                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  9836  0880  0020               	movlb	0	; select bank0
  9837  0881  01A1               	clrf	___aldiv@sign
  9838  0882  1FF3               	btfss	___aldiv@divisor+3,7
  9839  0883  2891               	goto	l660
  9840  0884  09F0               	comf	___aldiv@divisor,f
  9841  0885  09F1               	comf	___aldiv@divisor+1,f
  9842  0886  09F2               	comf	___aldiv@divisor+2,f
  9843  0887  09F3               	comf	___aldiv@divisor+3,f
  9844  0888  0AF0               	incf	___aldiv@divisor,f
  9845  0889  1903               	skipnz
  9846  088A  0AF1               	incf	___aldiv@divisor+1,f
  9847  088B  1903               	skipnz
  9848  088C  0AF2               	incf	___aldiv@divisor+2,f
  9849  088D  1903               	skipnz
  9850  088E  0AF3               	incf	___aldiv@divisor+3,f
  9851  088F  01A1               	clrf	___aldiv@sign
  9852  0890  0AA1               	incf	___aldiv@sign,f
  9853  0891                     l660:	
  9854  0891  1FF7               	btfss	___aldiv@dividend+3,7
  9855  0892  28A2               	goto	l2767
  9856  0893  09F4               	comf	___aldiv@dividend,f
  9857  0894  09F5               	comf	___aldiv@dividend+1,f
  9858  0895  09F6               	comf	___aldiv@dividend+2,f
  9859  0896  09F7               	comf	___aldiv@dividend+3,f
  9860  0897  0AF4               	incf	___aldiv@dividend,f
  9861  0898  1903               	skipnz
  9862  0899  0AF5               	incf	___aldiv@dividend+1,f
  9863  089A  1903               	skipnz
  9864  089B  0AF6               	incf	___aldiv@dividend+2,f
  9865  089C  1903               	skipnz
  9866  089D  0AF7               	incf	___aldiv@dividend+3,f
  9867  089E  3001               	movlw	1
  9868  089F  00F8               	movwf	??___aldiv
  9869  08A0  0878               	movf	??___aldiv,w
  9870  08A1  06A1               	xorwf	___aldiv@sign,f
  9871  08A2                     l2767:	
  9872  08A2  3000               	movlw	0
  9873  08A3  00A5               	movwf	___aldiv@quotient+3
  9874  08A4  3000               	movlw	0
  9875  08A5  00A4               	movwf	___aldiv@quotient+2
  9876  08A6  3000               	movlw	0
  9877  08A7  00A3               	movwf	___aldiv@quotient+1
  9878  08A8  3000               	movlw	0
  9879  08A9  00A2               	movwf	___aldiv@quotient
  9880  08AA  0873               	movf	___aldiv@divisor+3,w
  9881  08AB  0472               	iorwf	___aldiv@divisor+2,w
  9882  08AC  0471               	iorwf	___aldiv@divisor+1,w
  9883  08AD  0470               	iorwf	___aldiv@divisor,w
  9884  08AE  1903               	skipnz
  9885  08AF  28EB               	goto	l2789
  9886  08B0  01A0               	clrf	___aldiv@counter
  9887  08B1  0AA0               	incf	___aldiv@counter,f
  9888  08B2                     l2775:	
  9889  08B2  1BF3               	btfsc	___aldiv@divisor+3,7
  9890  08B3  28C0               	goto	l2777
  9891  08B4  3001               	movlw	1
  9892  08B5                     u2875:	
  9893  08B5  35F0               	lslf	___aldiv@divisor,f
  9894  08B6  0DF1               	rlf	___aldiv@divisor+1,f
  9895  08B7  0DF2               	rlf	___aldiv@divisor+2,f
  9896  08B8  0DF3               	rlf	___aldiv@divisor+3,f
  9897  08B9  0B89               	decfsz	9,f
  9898  08BA  28B5               	goto	u2875
  9899  08BB  3001               	movlw	1
  9900  08BC  00F8               	movwf	??___aldiv
  9901  08BD  0878               	movf	??___aldiv,w
  9902  08BE  07A0               	addwf	___aldiv@counter,f
  9903  08BF  28B2               	goto	l2775
  9904  08C0                     l2777:	
  9905  08C0  3001               	movlw	1
  9906  08C1                     u2895:	
  9907  08C1  35A2               	lslf	___aldiv@quotient,f
  9908  08C2  0DA3               	rlf	___aldiv@quotient+1,f
  9909  08C3  0DA4               	rlf	___aldiv@quotient+2,f
  9910  08C4  0DA5               	rlf	___aldiv@quotient+3,f
  9911  08C5  0B89               	decfsz	9,f
  9912  08C6  28C1               	goto	u2895
  9913  08C7  0873               	movf	___aldiv@divisor+3,w
  9914  08C8  0277               	subwf	___aldiv@dividend+3,w
  9915  08C9  1D03               	skipz
  9916  08CA  28D5               	goto	u2905
  9917  08CB  0872               	movf	___aldiv@divisor+2,w
  9918  08CC  0276               	subwf	___aldiv@dividend+2,w
  9919  08CD  1D03               	skipz
  9920  08CE  28D5               	goto	u2905
  9921  08CF  0871               	movf	___aldiv@divisor+1,w
  9922  08D0  0275               	subwf	___aldiv@dividend+1,w
  9923  08D1  1D03               	skipz
  9924  08D2  28D5               	goto	u2905
  9925  08D3  0870               	movf	___aldiv@divisor,w
  9926  08D4  0274               	subwf	___aldiv@dividend,w
  9927  08D5                     u2905:	
  9928  08D5  1C03               	skipc
  9929  08D6  28E0               	goto	l2785
  9930  08D7  0870               	movf	___aldiv@divisor,w
  9931  08D8  02F4               	subwf	___aldiv@dividend,f
  9932  08D9  0871               	movf	___aldiv@divisor+1,w
  9933  08DA  3BF5               	subwfb	___aldiv@dividend+1,f
  9934  08DB  0872               	movf	___aldiv@divisor+2,w
  9935  08DC  3BF6               	subwfb	___aldiv@dividend+2,f
  9936  08DD  0873               	movf	___aldiv@divisor+3,w
  9937  08DE  3BF7               	subwfb	___aldiv@dividend+3,f
  9938  08DF  1422               	bsf	___aldiv@quotient,0
  9939  08E0                     l2785:	
  9940  08E0  3001               	movlw	1
  9941  08E1                     u2915:	
  9942  08E1  36F3               	lsrf	___aldiv@divisor+3,f
  9943  08E2  0CF2               	rrf	___aldiv@divisor+2,f
  9944  08E3  0CF1               	rrf	___aldiv@divisor+1,f
  9945  08E4  0CF0               	rrf	___aldiv@divisor,f
  9946  08E5  0B89               	decfsz	9,f
  9947  08E6  28E1               	goto	u2915
  9948  08E7  3001               	movlw	1
  9949  08E8  02A0               	subwf	___aldiv@counter,f
  9950  08E9  1D03               	btfss	3,2
  9951  08EA  28C0               	goto	l2777
  9952  08EB                     l2789:	
  9953  08EB  0821               	movf	___aldiv@sign,w
  9954  08EC  1903               	btfsc	3,2
  9955  08ED  28F9               	goto	l2793
  9956  08EE  09A2               	comf	___aldiv@quotient,f
  9957  08EF  09A3               	comf	___aldiv@quotient+1,f
  9958  08F0  09A4               	comf	___aldiv@quotient+2,f
  9959  08F1  09A5               	comf	___aldiv@quotient+3,f
  9960  08F2  0AA2               	incf	___aldiv@quotient,f
  9961  08F3  1903               	skipnz
  9962  08F4  0AA3               	incf	___aldiv@quotient+1,f
  9963  08F5  1903               	skipnz
  9964  08F6  0AA4               	incf	___aldiv@quotient+2,f
  9965  08F7  1903               	skipnz
  9966  08F8  0AA5               	incf	___aldiv@quotient+3,f
  9967  08F9                     l2793:	
  9968  08F9  0825               	movf	___aldiv@quotient+3,w
  9969  08FA  00F3               	movwf	?___aldiv+3
  9970  08FB  0824               	movf	___aldiv@quotient+2,w
  9971  08FC  00F2               	movwf	?___aldiv+2
  9972  08FD  0823               	movf	___aldiv@quotient+1,w
  9973  08FE  00F1               	movwf	?___aldiv+1
  9974  08FF  0822               	movf	___aldiv@quotient,w
  9975  0900  00F0               	movwf	?___aldiv
  9976  0901  0008               	return
  9977  0902                     __end_of___aldiv:	
  9978                           
  9979                           	psect	text10
  9980  177E                     __ptext10:	
  9981 ;; *************** function _readButton *****************
  9982 ;; Defined at:
  9983 ;;		line 9 in file "buttons.c"
  9984 ;; Parameters:    Size  Location     Type
  9985 ;;		None
  9986 ;; Auto vars:     Size  Location     Type
  9987 ;;		None
  9988 ;; Return value:  Size  Location     Type
  9989 ;;                  1    wreg      unsigned char 
  9990 ;; Registers used:
  9991 ;;		wreg, status,2, status,0, pclath, cstack
  9992 ;; Tracked objects:
  9993 ;;		On entry : 0/0
  9994 ;;		On exit  : 0/0
  9995 ;;		Unchanged: 0/0
  9996 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9997 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9998 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9999 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10000 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10001 ;;Total ram usage:        2 bytes
 10002 ;; Hardware stack levels used:    1
 10003 ;; Hardware stack levels required when called:    1
 10004 ;; This function calls:
 10005 ;;		_ADCRead
 10006 ;; This function is called by:
 10007 ;;		_main
 10008 ;; This function uses a non-reentrant model
 10009 ;;
 10010                           
 10011                           
 10012                           ;psect for function _readButton
 10013  177E                     _readButton:	
 10014                           
 10015                           ;buttons.c: 11: readButtons=ADCRead(11);
 10016                           
 10017                           ;incstack = 0
 10018                           ; Regs used in _readButton: [wreg+status,2+status,0+pclath+cstack]
 10019  177E  300B               	movlw	11
 10020  177F  3192  2295  3197   	fcall	_ADCRead
 10021  1782  0871               	movf	?_ADCRead+1,w
 10022  1783  0020               	movlb	0	; select bank0
 10023  1784  00E1               	movwf	_readButtons+1
 10024  1785  0870               	movf	?_ADCRead,w
 10025  1786  00E0               	movwf	_readButtons
 10026                           
 10027                           ;buttons.c: 13: if(readButtons>=365&&readButtons<405)
 10028  1787  0861               	movf	_readButtons+1,w
 10029  1788  3A80               	xorlw	128
 10030  1789  00F4               	movwf	??_readButton
 10031  178A  3081               	movlw	129
 10032  178B  0274               	subwf	??_readButton,w
 10033  178C  1D03               	skipz
 10034  178D  2F90               	goto	u3475
 10035  178E  306D               	movlw	109
 10036  178F  0260               	subwf	_readButtons,w
 10037  1790                     u3475:	
 10038  1790  1C03               	skipc
 10039  1791  2FA2               	goto	l3015
 10040  1792  0020               	movlb	0	; select bank0
 10041  1793  0861               	movf	_readButtons+1,w
 10042  1794  3A80               	xorlw	128
 10043  1795  00F4               	movwf	??_readButton
 10044  1796  3081               	movlw	129
 10045  1797  0274               	subwf	??_readButton,w
 10046  1798  1D03               	skipz
 10047  1799  2F9C               	goto	u3485
 10048  179A  3095               	movlw	149
 10049  179B  0260               	subwf	_readButtons,w
 10050  179C                     u3485:	
 10051  179C  1803               	skipnc
 10052  179D  2FA2               	goto	l3015
 10053                           
 10054                           ;buttons.c: 14: {
 10055                           ;buttons.c: 15: button=1;
 10056  179E  0020               	movlb	0	; select bank0
 10057  179F  01EC               	clrf	_button
 10058  17A0  0AEC               	incf	_button,f
 10059                           
 10060                           ;buttons.c: 16: }
 10061  17A1  2FD0               	goto	l3027
 10062  17A2                     l3015:	
 10063                           
 10064                           ;buttons.c: 18: else if(readButtons>=535&&readButtons<590)
 10065  17A2  0020               	movlb	0	; select bank0
 10066  17A3  0861               	movf	_readButtons+1,w
 10067  17A4  3A80               	xorlw	128
 10068  17A5  00F4               	movwf	??_readButton
 10069  17A6  3082               	movlw	130
 10070  17A7  0274               	subwf	??_readButton,w
 10071  17A8  1D03               	skipz
 10072  17A9  2FAC               	goto	u3495
 10073  17AA  3017               	movlw	23
 10074  17AB  0260               	subwf	_readButtons,w
 10075  17AC                     u3495:	
 10076  17AC  1C03               	skipc
 10077  17AD  2FBC               	goto	l3021
 10078  17AE  0020               	movlb	0	; select bank0
 10079  17AF  0861               	movf	_readButtons+1,w
 10080  17B0  3A80               	xorlw	128
 10081  17B1  00F4               	movwf	??_readButton
 10082  17B2  3082               	movlw	130
 10083  17B3  0274               	subwf	??_readButton,w
 10084  17B4  1D03               	skipz
 10085  17B5  2FB8               	goto	u3505
 10086  17B6  304E               	movlw	78
 10087  17B7  0260               	subwf	_readButtons,w
 10088  17B8                     u3505:	
 10089  17B8  1803               	skipnc
 10090  17B9  2FBC               	goto	l3021
 10091                           
 10092                           ;buttons.c: 19: {
 10093                           ;buttons.c: 20: button=2;
 10094  17BA  3002               	movlw	2
 10095  17BB  2FC9               	goto	L7
 10096  17BC                     l3021:	
 10097                           ;buttons.c: 21: }
 10098                           
 10099                           
 10100                           ;buttons.c: 23: else if(readButtons>745)
 10101  17BC  0020               	movlb	0	; select bank0
 10102  17BD  0861               	movf	_readButtons+1,w
 10103  17BE  3A80               	xorlw	128
 10104  17BF  00F4               	movwf	??_readButton
 10105  17C0  3082               	movlw	130
 10106  17C1  0274               	subwf	??_readButton,w
 10107  17C2  1D03               	skipz
 10108  17C3  2FC6               	goto	u3515
 10109  17C4  30EA               	movlw	234
 10110  17C5  0260               	subwf	_readButtons,w
 10111  17C6                     u3515:	
 10112  17C6  1C03               	skipc
 10113  17C7  2FCE               	goto	l3025
 10114                           
 10115                           ;buttons.c: 24: {
 10116                           ;buttons.c: 25: button=3;
 10117  17C8  3003               	movlw	3
 10118  17C9                     L7:	
 10119  17C9  00F4               	movwf	??_readButton
 10120  17CA  0874               	movf	??_readButton,w
 10121  17CB  0020               	movlb	0	; select bank0
 10122  17CC  00EC               	movwf	_button
 10123                           
 10124                           ;buttons.c: 26: }
 10125  17CD  2FD0               	goto	l3027
 10126  17CE                     l3025:	
 10127                           
 10128                           ;buttons.c: 28: else
 10129                           ;buttons.c: 29: {
 10130                           ;buttons.c: 30: button=0;
 10131  17CE  0020               	movlb	0	; select bank0
 10132  17CF  01EC               	clrf	_button
 10133  17D0                     l3027:	
 10134                           
 10135                           ;buttons.c: 31: }
 10136                           ;buttons.c: 33: if (button!=0)
 10137  17D0  086C               	movf	_button,w
 10138  17D1  1903               	btfsc	3,2
 10139  17D2  2FFD               	goto	l3047
 10140                           
 10141                           ;buttons.c: 34: {
 10142                           ;buttons.c: 35: if (button!=lastButton)
 10143  17D3  086C               	movf	_button,w
 10144  17D4  066B               	xorwf	_lastButton,w
 10145  17D5  1903               	skipnz
 10146  17D6  2FDC               	goto	l3035
 10147                           
 10148                           ;buttons.c: 36: {
 10149                           ;buttons.c: 37: lastButton=button;
 10150  17D7  086C               	movf	_button,w
 10151  17D8  00F4               	movwf	??_readButton
 10152  17D9  0874               	movf	??_readButton,w
 10153  17DA  00EB               	movwf	_lastButton
 10154  17DB  2FFD               	goto	l3047
 10155  17DC                     l3035:	
 10156                           ;buttons.c: 39: }
 10157                           
 10158                           ;buttons.c: 38: j=0;
 10159                           
 10160                           
 10161                           ;buttons.c: 40: else
 10162                           ;buttons.c: 41: {
 10163                           ;buttons.c: 42: j+=1;
 10164  17DC  3001               	movlw	1
 10165  17DD  00F4               	movwf	??_readButton
 10166  17DE  0874               	movf	??_readButton,w
 10167  17DF  07EA               	addwf	_j,f
 10168                           
 10169                           ;buttons.c: 44: if(j==1)
 10170  17E0  036A               	decf	_j,w
 10171  17E1  1D03               	btfss	3,2
 10172  17E2  2FE5               	goto	l3041
 10173                           
 10174                           ;buttons.c: 45: {
 10175                           ;buttons.c: 46: return (lastButton);
 10176  17E3  086B               	movf	_lastButton,w
 10177  17E4  0008               	return
 10178  17E5                     l3041:	
 10179                           
 10180                           ;buttons.c: 47: }
 10181                           ;buttons.c: 49: if (j>10)
 10182  17E5  086A               	movf	_j,w
 10183  17E6  3A80               	xorlw	128
 10184  17E7  3E75               	addlw	-139
 10185  17E8  1C03               	skipc
 10186  17E9  2FFE               	goto	l3049
 10187                           
 10188                           ;buttons.c: 50: {
 10189                           ;buttons.c: 51: _delay((unsigned long)((25)*(32000000/4000.0)));
 10190  17EA  3002               	movlw	2
 10191  17EB  00F5               	movwf	??_readButton+1
 10192  17EC  3004               	movlw	4
 10193  17ED  00F4               	movwf	??_readButton
 10194  17EE  30BA               	movlw	186
 10195  17EF                     u4117:	
 10196  17EF  0B89               	decfsz	9,f
 10197  17F0  2FEF               	goto	u4117
 10198  17F1  0BF4               	decfsz	??_readButton,f
 10199  17F2  2FEF               	goto	u4117
 10200  17F3  0BF5               	decfsz	??_readButton+1,f
 10201  17F4  2FEF               	goto	u4117
 10202  17F5  3200               	nop2
 10203                           
 10204                           ;buttons.c: 52: j=10;
 10205  17F6  300A               	movlw	10
 10206  17F7  00F4               	movwf	??_readButton
 10207  17F8  0874               	movf	??_readButton,w
 10208  17F9  0020               	movlb	0	; select bank0
 10209  17FA  00EA               	movwf	_j
 10210                           
 10211                           ;buttons.c: 53: return (lastButton);
 10212  17FB  086B               	movf	_lastButton,w
 10213  17FC  0008               	return
 10214  17FD                     l3047:	
 10215                           ;buttons.c: 54: }
 10216                           ;buttons.c: 55: }
 10217                           ;buttons.c: 56: goto end;
 10218                           
 10219                           
 10220                           ;buttons.c: 57: }
 10221                           ;buttons.c: 59: j=0;
 10222  17FD  01EA               	clrf	_j
 10223  17FE                     l3049:	
 10224                           ;buttons.c: 61: end:
 10225                           
 10226                           
 10227                           ;buttons.c: 63: return (0);
 10228  17FE  3000               	movlw	0
 10229  17FF  0008               	return
 10230  1800                     __end_of_readButton:	
 10231                           
 10232                           	psect	text11
 10233  1295                     __ptext11:	
 10234 ;; *************** function _ADCRead *****************
 10235 ;; Defined at:
 10236 ;;		line 21 in file "adc.c"
 10237 ;; Parameters:    Size  Location     Type
 10238 ;;  channel         1    wreg     enum E14259
 10239 ;; Auto vars:     Size  Location     Type
 10240 ;;  channel         1    3[COMMON] enum E14259
 10241 ;; Return value:  Size  Location     Type
 10242 ;;                  2    0[COMMON] int 
 10243 ;; Registers used:
 10244 ;;		wreg
 10245 ;; Tracked objects:
 10246 ;;		On entry : 0/0
 10247 ;;		On exit  : 0/0
 10248 ;;		Unchanged: 0/0
 10249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10250 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10251 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10252 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10253 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10254 ;;Total ram usage:        4 bytes
 10255 ;; Hardware stack levels used:    1
 10256 ;; This function calls:
 10257 ;;		Nothing
 10258 ;; This function is called by:
 10259 ;;		_readIAnalog
 10260 ;;		_readButton
 10261 ;;		_main
 10262 ;; This function uses a non-reentrant model
 10263 ;;
 10264                           
 10265                           
 10266                           ;psect for function _ADCRead
 10267  1295                     _ADCRead:	
 10268                           
 10269                           ;incstack = 0
 10270                           ; Regs used in _ADCRead: [wreg]
 10271                           ;ADCRead@channel stored from wreg
 10272  1295  00F3               	movwf	ADCRead@channel
 10273                           
 10274                           ;adc.c: 23: ADPCH = channel_VSS;
 10275  1296  303C               	movlw	60
 10276  1297  0021               	movlb	1	; select bank1
 10277  1298  009E               	movwf	30	;volatile
 10278                           
 10279                           ;adc.c: 25: ADCON0bits.ADON = 1;
 10280  1299  1793               	bsf	19,7	;volatile
 10281                           
 10282                           ;adc.c: 27: ADCON0bits.ADCONT = 0;
 10283  129A  1313               	bcf	19,6	;volatile
 10284                           
 10285                           ;adc.c: 29: ADCON0bits.ADGO = 1;
 10286  129B  1413               	bsf	19,0	;volatile
 10287  129C                     l57:	
 10288                           ;adc.c: 32: {
 10289                           
 10290                           ;adc.c: 31: while(ADCON0bits.ADGO)
 10291                           
 10292  129C  1813               	btfsc	19,0	;volatile
 10293  129D  2A9C               	goto	l57
 10294                           
 10295                           ;adc.c: 33: }
 10296                           ;adc.c: 35: ADPCH = channel;
 10297  129E  0873               	movf	ADCRead@channel,w
 10298  129F  009E               	movwf	30	;volatile
 10299                           
 10300                           ;adc.c: 37: ADCON0bits.ADON = 1;
 10301  12A0  1793               	bsf	19,7	;volatile
 10302                           
 10303                           ;adc.c: 39: ADCON0bits.ADCONT = 0;
 10304  12A1  1313               	bcf	19,6	;volatile
 10305                           
 10306                           ;adc.c: 41: ADCON0bits.ADGO = 1;
 10307  12A2  1413               	bsf	19,0	;volatile
 10308  12A3                     l60:	
 10309                           ;adc.c: 44: {
 10310                           
 10311                           ;adc.c: 43: while(ADCON0bits.ADGO)
 10312                           
 10313  12A3  1813               	btfsc	19,0	;volatile
 10314  12A4  2AA3               	goto	l60
 10315                           
 10316                           ;adc.c: 45: }
 10317                           ;adc.c: 47: return ((ADRESH<<8)+ADRESL);
 10318  12A5  080D               	movf	13,w	;volatile
 10319  12A6  00F1               	movwf	?_ADCRead+1
 10320  12A7  080C               	movf	12,w	;volatile
 10321  12A8  00F0               	movwf	?_ADCRead
 10322  12A9  0008               	return
 10323  12AA                     __end_of_ADCRead:	
 10324                           
 10325                           	psect	text12
 10326  0EC1                     __ptext12:	
 10327 ;; *************** function _cc_cv_mode *****************
 10328 ;; Defined at:
 10329 ;;		line 83 in file "battery_charger.c"
 10330 ;; Parameters:    Size  Location     Type
 10331 ;;  z               1    wreg     unsigned char 
 10332 ;; Auto vars:     Size  Location     Type
 10333 ;;  z               1   37[BANK0 ] unsigned char 
 10334 ;; Return value:  Size  Location     Type
 10335 ;;                  1    wreg      void 
 10336 ;; Registers used:
 10337 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10338 ;; Tracked objects:
 10339 ;;		On entry : 0/0
 10340 ;;		On exit  : 0/0
 10341 ;;		Unchanged: 0/0
 10342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10343 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10344 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10345 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10346 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10347 ;;Total ram usage:        8 bytes
 10348 ;; Hardware stack levels used:    1
 10349 ;; Hardware stack levels required when called:    2
 10350 ;; This function calls:
 10351 ;;		___awtoft
 10352 ;;		___ftmul
 10353 ;;		___fttol
 10354 ;; This function is called by:
 10355 ;;		_main
 10356 ;; This function uses a non-reentrant model
 10357 ;;
 10358                           
 10359                           
 10360                           ;psect for function _cc_cv_mode
 10361  0EC1                     _cc_cv_mode:	
 10362                           
 10363                           ;incstack = 0
 10364                           ; Regs used in _cc_cv_mode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10365                           ;cc_cv_mode@z stored from wreg
 10366  0EC1  0020               	movlb	0	; select bank0
 10367  0EC2  00C5               	movwf	cc_cv_mode@z
 10368                           
 10369                           ;battery_charger.c: 85: if(voltage[z]>=Vref[z])
 10370  0EC3  3545               	lslf	cc_cv_mode@z,w
 10371  0EC4  3E5C               	addlw	(low (_Vref| 0))& (0+255)
 10372  0EC5  0086               	movwf	6
 10373  0EC6  0187               	clrf	7
 10374  0EC7  3F40               	moviw [0]fsr1
 10375  0EC8  00BE               	movwf	??_cc_cv_mode
 10376  0EC9  3F41               	moviw [1]fsr1
 10377  0ECA  00BF               	movwf	??_cc_cv_mode+1
 10378  0ECB  3545               	lslf	cc_cv_mode@z,w
 10379  0ECC  3EB0               	addlw	(low (_voltage| 0))& (0+255)
 10380  0ECD  0086               	movwf	6
 10381  0ECE  0187               	clrf	7
 10382  0ECF  3F40               	moviw [0]fsr1
 10383  0ED0  00C0               	movwf	??_cc_cv_mode+2
 10384  0ED1  3F41               	moviw [1]fsr1
 10385  0ED2  00C1               	movwf	??_cc_cv_mode+3
 10386  0ED3  0841               	movf	??_cc_cv_mode+3,w
 10387  0ED4  3A80               	xorlw	128
 10388  0ED5  00C2               	movwf	??_cc_cv_mode+4
 10389  0ED6  083F               	movf	??_cc_cv_mode+1,w
 10390  0ED7  3A80               	xorlw	128
 10391  0ED8  0242               	subwf	??_cc_cv_mode+4,w
 10392  0ED9  1D03               	skipz
 10393  0EDA  2EDD               	goto	u3375
 10394  0EDB  083E               	movf	??_cc_cv_mode,w
 10395  0EDC  0240               	subwf	??_cc_cv_mode+2,w
 10396  0EDD                     u3375:	
 10397  0EDD  1C03               	skipc
 10398  0EDE  2F1D               	goto	l2991
 10399                           
 10400                           ;battery_charger.c: 86: {
 10401                           ;battery_charger.c: 87: if(VHoldMode[z]<9)VHoldMode[z]+=1;
 10402  0EDF  0020               	movlb	0	; select bank0
 10403  0EE0  0845               	movf	cc_cv_mode@z,w
 10404  0EE1  3E62               	addlw	(low (_VHoldMode| 0))& (0+255)
 10405  0EE2  0086               	movwf	6
 10406  0EE3  0187               	clrf	7
 10407  0EE4  0801               	movf	1,w
 10408  0EE5  3A80               	xorlw	128
 10409  0EE6  3E77               	addlw	-137
 10410  0EE7  1803               	skipnc
 10411  0EE8  2EF1               	goto	l127
 10412  0EE9  3001               	movlw	1
 10413  0EEA  00BE               	movwf	??_cc_cv_mode
 10414  0EEB  0845               	movf	cc_cv_mode@z,w
 10415  0EEC  3E62               	addlw	(low (_VHoldMode| 0))& (0+255)
 10416  0EED  0086               	movwf	6
 10417  0EEE  0187               	clrf	7
 10418  0EEF  083E               	movf	??_cc_cv_mode,w
 10419  0EF0  0781               	addwf	1,f
 10420  0EF1                     l127:	
 10421                           
 10422                           ;battery_charger.c: 88: if(VHoldMode[z]<9)VHoldMode[z]+=1;
 10423  0EF1  0845               	movf	cc_cv_mode@z,w
 10424  0EF2  3E62               	addlw	(low (_VHoldMode| 0))& (0+255)
 10425  0EF3  0086               	movwf	6
 10426  0EF4  0187               	clrf	7
 10427  0EF5  0801               	movf	1,w
 10428  0EF6  3A80               	xorlw	128
 10429  0EF7  3E77               	addlw	-137
 10430  0EF8  1803               	skipnc
 10431  0EF9  2F02               	goto	l128
 10432  0EFA  3001               	movlw	1
 10433  0EFB  00BE               	movwf	??_cc_cv_mode
 10434  0EFC  0845               	movf	cc_cv_mode@z,w
 10435  0EFD  3E62               	addlw	(low (_VHoldMode| 0))& (0+255)
 10436  0EFE  0086               	movwf	6
 10437  0EFF  0187               	clrf	7
 10438  0F00  083E               	movf	??_cc_cv_mode,w
 10439  0F01  0781               	addwf	1,f
 10440  0F02                     l128:	
 10441                           
 10442                           ;battery_charger.c: 90: if(cc_cv[z])
 10443  0F02  0845               	movf	cc_cv_mode@z,w
 10444  0F03  3ED4               	addlw	(low (_cc_cv| 0))& (0+255)
 10445  0F04  0086               	movwf	6
 10446  0F05  0187               	clrf	7
 10447  0F06  0801               	movf	1,w
 10448  0F07  1903               	btfsc	3,2
 10449  0F08  2F10               	goto	l2987
 10450                           
 10451                           ;battery_charger.c: 91: {
 10452                           ;battery_charger.c: 92: cc_cv[z]-=1;
 10453  0F09  0845               	movf	cc_cv_mode@z,w
 10454  0F0A  3ED4               	addlw	(low (_cc_cv| 0))& (0+255)
 10455  0F0B  0086               	movwf	6
 10456  0F0C  0187               	clrf	7
 10457  0F0D  3001               	movlw	1
 10458  0F0E  0281               	subwf	1,f
 10459                           
 10460                           ;battery_charger.c: 93: }
 10461  0F0F  2F45               	goto	l132
 10462  0F10                     l2987:	
 10463                           
 10464                           ;battery_charger.c: 94: else
 10465                           ;battery_charger.c: 95: {
 10466                           ;battery_charger.c: 96: if(Imode[z])
 10467  0F10  0845               	movf	cc_cv_mode@z,w
 10468  0F11  3E64               	addlw	(low (_Imode| 0))& (0+255)
 10469  0F12  0086               	movwf	6
 10470  0F13  0187               	clrf	7
 10471  0F14  0801               	movf	1,w
 10472  0F15  1903               	btfsc	3,2
 10473  0F16  2F45               	goto	l132
 10474                           
 10475                           ;battery_charger.c: 97: {
 10476                           ;battery_charger.c: 98: Imode[z]=0;
 10477  0F17  0845               	movf	cc_cv_mode@z,w
 10478  0F18  3E64               	addlw	(low (_Imode| 0))& (0+255)
 10479  0F19  0086               	movwf	6
 10480  0F1A  0187               	clrf	7
 10481  0F1B  0181               	clrf	1
 10482                           
 10483                           ;battery_charger.c: 99: }
 10484                           ;battery_charger.c: 100: }
 10485                           ;battery_charger.c: 101: }
 10486  0F1C  2F45               	goto	l132
 10487  0F1D                     l2991:	
 10488                           
 10489                           ;battery_charger.c: 102: else
 10490                           ;battery_charger.c: 103: {
 10491                           ;battery_charger.c: 104: VHoldMode[z]-=1;
 10492  0F1D  30FF               	movlw	255
 10493  0F1E  0020               	movlb	0	; select bank0
 10494  0F1F  00BE               	movwf	??_cc_cv_mode
 10495  0F20  0845               	movf	cc_cv_mode@z,w
 10496  0F21  3E62               	addlw	(low (_VHoldMode| 0))& (0+255)
 10497  0F22  0086               	movwf	6
 10498  0F23  0187               	clrf	7
 10499  0F24  083E               	movf	??_cc_cv_mode,w
 10500  0F25  0781               	addwf	1,f
 10501                           
 10502                           ;battery_charger.c: 105: if(VHoldMode[z]<(9*-1))
 10503  0F26  0845               	movf	cc_cv_mode@z,w
 10504  0F27  3E62               	addlw	(low (_VHoldMode| 0))& (0+255)
 10505  0F28  0086               	movwf	6
 10506  0F29  0187               	clrf	7
 10507  0F2A  0801               	movf	1,w
 10508  0F2B  3A80               	xorlw	128
 10509  0F2C  3E89               	addlw	137
 10510  0F2D  1803               	skipnc
 10511  0F2E  2F45               	goto	l132
 10512                           
 10513                           ;battery_charger.c: 106: {
 10514                           ;battery_charger.c: 107: Imode[z]=1;
 10515  0F2F  0845               	movf	cc_cv_mode@z,w
 10516  0F30  3E64               	addlw	(low (_Imode| 0))& (0+255)
 10517  0F31  0086               	movwf	6
 10518  0F32  0187               	clrf	7
 10519  0F33  0181               	clrf	1
 10520  0F34  0A81               	incf	1,f
 10521                           
 10522                           ;battery_charger.c: 108: cc_cv[z]=(9*2);
 10523  0F35  3012               	movlw	18
 10524  0F36  00BE               	movwf	??_cc_cv_mode
 10525  0F37  0845               	movf	cc_cv_mode@z,w
 10526  0F38  3ED4               	addlw	(low (_cc_cv| 0))& (0+255)
 10527  0F39  0086               	movwf	6
 10528  0F3A  0187               	clrf	7
 10529  0F3B  083E               	movf	??_cc_cv_mode,w
 10530  0F3C  0081               	movwf	1
 10531                           
 10532                           ;battery_charger.c: 109: VHoldMode[z]=(9*-1);
 10533  0F3D  30F7               	movlw	247
 10534  0F3E  00BE               	movwf	??_cc_cv_mode
 10535  0F3F  0845               	movf	cc_cv_mode@z,w
 10536  0F40  3E62               	addlw	(low (_VHoldMode| 0))& (0+255)
 10537  0F41  0086               	movwf	6
 10538  0F42  0187               	clrf	7
 10539  0F43  083E               	movf	??_cc_cv_mode,w
 10540  0F44  0081               	movwf	1
 10541  0F45                     l132:	
 10542                           
 10543                           ;battery_charger.c: 110: }
 10544                           ;battery_charger.c: 111: }
 10545                           ;battery_charger.c: 113: if(current[z]>Iref[z])
 10546  0F45  3545               	lslf	cc_cv_mode@z,w
 10547  0F46  3EB8               	addlw	(low (_current| 0))& (0+255)
 10548  0F47  0086               	movwf	6
 10549  0F48  0187               	clrf	7
 10550  0F49  3F40               	moviw [0]fsr1
 10551  0F4A  00BE               	movwf	??_cc_cv_mode
 10552  0F4B  3F41               	moviw [1]fsr1
 10553  0F4C  00BF               	movwf	??_cc_cv_mode+1
 10554  0F4D  3545               	lslf	cc_cv_mode@z,w
 10555  0F4E  3EC4               	addlw	(low (_Iref| 0))& (0+255)
 10556  0F4F  0086               	movwf	6
 10557  0F50  0187               	clrf	7
 10558  0F51  3F40               	moviw [0]fsr1
 10559  0F52  00C0               	movwf	??_cc_cv_mode+2
 10560  0F53  3F41               	moviw [1]fsr1
 10561  0F54  00C1               	movwf	??_cc_cv_mode+3
 10562  0F55  0841               	movf	??_cc_cv_mode+3,w
 10563  0F56  3A80               	xorlw	128
 10564  0F57  00C2               	movwf	??_cc_cv_mode+4
 10565  0F58  083F               	movf	??_cc_cv_mode+1,w
 10566  0F59  3A80               	xorlw	128
 10567  0F5A  0242               	subwf	??_cc_cv_mode+4,w
 10568  0F5B  1D03               	skipz
 10569  0F5C  2F5F               	goto	u3435
 10570  0F5D  083E               	movf	??_cc_cv_mode,w
 10571  0F5E  0240               	subwf	??_cc_cv_mode+2,w
 10572  0F5F                     u3435:	
 10573  0F5F  1803               	skipnc
 10574  0F60  0008               	return
 10575                           
 10576                           ;battery_charger.c: 114: {
 10577                           ;battery_charger.c: 115: if(!(Imode[z]))
 10578  0F61  0020               	movlb	0	; select bank0
 10579  0F62  0845               	movf	cc_cv_mode@z,w
 10580  0F63  3E64               	addlw	(low (_Imode| 0))& (0+255)
 10581  0F64  0086               	movwf	6
 10582  0F65  0187               	clrf	7
 10583  0F66  0801               	movf	1,w
 10584  0F67  1D03               	btfss	3,2
 10585  0F68  0008               	return
 10586                           
 10587                           ;battery_charger.c: 116: {
 10588                           ;battery_charger.c: 117: if(batteryState[z]==FLOAT)
 10589  0F69  0845               	movf	cc_cv_mode@z,w
 10590  0F6A  3E66               	addlw	(low (_batteryState| 0))& (0+255)
 10591  0F6B  0086               	movwf	6
 10592  0F6C  0187               	clrf	7
 10593  0F6D  3005               	movlw	5
 10594  0F6E  0601               	xorwf	1,w
 10595  0F6F  1D03               	btfss	3,2
 10596  0F70  0008               	return
 10597                           
 10598                           ;battery_charger.c: 118: {
 10599                           ;battery_charger.c: 119: if(voltage[z]<1350+(int16_t)((250-batteryTemp)*.24)-70)
 10600  0F71  096D               	comf	_batteryTemp,w
 10601  0F72  00BE               	movwf	??_cc_cv_mode
 10602  0F73  096E               	comf	_batteryTemp+1,w
 10603  0F74  00BF               	movwf	??_cc_cv_mode+1
 10604  0F75  0ABE               	incf	??_cc_cv_mode,f
 10605  0F76  1903               	skipnz
 10606  0F77  0ABF               	incf	??_cc_cv_mode+1,f
 10607  0F78  083E               	movf	??_cc_cv_mode,w
 10608  0F79  3EFA               	addlw	250
 10609  0F7A  00F8               	movwf	___awtoft@c
 10610  0F7B  3000               	movlw	0
 10611  0F7C  3D3F               	addwfc	??_cc_cv_mode+1,w
 10612  0F7D  00F9               	movwf	___awtoft@c+1
 10613  0F7E  3193  2348  318E   	fcall	___awtoft
 10614  0F81  0878               	movf	?___awtoft,w
 10615  0F82  0020               	movlb	0	; select bank0
 10616  0F83  00A3               	movwf	___ftmul@f2
 10617  0F84  0879               	movf	?___awtoft+1,w
 10618  0F85  00A4               	movwf	___ftmul@f2+1
 10619  0F86  087A               	movf	?___awtoft+2,w
 10620  0F87  00A5               	movwf	___ftmul@f2+2
 10621  0F88  30C3               	movlw	195
 10622  0F89  00A0               	movwf	___ftmul@f1
 10623  0F8A  3075               	movlw	117
 10624  0F8B  00A1               	movwf	___ftmul@f1+1
 10625  0F8C  303E               	movlw	62
 10626  0F8D  00A2               	movwf	___ftmul@f1+2
 10627  0F8E  318A  2239  318E   	fcall	___ftmul
 10628  0F91  0020               	movlb	0	; select bank0
 10629  0F92  0820               	movf	?___ftmul,w
 10630  0F93  00B0               	movwf	___fttol@f1
 10631  0F94  0821               	movf	?___ftmul+1,w
 10632  0F95  00B1               	movwf	___fttol@f1+1
 10633  0F96  0822               	movf	?___ftmul+2,w
 10634  0F97  00B2               	movwf	___fttol@f1+2
 10635  0F98  3189  2102  318E   	fcall	___fttol
 10636  0F9B  0020               	movlb	0	; select bank0
 10637  0F9C  0830               	movf	?___fttol,w
 10638  0F9D  3E00               	addlw	0
 10639  0F9E  00C0               	movwf	??_cc_cv_mode+2
 10640  0F9F  3005               	movlw	5
 10641  0FA0  3D31               	addwfc	?___fttol+1,w
 10642  0FA1  00C1               	movwf	??_cc_cv_mode+3
 10643  0FA2  3545               	lslf	cc_cv_mode@z,w
 10644  0FA3  3EB0               	addlw	(low (_voltage| 0))& (0+255)
 10645  0FA4  0086               	movwf	6
 10646  0FA5  0187               	clrf	7
 10647  0FA6  3F40               	moviw [0]fsr1
 10648  0FA7  00C2               	movwf	??_cc_cv_mode+4
 10649  0FA8  3F41               	moviw [1]fsr1
 10650  0FA9  00C3               	movwf	??_cc_cv_mode+5
 10651  0FAA  0843               	movf	??_cc_cv_mode+5,w
 10652  0FAB  3A80               	xorlw	128
 10653  0FAC  00C4               	movwf	??_cc_cv_mode+6
 10654  0FAD  0841               	movf	??_cc_cv_mode+3,w
 10655  0FAE  3A80               	xorlw	128
 10656  0FAF  0244               	subwf	??_cc_cv_mode+6,w
 10657  0FB0  1D03               	skipz
 10658  0FB1  2FB4               	goto	u3465
 10659  0FB2  0840               	movf	??_cc_cv_mode+2,w
 10660  0FB3  0242               	subwf	??_cc_cv_mode+4,w
 10661  0FB4                     u3465:	
 10662  0FB4  1803               	skipnc
 10663  0FB5  0008               	return
 10664                           
 10665                           ;battery_charger.c: 120: {
 10666                           ;battery_charger.c: 121: batteryState[z]=CHARGE;
 10667  0FB6  3004               	movlw	4
 10668  0FB7  0020               	movlb	0	; select bank0
 10669  0FB8  00BE               	movwf	??_cc_cv_mode
 10670  0FB9  0845               	movf	cc_cv_mode@z,w
 10671  0FBA  3E66               	addlw	(low (_batteryState| 0))& (0+255)
 10672  0FBB  0086               	movwf	6
 10673  0FBC  0187               	clrf	7
 10674  0FBD  083E               	movf	??_cc_cv_mode,w
 10675  0FBE  0081               	movwf	1
 10676                           
 10677                           ;battery_charger.c: 122: Vref[z]=1425+(int16_t)((250-batteryTemp)*.24);
 10678  0FBF  096D               	comf	_batteryTemp,w
 10679  0FC0  00BE               	movwf	??_cc_cv_mode
 10680  0FC1  096E               	comf	_batteryTemp+1,w
 10681  0FC2  00BF               	movwf	??_cc_cv_mode+1
 10682  0FC3  0ABE               	incf	??_cc_cv_mode,f
 10683  0FC4  1903               	skipnz
 10684  0FC5  0ABF               	incf	??_cc_cv_mode+1,f
 10685  0FC6  083E               	movf	??_cc_cv_mode,w
 10686  0FC7  3EFA               	addlw	250
 10687  0FC8  00F8               	movwf	___awtoft@c
 10688  0FC9  3000               	movlw	0
 10689  0FCA  3D3F               	addwfc	??_cc_cv_mode+1,w
 10690  0FCB  00F9               	movwf	___awtoft@c+1
 10691  0FCC  3193  2348  318E   	fcall	___awtoft
 10692  0FCF  0878               	movf	?___awtoft,w
 10693  0FD0  0020               	movlb	0	; select bank0
 10694  0FD1  00A3               	movwf	___ftmul@f2
 10695  0FD2  0879               	movf	?___awtoft+1,w
 10696  0FD3  00A4               	movwf	___ftmul@f2+1
 10697  0FD4  087A               	movf	?___awtoft+2,w
 10698  0FD5  00A5               	movwf	___ftmul@f2+2
 10699  0FD6  30C3               	movlw	195
 10700  0FD7  00A0               	movwf	___ftmul@f1
 10701  0FD8  3075               	movlw	117
 10702  0FD9  00A1               	movwf	___ftmul@f1+1
 10703  0FDA  303E               	movlw	62
 10704  0FDB  00A2               	movwf	___ftmul@f1+2
 10705  0FDC  318A  2239  318E   	fcall	___ftmul
 10706  0FDF  0020               	movlb	0	; select bank0
 10707  0FE0  0820               	movf	?___ftmul,w
 10708  0FE1  00B0               	movwf	___fttol@f1
 10709  0FE2  0821               	movf	?___ftmul+1,w
 10710  0FE3  00B1               	movwf	___fttol@f1+1
 10711  0FE4  0822               	movf	?___ftmul+2,w
 10712  0FE5  00B2               	movwf	___fttol@f1+2
 10713  0FE6  3189  2102         	fcall	___fttol
 10714  0FE8  0020               	movlb	0	; select bank0
 10715  0FE9  0830               	movf	?___fttol,w
 10716  0FEA  3E91               	addlw	145
 10717  0FEB  00C0               	movwf	??_cc_cv_mode+2
 10718  0FEC  3005               	movlw	5
 10719  0FED  3D31               	addwfc	?___fttol+1,w
 10720  0FEE  00C1               	movwf	??_cc_cv_mode+3
 10721  0FEF  3545               	lslf	cc_cv_mode@z,w
 10722  0FF0  3E5C               	addlw	(low (_Vref| 0))& (0+255)
 10723  0FF1  0086               	movwf	6
 10724  0FF2  0187               	clrf	7
 10725  0FF3  0840               	movf	??_cc_cv_mode+2,w
 10726  0FF4  3FC0               	movwi [0]fsr1
 10727  0FF5  0841               	movf	??_cc_cv_mode+3,w
 10728  0FF6  3FC1               	movwi [1]fsr1
 10729                           
 10730                           ;battery_charger.c: 123: Iref[z]=35;
 10731  0FF7  3545               	lslf	cc_cv_mode@z,w
 10732  0FF8  3EC4               	addlw	(low (_Iref| 0))& (0+255)
 10733  0FF9  0086               	movwf	6
 10734  0FFA  0187               	clrf	7
 10735  0FFB  3023               	movlw	35
 10736  0FFC  3FC0               	movwi [0]fsr1
 10737  0FFD  3000               	movlw	0
 10738  0FFE  3FC1               	movwi [1]fsr1
 10739  0FFF  0008               	return
 10740  1000                     __end_of_cc_cv_mode:	
 10741                           
 10742                           	psect	text13
 10743  15D1                     __ptext13:	
 10744 ;; *************** function _calculateCurrent3 *****************
 10745 ;; Defined at:
 10746 ;;		line 422 in file "main.c"
 10747 ;; Parameters:    Size  Location     Type
 10748 ;;		None
 10749 ;; Auto vars:     Size  Location     Type
 10750 ;;		None
 10751 ;; Return value:  Size  Location     Type
 10752 ;;                  1    wreg      void 
 10753 ;; Registers used:
 10754 ;;		wreg, status,2, status,0, pclath, cstack
 10755 ;; Tracked objects:
 10756 ;;		On entry : 0/0
 10757 ;;		On exit  : 0/0
 10758 ;;		Unchanged: 0/0
 10759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10761 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10762 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10763 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10764 ;;Total ram usage:        3 bytes
 10765 ;; Hardware stack levels used:    1
 10766 ;; Hardware stack levels required when called:    2
 10767 ;; This function calls:
 10768 ;;		___awtoft
 10769 ;;		___ftdiv
 10770 ;;		___fttol
 10771 ;; This function is called by:
 10772 ;;		_main
 10773 ;; This function uses a non-reentrant model
 10774 ;;
 10775                           
 10776                           
 10777                           ;psect for function _calculateCurrent3
 10778  15D1                     _calculateCurrent3:	
 10779                           
 10780                           ;main.c: 424: if(Ianalogs[3]-559<=0)
 10781                           
 10782                           ;incstack = 0
 10783                           ; Regs used in _calculateCurrent3: [wreg+status,2+status,0+pclath+cstack]
 10784  15D1  0021               	movlb	1	; select bank1
 10785  15D2  0826               	movf	(_Ianalogs^(0+128)+6),w
 10786  15D3  3ED1               	addlw	209
 10787  15D4  0020               	movlb	0	; select bank0
 10788  15D5  00BE               	movwf	??_calculateCurrent3
 10789  15D6  30FD               	movlw	253
 10790  15D7  0021               	movlb	1	; select bank1
 10791  15D8  3D27               	addwfc	((_Ianalogs+1)^(0+128)+6),w
 10792  15D9  0020               	movlb	0	; select bank0
 10793  15DA  00BF               	movwf	??_calculateCurrent3+1
 10794  15DB  083F               	movf	??_calculateCurrent3+1,w
 10795  15DC  3A80               	xorlw	128
 10796  15DD  00C0               	movwf	??_calculateCurrent3+2
 10797  15DE  3080               	movlw	128
 10798  15DF  0240               	subwf	??_calculateCurrent3+2,w
 10799  15E0  1D03               	skipz
 10800  15E1  2DE4               	goto	u3725
 10801  15E2  3001               	movlw	1
 10802  15E3  023E               	subwf	??_calculateCurrent3,w
 10803  15E4                     u3725:	
 10804  15E4  1803               	skipnc
 10805  15E5  2DEA               	goto	l3167
 10806                           
 10807                           ;main.c: 425: {
 10808                           ;main.c: 426: current[3]=0;
 10809  15E6  0021               	movlb	1	; select bank1
 10810  15E7  01BE               	clrf	(_current^(0+128)+6)
 10811  15E8  01BF               	clrf	((_current+1)^(0+128)+6)
 10812                           
 10813                           ;main.c: 427: }
 10814  15E9  0008               	return
 10815  15EA                     l3167:	
 10816                           
 10817                           ;main.c: 428: else
 10818                           ;main.c: 429: {
 10819                           ;main.c: 430: current[3]=(int16_t)((Ianalogs[3]-559)/1.60575);
 10820  15EA  0021               	movlb	1	; select bank1
 10821  15EB  0826               	movf	(_Ianalogs^(0+128)+6),w
 10822  15EC  3ED1               	addlw	209
 10823  15ED  00F8               	movwf	___awtoft@c
 10824  15EE  30FD               	movlw	253
 10825  15EF  3D27               	addwfc	((_Ianalogs+1)^(0+128)+6),w
 10826  15F0  00F9               	movwf	___awtoft@c+1
 10827  15F1  3193  2348  3195   	fcall	___awtoft
 10828  15F4  0878               	movf	?___awtoft,w
 10829  15F5  0020               	movlb	0	; select bank0
 10830  15F6  00A3               	movwf	___ftdiv@f1
 10831  15F7  0879               	movf	?___awtoft+1,w
 10832  15F8  00A4               	movwf	___ftdiv@f1+1
 10833  15F9  087A               	movf	?___awtoft+2,w
 10834  15FA  00A5               	movwf	___ftdiv@f1+2
 10835  15FB  3089               	movlw	137
 10836  15FC  00A0               	movwf	___ftdiv@f2
 10837  15FD  30CD               	movlw	205
 10838  15FE  00A1               	movwf	___ftdiv@f2+1
 10839  15FF  303F               	movlw	63
 10840  1600  00A2               	movwf	___ftdiv@f2+2
 10841  1601  3180  2008  3195   	fcall	___ftdiv
 10842  1604  0020               	movlb	0	; select bank0
 10843  1605  0820               	movf	?___ftdiv,w
 10844  1606  00B0               	movwf	___fttol@f1
 10845  1607  0821               	movf	?___ftdiv+1,w
 10846  1608  00B1               	movwf	___fttol@f1+1
 10847  1609  0822               	movf	?___ftdiv+2,w
 10848  160A  00B2               	movwf	___fttol@f1+2
 10849  160B  3189  2102         	fcall	___fttol
 10850  160D  0020               	movlb	0	; select bank0
 10851  160E  0831               	movf	?___fttol+1,w
 10852  160F  0021               	movlb	1	; select bank1
 10853  1610  00BF               	movwf	((_current+1)^(0+128)+6)
 10854  1611  0020               	movlb	0	; select bank0
 10855  1612  0830               	movf	?___fttol,w
 10856  1613  0021               	movlb	1	; select bank1
 10857  1614  00BE               	movwf	(_current^(0+128)+6)
 10858  1615  0008               	return
 10859  1616                     __end_of_calculateCurrent3:	
 10860                           
 10861                           	psect	text14
 10862  158C                     __ptext14:	
 10863 ;; *************** function _calculateCurrent2 *****************
 10864 ;; Defined at:
 10865 ;;		line 410 in file "main.c"
 10866 ;; Parameters:    Size  Location     Type
 10867 ;;		None
 10868 ;; Auto vars:     Size  Location     Type
 10869 ;;		None
 10870 ;; Return value:  Size  Location     Type
 10871 ;;                  1    wreg      void 
 10872 ;; Registers used:
 10873 ;;		wreg, status,2, status,0, pclath, cstack
 10874 ;; Tracked objects:
 10875 ;;		On entry : 0/0
 10876 ;;		On exit  : 0/0
 10877 ;;		Unchanged: 0/0
 10878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10879 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10880 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10881 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10882 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10883 ;;Total ram usage:        3 bytes
 10884 ;; Hardware stack levels used:    1
 10885 ;; Hardware stack levels required when called:    2
 10886 ;; This function calls:
 10887 ;;		___awtoft
 10888 ;;		___ftdiv
 10889 ;;		___fttol
 10890 ;; This function is called by:
 10891 ;;		_main
 10892 ;; This function uses a non-reentrant model
 10893 ;;
 10894                           
 10895                           
 10896                           ;psect for function _calculateCurrent2
 10897  158C                     _calculateCurrent2:	
 10898                           
 10899                           ;main.c: 412: if(Ianalogs[2]-589<=0)
 10900                           
 10901                           ;incstack = 0
 10902                           ; Regs used in _calculateCurrent2: [wreg+status,2+status,0+pclath+cstack]
 10903  158C  0021               	movlb	1	; select bank1
 10904  158D  0824               	movf	(_Ianalogs^(0+128)+4),w
 10905  158E  3EB3               	addlw	179
 10906  158F  0020               	movlb	0	; select bank0
 10907  1590  00BE               	movwf	??_calculateCurrent2
 10908  1591  30FD               	movlw	253
 10909  1592  0021               	movlb	1	; select bank1
 10910  1593  3D25               	addwfc	((_Ianalogs+1)^(0+128)+4),w
 10911  1594  0020               	movlb	0	; select bank0
 10912  1595  00BF               	movwf	??_calculateCurrent2+1
 10913  1596  083F               	movf	??_calculateCurrent2+1,w
 10914  1597  3A80               	xorlw	128
 10915  1598  00C0               	movwf	??_calculateCurrent2+2
 10916  1599  3080               	movlw	128
 10917  159A  0240               	subwf	??_calculateCurrent2+2,w
 10918  159B  1D03               	skipz
 10919  159C  2D9F               	goto	u3715
 10920  159D  3001               	movlw	1
 10921  159E  023E               	subwf	??_calculateCurrent2,w
 10922  159F                     u3715:	
 10923  159F  1803               	skipnc
 10924  15A0  2DA5               	goto	l3161
 10925                           
 10926                           ;main.c: 413: {
 10927                           ;main.c: 414: current[2]=0;
 10928  15A1  0021               	movlb	1	; select bank1
 10929  15A2  01BC               	clrf	(_current^(0+128)+4)
 10930  15A3  01BD               	clrf	((_current+1)^(0+128)+4)
 10931                           
 10932                           ;main.c: 415: }
 10933  15A4  0008               	return
 10934  15A5                     l3161:	
 10935                           
 10936                           ;main.c: 416: else
 10937                           ;main.c: 417: {
 10938                           ;main.c: 418: current[2]=(int16_t)((Ianalogs[2]-589)/1.3165);
 10939  15A5  0021               	movlb	1	; select bank1
 10940  15A6  0824               	movf	(_Ianalogs^(0+128)+4),w
 10941  15A7  3EB3               	addlw	179
 10942  15A8  00F8               	movwf	___awtoft@c
 10943  15A9  30FD               	movlw	253
 10944  15AA  3D25               	addwfc	((_Ianalogs+1)^(0+128)+4),w
 10945  15AB  00F9               	movwf	___awtoft@c+1
 10946  15AC  3193  2348  3195   	fcall	___awtoft
 10947  15AF  0878               	movf	?___awtoft,w
 10948  15B0  0020               	movlb	0	; select bank0
 10949  15B1  00A3               	movwf	___ftdiv@f1
 10950  15B2  0879               	movf	?___awtoft+1,w
 10951  15B3  00A4               	movwf	___ftdiv@f1+1
 10952  15B4  087A               	movf	?___awtoft+2,w
 10953  15B5  00A5               	movwf	___ftdiv@f1+2
 10954  15B6  3083               	movlw	131
 10955  15B7  00A0               	movwf	___ftdiv@f2
 10956  15B8  30A8               	movlw	168
 10957  15B9  00A1               	movwf	___ftdiv@f2+1
 10958  15BA  303F               	movlw	63
 10959  15BB  00A2               	movwf	___ftdiv@f2+2
 10960  15BC  3180  2008  3195   	fcall	___ftdiv
 10961  15BF  0020               	movlb	0	; select bank0
 10962  15C0  0820               	movf	?___ftdiv,w
 10963  15C1  00B0               	movwf	___fttol@f1
 10964  15C2  0821               	movf	?___ftdiv+1,w
 10965  15C3  00B1               	movwf	___fttol@f1+1
 10966  15C4  0822               	movf	?___ftdiv+2,w
 10967  15C5  00B2               	movwf	___fttol@f1+2
 10968  15C6  3189  2102         	fcall	___fttol
 10969  15C8  0020               	movlb	0	; select bank0
 10970  15C9  0831               	movf	?___fttol+1,w
 10971  15CA  0021               	movlb	1	; select bank1
 10972  15CB  00BD               	movwf	((_current+1)^(0+128)+4)
 10973  15CC  0020               	movlb	0	; select bank0
 10974  15CD  0830               	movf	?___fttol,w
 10975  15CE  0021               	movlb	1	; select bank1
 10976  15CF  00BC               	movwf	(_current^(0+128)+4)
 10977  15D0  0008               	return
 10978  15D1                     __end_of_calculateCurrent2:	
 10979                           
 10980                           	psect	text15
 10981  1547                     __ptext15:	
 10982 ;; *************** function _calculateCurrent1 *****************
 10983 ;; Defined at:
 10984 ;;		line 398 in file "main.c"
 10985 ;; Parameters:    Size  Location     Type
 10986 ;;		None
 10987 ;; Auto vars:     Size  Location     Type
 10988 ;;		None
 10989 ;; Return value:  Size  Location     Type
 10990 ;;                  1    wreg      void 
 10991 ;; Registers used:
 10992 ;;		wreg, status,2, status,0, pclath, cstack
 10993 ;; Tracked objects:
 10994 ;;		On entry : 0/0
 10995 ;;		On exit  : 0/0
 10996 ;;		Unchanged: 0/0
 10997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10999 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11000 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11001 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11002 ;;Total ram usage:        3 bytes
 11003 ;; Hardware stack levels used:    1
 11004 ;; Hardware stack levels required when called:    2
 11005 ;; This function calls:
 11006 ;;		___awtoft
 11007 ;;		___ftdiv
 11008 ;;		___fttol
 11009 ;; This function is called by:
 11010 ;;		_main
 11011 ;; This function uses a non-reentrant model
 11012 ;;
 11013                           
 11014                           
 11015                           ;psect for function _calculateCurrent1
 11016  1547                     _calculateCurrent1:	
 11017                           
 11018                           ;main.c: 400: if(Ianalogs[1]-561<=0)
 11019                           
 11020                           ;incstack = 0
 11021                           ; Regs used in _calculateCurrent1: [wreg+status,2+status,0+pclath+cstack]
 11022  1547  0021               	movlb	1	; select bank1
 11023  1548  0822               	movf	(_Ianalogs^(0+128)+2),w
 11024  1549  3ECF               	addlw	207
 11025  154A  0020               	movlb	0	; select bank0
 11026  154B  00BE               	movwf	??_calculateCurrent1
 11027  154C  30FD               	movlw	253
 11028  154D  0021               	movlb	1	; select bank1
 11029  154E  3D23               	addwfc	((_Ianalogs+1)^(0+128)+2),w
 11030  154F  0020               	movlb	0	; select bank0
 11031  1550  00BF               	movwf	??_calculateCurrent1+1
 11032  1551  083F               	movf	??_calculateCurrent1+1,w
 11033  1552  3A80               	xorlw	128
 11034  1553  00C0               	movwf	??_calculateCurrent1+2
 11035  1554  3080               	movlw	128
 11036  1555  0240               	subwf	??_calculateCurrent1+2,w
 11037  1556  1D03               	skipz
 11038  1557  2D5A               	goto	u3705
 11039  1558  3001               	movlw	1
 11040  1559  023E               	subwf	??_calculateCurrent1,w
 11041  155A                     u3705:	
 11042  155A  1803               	skipnc
 11043  155B  2D60               	goto	l3155
 11044                           
 11045                           ;main.c: 401: {
 11046                           ;main.c: 402: current[1]=0;
 11047  155C  0021               	movlb	1	; select bank1
 11048  155D  01BA               	clrf	(_current^(0+128)+2)
 11049  155E  01BB               	clrf	((_current+1)^(0+128)+2)
 11050                           
 11051                           ;main.c: 403: }
 11052  155F  0008               	return
 11053  1560                     l3155:	
 11054                           
 11055                           ;main.c: 404: else
 11056                           ;main.c: 405: {
 11057                           ;main.c: 406: current[1]=(int16_t)((Ianalogs[1]-561)/1.99055);
 11058  1560  0021               	movlb	1	; select bank1
 11059  1561  0822               	movf	(_Ianalogs^(0+128)+2),w
 11060  1562  3ECF               	addlw	207
 11061  1563  00F8               	movwf	___awtoft@c
 11062  1564  30FD               	movlw	253
 11063  1565  3D23               	addwfc	((_Ianalogs+1)^(0+128)+2),w
 11064  1566  00F9               	movwf	___awtoft@c+1
 11065  1567  3193  2348  3195   	fcall	___awtoft
 11066  156A  0878               	movf	?___awtoft,w
 11067  156B  0020               	movlb	0	; select bank0
 11068  156C  00A3               	movwf	___ftdiv@f1
 11069  156D  0879               	movf	?___awtoft+1,w
 11070  156E  00A4               	movwf	___ftdiv@f1+1
 11071  156F  087A               	movf	?___awtoft+2,w
 11072  1570  00A5               	movwf	___ftdiv@f1+2
 11073  1571  30CA               	movlw	202
 11074  1572  00A0               	movwf	___ftdiv@f2
 11075  1573  30FE               	movlw	254
 11076  1574  00A1               	movwf	___ftdiv@f2+1
 11077  1575  303F               	movlw	63
 11078  1576  00A2               	movwf	___ftdiv@f2+2
 11079  1577  3180  2008  3195   	fcall	___ftdiv
 11080  157A  0020               	movlb	0	; select bank0
 11081  157B  0820               	movf	?___ftdiv,w
 11082  157C  00B0               	movwf	___fttol@f1
 11083  157D  0821               	movf	?___ftdiv+1,w
 11084  157E  00B1               	movwf	___fttol@f1+1
 11085  157F  0822               	movf	?___ftdiv+2,w
 11086  1580  00B2               	movwf	___fttol@f1+2
 11087  1581  3189  2102         	fcall	___fttol
 11088  1583  0020               	movlb	0	; select bank0
 11089  1584  0831               	movf	?___fttol+1,w
 11090  1585  0021               	movlb	1	; select bank1
 11091  1586  00BB               	movwf	((_current+1)^(0+128)+2)
 11092  1587  0020               	movlb	0	; select bank0
 11093  1588  0830               	movf	?___fttol,w
 11094  1589  0021               	movlb	1	; select bank1
 11095  158A  00BA               	movwf	(_current^(0+128)+2)
 11096  158B  0008               	return
 11097  158C                     __end_of_calculateCurrent1:	
 11098                           
 11099                           	psect	text16
 11100  1502                     __ptext16:	
 11101 ;; *************** function _calculateCurrent0 *****************
 11102 ;; Defined at:
 11103 ;;		line 386 in file "main.c"
 11104 ;; Parameters:    Size  Location     Type
 11105 ;;		None
 11106 ;; Auto vars:     Size  Location     Type
 11107 ;;		None
 11108 ;; Return value:  Size  Location     Type
 11109 ;;                  1    wreg      void 
 11110 ;; Registers used:
 11111 ;;		wreg, status,2, status,0, pclath, cstack
 11112 ;; Tracked objects:
 11113 ;;		On entry : 0/0
 11114 ;;		On exit  : 0/0
 11115 ;;		Unchanged: 0/0
 11116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11117 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11118 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11119 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11120 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11121 ;;Total ram usage:        3 bytes
 11122 ;; Hardware stack levels used:    1
 11123 ;; Hardware stack levels required when called:    2
 11124 ;; This function calls:
 11125 ;;		___awtoft
 11126 ;;		___ftdiv
 11127 ;;		___fttol
 11128 ;; This function is called by:
 11129 ;;		_main
 11130 ;; This function uses a non-reentrant model
 11131 ;;
 11132                           
 11133                           
 11134                           ;psect for function _calculateCurrent0
 11135  1502                     _calculateCurrent0:	
 11136                           
 11137                           ;main.c: 388: if(Ianalogs[0]-578<=0)
 11138                           
 11139                           ;incstack = 0
 11140                           ; Regs used in _calculateCurrent0: [wreg+status,2+status,0+pclath+cstack]
 11141  1502  0021               	movlb	1	; select bank1
 11142  1503  0820               	movf	_Ianalogs^(0+128),w
 11143  1504  3EBE               	addlw	190
 11144  1505  0020               	movlb	0	; select bank0
 11145  1506  00BE               	movwf	??_calculateCurrent0
 11146  1507  30FD               	movlw	253
 11147  1508  0021               	movlb	1	; select bank1
 11148  1509  3D21               	addwfc	(_Ianalogs+1)^(0+128),w
 11149  150A  0020               	movlb	0	; select bank0
 11150  150B  00BF               	movwf	??_calculateCurrent0+1
 11151  150C  083F               	movf	??_calculateCurrent0+1,w
 11152  150D  3A80               	xorlw	128
 11153  150E  00C0               	movwf	??_calculateCurrent0+2
 11154  150F  3080               	movlw	128
 11155  1510  0240               	subwf	??_calculateCurrent0+2,w
 11156  1511  1D03               	skipz
 11157  1512  2D15               	goto	u3695
 11158  1513  3001               	movlw	1
 11159  1514  023E               	subwf	??_calculateCurrent0,w
 11160  1515                     u3695:	
 11161  1515  1803               	skipnc
 11162  1516  2D1B               	goto	l3149
 11163                           
 11164                           ;main.c: 389: {
 11165                           ;main.c: 390: current[0]=0;
 11166  1517  0021               	movlb	1	; select bank1
 11167  1518  01B8               	clrf	_current^(0+128)
 11168  1519  01B9               	clrf	(_current+1)^(0+128)
 11169                           
 11170                           ;main.c: 391: }
 11171  151A  0008               	return
 11172  151B                     l3149:	
 11173                           
 11174                           ;main.c: 392: else
 11175                           ;main.c: 393: {
 11176                           ;main.c: 394: current[0]=(int16_t)((Ianalogs[0]-578)/3.2323);
 11177  151B  0021               	movlb	1	; select bank1
 11178  151C  0820               	movf	_Ianalogs^(0+128),w
 11179  151D  3EBE               	addlw	190
 11180  151E  00F8               	movwf	___awtoft@c
 11181  151F  30FD               	movlw	253
 11182  1520  3D21               	addwfc	(_Ianalogs+1)^(0+128),w
 11183  1521  00F9               	movwf	___awtoft@c+1
 11184  1522  3193  2348  3195   	fcall	___awtoft
 11185  1525  0878               	movf	?___awtoft,w
 11186  1526  0020               	movlb	0	; select bank0
 11187  1527  00A3               	movwf	___ftdiv@f1
 11188  1528  0879               	movf	?___awtoft+1,w
 11189  1529  00A4               	movwf	___ftdiv@f1+1
 11190  152A  087A               	movf	?___awtoft+2,w
 11191  152B  00A5               	movwf	___ftdiv@f1+2
 11192  152C  30DE               	movlw	222
 11193  152D  00A0               	movwf	___ftdiv@f2
 11194  152E  304E               	movlw	78
 11195  152F  00A1               	movwf	___ftdiv@f2+1
 11196  1530  3040               	movlw	64
 11197  1531  00A2               	movwf	___ftdiv@f2+2
 11198  1532  3180  2008  3195   	fcall	___ftdiv
 11199  1535  0020               	movlb	0	; select bank0
 11200  1536  0820               	movf	?___ftdiv,w
 11201  1537  00B0               	movwf	___fttol@f1
 11202  1538  0821               	movf	?___ftdiv+1,w
 11203  1539  00B1               	movwf	___fttol@f1+1
 11204  153A  0822               	movf	?___ftdiv+2,w
 11205  153B  00B2               	movwf	___fttol@f1+2
 11206  153C  3189  2102         	fcall	___fttol
 11207  153E  0020               	movlb	0	; select bank0
 11208  153F  0831               	movf	?___fttol+1,w
 11209  1540  0021               	movlb	1	; select bank1
 11210  1541  00B9               	movwf	(_current+1)^(0+128)
 11211  1542  0020               	movlb	0	; select bank0
 11212  1543  0830               	movf	?___fttol,w
 11213  1544  0021               	movlb	1	; select bank1
 11214  1545  00B8               	movwf	_current^(0+128)
 11215  1546  0008               	return
 11216  1547                     __end_of_calculateCurrent0:	
 11217                           
 11218                           	psect	text17
 11219  0008                     __ptext17:	
 11220 ;; *************** function ___ftdiv *****************
 11221 ;; Defined at:
 11222 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
 11223 ;; Parameters:    Size  Location     Type
 11224 ;;  f2              3    0[BANK0 ] float 
 11225 ;;  f1              3    3[BANK0 ] float 
 11226 ;; Auto vars:     Size  Location     Type
 11227 ;;  f3              3   11[BANK0 ] float 
 11228 ;;  sign            1   15[BANK0 ] unsigned char 
 11229 ;;  exp             1   14[BANK0 ] unsigned char 
 11230 ;;  cntr            1   10[BANK0 ] unsigned char 
 11231 ;; Return value:  Size  Location     Type
 11232 ;;                  3    0[BANK0 ] float 
 11233 ;; Registers used:
 11234 ;;		wreg, status,2, status,0, pclath, cstack
 11235 ;; Tracked objects:
 11236 ;;		On entry : 0/0
 11237 ;;		On exit  : 0/0
 11238 ;;		Unchanged: 0/0
 11239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11240 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11241 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11242 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11243 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11244 ;;Total ram usage:       16 bytes
 11245 ;; Hardware stack levels used:    1
 11246 ;; Hardware stack levels required when called:    1
 11247 ;; This function calls:
 11248 ;;		___ftpack
 11249 ;; This function is called by:
 11250 ;;		_tempCalc
 11251 ;;		_main
 11252 ;;		_calculateCurrent0
 11253 ;;		_calculateCurrent1
 11254 ;;		_calculateCurrent2
 11255 ;;		_calculateCurrent3
 11256 ;; This function uses a non-reentrant model
 11257 ;;
 11258                           
 11259                           
 11260                           ;psect for function ___ftdiv
 11261  0008                     ___ftdiv:	
 11262                           
 11263                           ;incstack = 0
 11264                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 11265  0008  0020               	movlb	0	; select bank0
 11266  0009  0823               	movf	___ftdiv@f1,w
 11267  000A  00A6               	movwf	??___ftdiv
 11268  000B  0824               	movf	___ftdiv@f1+1,w
 11269  000C  00A7               	movwf	??___ftdiv+1
 11270  000D  0825               	movf	___ftdiv@f1+2,w
 11271  000E  00A8               	movwf	??___ftdiv+2
 11272  000F  1003               	clrc
 11273  0010  0D27               	rlf	??___ftdiv+1,w
 11274  0011  0D28               	rlf	??___ftdiv+2,w
 11275  0012  00A9               	movwf	??___ftdiv+3
 11276  0013  0829               	movf	??___ftdiv+3,w
 11277  0014  00AE               	movwf	___ftdiv@exp
 11278  0015  082E               	movf	___ftdiv@exp,w
 11279  0016  1D03               	btfss	3,2
 11280  0017  281F               	goto	l2847
 11281  0018  3000               	movlw	0
 11282  0019  00A0               	movwf	?___ftdiv
 11283  001A  3000               	movlw	0
 11284  001B  00A1               	movwf	?___ftdiv+1
 11285  001C  3000               	movlw	0
 11286  001D  00A2               	movwf	?___ftdiv+2
 11287  001E  0008               	return
 11288  001F                     l2847:	
 11289  001F  0820               	movf	___ftdiv@f2,w
 11290  0020  00A6               	movwf	??___ftdiv
 11291  0021  0821               	movf	___ftdiv@f2+1,w
 11292  0022  00A7               	movwf	??___ftdiv+1
 11293  0023  0822               	movf	___ftdiv@f2+2,w
 11294  0024  00A8               	movwf	??___ftdiv+2
 11295  0025  1003               	clrc
 11296  0026  0D27               	rlf	??___ftdiv+1,w
 11297  0027  0D28               	rlf	??___ftdiv+2,w
 11298  0028  00A9               	movwf	??___ftdiv+3
 11299  0029  0829               	movf	??___ftdiv+3,w
 11300  002A  00AF               	movwf	___ftdiv@sign
 11301  002B  082F               	movf	___ftdiv@sign,w
 11302  002C  1D03               	btfss	3,2
 11303  002D  2835               	goto	l2853
 11304  002E  3000               	movlw	0
 11305  002F  00A0               	movwf	?___ftdiv
 11306  0030  3000               	movlw	0
 11307  0031  00A1               	movwf	?___ftdiv+1
 11308  0032  3000               	movlw	0
 11309  0033  00A2               	movwf	?___ftdiv+2
 11310  0034  0008               	return
 11311  0035                     l2853:	
 11312  0035  3000               	movlw	0
 11313  0036  00AB               	movwf	___ftdiv@f3
 11314  0037  3000               	movlw	0
 11315  0038  00AC               	movwf	___ftdiv@f3+1
 11316  0039  3000               	movlw	0
 11317  003A  00AD               	movwf	___ftdiv@f3+2
 11318  003B  3089               	movlw	137
 11319  003C  072F               	addwf	___ftdiv@sign,w
 11320  003D  00A6               	movwf	??___ftdiv
 11321  003E  0826               	movf	??___ftdiv,w
 11322  003F  02AE               	subwf	___ftdiv@exp,f
 11323  0040  0823               	movf	___ftdiv@f1,w
 11324  0041  00A6               	movwf	??___ftdiv
 11325  0042  0824               	movf	___ftdiv@f1+1,w
 11326  0043  00A7               	movwf	??___ftdiv+1
 11327  0044  0825               	movf	___ftdiv@f1+2,w
 11328  0045  00A8               	movwf	??___ftdiv+2
 11329  0046  3010               	movlw	16
 11330  0047                     u3065:	
 11331  0047  36A8               	lsrf	??___ftdiv+2,f
 11332  0048  0CA7               	rrf	??___ftdiv+1,f
 11333  0049  0CA6               	rrf	??___ftdiv,f
 11334  004A  0B89               	decfsz	9,f
 11335  004B  2847               	goto	u3065
 11336  004C  0826               	movf	??___ftdiv,w
 11337  004D  00A9               	movwf	??___ftdiv+3
 11338  004E  0829               	movf	??___ftdiv+3,w
 11339  004F  00AF               	movwf	___ftdiv@sign
 11340  0050  0820               	movf	___ftdiv@f2,w
 11341  0051  00A6               	movwf	??___ftdiv
 11342  0052  0821               	movf	___ftdiv@f2+1,w
 11343  0053  00A7               	movwf	??___ftdiv+1
 11344  0054  0822               	movf	___ftdiv@f2+2,w
 11345  0055  00A8               	movwf	??___ftdiv+2
 11346  0056  3010               	movlw	16
 11347  0057                     u3075:	
 11348  0057  36A8               	lsrf	??___ftdiv+2,f
 11349  0058  0CA7               	rrf	??___ftdiv+1,f
 11350  0059  0CA6               	rrf	??___ftdiv,f
 11351  005A  0B89               	decfsz	9,f
 11352  005B  2857               	goto	u3075
 11353  005C  0826               	movf	??___ftdiv,w
 11354  005D  00A9               	movwf	??___ftdiv+3
 11355  005E  0829               	movf	??___ftdiv+3,w
 11356  005F  06AF               	xorwf	___ftdiv@sign,f
 11357  0060  3080               	movlw	128
 11358  0061  00A6               	movwf	??___ftdiv
 11359  0062  0826               	movf	??___ftdiv,w
 11360  0063  05AF               	andwf	___ftdiv@sign,f
 11361  0064  17A4               	bsf	___ftdiv@f1+1,7
 11362  0065  30FF               	movlw	255
 11363  0066  05A3               	andwf	___ftdiv@f1,f
 11364  0067  30FF               	movlw	255
 11365  0068  05A4               	andwf	___ftdiv@f1+1,f
 11366  0069  3000               	movlw	0
 11367  006A  05A5               	andwf	___ftdiv@f1+2,f
 11368  006B  17A1               	bsf	___ftdiv@f2+1,7
 11369  006C  30FF               	movlw	255
 11370  006D  05A0               	andwf	___ftdiv@f2,f
 11371  006E  30FF               	movlw	255
 11372  006F  05A1               	andwf	___ftdiv@f2+1,f
 11373  0070  3000               	movlw	0
 11374  0071  05A2               	andwf	___ftdiv@f2+2,f
 11375  0072  3018               	movlw	24
 11376  0073  00A6               	movwf	??___ftdiv
 11377  0074  0826               	movf	??___ftdiv,w
 11378  0075  00AA               	movwf	___ftdiv@cntr
 11379  0076                     l2867:	
 11380  0076  3001               	movlw	1
 11381  0077                     u3085:	
 11382  0077  35AB               	lslf	___ftdiv@f3,f
 11383  0078  0DAC               	rlf	___ftdiv@f3+1,f
 11384  0079  0DAD               	rlf	___ftdiv@f3+2,f
 11385  007A  0B89               	decfsz	9,f
 11386  007B  2877               	goto	u3085
 11387  007C  0822               	movf	___ftdiv@f2+2,w
 11388  007D  0225               	subwf	___ftdiv@f1+2,w
 11389  007E  1D03               	skipz
 11390  007F  2886               	goto	u3095
 11391  0080  0821               	movf	___ftdiv@f2+1,w
 11392  0081  0224               	subwf	___ftdiv@f1+1,w
 11393  0082  1D03               	skipz
 11394  0083  2886               	goto	u3095
 11395  0084  0820               	movf	___ftdiv@f2,w
 11396  0085  0223               	subwf	___ftdiv@f1,w
 11397  0086                     u3095:	
 11398  0086  1C03               	skipc
 11399  0087  288F               	goto	l2875
 11400  0088  0820               	movf	___ftdiv@f2,w
 11401  0089  02A3               	subwf	___ftdiv@f1,f
 11402  008A  0821               	movf	___ftdiv@f2+1,w
 11403  008B  3BA4               	subwfb	___ftdiv@f1+1,f
 11404  008C  0822               	movf	___ftdiv@f2+2,w
 11405  008D  3BA5               	subwfb	___ftdiv@f1+2,f
 11406  008E  142B               	bsf	___ftdiv@f3,0
 11407  008F                     l2875:	
 11408  008F  3001               	movlw	1
 11409  0090                     u3105:	
 11410  0090  35A3               	lslf	___ftdiv@f1,f
 11411  0091  0DA4               	rlf	___ftdiv@f1+1,f
 11412  0092  0DA5               	rlf	___ftdiv@f1+2,f
 11413  0093  0B89               	decfsz	9,f
 11414  0094  2890               	goto	u3105
 11415  0095  3001               	movlw	1
 11416  0096  02AA               	subwf	___ftdiv@cntr,f
 11417  0097  1D03               	btfss	3,2
 11418  0098  2876               	goto	l2867
 11419  0099  082B               	movf	___ftdiv@f3,w
 11420  009A  00F0               	movwf	___ftpack@arg
 11421  009B  082C               	movf	___ftdiv@f3+1,w
 11422  009C  00F1               	movwf	___ftpack@arg+1
 11423  009D  082D               	movf	___ftdiv@f3+2,w
 11424  009E  00F2               	movwf	___ftpack@arg+2
 11425  009F  082E               	movf	___ftdiv@exp,w
 11426  00A0  00A6               	movwf	??___ftdiv
 11427  00A1  0826               	movf	??___ftdiv,w
 11428  00A2  00F3               	movwf	___ftpack@exp
 11429  00A3  082F               	movf	___ftdiv@sign,w
 11430  00A4  00A7               	movwf	??___ftdiv+1
 11431  00A5  0827               	movf	??___ftdiv+1,w
 11432  00A6  00F4               	movwf	___ftpack@sign
 11433  00A7  3188  201C         	fcall	___ftpack
 11434  00A9  0870               	movf	?___ftpack,w
 11435  00AA  0020               	movlb	0	; select bank0
 11436  00AB  00A0               	movwf	?___ftdiv
 11437  00AC  0871               	movf	?___ftpack+1,w
 11438  00AD  00A1               	movwf	?___ftdiv+1
 11439  00AE  0872               	movf	?___ftpack+2,w
 11440  00AF  00A2               	movwf	?___ftdiv+2
 11441  00B0  0008               	return
 11442  00B1                     __end_of___ftdiv:	
 11443                           
 11444                           	psect	text18
 11445  1451                     __ptext18:	
 11446 ;; *************** function _SYSTEM_Initialize *****************
 11447 ;; Defined at:
 11448 ;;		line 71 in file "system.c"
 11449 ;; Parameters:    Size  Location     Type
 11450 ;;		None
 11451 ;; Auto vars:     Size  Location     Type
 11452 ;;		None
 11453 ;; Return value:  Size  Location     Type
 11454 ;;                  1    wreg      void 
 11455 ;; Registers used:
 11456 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11457 ;; Tracked objects:
 11458 ;;		On entry : 0/0
 11459 ;;		On exit  : 0/0
 11460 ;;		Unchanged: 0/0
 11461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11462 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11463 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11464 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11465 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11466 ;;Total ram usage:        2 bytes
 11467 ;; Hardware stack levels used:    1
 11468 ;; Hardware stack levels required when called:    3
 11469 ;; This function calls:
 11470 ;;		_ADC_Initialize
 11471 ;;		_Init_Battery_State_Machine
 11472 ;;		_LCDClear
 11473 ;;		_LCDInit
 11474 ;;		_OSCILLATOR_Initialize
 11475 ;;		_PIN_MANAGER_Initialize
 11476 ;;		_PWM_Initialize
 11477 ;;		_TMR2_Initialize
 11478 ;;		_TMR4_Initialize
 11479 ;; This function is called by:
 11480 ;;		_main
 11481 ;; This function uses a non-reentrant model
 11482 ;;
 11483                           
 11484                           
 11485                           ;psect for function _SYSTEM_Initialize
 11486  1451                     _SYSTEM_Initialize:	
 11487                           
 11488                           ;system.c: 73: PIN_MANAGER_Initialize();
 11489                           
 11490                           ;incstack = 0
 11491                           ; Regs used in _SYSTEM_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11492  1451  3193  23DF  3194   	fcall	_PIN_MANAGER_Initialize
 11493                           
 11494                           ;system.c: 74: OSCILLATOR_Initialize();
 11495  1454  3192  223D  3194   	fcall	_OSCILLATOR_Initialize
 11496                           
 11497                           ;system.c: 76: ADC_Initialize();
 11498  1457  3193  230A  3194   	fcall	_ADC_Initialize
 11499                           
 11500                           ;system.c: 77: PWM_Initialize();
 11501  145A  3193  2329  3194   	fcall	_PWM_Initialize
 11502                           
 11503                           ;system.c: 79: TMR2_Initialize();
 11504  145D  3192  2252  3194   	fcall	_TMR2_Initialize
 11505                           
 11506                           ;system.c: 80: TMR4_Initialize();
 11507  1460  3192  2260  3194   	fcall	_TMR4_Initialize
 11508                           
 11509                           ;system.c: 81: Init_Battery_State_Machine(0);
 11510  1463  3000               	movlw	0
 11511  1464  3197  271B  3194   	fcall	_Init_Battery_State_Machine
 11512                           
 11513                           ;system.c: 82: Init_Battery_State_Machine(1);
 11514  1467  3001               	movlw	1
 11515  1468  3197  271B  3194   	fcall	_Init_Battery_State_Machine
 11516                           
 11517                           ;system.c: 83: LCDInit();
 11518  146B  3194  2416  3194   	fcall	_LCDInit
 11519                           
 11520                           ;system.c: 84: _delay((unsigned long)((200)*(32000000/4000.0)));
 11521  146E  3009               	movlw	9
 11522  146F  0020               	movlb	0	; select bank0
 11523  1470  00C4               	movwf	??_SYSTEM_Initialize+1
 11524  1471  301E               	movlw	30
 11525  1472  00C3               	movwf	??_SYSTEM_Initialize
 11526  1473  30E4               	movlw	228
 11527  1474                     u4127:	
 11528  1474  0B89               	decfsz	9,f
 11529  1475  2C74               	goto	u4127
 11530  1476  0BC3               	decfsz	??_SYSTEM_Initialize,f
 11531  1477  2C74               	goto	u4127
 11532  1478  0BC4               	decfsz	??_SYSTEM_Initialize+1,f
 11533  1479  2C74               	goto	u4127
 11534  147A  0000               	nop
 11535                           
 11536                           ;system.c: 85: LCDClear();
 11537  147B  3193  238D  3194   	fcall	_LCDClear
 11538                           
 11539                           ;system.c: 86: _delay((unsigned long)((200)*(32000000/4000.0)));
 11540  147E  3009               	movlw	9
 11541  147F  0020               	movlb	0	; select bank0
 11542  1480  00C4               	movwf	??_SYSTEM_Initialize+1
 11543  1481  301E               	movlw	30
 11544  1482  00C3               	movwf	??_SYSTEM_Initialize
 11545  1483  30E4               	movlw	228
 11546  1484                     u4137:	
 11547  1484  0B89               	decfsz	9,f
 11548  1485  2C84               	goto	u4137
 11549  1486  0BC3               	decfsz	??_SYSTEM_Initialize,f
 11550  1487  2C84               	goto	u4137
 11551  1488  0BC4               	decfsz	??_SYSTEM_Initialize+1,f
 11552  1489  2C84               	goto	u4137
 11553  148A  0000               	nop
 11554  148B  0008               	return
 11555  148C                     __end_of_SYSTEM_Initialize:	
 11556                           
 11557                           	psect	text19
 11558  1260                     __ptext19:	
 11559 ;; *************** function _TMR4_Initialize *****************
 11560 ;; Defined at:
 11561 ;;		line 25 in file "tmr.c"
 11562 ;; Parameters:    Size  Location     Type
 11563 ;;		None
 11564 ;; Auto vars:     Size  Location     Type
 11565 ;;		None
 11566 ;; Return value:  Size  Location     Type
 11567 ;;                  1    wreg      void 
 11568 ;; Registers used:
 11569 ;;		wreg, status,2
 11570 ;; Tracked objects:
 11571 ;;		On entry : 0/0
 11572 ;;		On exit  : 0/0
 11573 ;;		Unchanged: 0/0
 11574 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11575 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11576 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11577 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11578 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11579 ;;Total ram usage:        0 bytes
 11580 ;; Hardware stack levels used:    1
 11581 ;; This function calls:
 11582 ;;		Nothing
 11583 ;; This function is called by:
 11584 ;;		_SYSTEM_Initialize
 11585 ;; This function uses a non-reentrant model
 11586 ;;
 11587                           
 11588                           
 11589                           ;psect for function _TMR4_Initialize
 11590  1260                     _TMR4_Initialize:	
 11591                           
 11592                           ;tmr.c: 27: T4CON = 0x00;
 11593                           
 11594                           ;incstack = 0
 11595                           ; Regs used in _TMR4_Initialize: [wreg+status,2]
 11596  1260  0025               	movlb	5	; select bank5
 11597  1261  0194               	clrf	20	;volatile
 11598                           
 11599                           ;tmr.c: 29: T4CLKCON = 0x01;
 11600  1262  3001               	movlw	1
 11601  1263  0096               	movwf	22	;volatile
 11602                           
 11603                           ;tmr.c: 31: T4HLT = 0x00;
 11604  1264  0195               	clrf	21	;volatile
 11605                           
 11606                           ;tmr.c: 33: T4RST = 0x00;
 11607  1265  0197               	clrf	23	;volatile
 11608                           
 11609                           ;tmr.c: 35: T4PR = 0xFE;
 11610  1266  30FE               	movlw	254
 11611  1267  0093               	movwf	19	;volatile
 11612                           
 11613                           ;tmr.c: 39: T4TMR = 0x00;
 11614  1268  0192               	clrf	18	;volatile
 11615                           
 11616                           ;tmr.c: 41: PIR4bits.TMR4IF = 0;
 11617  1269  002E               	movlb	14	; select bank14
 11618  126A  1190               	bcf	16,3	;volatile
 11619                           
 11620                           ;tmr.c: 43: T4CONbits.TMR4ON = 1;
 11621  126B  0025               	movlb	5	; select bank5
 11622  126C  1794               	bsf	20,7	;volatile
 11623  126D  0008               	return
 11624  126E                     __end_of_TMR4_Initialize:	
 11625                           
 11626                           	psect	text20
 11627  1252                     __ptext20:	
 11628 ;; *************** function _TMR2_Initialize *****************
 11629 ;; Defined at:
 11630 ;;		line 3 in file "tmr.c"
 11631 ;; Parameters:    Size  Location     Type
 11632 ;;		None
 11633 ;; Auto vars:     Size  Location     Type
 11634 ;;		None
 11635 ;; Return value:  Size  Location     Type
 11636 ;;                  1    wreg      void 
 11637 ;; Registers used:
 11638 ;;		wreg, status,2
 11639 ;; Tracked objects:
 11640 ;;		On entry : 0/0
 11641 ;;		On exit  : 0/0
 11642 ;;		Unchanged: 0/0
 11643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11644 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11645 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11646 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11647 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11648 ;;Total ram usage:        0 bytes
 11649 ;; Hardware stack levels used:    1
 11650 ;; This function calls:
 11651 ;;		Nothing
 11652 ;; This function is called by:
 11653 ;;		_SYSTEM_Initialize
 11654 ;; This function uses a non-reentrant model
 11655 ;;
 11656                           
 11657                           
 11658                           ;psect for function _TMR2_Initialize
 11659  1252                     _TMR2_Initialize:	
 11660                           
 11661                           ;tmr.c: 5: T2CON = 0x00;
 11662                           
 11663                           ;incstack = 0
 11664                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
 11665  1252  0025               	movlb	5	; select bank5
 11666  1253  018E               	clrf	14	;volatile
 11667                           
 11668                           ;tmr.c: 7: T2CLKCON = 0x01;
 11669  1254  3001               	movlw	1
 11670  1255  0090               	movwf	16	;volatile
 11671                           
 11672                           ;tmr.c: 9: T2HLT = 0x00;
 11673  1256  018F               	clrf	15	;volatile
 11674                           
 11675                           ;tmr.c: 11: T2RST = 0x00;
 11676  1257  0191               	clrf	17	;volatile
 11677                           
 11678                           ;tmr.c: 13: T2PR = 0xFE;
 11679  1258  30FE               	movlw	254
 11680  1259  008D               	movwf	13	;volatile
 11681                           
 11682                           ;tmr.c: 18: T2TMR = 0x00;
 11683  125A  018C               	clrf	12	;volatile
 11684                           
 11685                           ;tmr.c: 20: PIR4bits.TMR2IF = 0;
 11686  125B  002E               	movlb	14	; select bank14
 11687  125C  1090               	bcf	16,1	;volatile
 11688                           
 11689                           ;tmr.c: 22: T2CONbits.TMR2ON = 1;
 11690  125D  0025               	movlb	5	; select bank5
 11691  125E  178E               	bsf	14,7	;volatile
 11692  125F  0008               	return
 11693  1260                     __end_of_TMR2_Initialize:	
 11694                           
 11695                           	psect	text21
 11696  1329                     __ptext21:	
 11697 ;; *************** function _PWM_Initialize *****************
 11698 ;; Defined at:
 11699 ;;		line 3 in file "pwm.c"
 11700 ;; Parameters:    Size  Location     Type
 11701 ;;		None
 11702 ;; Auto vars:     Size  Location     Type
 11703 ;;		None
 11704 ;; Return value:  Size  Location     Type
 11705 ;;                  1    wreg      void 
 11706 ;; Registers used:
 11707 ;;		wreg, status,2, status,0
 11708 ;; Tracked objects:
 11709 ;;		On entry : 0/0
 11710 ;;		On exit  : 0/0
 11711 ;;		Unchanged: 0/0
 11712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11713 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11714 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11715 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11716 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11717 ;;Total ram usage:        0 bytes
 11718 ;; Hardware stack levels used:    1
 11719 ;; This function calls:
 11720 ;;		Nothing
 11721 ;; This function is called by:
 11722 ;;		_SYSTEM_Initialize
 11723 ;; This function uses a non-reentrant model
 11724 ;;
 11725                           
 11726                           
 11727                           ;psect for function _PWM_Initialize
 11728  1329                     _PWM_Initialize:	
 11729                           
 11730                           ;pwm.c: 5: PWM6CON = 0x80;
 11731                           
 11732                           ;incstack = 0
 11733                           ; Regs used in _PWM_Initialize: [wreg+status,2+status,0]
 11734  1329  3080               	movlw	128
 11735  132A  0027               	movlb	7	; select bank7
 11736  132B  008E               	movwf	14	;volatile
 11737                           
 11738                           ;pwm.c: 7: PWM6DCH = 0x00;
 11739  132C  018D               	clrf	13	;volatile
 11740                           
 11741                           ;pwm.c: 9: PWM6DCL = 0x00;
 11742  132D  018C               	clrf	12	;volatile
 11743                           
 11744                           ;pwm.c: 11: CCPTMRS1bits.P6TSEL = 0x01;
 11745  132E  0024               	movlb	4	; select bank4
 11746  132F  081F               	movf	31,w	;volatile
 11747  1330  39F3               	andlw	-13
 11748  1331  3804               	iorlw	4
 11749  1332  009F               	movwf	31	;volatile
 11750                           
 11751                           ;pwm.c: 14: PWM7CON = 0x80;
 11752  1333  3080               	movlw	128
 11753  1334  0027               	movlb	7	; select bank7
 11754  1335  0092               	movwf	18	;volatile
 11755                           
 11756                           ;pwm.c: 16: PWM7DCH = 0x00;
 11757  1336  0191               	clrf	17	;volatile
 11758                           
 11759                           ;pwm.c: 18: PWM7DCL = 0x00;
 11760  1337  0190               	clrf	16	;volatile
 11761                           
 11762                           ;pwm.c: 20: CCPTMRS1bits.P7TSEL = 0x02;
 11763  1338  0024               	movlb	4	; select bank4
 11764  1339  081F               	movf	31,w	;volatile
 11765  133A  39CF               	andlw	-49
 11766  133B  3820               	iorlw	32
 11767  133C  009F               	movwf	31	;volatile
 11768                           
 11769                           ;pwm.c: 23: CCP1CONbits.CCP1EN = 1;
 11770  133D  0026               	movlb	6	; select bank6
 11771  133E  178E               	bsf	14,7	;volatile
 11772                           
 11773                           ;pwm.c: 24: CCP1CONbits.CCP1FMT = 1;
 11774  133F  160E               	bsf	14,4	;volatile
 11775                           
 11776                           ;pwm.c: 25: CCP1CONbits.CCP1MODE = 0xF;
 11777  1340  300F               	movlw	15
 11778  1341  048E               	iorwf	14,f	;volatile
 11779                           
 11780                           ;pwm.c: 26: CCPTMRS0bits.C1TSEL = 0x1;
 11781  1342  0024               	movlb	4	; select bank4
 11782  1343  081E               	movf	30,w	;volatile
 11783  1344  39FC               	andlw	-4
 11784  1345  3801               	iorlw	1
 11785  1346  009E               	movwf	30	;volatile
 11786  1347  0008               	return
 11787  1348                     __end_of_PWM_Initialize:	
 11788                           
 11789                           	psect	text22
 11790  13DF                     __ptext22:	
 11791 ;; *************** function _PIN_MANAGER_Initialize *****************
 11792 ;; Defined at:
 11793 ;;		line 5 in file "pin_manager.c"
 11794 ;; Parameters:    Size  Location     Type
 11795 ;;		None
 11796 ;; Auto vars:     Size  Location     Type
 11797 ;;  state           1    0[COMMON] char 
 11798 ;; Return value:  Size  Location     Type
 11799 ;;                  1    wreg      void 
 11800 ;; Registers used:
 11801 ;;		wreg, status,2
 11802 ;; Tracked objects:
 11803 ;;		On entry : 0/0
 11804 ;;		On exit  : 0/0
 11805 ;;		Unchanged: 0/0
 11806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11807 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11808 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11809 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11810 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11811 ;;Total ram usage:        1 bytes
 11812 ;; Hardware stack levels used:    1
 11813 ;; This function calls:
 11814 ;;		Nothing
 11815 ;; This function is called by:
 11816 ;;		_SYSTEM_Initialize
 11817 ;; This function uses a non-reentrant model
 11818 ;;
 11819                           
 11820                           
 11821                           ;psect for function _PIN_MANAGER_Initialize
 11822  13DF                     _PIN_MANAGER_Initialize:	
 11823                           
 11824                           ;pin_manager.c: 7: LATA = 0x20;
 11825                           
 11826                           ;incstack = 0
 11827                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
 11828  13DF  3020               	movlw	32
 11829  13E0  0020               	movlb	0	; select bank0
 11830  13E1  0096               	movwf	22	;volatile
 11831                           
 11832                           ;pin_manager.c: 8: LATB = 0x00;
 11833  13E2  0197               	clrf	23	;volatile
 11834                           
 11835                           ;pin_manager.c: 9: LATC = 0x00;
 11836  13E3  0198               	clrf	24	;volatile
 11837                           
 11838                           ;pin_manager.c: 11: WPUA = 0x00;
 11839  13E4  003E               	movlb	30	; select bank30
 11840  13E5  01B9               	clrf	57	;volatile
 11841                           
 11842                           ;pin_manager.c: 12: WPUB = 0x00;
 11843  13E6  01C4               	clrf	68	;volatile
 11844                           
 11845                           ;pin_manager.c: 13: WPUC = 0x00;
 11846  13E7  01CF               	clrf	79	;volatile
 11847                           
 11848                           ;pin_manager.c: 14: WPUE = 0x8;
 11849  13E8  3008               	movlw	8
 11850  13E9  00E5               	movwf	101	;volatile
 11851                           
 11852                           ;pin_manager.c: 16: TRISA = 0x00;
 11853  13EA  0020               	movlb	0	; select bank0
 11854  13EB  0191               	clrf	17	;volatile
 11855                           
 11856                           ;pin_manager.c: 17: TRISB = 0x0E;
 11857  13EC  300E               	movlw	14
 11858  13ED  0092               	movwf	18	;volatile
 11859                           
 11860                           ;pin_manager.c: 18: TRISC = 0xFF;
 11861  13EE  30FF               	movlw	255
 11862  13EF  0093               	movwf	19	;volatile
 11863                           
 11864                           ;pin_manager.c: 20: ANSELA = 0x00;
 11865  13F0  003E               	movlb	30	; select bank30
 11866  13F1  01B8               	clrf	56	;volatile
 11867                           
 11868                           ;pin_manager.c: 21: ANSELB = 0x0A;
 11869  13F2  300A               	movlw	10
 11870  13F3  00C3               	movwf	67	;volatile
 11871                           
 11872                           ;pin_manager.c: 22: ANSELC = 0xFF;
 11873  13F4  30FF               	movlw	255
 11874  13F5  00CE               	movwf	78	;volatile
 11875                           
 11876                           ;pin_manager.c: 25: PIE0bits.IOCIE = 0;
 11877  13F6  002E               	movlb	14	; select bank14
 11878  13F7  1216               	bcf	22,4	;volatile
 11879                           
 11880                           ;pin_manager.c: 26: int8_t state = GIE;
 11881  13F8  3000               	movlw	0
 11882  13F9  1B8B               	btfsc	11,7	;volatile
 11883  13FA  3001               	movlw	1
 11884  13FB  00F0               	movwf	PIN_MANAGER_Initialize@state
 11885                           
 11886                           ;pin_manager.c: 27: GIE = 0;
 11887  13FC  138B               	bcf	11,7	;volatile
 11888                           
 11889                           ;pin_manager.c: 28: PPSLOCK = 0x55;
 11890  13FD  3055               	movlw	85
 11891  13FE  003D               	movlb	29	; select bank29
 11892  13FF  008F               	movwf	15	;volsfr
 11893                           
 11894                           ;pin_manager.c: 29: PPSLOCK = 0xAA;
 11895  1400  30AA               	movlw	170
 11896  1401  008F               	movwf	15	;volsfr
 11897                           
 11898                           ;pin_manager.c: 30: PPSLOCKbits.PPSLOCKED = 0x00;
 11899  1402  100F               	bcf	15,0	;volsfr
 11900                           
 11901                           ;pin_manager.c: 32: RA6PPS = 0x0E;
 11902  1403  300E               	movlw	14
 11903  1404  003E               	movlb	30	; select bank30
 11904  1405  0096               	movwf	22	;volatile
 11905                           
 11906                           ;pin_manager.c: 33: RA7PPS = 0x0F;
 11907  1406  300F               	movlw	15
 11908  1407  0097               	movwf	23	;volatile
 11909                           
 11910                           ;pin_manager.c: 34: RB5PPS = 0x09;
 11911  1408  3009               	movlw	9
 11912  1409  009D               	movwf	29	;volatile
 11913                           
 11914                           ;pin_manager.c: 35: PPSLOCK = 0x55;
 11915  140A  3055               	movlw	85
 11916  140B  003D               	movlb	29	; select bank29
 11917  140C  008F               	movwf	15	;volsfr
 11918                           
 11919                           ;pin_manager.c: 36: PPSLOCK = 0xAA;
 11920  140D  30AA               	movlw	170
 11921  140E  008F               	movwf	15	;volsfr
 11922                           
 11923                           ;pin_manager.c: 37: PPSLOCKbits.PPSLOCKED = 0x01;
 11924  140F  140F               	bsf	15,0	;volsfr
 11925                           
 11926                           ;pin_manager.c: 38: GIE = state;
 11927  1410  1C70               	btfss	PIN_MANAGER_Initialize@state,0
 11928  1411  2C14               	goto	u2800
 11929  1412  178B               	bsf	11,7	;volatile
 11930  1413  0008               	return
 11931  1414                     u2800:	
 11932  1414  138B               	bcf	11,7	;volatile
 11933  1415  0008               	return
 11934  1416                     __end_of_PIN_MANAGER_Initialize:	
 11935                           
 11936                           	psect	text23
 11937  123D                     __ptext23:	
 11938 ;; *************** function _OSCILLATOR_Initialize *****************
 11939 ;; Defined at:
 11940 ;;		line 89 in file "system.c"
 11941 ;; Parameters:    Size  Location     Type
 11942 ;;		None
 11943 ;; Auto vars:     Size  Location     Type
 11944 ;;		None
 11945 ;; Return value:  Size  Location     Type
 11946 ;;                  1    wreg      void 
 11947 ;; Registers used:
 11948 ;;		wreg, status,2
 11949 ;; Tracked objects:
 11950 ;;		On entry : 0/0
 11951 ;;		On exit  : 0/0
 11952 ;;		Unchanged: 0/0
 11953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11955 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11957 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11958 ;;Total ram usage:        0 bytes
 11959 ;; Hardware stack levels used:    1
 11960 ;; This function calls:
 11961 ;;		Nothing
 11962 ;; This function is called by:
 11963 ;;		_SYSTEM_Initialize
 11964 ;; This function uses a non-reentrant model
 11965 ;;
 11966                           
 11967                           
 11968                           ;psect for function _OSCILLATOR_Initialize
 11969  123D                     _OSCILLATOR_Initialize:	
 11970                           
 11971                           ;system.c: 91: OSCCON1 = 0x60;
 11972                           
 11973                           ;incstack = 0
 11974                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 11975  123D  3060               	movlw	96
 11976  123E  0031               	movlb	17	; select bank17
 11977  123F  008D               	movwf	13	;volatile
 11978                           
 11979                           ;system.c: 92: OSCCON3 = 0x00;
 11980  1240  018F               	clrf	15	;volatile
 11981                           
 11982                           ;system.c: 93: OSCEN = 0x00;
 11983  1241  0191               	clrf	17	;volatile
 11984                           
 11985                           ;system.c: 94: OSCFRQ = 0x06;
 11986  1242  3006               	movlw	6
 11987  1243  0093               	movwf	19	;volatile
 11988                           
 11989                           ;system.c: 95: OSCTUNE = 0x00;
 11990  1244  0192               	clrf	18	;volatile
 11991  1245  0008               	return
 11992  1246                     __end_of_OSCILLATOR_Initialize:	
 11993                           
 11994                           	psect	text24
 11995  1416                     __ptext24:	
 11996 ;; *************** function _LCDInit *****************
 11997 ;; Defined at:
 11998 ;;		line 247 in file "lcd.c"
 11999 ;; Parameters:    Size  Location     Type
 12000 ;;		None
 12001 ;; Auto vars:     Size  Location     Type
 12002 ;;		None
 12003 ;; Return value:  Size  Location     Type
 12004 ;;                  1    wreg      void 
 12005 ;; Registers used:
 12006 ;;		wreg, status,2, status,0, pclath, cstack
 12007 ;; Tracked objects:
 12008 ;;		On entry : 0/0
 12009 ;;		On exit  : 0/0
 12010 ;;		Unchanged: 0/0
 12011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12013 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12014 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12015 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12016 ;;Total ram usage:        1 bytes
 12017 ;; Hardware stack levels used:    1
 12018 ;; Hardware stack levels required when called:    1
 12019 ;; This function calls:
 12020 ;;		_LCDWrite
 12021 ;; This function is called by:
 12022 ;;		_SYSTEM_Initialize
 12023 ;;		_main
 12024 ;; This function uses a non-reentrant model
 12025 ;;
 12026                           
 12027                           
 12028                           ;psect for function _LCDInit
 12029  1416                     _LCDInit:	
 12030                           
 12031                           ;lcd.c: 249: TRISAbits.TRISA0 = 0;
 12032                           
 12033                           ;incstack = 0
 12034                           ; Regs used in _LCDInit: [wreg+status,2+status,0+pclath+cstack]
 12035  1416  0020               	movlb	0	; select bank0
 12036  1417  1011               	bcf	17,0	;volatile
 12037                           
 12038                           ;lcd.c: 250: TRISAbits.TRISA1 = 0;
 12039  1418  1091               	bcf	17,1	;volatile
 12040                           
 12041                           ;lcd.c: 251: TRISAbits.TRISA2 = 0;
 12042  1419  1111               	bcf	17,2	;volatile
 12043                           
 12044                           ;lcd.c: 252: TRISAbits.TRISA3 = 0;
 12045  141A  1191               	bcf	17,3	;volatile
 12046                           
 12047                           ;lcd.c: 253: TRISAbits.TRISA4 = 0;
 12048  141B  1211               	bcf	17,4	;volatile
 12049                           
 12050                           ;lcd.c: 254: LATAbits.LATA3 = 0;
 12051  141C  1196               	bcf	22,3	;volatile
 12052                           
 12053                           ;lcd.c: 255: LATAbits.LATA4 = 0;
 12054  141D  1216               	bcf	22,4	;volatile
 12055                           
 12056                           ;lcd.c: 256: LATAbits.LATA2 = 0;
 12057  141E  1116               	bcf	22,2	;volatile
 12058                           
 12059                           ;lcd.c: 257: LATAbits.LATA0 = 0;
 12060  141F  1016               	bcf	22,0	;volatile
 12061                           
 12062                           ;lcd.c: 259: LATAbits.LATA0 = 1;
 12063  1420  1416               	bsf	22,0	;volatile
 12064                           
 12065                           ;lcd.c: 261: LCDWrite(0, 0x21);
 12066  1421  3021               	movlw	33
 12067  1422  00F5               	movwf	??_LCDInit
 12068  1423  0875               	movf	??_LCDInit,w
 12069  1424  00F0               	movwf	LCDWrite@data
 12070  1425  3000               	movlw	0
 12071  1426  3193  2368  3194   	fcall	_LCDWrite
 12072                           
 12073                           ;lcd.c: 269: LCDWrite(0, 0XB9);
 12074  1429  30B9               	movlw	185
 12075  142A  00F5               	movwf	??_LCDInit
 12076  142B  0875               	movf	??_LCDInit,w
 12077  142C  00F0               	movwf	LCDWrite@data
 12078  142D  3000               	movlw	0
 12079  142E  3193  2368  3194   	fcall	_LCDWrite
 12080                           
 12081                           ;lcd.c: 271: LCDWrite(0, 0x04);
 12082  1431  3004               	movlw	4
 12083  1432  00F5               	movwf	??_LCDInit
 12084  1433  0875               	movf	??_LCDInit,w
 12085  1434  00F0               	movwf	LCDWrite@data
 12086  1435  3000               	movlw	0
 12087  1436  3193  2368  3194   	fcall	_LCDWrite
 12088                           
 12089                           ;lcd.c: 273: LCDWrite(0, 0x14);
 12090  1439  3014               	movlw	20
 12091  143A  00F5               	movwf	??_LCDInit
 12092  143B  0875               	movf	??_LCDInit,w
 12093  143C  00F0               	movwf	LCDWrite@data
 12094  143D  3000               	movlw	0
 12095  143E  3193  2368  3194   	fcall	_LCDWrite
 12096                           
 12097                           ;lcd.c: 275: LCDWrite(0, 0x20);
 12098  1441  3020               	movlw	32
 12099  1442  00F5               	movwf	??_LCDInit
 12100  1443  0875               	movf	??_LCDInit,w
 12101  1444  00F0               	movwf	LCDWrite@data
 12102  1445  3000               	movlw	0
 12103  1446  3193  2368  3194   	fcall	_LCDWrite
 12104                           
 12105                           ;lcd.c: 277: LCDWrite(0, 0x0C);
 12106  1449  300C               	movlw	12
 12107  144A  00F5               	movwf	??_LCDInit
 12108  144B  0875               	movf	??_LCDInit,w
 12109  144C  00F0               	movwf	LCDWrite@data
 12110  144D  3000               	movlw	0
 12111  144E  3193  2368         	fcall	_LCDWrite
 12112  1450  0008               	return
 12113  1451                     __end_of_LCDInit:	
 12114                           
 12115                           	psect	text25
 12116  138D                     __ptext25:	
 12117 ;; *************** function _LCDClear *****************
 12118 ;; Defined at:
 12119 ;;		line 182 in file "lcd.c"
 12120 ;; Parameters:    Size  Location     Type
 12121 ;;		None
 12122 ;; Auto vars:     Size  Location     Type
 12123 ;;  index           2    9[COMMON] int 
 12124 ;; Return value:  Size  Location     Type
 12125 ;;                  1    wreg      void 
 12126 ;; Registers used:
 12127 ;;		wreg, status,2, status,0, pclath, cstack
 12128 ;; Tracked objects:
 12129 ;;		On entry : 0/0
 12130 ;;		On exit  : 0/0
 12131 ;;		Unchanged: 0/0
 12132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12134 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12135 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12136 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12137 ;;Total ram usage:        3 bytes
 12138 ;; Hardware stack levels used:    1
 12139 ;; Hardware stack levels required when called:    2
 12140 ;; This function calls:
 12141 ;;		_LCDWrite
 12142 ;;		_gotoXY
 12143 ;; This function is called by:
 12144 ;;		_SYSTEM_Initialize
 12145 ;;		_main
 12146 ;; This function uses a non-reentrant model
 12147 ;;
 12148                           
 12149                           
 12150                           ;psect for function _LCDClear
 12151  138D                     _LCDClear:	
 12152                           
 12153                           ;lcd.c: 184: int index;
 12154                           ;lcd.c: 185: for (index = 0 ; index < (84 * 48 / 8) ; index++)
 12155                           
 12156                           ;incstack = 0
 12157                           ; Regs used in _LCDClear: [wreg+status,2+status,0+pclath+cstack]
 12158  138D  01F9               	clrf	LCDClear@index
 12159  138E  01FA               	clrf	LCDClear@index+1
 12160  138F  087A               	movf	LCDClear@index+1,w
 12161  1390  3A80               	xorlw	128
 12162  1391  00F8               	movwf	??_LCDClear
 12163  1392  3081               	movlw	129
 12164  1393  0278               	subwf	??_LCDClear,w
 12165  1394  1D03               	skipz
 12166  1395  2B98               	goto	u2785
 12167  1396  30F8               	movlw	248
 12168  1397  0279               	subwf	LCDClear@index,w
 12169  1398                     u2785:	
 12170  1398  1803               	btfsc	3,0
 12171  1399  2BAE               	goto	l2641
 12172  139A                     l2635:	
 12173                           
 12174                           ;lcd.c: 186: LCDWrite(1, 0x00);
 12175  139A  01F0               	clrf	LCDWrite@data
 12176  139B  3001               	movlw	1
 12177  139C  3193  2368  3193   	fcall	_LCDWrite
 12178  139F  3001               	movlw	1
 12179  13A0  07F9               	addwf	LCDClear@index,f
 12180  13A1  3000               	movlw	0
 12181  13A2  3DFA               	addwfc	LCDClear@index+1,f
 12182  13A3  087A               	movf	LCDClear@index+1,w
 12183  13A4  3A80               	xorlw	128
 12184  13A5  00F8               	movwf	??_LCDClear
 12185  13A6  3081               	movlw	129
 12186  13A7  0278               	subwf	??_LCDClear,w
 12187  13A8  1D03               	skipz
 12188  13A9  2BAC               	goto	u2795
 12189  13AA  30F8               	movlw	248
 12190  13AB  0279               	subwf	LCDClear@index,w
 12191  13AC                     u2795:	
 12192  13AC  1C03               	skipc
 12193  13AD  2B9A               	goto	l2635
 12194  13AE                     l2641:	
 12195                           
 12196                           ;lcd.c: 187: gotoXY(0, 0);
 12197  13AE  01F5               	clrf	gotoXY@y
 12198  13AF  3000               	movlw	0
 12199  13B0  3192  226E         	fcall	_gotoXY
 12200  13B2  0008               	return
 12201  13B3                     __end_of_LCDClear:	
 12202                           
 12203                           	psect	text26
 12204  126E                     __ptext26:	
 12205 ;; *************** function _gotoXY *****************
 12206 ;; Defined at:
 12207 ;;		line 124 in file "lcd.c"
 12208 ;; Parameters:    Size  Location     Type
 12209 ;;  x               1    wreg     unsigned char 
 12210 ;;  y               1    5[COMMON] unsigned char 
 12211 ;; Auto vars:     Size  Location     Type
 12212 ;;  x               1    7[COMMON] unsigned char 
 12213 ;; Return value:  Size  Location     Type
 12214 ;;                  1    wreg      void 
 12215 ;; Registers used:
 12216 ;;		wreg, status,2, status,0, pclath, cstack
 12217 ;; Tracked objects:
 12218 ;;		On entry : 0/0
 12219 ;;		On exit  : 0/0
 12220 ;;		Unchanged: 0/0
 12221 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12222 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12223 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12224 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12225 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12226 ;;Total ram usage:        3 bytes
 12227 ;; Hardware stack levels used:    1
 12228 ;; Hardware stack levels required when called:    1
 12229 ;; This function calls:
 12230 ;;		_LCDWrite
 12231 ;; This function is called by:
 12232 ;;		_LCDClear
 12233 ;;		_main
 12234 ;; This function uses a non-reentrant model
 12235 ;;
 12236                           
 12237                           
 12238                           ;psect for function _gotoXY
 12239  126E                     _gotoXY:	
 12240                           
 12241                           ;incstack = 0
 12242                           ; Regs used in _gotoXY: [wreg+status,2+status,0+pclath+cstack]
 12243                           ;gotoXY@x stored from wreg
 12244  126E  00F7               	movwf	gotoXY@x
 12245                           
 12246                           ;lcd.c: 126: LCDWrite(0,(uint8_t)(0x80 | x));
 12247  126F  0877               	movf	gotoXY@x,w
 12248  1270  3880               	iorlw	128
 12249  1271  00F6               	movwf	??_gotoXY
 12250  1272  0876               	movf	??_gotoXY,w
 12251  1273  00F0               	movwf	LCDWrite@data
 12252  1274  3000               	movlw	0
 12253  1275  3193  2368  3192   	fcall	_LCDWrite
 12254                           
 12255                           ;lcd.c: 127: LCDWrite(0,(uint8_t)(0x40 | y));
 12256  1278  0875               	movf	gotoXY@y,w
 12257  1279  3840               	iorlw	64
 12258  127A  00F6               	movwf	??_gotoXY
 12259  127B  0876               	movf	??_gotoXY,w
 12260  127C  00F0               	movwf	LCDWrite@data
 12261  127D  3000               	movlw	0
 12262  127E  3193  2368         	fcall	_LCDWrite
 12263  1280  0008               	return
 12264  1281                     __end_of_gotoXY:	
 12265                           
 12266                           	psect	text27
 12267  171B                     __ptext27:	
 12268 ;; *************** function _Init_Battery_State_Machine *****************
 12269 ;; Defined at:
 12270 ;;		line 18 in file "battery_charger.c"
 12271 ;; Parameters:    Size  Location     Type
 12272 ;;  z               1    wreg     unsigned char 
 12273 ;; Auto vars:     Size  Location     Type
 12274 ;;  z               1   34[BANK0 ] unsigned char 
 12275 ;; Return value:  Size  Location     Type
 12276 ;;                  1    wreg      void 
 12277 ;; Registers used:
 12278 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12279 ;; Tracked objects:
 12280 ;;		On entry : 0/0
 12281 ;;		On exit  : 0/0
 12282 ;;		Unchanged: 0/0
 12283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12284 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12285 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12286 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12287 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12288 ;;Total ram usage:        5 bytes
 12289 ;; Hardware stack levels used:    1
 12290 ;; Hardware stack levels required when called:    2
 12291 ;; This function calls:
 12292 ;;		___awtoft
 12293 ;;		___ftmul
 12294 ;;		___fttol
 12295 ;; This function is called by:
 12296 ;;		_SYSTEM_Initialize
 12297 ;; This function uses a non-reentrant model
 12298 ;;
 12299                           
 12300                           
 12301                           ;psect for function _Init_Battery_State_Machine
 12302  171B                     _Init_Battery_State_Machine:	
 12303                           
 12304                           ;incstack = 0
 12305                           ; Regs used in _Init_Battery_State_Machine: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 12306                           ;Init_Battery_State_Machine@z stored from wreg
 12307  171B  0020               	movlb	0	; select bank0
 12308  171C  00C2               	movwf	Init_Battery_State_Machine@z
 12309                           
 12310                           ;battery_charger.c: 20: batteryState[z] =PRECHARGE;
 12311  171D  3003               	movlw	3
 12312  171E  00BE               	movwf	??_Init_Battery_State_Machine
 12313  171F  0842               	movf	Init_Battery_State_Machine@z,w
 12314  1720  3E66               	addlw	(low (_batteryState| 0))& (0+255)
 12315  1721  0086               	movwf	6
 12316  1722  0187               	clrf	7
 12317  1723  083E               	movf	??_Init_Battery_State_Machine,w
 12318  1724  0081               	movwf	1
 12319                           
 12320                           ;battery_charger.c: 21: stateCounter[z] =5;
 12321  1725  3542               	lslf	Init_Battery_State_Machine@z,w
 12322  1726  3EC0               	addlw	(low (_stateCounter| 0))& (0+255)
 12323  1727  0086               	movwf	6
 12324  1728  0187               	clrf	7
 12325  1729  3005               	movlw	5
 12326  172A  3FC0               	movwi [0]fsr1
 12327  172B  3000               	movlw	0
 12328  172C  3FC1               	movwi [1]fsr1
 12329                           
 12330                           ;battery_charger.c: 22: Iref[z] =10;
 12331  172D  3542               	lslf	Init_Battery_State_Machine@z,w
 12332  172E  3EC4               	addlw	(low (_Iref| 0))& (0+255)
 12333  172F  0086               	movwf	6
 12334  1730  0187               	clrf	7
 12335  1731  300A               	movlw	10
 12336  1732  3FC0               	movwi [0]fsr1
 12337  1733  3000               	movlw	0
 12338  1734  3FC1               	movwi [1]fsr1
 12339                           
 12340                           ;battery_charger.c: 23: Vref[z] =1425+(int16_t)((250-batteryTemp)*.24);
 12341  1735  096D               	comf	_batteryTemp,w
 12342  1736  00BE               	movwf	??_Init_Battery_State_Machine
 12343  1737  096E               	comf	_batteryTemp+1,w
 12344  1738  00BF               	movwf	??_Init_Battery_State_Machine+1
 12345  1739  0ABE               	incf	??_Init_Battery_State_Machine,f
 12346  173A  1903               	skipnz
 12347  173B  0ABF               	incf	??_Init_Battery_State_Machine+1,f
 12348  173C  083E               	movf	??_Init_Battery_State_Machine,w
 12349  173D  3EFA               	addlw	250
 12350  173E  00F8               	movwf	___awtoft@c
 12351  173F  3000               	movlw	0
 12352  1740  3D3F               	addwfc	??_Init_Battery_State_Machine+1,w
 12353  1741  00F9               	movwf	___awtoft@c+1
 12354  1742  3193  2348  3197   	fcall	___awtoft
 12355  1745  0878               	movf	?___awtoft,w
 12356  1746  0020               	movlb	0	; select bank0
 12357  1747  00A3               	movwf	___ftmul@f2
 12358  1748  0879               	movf	?___awtoft+1,w
 12359  1749  00A4               	movwf	___ftmul@f2+1
 12360  174A  087A               	movf	?___awtoft+2,w
 12361  174B  00A5               	movwf	___ftmul@f2+2
 12362  174C  30C3               	movlw	195
 12363  174D  00A0               	movwf	___ftmul@f1
 12364  174E  3075               	movlw	117
 12365  174F  00A1               	movwf	___ftmul@f1+1
 12366  1750  303E               	movlw	62
 12367  1751  00A2               	movwf	___ftmul@f1+2
 12368  1752  318A  2239  3197   	fcall	___ftmul
 12369  1755  0020               	movlb	0	; select bank0
 12370  1756  0820               	movf	?___ftmul,w
 12371  1757  00B0               	movwf	___fttol@f1
 12372  1758  0821               	movf	?___ftmul+1,w
 12373  1759  00B1               	movwf	___fttol@f1+1
 12374  175A  0822               	movf	?___ftmul+2,w
 12375  175B  00B2               	movwf	___fttol@f1+2
 12376  175C  3189  2102         	fcall	___fttol
 12377  175E  0020               	movlb	0	; select bank0
 12378  175F  0830               	movf	?___fttol,w
 12379  1760  3E91               	addlw	145
 12380  1761  00C0               	movwf	??_Init_Battery_State_Machine+2
 12381  1762  3005               	movlw	5
 12382  1763  3D31               	addwfc	?___fttol+1,w
 12383  1764  00C1               	movwf	??_Init_Battery_State_Machine+3
 12384  1765  3542               	lslf	Init_Battery_State_Machine@z,w
 12385  1766  3E5C               	addlw	(low (_Vref| 0))& (0+255)
 12386  1767  0086               	movwf	6
 12387  1768  0187               	clrf	7
 12388  1769  0840               	movf	??_Init_Battery_State_Machine+2,w
 12389  176A  3FC0               	movwi [0]fsr1
 12390  176B  0841               	movf	??_Init_Battery_State_Machine+3,w
 12391  176C  3FC1               	movwi [1]fsr1
 12392                           
 12393                           ;battery_charger.c: 24: Imin[z] =15;
 12394  176D  3542               	lslf	Init_Battery_State_Machine@z,w
 12395  176E  3ECC               	addlw	(low (_Imin| 0))& (0+255)
 12396  176F  0086               	movwf	6
 12397  1770  0187               	clrf	7
 12398  1771  300F               	movlw	15
 12399  1772  3FC0               	movwi [0]fsr1
 12400  1773  3000               	movlw	0
 12401  1774  3FC1               	movwi [1]fsr1
 12402                           
 12403                           ;battery_charger.c: 25: IminCount[z] = 60;
 12404  1775  3542               	lslf	Init_Battery_State_Machine@z,w
 12405  1776  3EC8               	addlw	(low (_IminCount| 0))& (0+255)
 12406  1777  0086               	movwf	6
 12407  1778  0187               	clrf	7
 12408  1779  303C               	movlw	60
 12409  177A  3FC0               	movwi [0]fsr1
 12410  177B  3000               	movlw	0
 12411  177C  3FC1               	movwi [1]fsr1
 12412  177D  0008               	return
 12413  177E                     __end_of_Init_Battery_State_Machine:	
 12414                           
 12415                           	psect	text28
 12416  130A                     __ptext28:	
 12417 ;; *************** function _ADC_Initialize *****************
 12418 ;; Defined at:
 12419 ;;		line 111 in file "adc.c"
 12420 ;; Parameters:    Size  Location     Type
 12421 ;;		None
 12422 ;; Auto vars:     Size  Location     Type
 12423 ;;		None
 12424 ;; Return value:  Size  Location     Type
 12425 ;;                  1    wreg      void 
 12426 ;; Registers used:
 12427 ;;		wreg, status,2
 12428 ;; Tracked objects:
 12429 ;;		On entry : 0/0
 12430 ;;		On exit  : 0/0
 12431 ;;		Unchanged: 0/0
 12432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12433 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12434 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12435 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12436 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12437 ;;Total ram usage:        0 bytes
 12438 ;; Hardware stack levels used:    1
 12439 ;; This function calls:
 12440 ;;		Nothing
 12441 ;; This function is called by:
 12442 ;;		_SYSTEM_Initialize
 12443 ;; This function uses a non-reentrant model
 12444 ;;
 12445                           
 12446                           
 12447                           ;psect for function _ADC_Initialize
 12448  130A                     _ADC_Initialize:	
 12449                           
 12450                           ;adc.c: 113: ADCON1 = 0x00;
 12451                           
 12452                           ;incstack = 0
 12453                           ; Regs used in _ADC_Initialize: [wreg+status,2]
 12454  130A  0021               	movlb	1	; select bank1
 12455  130B  0194               	clrf	20	;volatile
 12456                           
 12457                           ;adc.c: 115: ADCON2 = 0x00;
 12458  130C  0195               	clrf	21	;volatile
 12459                           
 12460                           ;adc.c: 117: ADCON3 = 0x00;
 12461  130D  0196               	clrf	22	;volatile
 12462                           
 12463                           ;adc.c: 119: ADACT = 0x00;
 12464  130E  0199               	clrf	25	;volatile
 12465                           
 12466                           ;adc.c: 121: ADSTAT = 0x00;
 12467  130F  0197               	clrf	23	;volatile
 12468                           
 12469                           ;adc.c: 123: FVRCON = 0b11000011;
 12470  1310  30C3               	movlw	195
 12471  1311  0032               	movlb	18	; select bank18
 12472  1312  008C               	movwf	12	;volatile
 12473                           
 12474                           ;adc.c: 124: ADCLK = 0x3F;
 12475  1313  303F               	movlw	63
 12476  1314  0021               	movlb	1	; select bank1
 12477  1315  0098               	movwf	24	;volatile
 12478                           
 12479                           ;adc.c: 131: ADREF = 0x03;
 12480  1316  3003               	movlw	3
 12481  1317  009A               	movwf	26	;volatile
 12482                           
 12483                           ;adc.c: 134: ADCAP = 0x00;
 12484  1318  019B               	clrf	27	;volatile
 12485                           
 12486                           ;adc.c: 137: ADPRE = 0x07;
 12487  1319  3007               	movlw	7
 12488  131A  009C               	movwf	28	;volatile
 12489                           
 12490                           ;adc.c: 139: ADACQ = 0x00;
 12491  131B  019D               	clrf	29	;volatile
 12492                           
 12493                           ;adc.c: 141: ADPCH = 0x00;
 12494  131C  019E               	clrf	30	;volatile
 12495                           
 12496                           ;adc.c: 143: ADRPT = 0x00;
 12497  131D  0022               	movlb	2	; select bank2
 12498  131E  018D               	clrf	13	;volatile
 12499                           
 12500                           ;adc.c: 145: ADLTHL = 0x00;
 12501  131F  018E               	clrf	14	;volatile
 12502                           
 12503                           ;adc.c: 147: ADLTHH = 0x00;
 12504  1320  018F               	clrf	15	;volatile
 12505                           
 12506                           ;adc.c: 149: ADUTHL = 0x00;
 12507  1321  0190               	clrf	16	;volatile
 12508                           
 12509                           ;adc.c: 151: ADUTHH = 0x00;
 12510  1322  0191               	clrf	17	;volatile
 12511                           
 12512                           ;adc.c: 153: ADSTPTL = 0x00;
 12513  1323  0192               	clrf	18	;volatile
 12514                           
 12515                           ;adc.c: 155: ADSTPTH = 0x00;
 12516  1324  0193               	clrf	19	;volatile
 12517                           
 12518                           ;adc.c: 157: ADCON0 = 0x84;
 12519  1325  3084               	movlw	132
 12520  1326  0021               	movlb	1	; select bank1
 12521  1327  0093               	movwf	19	;volatile
 12522  1328  0008               	return
 12523  1329                     __end_of_ADC_Initialize:	
 12524                           
 12525                           	psect	text29
 12526  12D6                     __ptext29:	
 12527 ;; *************** function _PWM7_LoadDutyValue *****************
 12528 ;; Defined at:
 12529 ;;		line 37 in file "pwm.c"
 12530 ;; Parameters:    Size  Location     Type
 12531 ;;  dutyCycle7      2    0[COMMON] unsigned int 
 12532 ;; Auto vars:     Size  Location     Type
 12533 ;;		None
 12534 ;; Return value:  Size  Location     Type
 12535 ;;                  1    wreg      void 
 12536 ;; Registers used:
 12537 ;;		wreg, status,2, status,0
 12538 ;; Tracked objects:
 12539 ;;		On entry : 0/0
 12540 ;;		On exit  : 0/0
 12541 ;;		Unchanged: 0/0
 12542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12543 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12544 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12545 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12546 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12547 ;;Total ram usage:        4 bytes
 12548 ;; Hardware stack levels used:    1
 12549 ;; This function calls:
 12550 ;;		Nothing
 12551 ;; This function is called by:
 12552 ;;		_main
 12553 ;; This function uses a non-reentrant model
 12554 ;;
 12555                           
 12556                           
 12557                           ;psect for function _PWM7_LoadDutyValue
 12558  12D6                     _PWM7_LoadDutyValue:	
 12559                           
 12560                           ;pwm.c: 39: PWM7DCH = (dutyCycle7 & 0x03FC)>>2;
 12561                           
 12562                           ;incstack = 0
 12563                           ; Regs used in _PWM7_LoadDutyValue: [wreg+status,2+status,0]
 12564  12D6  0871               	movf	PWM7_LoadDutyValue@dutyCycle7+1,w
 12565  12D7  00F3               	movwf	??_PWM7_LoadDutyValue+1
 12566  12D8  0870               	movf	PWM7_LoadDutyValue@dutyCycle7,w
 12567  12D9  00F2               	movwf	??_PWM7_LoadDutyValue
 12568  12DA  36F3               	lsrf	??_PWM7_LoadDutyValue+1,f
 12569  12DB  0CF2               	rrf	??_PWM7_LoadDutyValue,f
 12570  12DC  36F3               	lsrf	??_PWM7_LoadDutyValue+1,f
 12571  12DD  0CF2               	rrf	??_PWM7_LoadDutyValue,f
 12572  12DE  0872               	movf	??_PWM7_LoadDutyValue,w
 12573  12DF  0027               	movlb	7	; select bank7
 12574  12E0  0091               	movwf	17	;volatile
 12575                           
 12576                           ;pwm.c: 41: PWM7DCL = (dutyCycle7 & 0x0003)<<6;
 12577  12E1  0870               	movf	PWM7_LoadDutyValue@dutyCycle7,w
 12578  12E2  3903               	andlw	3
 12579  12E3  00F2               	movwf	??_PWM7_LoadDutyValue
 12580  12E4  3005               	movlw	5
 12581  12E5                     u3675:	
 12582  12E5  35F2               	lslf	??_PWM7_LoadDutyValue,f
 12583  12E6  3EFF               	addlw	-1
 12584  12E7  1D03               	skipz
 12585  12E8  2AE5               	goto	u3675
 12586  12E9  3572               	lslf	??_PWM7_LoadDutyValue,w
 12587  12EA  0090               	movwf	16	;volatile
 12588  12EB  0008               	return
 12589  12EC                     __end_of_PWM7_LoadDutyValue:	
 12590                           
 12591                           	psect	text30
 12592  12C0                     __ptext30:	
 12593 ;; *************** function _PWM6_LoadDutyValue *****************
 12594 ;; Defined at:
 12595 ;;		line 30 in file "pwm.c"
 12596 ;; Parameters:    Size  Location     Type
 12597 ;;  dutyCycle6      2    0[COMMON] unsigned int 
 12598 ;; Auto vars:     Size  Location     Type
 12599 ;;		None
 12600 ;; Return value:  Size  Location     Type
 12601 ;;                  1    wreg      void 
 12602 ;; Registers used:
 12603 ;;		wreg, status,2, status,0
 12604 ;; Tracked objects:
 12605 ;;		On entry : 0/0
 12606 ;;		On exit  : 0/0
 12607 ;;		Unchanged: 0/0
 12608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12609 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12610 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12611 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12612 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12613 ;;Total ram usage:        4 bytes
 12614 ;; Hardware stack levels used:    1
 12615 ;; This function calls:
 12616 ;;		Nothing
 12617 ;; This function is called by:
 12618 ;;		_main
 12619 ;; This function uses a non-reentrant model
 12620 ;;
 12621                           
 12622                           
 12623                           ;psect for function _PWM6_LoadDutyValue
 12624  12C0                     _PWM6_LoadDutyValue:	
 12625                           
 12626                           ;pwm.c: 32: PWM6DCH = (dutyCycle6 & 0x03FC)>>2;
 12627                           
 12628                           ;incstack = 0
 12629                           ; Regs used in _PWM6_LoadDutyValue: [wreg+status,2+status,0]
 12630  12C0  0871               	movf	PWM6_LoadDutyValue@dutyCycle6+1,w
 12631  12C1  00F3               	movwf	??_PWM6_LoadDutyValue+1
 12632  12C2  0870               	movf	PWM6_LoadDutyValue@dutyCycle6,w
 12633  12C3  00F2               	movwf	??_PWM6_LoadDutyValue
 12634  12C4  36F3               	lsrf	??_PWM6_LoadDutyValue+1,f
 12635  12C5  0CF2               	rrf	??_PWM6_LoadDutyValue,f
 12636  12C6  36F3               	lsrf	??_PWM6_LoadDutyValue+1,f
 12637  12C7  0CF2               	rrf	??_PWM6_LoadDutyValue,f
 12638  12C8  0872               	movf	??_PWM6_LoadDutyValue,w
 12639  12C9  0027               	movlb	7	; select bank7
 12640  12CA  008D               	movwf	13	;volatile
 12641                           
 12642                           ;pwm.c: 34: PWM6DCL = (dutyCycle6 & 0x0003)<<6;
 12643  12CB  0870               	movf	PWM6_LoadDutyValue@dutyCycle6,w
 12644  12CC  3903               	andlw	3
 12645  12CD  00F2               	movwf	??_PWM6_LoadDutyValue
 12646  12CE  3005               	movlw	5
 12647  12CF                     u3665:	
 12648  12CF  35F2               	lslf	??_PWM6_LoadDutyValue,f
 12649  12D0  3EFF               	addlw	-1
 12650  12D1  1D03               	skipz
 12651  12D2  2ACF               	goto	u3665
 12652  12D3  3572               	lslf	??_PWM6_LoadDutyValue,w
 12653  12D4  008C               	movwf	12	;volatile
 12654  12D5  0008               	return
 12655  12D6                     __end_of_PWM6_LoadDutyValue:	
 12656                           
 12657                           	psect	text31
 12658  12AA                     __ptext31:	
 12659 ;; *************** function _PWM1_LoadDutyValue *****************
 12660 ;; Defined at:
 12661 ;;		line 44 in file "pwm.c"
 12662 ;; Parameters:    Size  Location     Type
 12663 ;;  dutyCycle1      2    0[COMMON] unsigned int 
 12664 ;; Auto vars:     Size  Location     Type
 12665 ;;		None
 12666 ;; Return value:  Size  Location     Type
 12667 ;;                  1    wreg      void 
 12668 ;; Registers used:
 12669 ;;		wreg, status,2, status,0
 12670 ;; Tracked objects:
 12671 ;;		On entry : 0/0
 12672 ;;		On exit  : 0/0
 12673 ;;		Unchanged: 0/0
 12674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12675 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12676 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12677 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12678 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12679 ;;Total ram usage:        4 bytes
 12680 ;; Hardware stack levels used:    1
 12681 ;; This function calls:
 12682 ;;		Nothing
 12683 ;; This function is called by:
 12684 ;;		_main
 12685 ;; This function uses a non-reentrant model
 12686 ;;
 12687                           
 12688                           
 12689                           ;psect for function _PWM1_LoadDutyValue
 12690  12AA                     _PWM1_LoadDutyValue:	
 12691                           
 12692                           ;pwm.c: 46: CCPR1H = (dutyCycle1& 0x03FC)>>2;
 12693                           
 12694                           ;incstack = 0
 12695                           ; Regs used in _PWM1_LoadDutyValue: [wreg+status,2+status,0]
 12696  12AA  0871               	movf	PWM1_LoadDutyValue@dutyCycle1+1,w
 12697  12AB  00F3               	movwf	??_PWM1_LoadDutyValue+1
 12698  12AC  0870               	movf	PWM1_LoadDutyValue@dutyCycle1,w
 12699  12AD  00F2               	movwf	??_PWM1_LoadDutyValue
 12700  12AE  36F3               	lsrf	??_PWM1_LoadDutyValue+1,f
 12701  12AF  0CF2               	rrf	??_PWM1_LoadDutyValue,f
 12702  12B0  36F3               	lsrf	??_PWM1_LoadDutyValue+1,f
 12703  12B1  0CF2               	rrf	??_PWM1_LoadDutyValue,f
 12704  12B2  0872               	movf	??_PWM1_LoadDutyValue,w
 12705  12B3  0026               	movlb	6	; select bank6
 12706  12B4  008D               	movwf	13	;volatile
 12707                           
 12708                           ;pwm.c: 47: CCPR1L = (dutyCycle1 & 0x0003)<<6;
 12709  12B5  0870               	movf	PWM1_LoadDutyValue@dutyCycle1,w
 12710  12B6  3903               	andlw	3
 12711  12B7  00F2               	movwf	??_PWM1_LoadDutyValue
 12712  12B8  3005               	movlw	5
 12713  12B9                     u3685:	
 12714  12B9  35F2               	lslf	??_PWM1_LoadDutyValue,f
 12715  12BA  3EFF               	addlw	-1
 12716  12BB  1D03               	skipz
 12717  12BC  2AB9               	goto	u3685
 12718  12BD  3572               	lslf	??_PWM1_LoadDutyValue,w
 12719  12BE  008C               	movwf	12	;volatile
 12720  12BF  0008               	return
 12721  12C0                     __end_of_PWM1_LoadDutyValue:	
 12722                           
 12723                           	psect	text32
 12724  1281                     __ptext32:	
 12725 ;; *************** function _LCDWriteString *****************
 12726 ;; Defined at:
 12727 ;;		line 176 in file "lcd.c"
 12728 ;; Parameters:    Size  Location     Type
 12729 ;;  characters      2   12[COMMON] PTR const unsigned char 
 12730 ;;		 -> STR_3(5), STR_2(5), STR_1(4), 
 12731 ;; Auto vars:     Size  Location     Type
 12732 ;;		None
 12733 ;; Return value:  Size  Location     Type
 12734 ;;                  1    wreg      void 
 12735 ;; Registers used:
 12736 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 12737 ;; Tracked objects:
 12738 ;;		On entry : 0/0
 12739 ;;		On exit  : 0/0
 12740 ;;		Unchanged: 0/0
 12741 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12742 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12743 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12744 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12745 ;;      Totals:         2       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12746 ;;Total ram usage:        3 bytes
 12747 ;; Hardware stack levels used:    1
 12748 ;; Hardware stack levels required when called:    2
 12749 ;; This function calls:
 12750 ;;		_LCDWriteCharacter
 12751 ;; This function is called by:
 12752 ;;		_main
 12753 ;; This function uses a non-reentrant model
 12754 ;;
 12755                           
 12756                           
 12757                           ;psect for function _LCDWriteString
 12758  1281                     _LCDWriteString:	
 12759  1281                     l3059:	
 12760                           ;lcd.c: 178: while (*characters)
 12761                           
 12762                           ;incstack = 0
 12763                           ; Regs used in _LCDWriteString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 12764                           
 12765  1281  087C               	movf	LCDWriteString@characters,w
 12766  1282  0084               	movwf	4
 12767  1283  087D               	movf	LCDWriteString@characters+1,w
 12768  1284  0085               	movwf	5
 12769  1285  0012               	moviw fsr0++
 12770  1286  1903               	btfsc	3,2
 12771  1287  0008               	return
 12772                           
 12773                           ;lcd.c: 179: LCDWriteCharacter(*characters++);
 12774  1288  087C               	movf	LCDWriteString@characters,w
 12775  1289  0084               	movwf	4
 12776  128A  087D               	movf	LCDWriteString@characters+1,w
 12777  128B  0085               	movwf	5
 12778  128C  0800               	movf	0,w	;code access
 12779  128D  3196  2667  3192   	fcall	_LCDWriteCharacter
 12780  1290  3001               	movlw	1
 12781  1291  07FC               	addwf	LCDWriteString@characters,f
 12782  1292  3000               	movlw	0
 12783  1293  3DFD               	addwfc	LCDWriteString@characters+1,f
 12784  1294  2A81               	goto	l3059
 12785  1295                     __end_of_LCDWriteString:	
 12786                           
 12787                           	psect	text33
 12788  0AED                     __ptext33:	
 12789 ;; *************** function _LCDWriteInt *****************
 12790 ;; Defined at:
 12791 ;;		line 190 in file "lcd.c"
 12792 ;; Parameters:    Size  Location     Type
 12793 ;;  value           2    0[BANK0 ] int 
 12794 ;;  fieldLength     1    2[BANK0 ] char 
 12795 ;;  numPlaces       1    3[BANK0 ] unsigned char 
 12796 ;;  sign            1    4[BANK0 ] unsigned char 
 12797 ;; Auto vars:     Size  Location     Type
 12798 ;;  str             5    9[BANK0 ] unsigned char [5]
 12799 ;;  i               1   15[BANK0 ] unsigned char 
 12800 ;;  j               1   14[BANK0 ] unsigned char 
 12801 ;; Return value:  Size  Location     Type
 12802 ;;                  1    wreg      void 
 12803 ;; Registers used:
 12804 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12805 ;; Tracked objects:
 12806 ;;		On entry : 0/0
 12807 ;;		On exit  : 0/0
 12808 ;;		Unchanged: 0/0
 12809 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12810 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12811 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12812 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12813 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12814 ;;Total ram usage:       16 bytes
 12815 ;; Hardware stack levels used:    1
 12816 ;; Hardware stack levels required when called:    2
 12817 ;; This function calls:
 12818 ;;		_LCDWriteCharacter
 12819 ;;		___awdiv
 12820 ;;		___lwmod
 12821 ;; This function is called by:
 12822 ;;		_main
 12823 ;; This function uses a non-reentrant model
 12824 ;;
 12825                           
 12826                           
 12827                           ;psect for function _LCDWriteInt
 12828  0AED                     _LCDWriteInt:	
 12829                           
 12830                           ;lcd.c: 192: uint8_t str[5]={0,0,0,0,0};
 12831                           
 12832                           ;incstack = 0
 12833                           ; Regs used in _LCDWriteInt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12834  0AED  3030               	movlw	low LCDWriteInt@F14390
 12835  0AEE  0086               	movwf	6
 12836  0AEF  3001               	movlw	high LCDWriteInt@F14390
 12837  0AF0  0087               	movwf	7
 12838  0AF1  3029               	movlw	low LCDWriteInt@str
 12839  0AF2  0084               	movwf	4
 12840  0AF3  3000               	movlw	high LCDWriteInt@str
 12841  0AF4  0085               	movwf	5
 12842  0AF5  3005               	movlw	5
 12843  0AF6  0020               	movlb	0	; select bank0
 12844  0AF7  00A5               	movwf	??_LCDWriteInt
 12845  0AF8                     u3570:	
 12846  0AF8  0016               	moviw fsr1++
 12847  0AF9  001A               	movwi fsr0++
 12848  0AFA  0BA5               	decfsz	??_LCDWriteInt,f
 12849  0AFB  2AF8               	goto	u3570
 12850                           
 12851                           ;lcd.c: 193: uint8_t i=4,j=0;
 12852  0AFC  3004               	movlw	4
 12853  0AFD  00A5               	movwf	??_LCDWriteInt
 12854  0AFE  0825               	movf	??_LCDWriteInt,w
 12855  0AFF  00AF               	movwf	LCDWriteInt@i
 12856  0B00  01AE               	clrf	LCDWriteInt@j
 12857                           
 12858                           ;lcd.c: 195: if(value<0)
 12859  0B01  1FA1               	btfss	LCDWriteInt@value+1,7
 12860  0B02  2B0E               	goto	l3073
 12861                           
 12862                           ;lcd.c: 196: {
 12863                           ;lcd.c: 197: LCDWriteCharacter('-');
 12864  0B03  302D               	movlw	45
 12865  0B04  3196  2667  318A   	fcall	_LCDWriteCharacter
 12866                           
 12867                           ;lcd.c: 198: value=value*-1;
 12868  0B07  0020               	movlb	0	; select bank0
 12869  0B08  09A0               	comf	LCDWriteInt@value,f
 12870  0B09  09A1               	comf	LCDWriteInt@value+1,f
 12871  0B0A  0AA0               	incf	LCDWriteInt@value,f
 12872  0B0B  1903               	skipnz
 12873  0B0C  0AA1               	incf	LCDWriteInt@value+1,f
 12874                           
 12875                           ;lcd.c: 199: }
 12876  0B0D  2B15               	goto	l3083
 12877  0B0E                     l3073:	
 12878                           
 12879                           ;lcd.c: 201: else
 12880                           ;lcd.c: 202: {
 12881                           ;lcd.c: 203: if(sign == 1)
 12882  0B0E  0324               	decf	LCDWriteInt@sign,w
 12883  0B0F  1D03               	btfss	3,2
 12884  0B10  2B15               	goto	l3083
 12885                           
 12886                           ;lcd.c: 204: {
 12887                           ;lcd.c: 205: LCDWriteCharacter('+');
 12888  0B11  302B               	movlw	43
 12889  0B12  3196  2667  318A   	fcall	_LCDWriteCharacter
 12890  0B15                     l3083:	
 12891                           ;lcd.c: 206: }
 12892                           ;lcd.c: 207: }
 12893                           ;lcd.c: 209: while(value)
 12894                           
 12895  0B15  0020               	movlb	0	; select bank0
 12896  0B16  0820               	movf	LCDWriteInt@value,w
 12897  0B17  0421               	iorwf	LCDWriteInt@value+1,w
 12898  0B18  1903               	btfsc	3,2
 12899  0B19  2B42               	goto	l3085
 12900                           
 12901                           ;lcd.c: 210: {
 12902                           ;lcd.c: 211: str[i]=(uint16_t)value%10;
 12903  0B1A  300A               	movlw	10
 12904  0B1B  00F0               	movwf	___lwmod@divisor
 12905  0B1C  3000               	movlw	0
 12906  0B1D  00F1               	movwf	___lwmod@divisor+1
 12907  0B1E  0020               	movlb	0	; select bank0
 12908  0B1F  0821               	movf	LCDWriteInt@value+1,w
 12909  0B20  00F3               	movwf	___lwmod@dividend+1
 12910  0B21  0820               	movf	LCDWriteInt@value,w
 12911  0B22  00F2               	movwf	___lwmod@dividend
 12912  0B23  3193  23B3  318A   	fcall	___lwmod
 12913  0B26  0870               	movf	?___lwmod,w
 12914  0B27  0020               	movlb	0	; select bank0
 12915  0B28  00A5               	movwf	??_LCDWriteInt
 12916  0B29  082F               	movf	LCDWriteInt@i,w
 12917  0B2A  3E29               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
 12918  0B2B  0086               	movwf	6
 12919  0B2C  0187               	clrf	7
 12920  0B2D  0825               	movf	??_LCDWriteInt,w
 12921  0B2E  0081               	movwf	1
 12922                           
 12923                           ;lcd.c: 212: value=value/10;
 12924  0B2F  300A               	movlw	10
 12925  0B30  00F0               	movwf	___awdiv@divisor
 12926  0B31  3000               	movlw	0
 12927  0B32  00F1               	movwf	___awdiv@divisor+1
 12928  0B33  0821               	movf	LCDWriteInt@value+1,w
 12929  0B34  00F3               	movwf	___awdiv@dividend+1
 12930  0B35  0820               	movf	LCDWriteInt@value,w
 12931  0B36  00F2               	movwf	___awdiv@dividend
 12932  0B37  3196  2616  318A   	fcall	___awdiv
 12933  0B3A  0871               	movf	?___awdiv+1,w
 12934  0B3B  0020               	movlb	0	; select bank0
 12935  0B3C  00A1               	movwf	LCDWriteInt@value+1
 12936  0B3D  0870               	movf	?___awdiv,w
 12937  0B3E  00A0               	movwf	LCDWriteInt@value
 12938                           
 12939                           ;lcd.c: 213: i--;
 12940  0B3F  3001               	movlw	1
 12941  0B40  02AF               	subwf	LCDWriteInt@i,f
 12942  0B41  2B15               	goto	l3083
 12943  0B42                     l3085:	
 12944                           
 12945                           ;lcd.c: 214: }
 12946                           ;lcd.c: 215: if(fieldLength==-1)
 12947  0B42  0A22               	incf	LCDWriteInt@fieldLength,w
 12948  0B43  1903               	btfsc	3,2
 12949  0B44  2B4A               	goto	l3091
 12950  0B45  2B52               	goto	l3093
 12951  0B46                     l3089:	
 12952                           ;lcd.c: 216: {
 12953                           ;lcd.c: 217: while(str[j]==0)
 12954                           
 12955                           
 12956                           ;lcd.c: 218: {
 12957                           ;lcd.c: 219: j++;
 12958  0B46  3001               	movlw	1
 12959  0B47  00A5               	movwf	??_LCDWriteInt
 12960  0B48  0825               	movf	??_LCDWriteInt,w
 12961  0B49  07AE               	addwf	LCDWriteInt@j,f
 12962  0B4A                     l3091:	
 12963  0B4A  082E               	movf	LCDWriteInt@j,w
 12964  0B4B  3E29               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
 12965  0B4C  0086               	movwf	6
 12966  0B4D  0187               	clrf	7
 12967  0B4E  0801               	movf	1,w
 12968  0B4F  1D03               	btfss	3,2
 12969  0B50  2B58               	goto	l3095
 12970  0B51  2B46               	goto	l3089
 12971  0B52                     l3093:	
 12972                           ;lcd.c: 220: }
 12973                           ;lcd.c: 221: }
 12974                           
 12975                           
 12976                           ;lcd.c: 222: else
 12977                           ;lcd.c: 223: {
 12978                           ;lcd.c: 224: j=(uint8_t)(5-fieldLength);
 12979  0B52  0322               	decf	LCDWriteInt@fieldLength,w
 12980  0B53  3AFF               	xorlw	255
 12981  0B54  3E05               	addlw	5
 12982  0B55  00A5               	movwf	??_LCDWriteInt
 12983  0B56  0825               	movf	??_LCDWriteInt,w
 12984  0B57  00AE               	movwf	LCDWriteInt@j
 12985  0B58                     l3095:	
 12986                           
 12987                           ;lcd.c: 225: }
 12988                           ;lcd.c: 227: for(i=j;i<(5-numPlaces);i++)
 12989  0B58  082E               	movf	LCDWriteInt@j,w
 12990  0B59  00A5               	movwf	??_LCDWriteInt
 12991  0B5A  0825               	movf	??_LCDWriteInt,w
 12992  0B5B  00AF               	movwf	LCDWriteInt@i
 12993  0B5C                     l3101:	
 12994  0B5C  0823               	movf	LCDWriteInt@numPlaces,w
 12995  0B5D  00A5               	movwf	??_LCDWriteInt
 12996  0B5E  01A6               	clrf	??_LCDWriteInt+1
 12997  0B5F  09A5               	comf	??_LCDWriteInt,f
 12998  0B60  09A6               	comf	??_LCDWriteInt+1,f
 12999  0B61  0AA5               	incf	??_LCDWriteInt,f
 13000  0B62  1903               	skipnz
 13001  0B63  0AA6               	incf	??_LCDWriteInt+1,f
 13002  0B64  0825               	movf	??_LCDWriteInt,w
 13003  0B65  3E05               	addlw	5
 13004  0B66  00A7               	movwf	??_LCDWriteInt+2
 13005  0B67  3000               	movlw	0
 13006  0B68  3D26               	addwfc	??_LCDWriteInt+1,w
 13007  0B69  00A8               	movwf	??_LCDWriteInt+3
 13008  0B6A  0828               	movf	??_LCDWriteInt+3,w
 13009  0B6B  3A80               	xorlw	128
 13010  0B6C  3C80               	sublw	128
 13011  0B6D  1D03               	skipz
 13012  0B6E  2B71               	goto	u3635
 13013  0B6F  0827               	movf	??_LCDWriteInt+2,w
 13014  0B70  022F               	subwf	LCDWriteInt@i,w
 13015  0B71                     u3635:	
 13016  0B71  1803               	btfsc	3,0
 13017  0B72  2B83               	goto	l3103
 13018                           
 13019                           ;lcd.c: 228: {
 13020                           ;lcd.c: 229: LCDWriteCharacter((uint8_t)(48+str[i]));
 13021  0B73  0020               	movlb	0	; select bank0
 13022  0B74  082F               	movf	LCDWriteInt@i,w
 13023  0B75  3E29               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
 13024  0B76  0086               	movwf	6
 13025  0B77  0187               	clrf	7
 13026  0B78  0801               	movf	1,w
 13027  0B79  3E30               	addlw	48
 13028  0B7A  3196  2667  318A   	fcall	_LCDWriteCharacter
 13029  0B7D  3001               	movlw	1
 13030  0B7E  0020               	movlb	0	; select bank0
 13031  0B7F  00A5               	movwf	??_LCDWriteInt
 13032  0B80  0825               	movf	??_LCDWriteInt,w
 13033  0B81  07AF               	addwf	LCDWriteInt@i,f
 13034  0B82  2B5C               	goto	l3101
 13035  0B83                     l3103:	
 13036                           
 13037                           ;lcd.c: 230: }
 13038                           ;lcd.c: 232: if(numPlaces == 1)
 13039  0B83  0020               	movlb	0	; select bank0
 13040  0B84  0323               	decf	LCDWriteInt@numPlaces,w
 13041  0B85  1D03               	btfss	3,2
 13042  0B86  2B91               	goto	l3107
 13043                           
 13044                           ;lcd.c: 233: {
 13045                           ;lcd.c: 234: LCDWriteCharacter(46);
 13046  0B87  302E               	movlw	46
 13047  0B88  3196  2667  318A   	fcall	_LCDWriteCharacter
 13048                           
 13049                           ;lcd.c: 235: LCDWriteCharacter ((uint8_t)(48+str[4]));
 13050  0B8B  0020               	movlb	0	; select bank0
 13051  0B8C  082D               	movf	LCDWriteInt@str+4,w
 13052  0B8D  3E30               	addlw	48
 13053  0B8E  3196  2667  318A   	fcall	_LCDWriteCharacter
 13054  0B91                     l3107:	
 13055                           
 13056                           ;lcd.c: 236: }
 13057                           ;lcd.c: 238: if(numPlaces == 2)
 13058  0B91  3002               	movlw	2
 13059  0B92  0020               	movlb	0	; select bank0
 13060  0B93  0623               	xorwf	LCDWriteInt@numPlaces,w
 13061  0B94  1D03               	btfss	3,2
 13062  0B95  0008               	return
 13063                           
 13064                           ;lcd.c: 239: {
 13065                           ;lcd.c: 240: LCDWriteCharacter(46);
 13066  0B96  302E               	movlw	46
 13067  0B97  3196  2667  318A   	fcall	_LCDWriteCharacter
 13068                           
 13069                           ;lcd.c: 241: LCDWriteCharacter((uint8_t)(48+str[3]));
 13070  0B9A  0020               	movlb	0	; select bank0
 13071  0B9B  082C               	movf	LCDWriteInt@str+3,w
 13072  0B9C  3E30               	addlw	48
 13073  0B9D  3196  2667  318A   	fcall	_LCDWriteCharacter
 13074                           
 13075                           ;lcd.c: 242: LCDWriteCharacter((uint8_t)(48+str[4]));
 13076  0BA0  0020               	movlb	0	; select bank0
 13077  0BA1  082D               	movf	LCDWriteInt@str+4,w
 13078  0BA2  3E30               	addlw	48
 13079  0BA3  3196  2667         	fcall	_LCDWriteCharacter
 13080  0BA5  0008               	return
 13081  0BA6                     __end_of_LCDWriteInt:	
 13082                           
 13083                           	psect	text34
 13084  13B3                     __ptext34:	
 13085 ;; *************** function ___lwmod *****************
 13086 ;; Defined at:
 13087 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 13088 ;; Parameters:    Size  Location     Type
 13089 ;;  divisor         2    0[COMMON] unsigned int 
 13090 ;;  dividend        2    2[COMMON] unsigned int 
 13091 ;; Auto vars:     Size  Location     Type
 13092 ;;  counter         1    5[COMMON] unsigned char 
 13093 ;; Return value:  Size  Location     Type
 13094 ;;                  2    0[COMMON] unsigned int 
 13095 ;; Registers used:
 13096 ;;		wreg, status,2, status,0
 13097 ;; Tracked objects:
 13098 ;;		On entry : 0/0
 13099 ;;		On exit  : 0/0
 13100 ;;		Unchanged: 0/0
 13101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13102 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13103 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13104 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13105 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13106 ;;Total ram usage:        6 bytes
 13107 ;; Hardware stack levels used:    1
 13108 ;; This function calls:
 13109 ;;		Nothing
 13110 ;; This function is called by:
 13111 ;;		_LCDWriteInt
 13112 ;; This function uses a non-reentrant model
 13113 ;;
 13114                           
 13115                           
 13116                           ;psect for function ___lwmod
 13117  13B3                     ___lwmod:	
 13118                           
 13119                           ;incstack = 0
 13120                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
 13121  13B3  0870               	movf	___lwmod@divisor,w
 13122  13B4  0471               	iorwf	___lwmod@divisor+1,w
 13123  13B5  1903               	btfsc	3,2
 13124  13B6  2BDA               	goto	l2909
 13125  13B7  01F5               	clrf	___lwmod@counter
 13126  13B8  0AF5               	incf	___lwmod@counter,f
 13127  13B9                     l2899:	
 13128  13B9  1BF1               	btfsc	___lwmod@divisor+1,7
 13129  13BA  2BC5               	goto	l2901
 13130  13BB  3001               	movlw	1
 13131  13BC                     u3145:	
 13132  13BC  35F0               	lslf	___lwmod@divisor,f
 13133  13BD  0DF1               	rlf	___lwmod@divisor+1,f
 13134  13BE  0B89               	decfsz	9,f
 13135  13BF  2BBC               	goto	u3145
 13136  13C0  3001               	movlw	1
 13137  13C1  00F4               	movwf	??___lwmod
 13138  13C2  0874               	movf	??___lwmod,w
 13139  13C3  07F5               	addwf	___lwmod@counter,f
 13140  13C4  2BB9               	goto	l2899
 13141  13C5                     l2901:	
 13142  13C5  0871               	movf	___lwmod@divisor+1,w
 13143  13C6  0273               	subwf	___lwmod@dividend+1,w
 13144  13C7  1D03               	skipz
 13145  13C8  2BCB               	goto	u3165
 13146  13C9  0870               	movf	___lwmod@divisor,w
 13147  13CA  0272               	subwf	___lwmod@dividend,w
 13148  13CB                     u3165:	
 13149  13CB  1C03               	skipc
 13150  13CC  2BD1               	goto	l2905
 13151  13CD  0870               	movf	___lwmod@divisor,w
 13152  13CE  02F2               	subwf	___lwmod@dividend,f
 13153  13CF  0871               	movf	___lwmod@divisor+1,w
 13154  13D0  3BF3               	subwfb	___lwmod@dividend+1,f
 13155  13D1                     l2905:	
 13156  13D1  3001               	movlw	1
 13157  13D2                     u3175:	
 13158  13D2  36F1               	lsrf	___lwmod@divisor+1,f
 13159  13D3  0CF0               	rrf	___lwmod@divisor,f
 13160  13D4  0B89               	decfsz	9,f
 13161  13D5  2BD2               	goto	u3175
 13162  13D6  3001               	movlw	1
 13163  13D7  02F5               	subwf	___lwmod@counter,f
 13164  13D8  1D03               	btfss	3,2
 13165  13D9  2BC5               	goto	l2901
 13166  13DA                     l2909:	
 13167  13DA  0873               	movf	___lwmod@dividend+1,w
 13168  13DB  00F1               	movwf	?___lwmod+1
 13169  13DC  0872               	movf	___lwmod@dividend,w
 13170  13DD  00F0               	movwf	?___lwmod
 13171  13DE  0008               	return
 13172  13DF                     __end_of___lwmod:	
 13173                           
 13174                           	psect	text35
 13175  1616                     __ptext35:	
 13176 ;; *************** function ___awdiv *****************
 13177 ;; Defined at:
 13178 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
 13179 ;; Parameters:    Size  Location     Type
 13180 ;;  divisor         2    0[COMMON] int 
 13181 ;;  dividend        2    2[COMMON] int 
 13182 ;; Auto vars:     Size  Location     Type
 13183 ;;  quotient        2    7[COMMON] int 
 13184 ;;  sign            1    6[COMMON] unsigned char 
 13185 ;;  counter         1    5[COMMON] unsigned char 
 13186 ;; Return value:  Size  Location     Type
 13187 ;;                  2    0[COMMON] int 
 13188 ;; Registers used:
 13189 ;;		wreg, status,2, status,0
 13190 ;; Tracked objects:
 13191 ;;		On entry : 0/0
 13192 ;;		On exit  : 0/0
 13193 ;;		Unchanged: 0/0
 13194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13195 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13196 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13197 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13198 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13199 ;;Total ram usage:        9 bytes
 13200 ;; Hardware stack levels used:    1
 13201 ;; This function calls:
 13202 ;;		Nothing
 13203 ;; This function is called by:
 13204 ;;		_LCDWriteInt
 13205 ;; This function uses a non-reentrant model
 13206 ;;
 13207                           
 13208                           
 13209                           ;psect for function ___awdiv
 13210  1616                     ___awdiv:	
 13211                           
 13212                           ;incstack = 0
 13213                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 13214  1616  01F6               	clrf	___awdiv@sign
 13215  1617  1FF1               	btfss	___awdiv@divisor+1,7
 13216  1618  2E20               	goto	l2805
 13217  1619  09F0               	comf	___awdiv@divisor,f
 13218  161A  09F1               	comf	___awdiv@divisor+1,f
 13219  161B  0AF0               	incf	___awdiv@divisor,f
 13220  161C  1903               	skipnz
 13221  161D  0AF1               	incf	___awdiv@divisor+1,f
 13222  161E  01F6               	clrf	___awdiv@sign
 13223  161F  0AF6               	incf	___awdiv@sign,f
 13224  1620                     l2805:	
 13225  1620  1FF3               	btfss	___awdiv@dividend+1,7
 13226  1621  2E2B               	goto	l2811
 13227  1622  09F2               	comf	___awdiv@dividend,f
 13228  1623  09F3               	comf	___awdiv@dividend+1,f
 13229  1624  0AF2               	incf	___awdiv@dividend,f
 13230  1625  1903               	skipnz
 13231  1626  0AF3               	incf	___awdiv@dividend+1,f
 13232  1627  3001               	movlw	1
 13233  1628  00F4               	movwf	??___awdiv
 13234  1629  0874               	movf	??___awdiv,w
 13235  162A  06F6               	xorwf	___awdiv@sign,f
 13236  162B                     l2811:	
 13237  162B  01F7               	clrf	___awdiv@quotient
 13238  162C  01F8               	clrf	___awdiv@quotient+1
 13239  162D  0870               	movf	___awdiv@divisor,w
 13240  162E  0471               	iorwf	___awdiv@divisor+1,w
 13241  162F  1903               	btfsc	3,2
 13242  1630  2E5A               	goto	l2833
 13243  1631  01F5               	clrf	___awdiv@counter
 13244  1632  0AF5               	incf	___awdiv@counter,f
 13245  1633                     l2821:	
 13246  1633  1BF1               	btfsc	___awdiv@divisor+1,7
 13247  1634  2E3F               	goto	l2823
 13248  1635  3001               	movlw	1
 13249  1636                     u2975:	
 13250  1636  35F0               	lslf	___awdiv@divisor,f
 13251  1637  0DF1               	rlf	___awdiv@divisor+1,f
 13252  1638  0B89               	decfsz	9,f
 13253  1639  2E36               	goto	u2975
 13254  163A  3001               	movlw	1
 13255  163B  00F4               	movwf	??___awdiv
 13256  163C  0874               	movf	??___awdiv,w
 13257  163D  07F5               	addwf	___awdiv@counter,f
 13258  163E  2E33               	goto	l2821
 13259  163F                     l2823:	
 13260  163F  3001               	movlw	1
 13261  1640                     u2995:	
 13262  1640  35F7               	lslf	___awdiv@quotient,f
 13263  1641  0DF8               	rlf	___awdiv@quotient+1,f
 13264  1642  0B89               	decfsz	9,f
 13265  1643  2E40               	goto	u2995
 13266  1644  0871               	movf	___awdiv@divisor+1,w
 13267  1645  0273               	subwf	___awdiv@dividend+1,w
 13268  1646  1D03               	skipz
 13269  1647  2E4A               	goto	u3005
 13270  1648  0870               	movf	___awdiv@divisor,w
 13271  1649  0272               	subwf	___awdiv@dividend,w
 13272  164A                     u3005:	
 13273  164A  1C03               	skipc
 13274  164B  2E51               	goto	l2829
 13275  164C  0870               	movf	___awdiv@divisor,w
 13276  164D  02F2               	subwf	___awdiv@dividend,f
 13277  164E  0871               	movf	___awdiv@divisor+1,w
 13278  164F  3BF3               	subwfb	___awdiv@dividend+1,f
 13279  1650  1477               	bsf	___awdiv@quotient,0
 13280  1651                     l2829:	
 13281  1651  3001               	movlw	1
 13282  1652                     u3015:	
 13283  1652  36F1               	lsrf	___awdiv@divisor+1,f
 13284  1653  0CF0               	rrf	___awdiv@divisor,f
 13285  1654  0B89               	decfsz	9,f
 13286  1655  2E52               	goto	u3015
 13287  1656  3001               	movlw	1
 13288  1657  02F5               	subwf	___awdiv@counter,f
 13289  1658  1D03               	btfss	3,2
 13290  1659  2E3F               	goto	l2823
 13291  165A                     l2833:	
 13292  165A  0876               	movf	___awdiv@sign,w
 13293  165B  1903               	btfsc	3,2
 13294  165C  2E62               	goto	l2837
 13295  165D  09F7               	comf	___awdiv@quotient,f
 13296  165E  09F8               	comf	___awdiv@quotient+1,f
 13297  165F  0AF7               	incf	___awdiv@quotient,f
 13298  1660  1903               	skipnz
 13299  1661  0AF8               	incf	___awdiv@quotient+1,f
 13300  1662                     l2837:	
 13301  1662  0878               	movf	___awdiv@quotient+1,w
 13302  1663  00F1               	movwf	?___awdiv+1
 13303  1664  0877               	movf	___awdiv@quotient,w
 13304  1665  00F0               	movwf	?___awdiv
 13305  1666  0008               	return
 13306  1667                     __end_of___awdiv:	
 13307                           
 13308                           	psect	text36
 13309  1667                     __ptext36:	
 13310 ;; *************** function _LCDWriteCharacter *****************
 13311 ;; Defined at:
 13312 ;;		line 140 in file "lcd.c"
 13313 ;; Parameters:    Size  Location     Type
 13314 ;;  character       1    wreg     const unsigned char 
 13315 ;; Auto vars:     Size  Location     Type
 13316 ;;  character       1    9[COMMON] const unsigned char 
 13317 ;;  base            2   10[COMMON] unsigned int 
 13318 ;; Return value:  Size  Location     Type
 13319 ;;                  1    wreg      void 
 13320 ;; Registers used:
 13321 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13322 ;; Tracked objects:
 13323 ;;		On entry : 0/0
 13324 ;;		On exit  : 0/0
 13325 ;;		Unchanged: 0/0
 13326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13328 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13329 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13330 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13331 ;;Total ram usage:        6 bytes
 13332 ;; Hardware stack levels used:    1
 13333 ;; Hardware stack levels required when called:    1
 13334 ;; This function calls:
 13335 ;;		_LCDWrite
 13336 ;;		___wmul
 13337 ;; This function is called by:
 13338 ;;		_LCDWriteString
 13339 ;;		_LCDWriteInt
 13340 ;;		_main
 13341 ;; This function uses a non-reentrant model
 13342 ;;
 13343                           
 13344                           
 13345                           ;psect for function _LCDWriteCharacter
 13346  1667                     _LCDWriteCharacter:	
 13347                           
 13348                           ;incstack = 0
 13349                           ; Regs used in _LCDWriteCharacter: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13350                           ;LCDWriteCharacter@character stored from wreg
 13351  1667  00F9               	movwf	LCDWriteCharacter@character
 13352                           
 13353                           ;lcd.c: 142: uint16_t base;
 13354                           ;lcd.c: 143: base = character - 0x20;
 13355  1668  0879               	movf	LCDWriteCharacter@character,w
 13356  1669  3EE0               	addlw	224
 13357  166A  00FA               	movwf	LCDWriteCharacter@base
 13358  166B  30FF               	movlw	255
 13359  166C  1803               	skipnc
 13360  166D  3000               	movlw	0
 13361  166E  00FB               	movwf	LCDWriteCharacter@base+1
 13362                           
 13363                           ;lcd.c: 144: base *= 3;
 13364  166F  3003               	movlw	3
 13365  1670  00F0               	movwf	___wmul@multiplier
 13366  1671  3000               	movlw	0
 13367  1672  00F1               	movwf	___wmul@multiplier+1
 13368  1673  087B               	movf	LCDWriteCharacter@base+1,w
 13369  1674  00F3               	movwf	___wmul@multiplicand+1
 13370  1675  087A               	movf	LCDWriteCharacter@base,w
 13371  1676  00F2               	movwf	___wmul@multiplicand
 13372  1677  3188  2001  3196   	fcall	___wmul
 13373  167A  0871               	movf	?___wmul+1,w
 13374  167B  00FB               	movwf	LCDWriteCharacter@base+1
 13375  167C  0870               	movf	?___wmul,w
 13376  167D  00FA               	movwf	LCDWriteCharacter@base
 13377                           
 13378                           ;lcd.c: 145: LCDWrite(1,fonts[base]);
 13379  167E  087B               	movf	LCDWriteCharacter@base+1,w
 13380  167F  0085               	movwf	5
 13381  1680  087A               	movf	LCDWriteCharacter@base,w
 13382  1681  0084               	movwf	4
 13383  1682  3000               	movlw	low (_fonts| (0+32768))
 13384  1683  0784               	addwf	4,f
 13385  1684  3090               	movlw	high (_fonts| (0+32768))
 13386  1685  3D85               	addwfc	5,f
 13387  1686  0800               	movf	0,w	;code access
 13388  1687  00F6               	movwf	??_LCDWriteCharacter
 13389  1688  0876               	movf	??_LCDWriteCharacter,w
 13390  1689  00F0               	movwf	LCDWrite@data
 13391  168A  3001               	movlw	1
 13392  168B  3193  2368  3196   	fcall	_LCDWrite
 13393                           
 13394                           ;lcd.c: 146: LCDWrite(1,fonts[base + 1]);
 13395  168E  087A               	movf	LCDWriteCharacter@base,w
 13396  168F  3E01               	addlw	1
 13397  1690  00F6               	movwf	??_LCDWriteCharacter
 13398  1691  3000               	movlw	0
 13399  1692  3D7B               	addwfc	LCDWriteCharacter@base+1,w
 13400  1693  00F7               	movwf	??_LCDWriteCharacter+1
 13401  1694  3000               	movlw	low (_fonts| (0+32768))
 13402  1695  0776               	addwf	??_LCDWriteCharacter,w
 13403  1696  0084               	movwf	4
 13404  1697  3090               	movlw	high (_fonts| (0+32768))
 13405  1698  3D77               	addwfc	??_LCDWriteCharacter+1,w
 13406  1699  0085               	movwf	5
 13407  169A  0800               	movf	0,w	;code access
 13408  169B  00F8               	movwf	??_LCDWriteCharacter+2
 13409  169C  0878               	movf	??_LCDWriteCharacter+2,w
 13410  169D  00F0               	movwf	LCDWrite@data
 13411  169E  3001               	movlw	1
 13412  169F  3193  2368  3196   	fcall	_LCDWrite
 13413                           
 13414                           ;lcd.c: 147: LCDWrite(1,fonts[base + 2]);
 13415  16A2  087A               	movf	LCDWriteCharacter@base,w
 13416  16A3  3E02               	addlw	2
 13417  16A4  00F6               	movwf	??_LCDWriteCharacter
 13418  16A5  3000               	movlw	0
 13419  16A6  3D7B               	addwfc	LCDWriteCharacter@base+1,w
 13420  16A7  00F7               	movwf	??_LCDWriteCharacter+1
 13421  16A8  3000               	movlw	low (_fonts| (0+32768))
 13422  16A9  0776               	addwf	??_LCDWriteCharacter,w
 13423  16AA  0084               	movwf	4
 13424  16AB  3090               	movlw	high (_fonts| (0+32768))
 13425  16AC  3D77               	addwfc	??_LCDWriteCharacter+1,w
 13426  16AD  0085               	movwf	5
 13427  16AE  0800               	movf	0,w	;code access
 13428  16AF  00F8               	movwf	??_LCDWriteCharacter+2
 13429  16B0  0878               	movf	??_LCDWriteCharacter+2,w
 13430  16B1  00F0               	movwf	LCDWrite@data
 13431  16B2  3001               	movlw	1
 13432  16B3  3193  2368  3196   	fcall	_LCDWrite
 13433                           
 13434                           ;lcd.c: 148: LCDWrite(1, 0x00);
 13435  16B6  01F0               	clrf	LCDWrite@data
 13436  16B7  3001               	movlw	1
 13437  16B8  3193  2368         	fcall	_LCDWrite
 13438  16BA  0008               	return
 13439  16BB                     __end_of_LCDWriteCharacter:	
 13440                           
 13441                           	psect	text37
 13442  0801                     __ptext37:	
 13443 ;; *************** function ___wmul *****************
 13444 ;; Defined at:
 13445 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 13446 ;; Parameters:    Size  Location     Type
 13447 ;;  multiplier      2    0[COMMON] unsigned int 
 13448 ;;  multiplicand    2    2[COMMON] unsigned int 
 13449 ;; Auto vars:     Size  Location     Type
 13450 ;;  product         2    4[COMMON] unsigned int 
 13451 ;; Return value:  Size  Location     Type
 13452 ;;                  2    0[COMMON] unsigned int 
 13453 ;; Registers used:
 13454 ;;		wreg, status,2, status,0
 13455 ;; Tracked objects:
 13456 ;;		On entry : 0/0
 13457 ;;		On exit  : 0/0
 13458 ;;		Unchanged: 0/0
 13459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13460 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13461 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13462 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13463 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13464 ;;Total ram usage:        6 bytes
 13465 ;; Hardware stack levels used:    1
 13466 ;; This function calls:
 13467 ;;		Nothing
 13468 ;; This function is called by:
 13469 ;;		_readIAnalog
 13470 ;;		_LCDWriteCharacter
 13471 ;;		_eval_poly
 13472 ;; This function uses a non-reentrant model
 13473 ;;
 13474                           
 13475                           
 13476                           ;psect for function ___wmul
 13477  0801                     ___wmul:	
 13478                           
 13479                           ;incstack = 0
 13480                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 13481  0801  01F4               	clrf	___wmul@product
 13482  0802  01F5               	clrf	___wmul@product+1
 13483  0803                     l2321:	
 13484  0803  1C70               	btfss	___wmul@multiplier,0
 13485  0804  2809               	goto	l605
 13486  0805  0872               	movf	___wmul@multiplicand,w
 13487  0806  07F4               	addwf	___wmul@product,f
 13488  0807  0873               	movf	___wmul@multiplicand+1,w
 13489  0808  3DF5               	addwfc	___wmul@product+1,f
 13490  0809                     l605:	
 13491  0809  3001               	movlw	1
 13492  080A                     u2225:	
 13493  080A  35F2               	lslf	___wmul@multiplicand,f
 13494  080B  0DF3               	rlf	___wmul@multiplicand+1,f
 13495  080C  0B89               	decfsz	9,f
 13496  080D  280A               	goto	u2225
 13497  080E  3001               	movlw	1
 13498  080F                     u2235:	
 13499  080F  36F1               	lsrf	___wmul@multiplier+1,f
 13500  0810  0CF0               	rrf	___wmul@multiplier,f
 13501  0811  0B89               	decfsz	9,f
 13502  0812  280F               	goto	u2235
 13503  0813  0870               	movf	___wmul@multiplier,w
 13504  0814  0471               	iorwf	___wmul@multiplier+1,w
 13505  0815  1D03               	btfss	3,2
 13506  0816  2803               	goto	l2321
 13507  0817  0875               	movf	___wmul@product+1,w
 13508  0818  00F1               	movwf	?___wmul+1
 13509  0819  0874               	movf	___wmul@product,w
 13510  081A  00F0               	movwf	?___wmul
 13511  081B  0008               	return
 13512  081C                     __end_of___wmul:	
 13513                           
 13514                           	psect	text38
 13515  1368                     __ptext38:	
 13516 ;; *************** function _LCDWrite *****************
 13517 ;; Defined at:
 13518 ;;		line 281 in file "lcd.c"
 13519 ;; Parameters:    Size  Location     Type
 13520 ;;  data_or_comm    1    wreg     unsigned char 
 13521 ;;  data            1    0[COMMON] unsigned char 
 13522 ;; Auto vars:     Size  Location     Type
 13523 ;;  data_or_comm    1    2[COMMON] unsigned char 
 13524 ;;  i               1    4[COMMON] unsigned char 
 13525 ;;  d               1    3[COMMON] unsigned char 
 13526 ;; Return value:  Size  Location     Type
 13527 ;;                  1    wreg      void 
 13528 ;; Registers used:
 13529 ;;		wreg, status,2, status,0
 13530 ;; Tracked objects:
 13531 ;;		On entry : 0/0
 13532 ;;		On exit  : 0/0
 13533 ;;		Unchanged: 0/0
 13534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13535 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13536 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13537 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13538 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13539 ;;Total ram usage:        5 bytes
 13540 ;; Hardware stack levels used:    1
 13541 ;; This function calls:
 13542 ;;		Nothing
 13543 ;; This function is called by:
 13544 ;;		_gotoXY
 13545 ;;		_LCDWriteCharacter
 13546 ;;		_LCDClear
 13547 ;;		_LCDInit
 13548 ;; This function uses a non-reentrant model
 13549 ;;
 13550                           
 13551                           
 13552                           ;psect for function _LCDWrite
 13553  1368                     _LCDWrite:	
 13554                           
 13555                           ;incstack = 0
 13556                           ; Regs used in _LCDWrite: [wreg+status,2+status,0]
 13557                           ;LCDWrite@data_or_command stored from wreg
 13558  1368  00F2               	movwf	LCDWrite@data_or_command
 13559                           
 13560                           ;lcd.c: 283: uint8_t i,d;
 13561                           ;lcd.c: 285: d=data;
 13562  1369  0870               	movf	LCDWrite@data,w
 13563  136A  00F1               	movwf	??_LCDWrite
 13564  136B  0871               	movf	??_LCDWrite,w
 13565  136C  00F3               	movwf	LCDWrite@d
 13566                           
 13567                           ;lcd.c: 287: if(data_or_command == 0)
 13568  136D  0872               	movf	LCDWrite@data_or_command,w
 13569  136E  1D03               	btfss	3,2
 13570  136F  2B73               	goto	l217
 13571                           
 13572                           ;lcd.c: 288: {
 13573                           ;lcd.c: 289: LATAbits.LATA2 = 0;
 13574  1370  0020               	movlb	0	; select bank0
 13575  1371  1116               	bcf	22,2	;volatile
 13576                           
 13577                           ;lcd.c: 290: }
 13578  1372  2B75               	goto	l218
 13579  1373                     l217:	
 13580                           
 13581                           ;lcd.c: 291: else
 13582                           ;lcd.c: 292: {
 13583                           ;lcd.c: 293: LATAbits.LATA2 = 1;
 13584  1373  0020               	movlb	0	; select bank0
 13585  1374  1516               	bsf	22,2	;volatile
 13586  1375                     l218:	
 13587                           
 13588                           ;lcd.c: 294: }
 13589                           ;lcd.c: 296: LATAbits.LATA1 = 0;
 13590  1375  1096               	bcf	22,1	;volatile
 13591                           
 13592                           ;lcd.c: 298: for(i=0;i<8;i++)
 13593  1376  01F4               	clrf	LCDWrite@i
 13594  1377  3008               	movlw	8
 13595  1378  0274               	subwf	LCDWrite@i,w
 13596  1379  1803               	btfsc	3,0
 13597  137A  2B8B               	goto	l220
 13598  137B                     l219:	
 13599                           
 13600                           ;lcd.c: 299: {
 13601                           ;lcd.c: 300: LATAbits.LATA3 = 0;
 13602  137B  1196               	bcf	22,3	;volatile
 13603                           
 13604                           ;lcd.c: 302: if(d&0x80)
 13605  137C  1FF3               	btfss	LCDWrite@d,7
 13606  137D  2B7F               	goto	l221
 13607                           
 13608                           ;lcd.c: 303: {
 13609                           ;lcd.c: 304: LATAbits.LATA3 = 1;
 13610  137E  1596               	bsf	22,3	;volatile
 13611  137F                     l221:	
 13612                           
 13613                           ;lcd.c: 305: }
 13614                           ;lcd.c: 307: LATAbits.LATA4 = 1;
 13615  137F  1616               	bsf	22,4	;volatile
 13616                           
 13617                           ;lcd.c: 309: d<<=1;
 13618  1380  1003               	clrc
 13619  1381  0DF3               	rlf	LCDWrite@d,f
 13620                           
 13621                           ;lcd.c: 311: LATAbits.LATA4=0;
 13622  1382  1216               	bcf	22,4	;volatile
 13623  1383  3001               	movlw	1
 13624  1384  00F1               	movwf	??_LCDWrite
 13625  1385  0871               	movf	??_LCDWrite,w
 13626  1386  07F4               	addwf	LCDWrite@i,f
 13627  1387  3008               	movlw	8
 13628  1388  0274               	subwf	LCDWrite@i,w
 13629  1389  1C03               	skipc
 13630  138A  2B7B               	goto	l219
 13631  138B                     l220:	
 13632                           
 13633                           ;lcd.c: 312: }
 13634                           ;lcd.c: 314: LATAbits.LATA1 = 1;
 13635  138B  1496               	bsf	22,1	;volatile
 13636  138C  0008               	return
 13637  138D                     __end_of_LCDWrite:	
 13638                           
 13639                           	psect	text39
 13640  00B1                     __ptext39:	
 13641 ;; *************** function _Battery_State_Machine *****************
 13642 ;; Defined at:
 13643 ;;		line 28 in file "battery_charger.c"
 13644 ;; Parameters:    Size  Location     Type
 13645 ;;  z               1    wreg     unsigned char 
 13646 ;; Auto vars:     Size  Location     Type
 13647 ;;  z               1   35[BANK0 ] unsigned char 
 13648 ;; Return value:  Size  Location     Type
 13649 ;;                  1    wreg      void 
 13650 ;; Registers used:
 13651 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13652 ;; Tracked objects:
 13653 ;;		On entry : 0/0
 13654 ;;		On exit  : 0/0
 13655 ;;		Unchanged: 0/0
 13656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13658 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13659 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13660 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13661 ;;Total ram usage:        6 bytes
 13662 ;; Hardware stack levels used:    1
 13663 ;; Hardware stack levels required when called:    2
 13664 ;; This function calls:
 13665 ;;		___awtoft
 13666 ;;		___ftmul
 13667 ;;		___fttol
 13668 ;; This function is called by:
 13669 ;;		_main
 13670 ;; This function uses a non-reentrant model
 13671 ;;
 13672                           
 13673                           
 13674                           ;psect for function _Battery_State_Machine
 13675  00B1                     _Battery_State_Machine:	
 13676                           
 13677                           ;incstack = 0
 13678                           ; Regs used in _Battery_State_Machine: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 13679                           ;Battery_State_Machine@z stored from wreg
 13680  00B1  0020               	movlb	0	; select bank0
 13681  00B2  00C3               	movwf	Battery_State_Machine@z
 13682                           
 13683                           ;battery_charger.c: 30: if(batteryState[z]==PRECHARGE)
 13684  00B3  0843               	movf	Battery_State_Machine@z,w
 13685  00B4  3E66               	addlw	(low (_batteryState| 0))& (0+255)
 13686  00B5  0086               	movwf	6
 13687  00B6  0187               	clrf	7
 13688  00B7  3003               	movlw	3
 13689  00B8  0601               	xorwf	1,w
 13690  00B9  1D03               	btfss	3,2
 13691  00BA  2908               	goto	l2945
 13692                           
 13693                           ;battery_charger.c: 31: {
 13694                           ;battery_charger.c: 32: if(voltage[z]<1075)
 13695  00BB  3543               	lslf	Battery_State_Machine@z,w
 13696  00BC  3EB0               	addlw	(low (_voltage| 0))& (0+255)
 13697  00BD  0086               	movwf	6
 13698  00BE  0187               	clrf	7
 13699  00BF  3F40               	moviw [0]fsr1
 13700  00C0  00BE               	movwf	??_Battery_State_Machine
 13701  00C1  3F41               	moviw [1]fsr1
 13702  00C2  00BF               	movwf	??_Battery_State_Machine+1
 13703  00C3  083F               	movf	??_Battery_State_Machine+1,w
 13704  00C4  3A80               	xorlw	128
 13705  00C5  00C0               	movwf	??_Battery_State_Machine+2
 13706  00C6  3084               	movlw	132
 13707  00C7  0240               	subwf	??_Battery_State_Machine+2,w
 13708  00C8  1D03               	skipz
 13709  00C9  28CC               	goto	u3275
 13710  00CA  3033               	movlw	51
 13711  00CB  023E               	subwf	??_Battery_State_Machine,w
 13712  00CC                     u3275:	
 13713  00CC  1803               	skipnc
 13714  00CD  28F6               	goto	l2943
 13715                           
 13716                           ;battery_charger.c: 33: {
 13717                           ;battery_charger.c: 34: if(stateCounter[z]>0)
 13718  00CE  0020               	movlb	0	; select bank0
 13719  00CF  3543               	lslf	Battery_State_Machine@z,w
 13720  00D0  3EC0               	addlw	(low (_stateCounter| 0))& (0+255)
 13721  00D1  0086               	movwf	6
 13722  00D2  0187               	clrf	7
 13723  00D3  3F40               	moviw [0]fsr1
 13724  00D4  00BE               	movwf	??_Battery_State_Machine
 13725  00D5  3F41               	moviw [1]fsr1
 13726  00D6  00BF               	movwf	??_Battery_State_Machine+1
 13727  00D7  083F               	movf	??_Battery_State_Machine+1,w
 13728  00D8  3A80               	xorlw	128
 13729  00D9  00C0               	movwf	??_Battery_State_Machine+2
 13730  00DA  3080               	movlw	128
 13731  00DB  0240               	subwf	??_Battery_State_Machine+2,w
 13732  00DC  1D03               	skipz
 13733  00DD  28E0               	goto	u3285
 13734  00DE  3001               	movlw	1
 13735  00DF  023E               	subwf	??_Battery_State_Machine,w
 13736  00E0                     u3285:	
 13737  00E0  1C03               	skipc
 13738  00E1  28EE               	goto	l2941
 13739                           
 13740                           ;battery_charger.c: 35: {
 13741                           ;battery_charger.c: 36: stateCounter[z]-=1;
 13742  00E2  0020               	movlb	0	; select bank0
 13743  00E3  3543               	lslf	Battery_State_Machine@z,w
 13744  00E4  3EC0               	addlw	(low (_stateCounter| 0))& (0+255)
 13745  00E5  0086               	movwf	6
 13746  00E6  0187               	clrf	7
 13747  00E7  30FF               	movlw	255
 13748  00E8  0781               	addwf	1,f
 13749  00E9  3141               	addfsr 1,1
 13750  00EA  30FF               	movlw	255
 13751  00EB  3D81               	addwfc	1,f
 13752  00EC  317F               	addfsr 1,-1
 13753                           
 13754                           ;battery_charger.c: 37: }
 13755  00ED  0008               	return
 13756  00EE                     l2941:	
 13757                           
 13758                           ;battery_charger.c: 38: else
 13759                           ;battery_charger.c: 39: {
 13760                           ;battery_charger.c: 40: batteryState[z]=FAULT;
 13761  00EE  0020               	movlb	0	; select bank0
 13762  00EF  0843               	movf	Battery_State_Machine@z,w
 13763  00F0  3E66               	addlw	(low (_batteryState| 0))& (0+255)
 13764  00F1  0086               	movwf	6
 13765  00F2  0187               	clrf	7
 13766  00F3  0181               	clrf	1
 13767  00F4  0A81               	incf	1,f
 13768                           
 13769                           ;battery_charger.c: 41: }
 13770                           ;battery_charger.c: 42: }
 13771  00F5  0008               	return
 13772  00F6                     l2943:	
 13773                           
 13774                           ;battery_charger.c: 43: else
 13775                           ;battery_charger.c: 44: {
 13776                           ;battery_charger.c: 45: batteryState[z]=CHARGE;
 13777  00F6  3004               	movlw	4
 13778  00F7  0020               	movlb	0	; select bank0
 13779  00F8  00BE               	movwf	??_Battery_State_Machine
 13780  00F9  0843               	movf	Battery_State_Machine@z,w
 13781  00FA  3E66               	addlw	(low (_batteryState| 0))& (0+255)
 13782  00FB  0086               	movwf	6
 13783  00FC  0187               	clrf	7
 13784  00FD  083E               	movf	??_Battery_State_Machine,w
 13785  00FE  0081               	movwf	1
 13786                           
 13787                           ;battery_charger.c: 46: Iref[z]=35;
 13788  00FF  3543               	lslf	Battery_State_Machine@z,w
 13789  0100  3EC4               	addlw	(low (_Iref| 0))& (0+255)
 13790  0101  0086               	movwf	6
 13791  0102  0187               	clrf	7
 13792  0103  3023               	movlw	35
 13793  0104  3FC0               	movwi [0]fsr1
 13794  0105  3000               	movlw	0
 13795  0106  3FC1               	movwi [1]fsr1
 13796                           
 13797                           ;battery_charger.c: 47: }
 13798                           ;battery_charger.c: 48: }
 13799  0107  0008               	return
 13800  0108                     l2945:	
 13801                           
 13802                           ;battery_charger.c: 49: else if(batteryState[z]==CHARGE)
 13803  0108  0843               	movf	Battery_State_Machine@z,w
 13804  0109  3E66               	addlw	(low (_batteryState| 0))& (0+255)
 13805  010A  0086               	movwf	6
 13806  010B  0187               	clrf	7
 13807  010C  3004               	movlw	4
 13808  010D  0601               	xorwf	1,w
 13809  010E  1D03               	btfss	3,2
 13810  010F  29CA               	goto	l2965
 13811                           
 13812                           ;battery_charger.c: 50: {
 13813                           ;battery_charger.c: 51: Vref[z]=1425+(int16_t)((250-batteryTemp)*.24);
 13814  0110  096D               	comf	_batteryTemp,w
 13815  0111  00BE               	movwf	??_Battery_State_Machine
 13816  0112  096E               	comf	_batteryTemp+1,w
 13817  0113  00BF               	movwf	??_Battery_State_Machine+1
 13818  0114  0ABE               	incf	??_Battery_State_Machine,f
 13819  0115  1903               	skipnz
 13820  0116  0ABF               	incf	??_Battery_State_Machine+1,f
 13821  0117  083E               	movf	??_Battery_State_Machine,w
 13822  0118  3EFA               	addlw	250
 13823  0119  00F8               	movwf	___awtoft@c
 13824  011A  3000               	movlw	0
 13825  011B  3D3F               	addwfc	??_Battery_State_Machine+1,w
 13826  011C  00F9               	movwf	___awtoft@c+1
 13827  011D  3193  2348  3180   	fcall	___awtoft
 13828  0120  0878               	movf	?___awtoft,w
 13829  0121  0020               	movlb	0	; select bank0
 13830  0122  00A3               	movwf	___ftmul@f2
 13831  0123  0879               	movf	?___awtoft+1,w
 13832  0124  00A4               	movwf	___ftmul@f2+1
 13833  0125  087A               	movf	?___awtoft+2,w
 13834  0126  00A5               	movwf	___ftmul@f2+2
 13835  0127  30C3               	movlw	195
 13836  0128  00A0               	movwf	___ftmul@f1
 13837  0129  3075               	movlw	117
 13838  012A  00A1               	movwf	___ftmul@f1+1
 13839  012B  303E               	movlw	62
 13840  012C  00A2               	movwf	___ftmul@f1+2
 13841  012D  318A  2239  3180   	fcall	___ftmul
 13842  0130  0020               	movlb	0	; select bank0
 13843  0131  0820               	movf	?___ftmul,w
 13844  0132  00B0               	movwf	___fttol@f1
 13845  0133  0821               	movf	?___ftmul+1,w
 13846  0134  00B1               	movwf	___fttol@f1+1
 13847  0135  0822               	movf	?___ftmul+2,w
 13848  0136  00B2               	movwf	___fttol@f1+2
 13849  0137  3189  2102  3180   	fcall	___fttol
 13850  013A  0020               	movlb	0	; select bank0
 13851  013B  0830               	movf	?___fttol,w
 13852  013C  3E91               	addlw	145
 13853  013D  00C0               	movwf	??_Battery_State_Machine+2
 13854  013E  3005               	movlw	5
 13855  013F  3D31               	addwfc	?___fttol+1,w
 13856  0140  00C1               	movwf	??_Battery_State_Machine+3
 13857  0141  3543               	lslf	Battery_State_Machine@z,w
 13858  0142  3E5C               	addlw	(low (_Vref| 0))& (0+255)
 13859  0143  0086               	movwf	6
 13860  0144  0187               	clrf	7
 13861  0145  0840               	movf	??_Battery_State_Machine+2,w
 13862  0146  3FC0               	movwi [0]fsr1
 13863  0147  0841               	movf	??_Battery_State_Machine+3,w
 13864  0148  3FC1               	movwi [1]fsr1
 13865                           
 13866                           ;battery_charger.c: 52: if(!(Imode[z]))
 13867  0149  0843               	movf	Battery_State_Machine@z,w
 13868  014A  3E64               	addlw	(low (_Imode| 0))& (0+255)
 13869  014B  0086               	movwf	6
 13870  014C  0187               	clrf	7
 13871  014D  0801               	movf	1,w
 13872  014E  1D03               	btfss	3,2
 13873  014F  29B1               	goto	l2961
 13874                           
 13875                           ;battery_charger.c: 53: {
 13876                           ;battery_charger.c: 54: if(current[z] < Imin[z])
 13877  0150  3543               	lslf	Battery_State_Machine@z,w
 13878  0151  3ECC               	addlw	(low (_Imin| 0))& (0+255)
 13879  0152  0086               	movwf	6
 13880  0153  0187               	clrf	7
 13881  0154  3F40               	moviw [0]fsr1
 13882  0155  00BE               	movwf	??_Battery_State_Machine
 13883  0156  3F41               	moviw [1]fsr1
 13884  0157  00BF               	movwf	??_Battery_State_Machine+1
 13885  0158  3543               	lslf	Battery_State_Machine@z,w
 13886  0159  3EB8               	addlw	(low (_current| 0))& (0+255)
 13887  015A  0086               	movwf	6
 13888  015B  0187               	clrf	7
 13889  015C  3F40               	moviw [0]fsr1
 13890  015D  00C0               	movwf	??_Battery_State_Machine+2
 13891  015E  3F41               	moviw [1]fsr1
 13892  015F  00C1               	movwf	??_Battery_State_Machine+3
 13893  0160  0841               	movf	??_Battery_State_Machine+3,w
 13894  0161  3A80               	xorlw	128
 13895  0162  00C2               	movwf	??_Battery_State_Machine+4
 13896  0163  083F               	movf	??_Battery_State_Machine+1,w
 13897  0164  3A80               	xorlw	128
 13898  0165  0242               	subwf	??_Battery_State_Machine+4,w
 13899  0166  1D03               	skipz
 13900  0167  296A               	goto	u3315
 13901  0168  083E               	movf	??_Battery_State_Machine,w
 13902  0169  0240               	subwf	??_Battery_State_Machine+2,w
 13903  016A                     u3315:	
 13904  016A  1803               	skipnc
 13905  016B  2997               	goto	l2957
 13906                           
 13907                           ;battery_charger.c: 55: {
 13908                           ;battery_charger.c: 56: IminCount[z]-=2;
 13909  016C  0020               	movlb	0	; select bank0
 13910  016D  3543               	lslf	Battery_State_Machine@z,w
 13911  016E  3EC8               	addlw	(low (_IminCount| 0))& (0+255)
 13912  016F  0086               	movwf	6
 13913  0170  0187               	clrf	7
 13914  0171  3002               	movlw	2
 13915  0172  0281               	subwf	1,f
 13916  0173  3141               	addfsr 1,1
 13917  0174  3000               	movlw	0
 13918  0175  3B81               	subwfb	1,f
 13919  0176  317F               	addfsr 1,-1
 13920                           
 13921                           ;battery_charger.c: 57: if(IminCount[z]<10)
 13922  0177  3543               	lslf	Battery_State_Machine@z,w
 13923  0178  3EC8               	addlw	(low (_IminCount| 0))& (0+255)
 13924  0179  0086               	movwf	6
 13925  017A  0187               	clrf	7
 13926  017B  3F40               	moviw [0]fsr1
 13927  017C  00BE               	movwf	??_Battery_State_Machine
 13928  017D  3F41               	moviw [1]fsr1
 13929  017E  00BF               	movwf	??_Battery_State_Machine+1
 13930  017F  3000               	movlw	0
 13931  0180  023F               	subwf	??_Battery_State_Machine+1,w
 13932  0181  300A               	movlw	10
 13933  0182  1903               	skipnz
 13934  0183  023E               	subwf	??_Battery_State_Machine,w
 13935  0184  1803               	skipnc
 13936  0185  0008               	return
 13937                           
 13938                           ;battery_charger.c: 58: {
 13939                           ;battery_charger.c: 59: batteryState[z] = FLOAT;
 13940  0186  3005               	movlw	5
 13941  0187  00BE               	movwf	??_Battery_State_Machine
 13942  0188  0843               	movf	Battery_State_Machine@z,w
 13943  0189  3E66               	addlw	(low (_batteryState| 0))& (0+255)
 13944  018A  0086               	movwf	6
 13945  018B  0187               	clrf	7
 13946  018C  083E               	movf	??_Battery_State_Machine,w
 13947  018D  0081               	movwf	1
 13948                           
 13949                           ;battery_charger.c: 60: IminCount[z]=10;
 13950  018E  3543               	lslf	Battery_State_Machine@z,w
 13951  018F  3EC8               	addlw	(low (_IminCount| 0))& (0+255)
 13952  0190  0086               	movwf	6
 13953  0191  0187               	clrf	7
 13954  0192  300A               	movlw	10
 13955  0193  3FC0               	movwi [0]fsr1
 13956  0194  3000               	movlw	0
 13957  0195  3FC1               	movwi [1]fsr1
 13958                           
 13959                           ;battery_charger.c: 61: }
 13960                           ;battery_charger.c: 62: }
 13961  0196  0008               	return
 13962  0197                     l2957:	
 13963                           
 13964                           ;battery_charger.c: 63: else
 13965                           ;battery_charger.c: 64: {
 13966                           ;battery_charger.c: 65: if(IminCount[z]<60)IminCount[z]+=1;
 13967  0197  0020               	movlb	0	; select bank0
 13968  0198  3543               	lslf	Battery_State_Machine@z,w
 13969  0199  3EC8               	addlw	(low (_IminCount| 0))& (0+255)
 13970  019A  0086               	movwf	6
 13971  019B  0187               	clrf	7
 13972  019C  3F40               	moviw [0]fsr1
 13973  019D  00BE               	movwf	??_Battery_State_Machine
 13974  019E  3F41               	moviw [1]fsr1
 13975  019F  00BF               	movwf	??_Battery_State_Machine+1
 13976  01A0  3000               	movlw	0
 13977  01A1  023F               	subwf	??_Battery_State_Machine+1,w
 13978  01A2  303C               	movlw	60
 13979  01A3  1903               	skipnz
 13980  01A4  023E               	subwf	??_Battery_State_Machine,w
 13981  01A5  1803               	skipnc
 13982  01A6  0008               	return
 13983  01A7  3543               	lslf	Battery_State_Machine@z,w
 13984  01A8  3EC8               	addlw	(low (_IminCount| 0))& (0+255)
 13985  01A9  0086               	movwf	6
 13986  01AA  0187               	clrf	7
 13987  01AB  3001               	movlw	1
 13988  01AC  0781               	addwf	1,f
 13989  01AD  3141               	addfsr 1,1
 13990  01AE  1803               	skipnc
 13991  01AF  0A81               	incf	1,f
 13992                           
 13993                           ;battery_charger.c: 66: }
 13994                           ;battery_charger.c: 67: }
 13995  01B0  0008               	return
 13996  01B1                     l2961:	
 13997                           
 13998                           ;battery_charger.c: 68: else if(IminCount[z]<60)IminCount[z]+=1;
 13999  01B1  3543               	lslf	Battery_State_Machine@z,w
 14000  01B2  3EC8               	addlw	(low (_IminCount| 0))& (0+255)
 14001  01B3  0086               	movwf	6
 14002  01B4  0187               	clrf	7
 14003  01B5  3F40               	moviw [0]fsr1
 14004  01B6  00BE               	movwf	??_Battery_State_Machine
 14005  01B7  3F41               	moviw [1]fsr1
 14006  01B8  00BF               	movwf	??_Battery_State_Machine+1
 14007  01B9  3000               	movlw	0
 14008  01BA  023F               	subwf	??_Battery_State_Machine+1,w
 14009  01BB  303C               	movlw	60
 14010  01BC  1903               	skipnz
 14011  01BD  023E               	subwf	??_Battery_State_Machine,w
 14012  01BE  1803               	skipnc
 14013  01BF  0008               	return
 14014  01C0  3543               	lslf	Battery_State_Machine@z,w
 14015  01C1  3EC8               	addlw	(low (_IminCount| 0))& (0+255)
 14016  01C2  0086               	movwf	6
 14017  01C3  0187               	clrf	7
 14018  01C4  3001               	movlw	1
 14019  01C5  0781               	addwf	1,f
 14020  01C6  3141               	addfsr 1,1
 14021  01C7  1803               	skipnc
 14022  01C8  0A81               	incf	1,f
 14023                           
 14024                           ;battery_charger.c: 69: }
 14025  01C9  0008               	return
 14026  01CA                     l2965:	
 14027                           
 14028                           ;battery_charger.c: 70: else if(batteryState[z] == FLOAT)
 14029  01CA  0843               	movf	Battery_State_Machine@z,w
 14030  01CB  3E66               	addlw	(low (_batteryState| 0))& (0+255)
 14031  01CC  0086               	movwf	6
 14032  01CD  0187               	clrf	7
 14033  01CE  3005               	movlw	5
 14034  01CF  0601               	xorwf	1,w
 14035  01D0  1D03               	btfss	3,2
 14036  01D1  2A18               	goto	l2973
 14037                           
 14038                           ;battery_charger.c: 71: {
 14039                           ;battery_charger.c: 72: Vref[z]=1350+(int16_t)((250-batteryTemp)*.24);
 14040  01D2  096D               	comf	_batteryTemp,w
 14041  01D3  00BE               	movwf	??_Battery_State_Machine
 14042  01D4  096E               	comf	_batteryTemp+1,w
 14043  01D5  00BF               	movwf	??_Battery_State_Machine+1
 14044  01D6  0ABE               	incf	??_Battery_State_Machine,f
 14045  01D7  1903               	skipnz
 14046  01D8  0ABF               	incf	??_Battery_State_Machine+1,f
 14047  01D9  083E               	movf	??_Battery_State_Machine,w
 14048  01DA  3EFA               	addlw	250
 14049  01DB  00F8               	movwf	___awtoft@c
 14050  01DC  3000               	movlw	0
 14051  01DD  3D3F               	addwfc	??_Battery_State_Machine+1,w
 14052  01DE  00F9               	movwf	___awtoft@c+1
 14053  01DF  3193  2348  3180   	fcall	___awtoft
 14054  01E2  0878               	movf	?___awtoft,w
 14055  01E3  0020               	movlb	0	; select bank0
 14056  01E4  00A3               	movwf	___ftmul@f2
 14057  01E5  0879               	movf	?___awtoft+1,w
 14058  01E6  00A4               	movwf	___ftmul@f2+1
 14059  01E7  087A               	movf	?___awtoft+2,w
 14060  01E8  00A5               	movwf	___ftmul@f2+2
 14061  01E9  30C3               	movlw	195
 14062  01EA  00A0               	movwf	___ftmul@f1
 14063  01EB  3075               	movlw	117
 14064  01EC  00A1               	movwf	___ftmul@f1+1
 14065  01ED  303E               	movlw	62
 14066  01EE  00A2               	movwf	___ftmul@f1+2
 14067  01EF  318A  2239  3180   	fcall	___ftmul
 14068  01F2  0020               	movlb	0	; select bank0
 14069  01F3  0820               	movf	?___ftmul,w
 14070  01F4  00B0               	movwf	___fttol@f1
 14071  01F5  0821               	movf	?___ftmul+1,w
 14072  01F6  00B1               	movwf	___fttol@f1+1
 14073  01F7  0822               	movf	?___ftmul+2,w
 14074  01F8  00B2               	movwf	___fttol@f1+2
 14075  01F9  3189  2102         	fcall	___fttol
 14076  01FB  0020               	movlb	0	; select bank0
 14077  01FC  0830               	movf	?___fttol,w
 14078  01FD  3E46               	addlw	70
 14079  01FE  00C0               	movwf	??_Battery_State_Machine+2
 14080  01FF  3005               	movlw	5
 14081  0200  3D31               	addwfc	?___fttol+1,w
 14082  0201  00C1               	movwf	??_Battery_State_Machine+3
 14083  0202  3543               	lslf	Battery_State_Machine@z,w
 14084  0203  3E5C               	addlw	(low (_Vref| 0))& (0+255)
 14085  0204  0086               	movwf	6
 14086  0205  0187               	clrf	7
 14087  0206  0840               	movf	??_Battery_State_Machine+2,w
 14088  0207  3FC0               	movwi [0]fsr1
 14089  0208  0841               	movf	??_Battery_State_Machine+3,w
 14090  0209  3FC1               	movwi [1]fsr1
 14091                           
 14092                           ;battery_charger.c: 73: Iref[z]=15;
 14093  020A  3543               	lslf	Battery_State_Machine@z,w
 14094  020B  3EC4               	addlw	(low (_Iref| 0))& (0+255)
 14095  020C  0086               	movwf	6
 14096  020D  0187               	clrf	7
 14097  020E  300F               	movlw	15
 14098  020F  3FC0               	movwi [0]fsr1
 14099  0210  3000               	movlw	0
 14100  0211  3FC1               	movwi [1]fsr1
 14101                           
 14102                           ;battery_charger.c: 74: Imode[z]=0;
 14103  0212  0843               	movf	Battery_State_Machine@z,w
 14104  0213  3E64               	addlw	(low (_Imode| 0))& (0+255)
 14105  0214  0086               	movwf	6
 14106  0215  0187               	clrf	7
 14107  0216  0181               	clrf	1
 14108                           
 14109                           ;battery_charger.c: 75: }
 14110  0217  0008               	return
 14111  0218                     l2973:	
 14112                           
 14113                           ;battery_charger.c: 76: else
 14114                           ;battery_charger.c: 77: if(batteryState[z] == FAULT)
 14115  0218  0843               	movf	Battery_State_Machine@z,w
 14116  0219  3E66               	addlw	(low (_batteryState| 0))& (0+255)
 14117  021A  0086               	movwf	6
 14118  021B  0187               	clrf	7
 14119  021C  0301               	decf	1,w
 14120  021D  1D03               	btfss	3,2
 14121  021E  0008               	return
 14122                           
 14123                           ;battery_charger.c: 78: {
 14124                           ;battery_charger.c: 79: batteryState[z]=PRECHARGE;
 14125  021F  3003               	movlw	3
 14126  0220  00BE               	movwf	??_Battery_State_Machine
 14127  0221  0843               	movf	Battery_State_Machine@z,w
 14128  0222  3E66               	addlw	(low (_batteryState| 0))& (0+255)
 14129  0223  0086               	movwf	6
 14130  0224  0187               	clrf	7
 14131  0225  083E               	movf	??_Battery_State_Machine,w
 14132  0226  0081               	movwf	1
 14133  0227  0008               	return
 14134  0228                     __end_of_Battery_State_Machine:	
 14135                           
 14136                           	psect	text40
 14137  0902                     __ptext40:	
 14138 ;; *************** function ___fttol *****************
 14139 ;; Defined at:
 14140 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
 14141 ;; Parameters:    Size  Location     Type
 14142 ;;  f1              3   16[BANK0 ] float 
 14143 ;; Auto vars:     Size  Location     Type
 14144 ;;  lval            4   25[BANK0 ] unsigned long 
 14145 ;;  exp1            1   29[BANK0 ] unsigned char 
 14146 ;;  sign1           1   24[BANK0 ] unsigned char 
 14147 ;; Return value:  Size  Location     Type
 14148 ;;                  4   16[BANK0 ] long 
 14149 ;; Registers used:
 14150 ;;		wreg, status,2, status,0
 14151 ;; Tracked objects:
 14152 ;;		On entry : 0/0
 14153 ;;		On exit  : 0/0
 14154 ;;		Unchanged: 0/0
 14155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14156 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14157 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14158 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14159 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14160 ;;Total ram usage:       14 bytes
 14161 ;; Hardware stack levels used:    1
 14162 ;; This function calls:
 14163 ;;		Nothing
 14164 ;; This function is called by:
 14165 ;;		_tempCalc
 14166 ;;		_main
 14167 ;;		_calculateCurrent0
 14168 ;;		_calculateCurrent1
 14169 ;;		_calculateCurrent2
 14170 ;;		_calculateCurrent3
 14171 ;;		_Init_Battery_State_Machine
 14172 ;;		_Battery_State_Machine
 14173 ;;		_cc_cv_mode
 14174 ;; This function uses a non-reentrant model
 14175 ;;
 14176                           
 14177                           
 14178                           ;psect for function ___fttol
 14179  0902                     ___fttol:	
 14180                           
 14181                           ;incstack = 0
 14182                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 14183  0902  0020               	movlb	0	; select bank0
 14184  0903  0830               	movf	___fttol@f1,w
 14185  0904  00B4               	movwf	??___fttol
 14186  0905  0831               	movf	___fttol@f1+1,w
 14187  0906  00B5               	movwf	??___fttol+1
 14188  0907  0832               	movf	___fttol@f1+2,w
 14189  0908  00B6               	movwf	??___fttol+2
 14190  0909  1003               	clrc
 14191  090A  0D35               	rlf	??___fttol+1,w
 14192  090B  0D36               	rlf	??___fttol+2,w
 14193  090C  00B7               	movwf	??___fttol+3
 14194  090D  0837               	movf	??___fttol+3,w
 14195  090E  00BD               	movwf	___fttol@exp1
 14196  090F  083D               	movf	___fttol@exp1,w
 14197  0910  1D03               	btfss	3,2
 14198  0911  291B               	goto	l2493
 14199  0912  3000               	movlw	0
 14200  0913  00B3               	movwf	?___fttol+3
 14201  0914  3000               	movlw	0
 14202  0915  00B2               	movwf	?___fttol+2
 14203  0916  3000               	movlw	0
 14204  0917  00B1               	movwf	?___fttol+1
 14205  0918  3000               	movlw	0
 14206  0919  00B0               	movwf	?___fttol
 14207  091A  0008               	return
 14208  091B                     l2493:	
 14209  091B  0830               	movf	___fttol@f1,w
 14210  091C  00B4               	movwf	??___fttol
 14211  091D  0831               	movf	___fttol@f1+1,w
 14212  091E  00B5               	movwf	??___fttol+1
 14213  091F  0832               	movf	___fttol@f1+2,w
 14214  0920  00B6               	movwf	??___fttol+2
 14215  0921  3017               	movlw	23
 14216  0922                     u2655:	
 14217  0922  36B6               	lsrf	??___fttol+2,f
 14218  0923  0CB5               	rrf	??___fttol+1,f
 14219  0924  0CB4               	rrf	??___fttol,f
 14220  0925  0B89               	decfsz	9,f
 14221  0926  2922               	goto	u2655
 14222  0927  0834               	movf	??___fttol,w
 14223  0928  00B7               	movwf	??___fttol+3
 14224  0929  0837               	movf	??___fttol+3,w
 14225  092A  00B8               	movwf	___fttol@sign1
 14226  092B  17B1               	bsf	___fttol@f1+1,7
 14227  092C  30FF               	movlw	255
 14228  092D  05B0               	andwf	___fttol@f1,f
 14229  092E  30FF               	movlw	255
 14230  092F  05B1               	andwf	___fttol@f1+1,f
 14231  0930  3000               	movlw	0
 14232  0931  05B2               	andwf	___fttol@f1+2,f
 14233  0932  0830               	movf	___fttol@f1,w
 14234  0933  00B9               	movwf	___fttol@lval
 14235  0934  0831               	movf	___fttol@f1+1,w
 14236  0935  00BA               	movwf	___fttol@lval+1
 14237  0936  0832               	movf	___fttol@f1+2,w
 14238  0937  00BB               	movwf	___fttol@lval+2
 14239  0938  01BC               	clrf	___fttol@lval+3
 14240  0939  308E               	movlw	142
 14241  093A  02BD               	subwf	___fttol@exp1,f
 14242  093B  1FBD               	btfss	___fttol@exp1,7
 14243  093C  2959               	goto	l2513
 14244  093D  083D               	movf	___fttol@exp1,w
 14245  093E  3A80               	xorlw	128
 14246  093F  3E8F               	addlw	143
 14247  0940  1803               	skipnc
 14248  0941  294B               	goto	l2511
 14249  0942  3000               	movlw	0
 14250  0943  00B3               	movwf	?___fttol+3
 14251  0944  3000               	movlw	0
 14252  0945  00B2               	movwf	?___fttol+2
 14253  0946  3000               	movlw	0
 14254  0947  00B1               	movwf	?___fttol+1
 14255  0948  3000               	movlw	0
 14256  0949  00B0               	movwf	?___fttol
 14257  094A  0008               	return
 14258  094B                     l2511:	
 14259  094B  3001               	movlw	1
 14260  094C                     u2685:	
 14261  094C  36BC               	lsrf	___fttol@lval+3,f
 14262  094D  0CBB               	rrf	___fttol@lval+2,f
 14263  094E  0CBA               	rrf	___fttol@lval+1,f
 14264  094F  0CB9               	rrf	___fttol@lval,f
 14265  0950  0B89               	decfsz	9,f
 14266  0951  294C               	goto	u2685
 14267  0952  3001               	movlw	1
 14268  0953  00B4               	movwf	??___fttol
 14269  0954  0834               	movf	??___fttol,w
 14270  0955  07BD               	addwf	___fttol@exp1,f
 14271  0956  1903               	btfsc	3,2
 14272  0957  2972               	goto	l2521
 14273  0958  294B               	goto	l2511
 14274  0959                     l2513:	
 14275  0959  3018               	movlw	24
 14276  095A  023D               	subwf	___fttol@exp1,w
 14277  095B  1C03               	skipc
 14278  095C  296F               	goto	l857
 14279  095D  3000               	movlw	0
 14280  095E  00B3               	movwf	?___fttol+3
 14281  095F  3000               	movlw	0
 14282  0960  00B2               	movwf	?___fttol+2
 14283  0961  3000               	movlw	0
 14284  0962  00B1               	movwf	?___fttol+1
 14285  0963  3000               	movlw	0
 14286  0964  00B0               	movwf	?___fttol
 14287  0965  0008               	return
 14288  0966                     l2519:	
 14289  0966  3001               	movlw	1
 14290  0967                     u2715:	
 14291  0967  35B9               	lslf	___fttol@lval,f
 14292  0968  0DBA               	rlf	___fttol@lval+1,f
 14293  0969  0DBB               	rlf	___fttol@lval+2,f
 14294  096A  0DBC               	rlf	___fttol@lval+3,f
 14295  096B  0B89               	decfsz	9,f
 14296  096C  2967               	goto	u2715
 14297  096D  3001               	movlw	1
 14298  096E  02BD               	subwf	___fttol@exp1,f
 14299  096F                     l857:	
 14300  096F  083D               	movf	___fttol@exp1,w
 14301  0970  1D03               	btfss	3,2
 14302  0971  2966               	goto	l2519
 14303  0972                     l2521:	
 14304  0972  0838               	movf	___fttol@sign1,w
 14305  0973  1903               	btfsc	3,2
 14306  0974  2980               	goto	l2525
 14307  0975  09B9               	comf	___fttol@lval,f
 14308  0976  09BA               	comf	___fttol@lval+1,f
 14309  0977  09BB               	comf	___fttol@lval+2,f
 14310  0978  09BC               	comf	___fttol@lval+3,f
 14311  0979  0AB9               	incf	___fttol@lval,f
 14312  097A  1903               	skipnz
 14313  097B  0ABA               	incf	___fttol@lval+1,f
 14314  097C  1903               	skipnz
 14315  097D  0ABB               	incf	___fttol@lval+2,f
 14316  097E  1903               	skipnz
 14317  097F  0ABC               	incf	___fttol@lval+3,f
 14318  0980                     l2525:	
 14319  0980  083C               	movf	___fttol@lval+3,w
 14320  0981  00B3               	movwf	?___fttol+3
 14321  0982  083B               	movf	___fttol@lval+2,w
 14322  0983  00B2               	movwf	?___fttol+2
 14323  0984  083A               	movf	___fttol@lval+1,w
 14324  0985  00B1               	movwf	?___fttol+1
 14325  0986  0839               	movf	___fttol@lval,w
 14326  0987  00B0               	movwf	?___fttol
 14327  0988  0008               	return
 14328  0989                     __end_of___fttol:	
 14329                           
 14330                           	psect	text41
 14331  0A39                     __ptext41:	
 14332 ;; *************** function ___ftmul *****************
 14333 ;; Defined at:
 14334 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
 14335 ;; Parameters:    Size  Location     Type
 14336 ;;  f1              3    0[BANK0 ] float 
 14337 ;;  f2              3    3[BANK0 ] float 
 14338 ;; Auto vars:     Size  Location     Type
 14339 ;;  f3_as_produc    3   11[BANK0 ] unsigned um
 14340 ;;  sign            1   15[BANK0 ] unsigned char 
 14341 ;;  cntr            1   14[BANK0 ] unsigned char 
 14342 ;;  exp             1   10[BANK0 ] unsigned char 
 14343 ;; Return value:  Size  Location     Type
 14344 ;;                  3    0[BANK0 ] float 
 14345 ;; Registers used:
 14346 ;;		wreg, status,2, status,0, pclath, cstack
 14347 ;; Tracked objects:
 14348 ;;		On entry : 0/0
 14349 ;;		On exit  : 0/0
 14350 ;;		Unchanged: 0/0
 14351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14352 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14353 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14354 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14355 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14356 ;;Total ram usage:       16 bytes
 14357 ;; Hardware stack levels used:    1
 14358 ;; Hardware stack levels required when called:    1
 14359 ;; This function calls:
 14360 ;;		___ftpack
 14361 ;; This function is called by:
 14362 ;;		_Init_Battery_State_Machine
 14363 ;;		_Battery_State_Machine
 14364 ;;		_cc_cv_mode
 14365 ;;		_tempCalc
 14366 ;;		_log
 14367 ;;		_eval_poly
 14368 ;; This function uses a non-reentrant model
 14369 ;;
 14370                           
 14371                           
 14372                           ;psect for function ___ftmul
 14373  0A39                     ___ftmul:	
 14374                           
 14375                           ;incstack = 0
 14376                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 14377  0A39  0020               	movlb	0	; select bank0
 14378  0A3A  0820               	movf	___ftmul@f1,w
 14379  0A3B  00A6               	movwf	??___ftmul
 14380  0A3C  0821               	movf	___ftmul@f1+1,w
 14381  0A3D  00A7               	movwf	??___ftmul+1
 14382  0A3E  0822               	movf	___ftmul@f1+2,w
 14383  0A3F  00A8               	movwf	??___ftmul+2
 14384  0A40  1003               	clrc
 14385  0A41  0D27               	rlf	??___ftmul+1,w
 14386  0A42  0D28               	rlf	??___ftmul+2,w
 14387  0A43  00A9               	movwf	??___ftmul+3
 14388  0A44  0829               	movf	??___ftmul+3,w
 14389  0A45  00AA               	movwf	___ftmul@exp
 14390  0A46  082A               	movf	___ftmul@exp,w
 14391  0A47  1D03               	btfss	3,2
 14392  0A48  2A50               	goto	l2409
 14393  0A49  3000               	movlw	0
 14394  0A4A  00A0               	movwf	?___ftmul
 14395  0A4B  3000               	movlw	0
 14396  0A4C  00A1               	movwf	?___ftmul+1
 14397  0A4D  3000               	movlw	0
 14398  0A4E  00A2               	movwf	?___ftmul+2
 14399  0A4F  0008               	return
 14400  0A50                     l2409:	
 14401  0A50  0823               	movf	___ftmul@f2,w
 14402  0A51  00A6               	movwf	??___ftmul
 14403  0A52  0824               	movf	___ftmul@f2+1,w
 14404  0A53  00A7               	movwf	??___ftmul+1
 14405  0A54  0825               	movf	___ftmul@f2+2,w
 14406  0A55  00A8               	movwf	??___ftmul+2
 14407  0A56  1003               	clrc
 14408  0A57  0D27               	rlf	??___ftmul+1,w
 14409  0A58  0D28               	rlf	??___ftmul+2,w
 14410  0A59  00A9               	movwf	??___ftmul+3
 14411  0A5A  0829               	movf	??___ftmul+3,w
 14412  0A5B  00AF               	movwf	___ftmul@sign
 14413  0A5C  082F               	movf	___ftmul@sign,w
 14414  0A5D  1D03               	btfss	3,2
 14415  0A5E  2A66               	goto	l2415
 14416  0A5F  3000               	movlw	0
 14417  0A60  00A0               	movwf	?___ftmul
 14418  0A61  3000               	movlw	0
 14419  0A62  00A1               	movwf	?___ftmul+1
 14420  0A63  3000               	movlw	0
 14421  0A64  00A2               	movwf	?___ftmul+2
 14422  0A65  0008               	return
 14423  0A66                     l2415:	
 14424  0A66  082F               	movf	___ftmul@sign,w
 14425  0A67  3E7B               	addlw	123
 14426  0A68  00A6               	movwf	??___ftmul
 14427  0A69  0826               	movf	??___ftmul,w
 14428  0A6A  07AA               	addwf	___ftmul@exp,f
 14429  0A6B  0820               	movf	___ftmul@f1,w
 14430  0A6C  00A6               	movwf	??___ftmul
 14431  0A6D  0821               	movf	___ftmul@f1+1,w
 14432  0A6E  00A7               	movwf	??___ftmul+1
 14433  0A6F  0822               	movf	___ftmul@f1+2,w
 14434  0A70  00A8               	movwf	??___ftmul+2
 14435  0A71  3010               	movlw	16
 14436  0A72                     u2505:	
 14437  0A72  36A8               	lsrf	??___ftmul+2,f
 14438  0A73  0CA7               	rrf	??___ftmul+1,f
 14439  0A74  0CA6               	rrf	??___ftmul,f
 14440  0A75  0B89               	decfsz	9,f
 14441  0A76  2A72               	goto	u2505
 14442  0A77  0826               	movf	??___ftmul,w
 14443  0A78  00A9               	movwf	??___ftmul+3
 14444  0A79  0829               	movf	??___ftmul+3,w
 14445  0A7A  00AF               	movwf	___ftmul@sign
 14446  0A7B  0823               	movf	___ftmul@f2,w
 14447  0A7C  00A6               	movwf	??___ftmul
 14448  0A7D  0824               	movf	___ftmul@f2+1,w
 14449  0A7E  00A7               	movwf	??___ftmul+1
 14450  0A7F  0825               	movf	___ftmul@f2+2,w
 14451  0A80  00A8               	movwf	??___ftmul+2
 14452  0A81  3010               	movlw	16
 14453  0A82                     u2515:	
 14454  0A82  36A8               	lsrf	??___ftmul+2,f
 14455  0A83  0CA7               	rrf	??___ftmul+1,f
 14456  0A84  0CA6               	rrf	??___ftmul,f
 14457  0A85  0B89               	decfsz	9,f
 14458  0A86  2A82               	goto	u2515
 14459  0A87  0826               	movf	??___ftmul,w
 14460  0A88  00A9               	movwf	??___ftmul+3
 14461  0A89  0829               	movf	??___ftmul+3,w
 14462  0A8A  06AF               	xorwf	___ftmul@sign,f
 14463  0A8B  3080               	movlw	128
 14464  0A8C  00A6               	movwf	??___ftmul
 14465  0A8D  0826               	movf	??___ftmul,w
 14466  0A8E  05AF               	andwf	___ftmul@sign,f
 14467  0A8F  17A1               	bsf	___ftmul@f1+1,7
 14468  0A90  17A4               	bsf	___ftmul@f2+1,7
 14469  0A91  30FF               	movlw	255
 14470  0A92  05A3               	andwf	___ftmul@f2,f
 14471  0A93  30FF               	movlw	255
 14472  0A94  05A4               	andwf	___ftmul@f2+1,f
 14473  0A95  3000               	movlw	0
 14474  0A96  05A5               	andwf	___ftmul@f2+2,f
 14475  0A97  3000               	movlw	0
 14476  0A98  00AB               	movwf	___ftmul@f3_as_product
 14477  0A99  3000               	movlw	0
 14478  0A9A  00AC               	movwf	___ftmul@f3_as_product+1
 14479  0A9B  3000               	movlw	0
 14480  0A9C  00AD               	movwf	___ftmul@f3_as_product+2
 14481  0A9D  3007               	movlw	7
 14482  0A9E  00A6               	movwf	??___ftmul
 14483  0A9F  0826               	movf	??___ftmul,w
 14484  0AA0  00AE               	movwf	___ftmul@cntr
 14485  0AA1                     l2427:	
 14486  0AA1  1C20               	btfss	___ftmul@f1,0
 14487  0AA2  2AA9               	goto	l2431
 14488  0AA3  0823               	movf	___ftmul@f2,w
 14489  0AA4  07AB               	addwf	___ftmul@f3_as_product,f
 14490  0AA5  0824               	movf	___ftmul@f2+1,w
 14491  0AA6  3DAC               	addwfc	___ftmul@f3_as_product+1,f
 14492  0AA7  0825               	movf	___ftmul@f2+2,w
 14493  0AA8  3DAD               	addwfc	___ftmul@f3_as_product+2,f
 14494  0AA9                     l2431:	
 14495  0AA9  3001               	movlw	1
 14496  0AAA                     u2535:	
 14497  0AAA  36A2               	lsrf	___ftmul@f1+2,f
 14498  0AAB  0CA1               	rrf	___ftmul@f1+1,f
 14499  0AAC  0CA0               	rrf	___ftmul@f1,f
 14500  0AAD  0B89               	decfsz	9,f
 14501  0AAE  2AAA               	goto	u2535
 14502  0AAF  3001               	movlw	1
 14503  0AB0                     u2545:	
 14504  0AB0  35A3               	lslf	___ftmul@f2,f
 14505  0AB1  0DA4               	rlf	___ftmul@f2+1,f
 14506  0AB2  0DA5               	rlf	___ftmul@f2+2,f
 14507  0AB3  0B89               	decfsz	9,f
 14508  0AB4  2AB0               	goto	u2545
 14509  0AB5  3001               	movlw	1
 14510  0AB6  02AE               	subwf	___ftmul@cntr,f
 14511  0AB7  1D03               	btfss	3,2
 14512  0AB8  2AA1               	goto	l2427
 14513  0AB9  3009               	movlw	9
 14514  0ABA  00A6               	movwf	??___ftmul
 14515  0ABB  0826               	movf	??___ftmul,w
 14516  0ABC  00AE               	movwf	___ftmul@cntr
 14517  0ABD                     l2439:	
 14518  0ABD  1C20               	btfss	___ftmul@f1,0
 14519  0ABE  2AC5               	goto	l2443
 14520  0ABF  0823               	movf	___ftmul@f2,w
 14521  0AC0  07AB               	addwf	___ftmul@f3_as_product,f
 14522  0AC1  0824               	movf	___ftmul@f2+1,w
 14523  0AC2  3DAC               	addwfc	___ftmul@f3_as_product+1,f
 14524  0AC3  0825               	movf	___ftmul@f2+2,w
 14525  0AC4  3DAD               	addwfc	___ftmul@f3_as_product+2,f
 14526  0AC5                     l2443:	
 14527  0AC5  3001               	movlw	1
 14528  0AC6                     u2575:	
 14529  0AC6  36A2               	lsrf	___ftmul@f1+2,f
 14530  0AC7  0CA1               	rrf	___ftmul@f1+1,f
 14531  0AC8  0CA0               	rrf	___ftmul@f1,f
 14532  0AC9  0B89               	decfsz	9,f
 14533  0ACA  2AC6               	goto	u2575
 14534  0ACB  3001               	movlw	1
 14535  0ACC                     u2585:	
 14536  0ACC  36AD               	lsrf	___ftmul@f3_as_product+2,f
 14537  0ACD  0CAC               	rrf	___ftmul@f3_as_product+1,f
 14538  0ACE  0CAB               	rrf	___ftmul@f3_as_product,f
 14539  0ACF  0B89               	decfsz	9,f
 14540  0AD0  2ACC               	goto	u2585
 14541  0AD1  3001               	movlw	1
 14542  0AD2  02AE               	subwf	___ftmul@cntr,f
 14543  0AD3  1D03               	btfss	3,2
 14544  0AD4  2ABD               	goto	l2439
 14545  0AD5  082B               	movf	___ftmul@f3_as_product,w
 14546  0AD6  00F0               	movwf	___ftpack@arg
 14547  0AD7  082C               	movf	___ftmul@f3_as_product+1,w
 14548  0AD8  00F1               	movwf	___ftpack@arg+1
 14549  0AD9  082D               	movf	___ftmul@f3_as_product+2,w
 14550  0ADA  00F2               	movwf	___ftpack@arg+2
 14551  0ADB  082A               	movf	___ftmul@exp,w
 14552  0ADC  00A6               	movwf	??___ftmul
 14553  0ADD  0826               	movf	??___ftmul,w
 14554  0ADE  00F3               	movwf	___ftpack@exp
 14555  0ADF  082F               	movf	___ftmul@sign,w
 14556  0AE0  00A7               	movwf	??___ftmul+1
 14557  0AE1  0827               	movf	??___ftmul+1,w
 14558  0AE2  00F4               	movwf	___ftpack@sign
 14559  0AE3  3188  201C         	fcall	___ftpack
 14560  0AE5  0870               	movf	?___ftpack,w
 14561  0AE6  0020               	movlb	0	; select bank0
 14562  0AE7  00A0               	movwf	?___ftmul
 14563  0AE8  0871               	movf	?___ftpack+1,w
 14564  0AE9  00A1               	movwf	?___ftmul+1
 14565  0AEA  0872               	movf	?___ftpack+2,w
 14566  0AEB  00A2               	movwf	?___ftmul+2
 14567  0AEC  0008               	return
 14568  0AED                     __end_of___ftmul:	
 14569                           
 14570                           	psect	text42
 14571  1348                     __ptext42:	
 14572 ;; *************** function ___awtoft *****************
 14573 ;; Defined at:
 14574 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
 14575 ;; Parameters:    Size  Location     Type
 14576 ;;  c               2    8[COMMON] int 
 14577 ;; Auto vars:     Size  Location     Type
 14578 ;;  sign            1   13[COMMON] unsigned char 
 14579 ;; Return value:  Size  Location     Type
 14580 ;;                  3    8[COMMON] float 
 14581 ;; Registers used:
 14582 ;;		wreg, status,2, status,0, pclath, cstack
 14583 ;; Tracked objects:
 14584 ;;		On entry : 0/0
 14585 ;;		On exit  : 0/0
 14586 ;;		Unchanged: 0/0
 14587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14588 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14589 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14590 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14591 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14592 ;;Total ram usage:        6 bytes
 14593 ;; Hardware stack levels used:    1
 14594 ;; Hardware stack levels required when called:    1
 14595 ;; This function calls:
 14596 ;;		___ftpack
 14597 ;; This function is called by:
 14598 ;;		_Init_Battery_State_Machine
 14599 ;;		_Battery_State_Machine
 14600 ;;		_cc_cv_mode
 14601 ;;		_tempCalc
 14602 ;;		_main
 14603 ;;		_calculateCurrent0
 14604 ;;		_calculateCurrent1
 14605 ;;		_calculateCurrent2
 14606 ;;		_calculateCurrent3
 14607 ;;		_log
 14608 ;; This function uses a non-reentrant model
 14609 ;;
 14610                           
 14611                           
 14612                           ;psect for function ___awtoft
 14613  1348                     ___awtoft:	
 14614                           
 14615                           ;incstack = 0
 14616                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 14617  1348  01FD               	clrf	___awtoft@sign
 14618  1349  1FF9               	btfss	___awtoft@c+1,7
 14619  134A  2B52               	goto	l2463
 14620  134B  09F8               	comf	___awtoft@c,f
 14621  134C  09F9               	comf	___awtoft@c+1,f
 14622  134D  0AF8               	incf	___awtoft@c,f
 14623  134E  1903               	skipnz
 14624  134F  0AF9               	incf	___awtoft@c+1,f
 14625  1350  01FD               	clrf	___awtoft@sign
 14626  1351  0AFD               	incf	___awtoft@sign,f
 14627  1352                     l2463:	
 14628  1352  0878               	movf	___awtoft@c,w
 14629  1353  00F0               	movwf	___ftpack@arg
 14630  1354  0879               	movf	___awtoft@c+1,w
 14631  1355  00F1               	movwf	___ftpack@arg+1
 14632  1356  01F2               	clrf	___ftpack@arg+2
 14633  1357  308E               	movlw	142
 14634  1358  00FB               	movwf	??___awtoft
 14635  1359  087B               	movf	??___awtoft,w
 14636  135A  00F3               	movwf	___ftpack@exp
 14637  135B  087D               	movf	___awtoft@sign,w
 14638  135C  00FC               	movwf	??___awtoft+1
 14639  135D  087C               	movf	??___awtoft+1,w
 14640  135E  00F4               	movwf	___ftpack@sign
 14641  135F  3188  201C         	fcall	___ftpack
 14642  1361  0870               	movf	?___ftpack,w
 14643  1362  00F8               	movwf	?___awtoft
 14644  1363  0871               	movf	?___ftpack+1,w
 14645  1364  00F9               	movwf	?___awtoft+1
 14646  1365  0872               	movf	?___ftpack+2,w
 14647  1366  00FA               	movwf	?___awtoft+2
 14648  1367  0008               	return
 14649  1368                     __end_of___awtoft:	
 14650                           
 14651                           	psect	text43
 14652  081C                     __ptext43:	
 14653 ;; *************** function ___ftpack *****************
 14654 ;; Defined at:
 14655 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 14656 ;; Parameters:    Size  Location     Type
 14657 ;;  arg             3    0[COMMON] unsigned um
 14658 ;;  exp             1    3[COMMON] unsigned char 
 14659 ;;  sign            1    4[COMMON] unsigned char 
 14660 ;; Auto vars:     Size  Location     Type
 14661 ;;		None
 14662 ;; Return value:  Size  Location     Type
 14663 ;;                  3    0[COMMON] float 
 14664 ;; Registers used:
 14665 ;;		wreg, status,2, status,0
 14666 ;; Tracked objects:
 14667 ;;		On entry : 0/0
 14668 ;;		On exit  : 0/0
 14669 ;;		Unchanged: 0/0
 14670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14671 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14672 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14673 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14674 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14675 ;;Total ram usage:        8 bytes
 14676 ;; Hardware stack levels used:    1
 14677 ;; This function calls:
 14678 ;;		Nothing
 14679 ;; This function is called by:
 14680 ;;		___awtoft
 14681 ;;		___ftadd
 14682 ;;		___ftdiv
 14683 ;;		___ftmul
 14684 ;; This function uses a non-reentrant model
 14685 ;;
 14686                           
 14687                           
 14688                           ;psect for function ___ftpack
 14689  081C                     ___ftpack:	
 14690                           
 14691                           ;incstack = 0
 14692                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 14693  081C  0873               	movf	___ftpack@exp,w
 14694  081D  1903               	btfsc	3,2
 14695  081E  2824               	goto	l2269
 14696  081F  0872               	movf	___ftpack@arg+2,w
 14697  0820  0471               	iorwf	___ftpack@arg+1,w
 14698  0821  0470               	iorwf	___ftpack@arg,w
 14699  0822  1D03               	skipz
 14700  0823  2835               	goto	l2275
 14701  0824                     l2269:	
 14702  0824  3000               	movlw	0
 14703  0825  00F0               	movwf	?___ftpack
 14704  0826  3000               	movlw	0
 14705  0827  00F1               	movwf	?___ftpack+1
 14706  0828  3000               	movlw	0
 14707  0829  00F2               	movwf	?___ftpack+2
 14708  082A  0008               	return
 14709  082B                     l2273:	
 14710  082B  3001               	movlw	1
 14711  082C  00F5               	movwf	??___ftpack
 14712  082D  0875               	movf	??___ftpack,w
 14713  082E  07F3               	addwf	___ftpack@exp,f
 14714  082F  3001               	movlw	1
 14715  0830                     u2075:	
 14716  0830  36F2               	lsrf	___ftpack@arg+2,f
 14717  0831  0CF1               	rrf	___ftpack@arg+1,f
 14718  0832  0CF0               	rrf	___ftpack@arg,f
 14719  0833  0B89               	decfsz	9,f
 14720  0834  2830               	goto	u2075
 14721  0835                     l2275:	
 14722  0835  30FE               	movlw	254
 14723  0836  0572               	andwf	___ftpack@arg+2,w
 14724  0837  1903               	btfsc	3,2
 14725  0838  284E               	goto	l766
 14726  0839  282B               	goto	l2273
 14727  083A                     l2277:	
 14728  083A  3001               	movlw	1
 14729  083B  00F5               	movwf	??___ftpack
 14730  083C  0875               	movf	??___ftpack,w
 14731  083D  07F3               	addwf	___ftpack@exp,f
 14732  083E  3001               	movlw	1
 14733  083F  07F0               	addwf	___ftpack@arg,f
 14734  0840  3000               	movlw	0
 14735  0841  1803               	skipnc
 14736  0842  3001               	movlw	1
 14737  0843  07F1               	addwf	___ftpack@arg+1,f
 14738  0844  3000               	movlw	0
 14739  0845  1803               	skipnc
 14740  0846  3001               	movlw	1
 14741  0847  07F2               	addwf	___ftpack@arg+2,f
 14742  0848  3001               	movlw	1
 14743  0849                     u2095:	
 14744  0849  36F2               	lsrf	___ftpack@arg+2,f
 14745  084A  0CF1               	rrf	___ftpack@arg+1,f
 14746  084B  0CF0               	rrf	___ftpack@arg,f
 14747  084C  0B89               	decfsz	9,f
 14748  084D  2849               	goto	u2095
 14749  084E                     l766:	
 14750  084E  30FF               	movlw	255
 14751  084F  0572               	andwf	___ftpack@arg+2,w
 14752  0850  1903               	btfsc	3,2
 14753  0851  285B               	goto	l2285
 14754  0852  283A               	goto	l2277
 14755  0853                     l2283:	
 14756  0853  3001               	movlw	1
 14757  0854  02F3               	subwf	___ftpack@exp,f
 14758  0855  3001               	movlw	1
 14759  0856                     u2115:	
 14760  0856  35F0               	lslf	___ftpack@arg,f
 14761  0857  0DF1               	rlf	___ftpack@arg+1,f
 14762  0858  0DF2               	rlf	___ftpack@arg+2,f
 14763  0859  0B89               	decfsz	9,f
 14764  085A  2856               	goto	u2115
 14765  085B                     l2285:	
 14766  085B  1BF1               	btfsc	___ftpack@arg+1,7
 14767  085C  2861               	goto	l773
 14768  085D  3002               	movlw	2
 14769  085E  0273               	subwf	___ftpack@exp,w
 14770  085F  1803               	skipnc
 14771  0860  2853               	goto	l2283
 14772  0861                     l773:	
 14773  0861  1873               	btfsc	___ftpack@exp,0
 14774  0862  2869               	goto	l774
 14775  0863  30FF               	movlw	255
 14776  0864  05F0               	andwf	___ftpack@arg,f
 14777  0865  307F               	movlw	127
 14778  0866  05F1               	andwf	___ftpack@arg+1,f
 14779  0867  30FF               	movlw	255
 14780  0868  05F2               	andwf	___ftpack@arg+2,f
 14781  0869                     l774:	
 14782  0869  1003               	clrc
 14783  086A  0CF3               	rrf	___ftpack@exp,f
 14784  086B  0873               	movf	___ftpack@exp,w
 14785  086C  00F5               	movwf	??___ftpack
 14786  086D  01F6               	clrf	??___ftpack+1
 14787  086E  01F7               	clrf	??___ftpack+2
 14788  086F  3010               	movlw	16
 14789  0870                     u2155:	
 14790  0870  35F5               	lslf	??___ftpack,f
 14791  0871  0DF6               	rlf	??___ftpack+1,f
 14792  0872  0DF7               	rlf	??___ftpack+2,f
 14793  0873  0B89               	decfsz	9,f
 14794  0874  2870               	goto	u2155
 14795  0875  0875               	movf	??___ftpack,w
 14796  0876  04F0               	iorwf	___ftpack@arg,f
 14797  0877  0876               	movf	??___ftpack+1,w
 14798  0878  04F1               	iorwf	___ftpack@arg+1,f
 14799  0879  0877               	movf	??___ftpack+2,w
 14800  087A  04F2               	iorwf	___ftpack@arg+2,f
 14801  087B  0874               	movf	___ftpack@sign,w
 14802  087C  1903               	btfsc	3,2
 14803  087D  0008               	return
 14804  087E  17F2               	bsf	___ftpack@arg+2,7
 14805  087F  0008               	return
 14806  0880                     __end_of___ftpack:	
 14807  007E                     btemp	set	126	;btemp
 14808  007E                     wtemp0	set	126


Data Sizes:
    Strings     14
    Constant    330
    Data        10
    BSS         93
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     60      79
    BANK1            80     25      80
    BANK2            80      0      29
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            48      0       0
    BANK8             0      0       0
    BANK9             0      0       0
    BANK10            0      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(BANK0[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 27
		 -> log@coeff(CODE[27]), 

    LCDWriteString@characters	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_3(CODE[5]), STR_2(CODE[5]), STR_1(CODE[4]), 


Critical Paths under _main in COMMON

    _main->_LCDWriteString
    _main->___awtoft
    _tempCalc->___awtoft
    _log->___awtoft
    ___ftadd->___awtoft
    _readIAnalog->___aldiv
    _readButton->_ADCRead
    _cc_cv_mode->___awtoft
    _calculateCurrent3->___awtoft
    _calculateCurrent2->___awtoft
    _calculateCurrent1->___awtoft
    _calculateCurrent0->___awtoft
    ___ftdiv->___awtoft
    _LCDInit->_LCDWrite
    _LCDClear->_gotoXY
    _gotoXY->_LCDWrite
    _Init_Battery_State_Machine->___awtoft
    _LCDWriteString->_LCDWriteCharacter
    _LCDWriteInt->_LCDWriteCharacter
    _LCDWriteCharacter->___wmul
    _Battery_State_Machine->___awtoft
    ___fttol->___awtoft
    ___ftmul->___awtoft
    ___awtoft->___ftpack

Critical Paths under _main in BANK0

    _main->_tempCalc
    _tempCalc->_log
    _log->_eval_poly
    _eval_poly->___ftadd
    ___ftsub->___ftadd
    ___ftadd->___ftdiv
    ___ftadd->___ftmul
    _readIAnalog->___aldiv
    _cc_cv_mode->___fttol
    _calculateCurrent3->___fttol
    _calculateCurrent2->___fttol
    _calculateCurrent1->___fttol
    _calculateCurrent0->___fttol
    _SYSTEM_Initialize->_Init_Battery_State_Machine
    _Init_Battery_State_Machine->___fttol
    _Battery_State_Machine->___fttol
    ___fttol->___ftdiv
    ___fttol->___ftmul

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                29    29      0  110856
                                             56 BANK0      4     4      0
                                              0 BANK1     25    25      0
                            _ADCRead
              _Battery_State_Machine
                           _LCDClear
                            _LCDInit
                  _LCDWriteCharacter
                        _LCDWriteInt
                     _LCDWriteString
                 _PWM1_LoadDutyValue
                 _PWM6_LoadDutyValue
                 _PWM7_LoadDutyValue
                  _SYSTEM_Initialize
                           ___awtoft
                            ___ftdiv
                            ___fttol
                  _calculateCurrent0
                  _calculateCurrent1
                  _calculateCurrent2
                  _calculateCurrent3
                         _cc_cv_mode
                             _gotoXY
                         _readButton
                        _readIAnalog
                           _tempCalc
 ---------------------------------------------------------------------------------
 (1) _tempCalc                                            11     9      2   33648
                                             45 BANK0     11     9      2
                            _ADCRead (ARG)
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftsub
                            ___fttol
                                _log
 ---------------------------------------------------------------------------------
 (2) _log                                                  6     3      3   17068
                                             39 BANK0      6     3      3
                           ___awtoft
                            ___ftadd
                             ___ftge
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                6     2      4     330
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           10     3      7    7315
                                             29 BANK0     10     3      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     322
                                              0 COMMON     9     3      6
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    3356
                                             29 BANK0      6     0      6
                            ___ftadd
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             13     7      6    3183
                                             16 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (1) _readIAnalog                                         24    22      2    1498
                                              9 COMMON     4     4      0
                                              6 BANK0     20    18      2
                            _ADCRead
                            ___aldiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     406
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _readButton                                           2     2      0      22
                                              4 COMMON     2     2      0
                            _ADCRead
 ---------------------------------------------------------------------------------
 (2) _ADCRead                                              4     1      3      22
                                              0 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (1) _cc_cv_mode                                           8     8      0    6900
                                             30 BANK0      8     8      0
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _calculateCurrent3                                    3     3      0    6692
                                             30 BANK0      3     3      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _calculateCurrent2                                    3     3      0    6692
                                             30 BANK0      3     3      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _calculateCurrent1                                    3     3      0    6692
                                             30 BANK0      3     3      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _calculateCurrent0                                    3     3      0    6692
                                             30 BANK0      3     3      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    3365
                                              0 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    2     2      0   10373
                                             35 BANK0      2     2      0
                     _ADC_Initialize
         _Init_Battery_State_Machine
                           _LCDClear
                            _LCDInit
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PWM_Initialize
                    _TMR2_Initialize
                    _TMR4_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR4_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      23
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LCDInit                                              1     1      0     803
                                              5 COMMON     1     1      0
                           _LCDWrite
 ---------------------------------------------------------------------------------
 (2) _LCDClear                                             3     3      0    3021
                                              8 COMMON     3     3      0
                           _LCDWrite
                             _gotoXY
 ---------------------------------------------------------------------------------
 (1) _gotoXY                                               3     2      1    2172
                                              5 COMMON     3     2      1
                           _LCDWrite
 ---------------------------------------------------------------------------------
 (2) _Init_Battery_State_Machine                           5     5      0    6526
                                             30 BANK0      5     5      0
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM7_LoadDutyValue                                   4     2      2      97
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _PWM6_LoadDutyValue                                   4     2      2      97
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _PWM1_LoadDutyValue                                   4     2      2      97
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _LCDWriteString                                       3     1      2    1847
                                             12 COMMON     2     0      2
                                              0 BANK0      1     1      0
                  _LCDWriteCharacter
 ---------------------------------------------------------------------------------
 (1) _LCDWriteInt                                         16    11      5    7267
                                              0 BANK0     16    11      5
                  _LCDWriteCharacter
                            ___awdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     265
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     406
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (2) _LCDWriteCharacter                                    6     6      0    1643
                                              6 COMMON     6     6      0
                           _LCDWrite
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     728
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) _LCDWrite                                             5     4      1     803
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (1) _Battery_State_Machine                                6     6      0    6966
                                             30 BANK0      6     6      0
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     734
                                             16 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             16    10      6    3067
                                              0 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             6     3      3    2593
                                              8 COMMON     6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    1707
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCRead
   _Battery_State_Machine
     ___awtoft
       ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
   _LCDClear
     _LCDWrite
     _gotoXY
       _LCDWrite
   _LCDInit
     _LCDWrite
   _LCDWriteCharacter
     _LCDWrite
     ___wmul
   _LCDWriteInt
     _LCDWriteCharacter
       _LCDWrite
       ___wmul
     ___awdiv
     ___lwmod
   _LCDWriteString
     _LCDWriteCharacter
       _LCDWrite
       ___wmul
   _PWM1_LoadDutyValue
   _PWM6_LoadDutyValue
   _PWM7_LoadDutyValue
   _SYSTEM_Initialize
     _ADC_Initialize
     _Init_Battery_State_Machine
       ___awtoft
         ___ftpack
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
     _LCDClear
       _LCDWrite
       _gotoXY
         _LCDWrite
     _LCDInit
       _LCDWrite
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM_Initialize
     _TMR2_Initialize
     _TMR4_Initialize
   ___awtoft
     ___ftpack
   ___ftdiv
     ___awtoft (ARG)
       ___ftpack
     ___ftpack (ARG)
     ___ftpack (ARG)
   ___fttol
     ___awtoft (ARG)
       ___ftpack
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
   _calculateCurrent0
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
   _calculateCurrent1
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
   _calculateCurrent2
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
   _calculateCurrent3
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
   _cc_cv_mode
     ___awtoft
       ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
   _gotoXY
     _LCDWrite
   _readButton
     _ADCRead
   _readIAnalog
     _ADCRead
     ___aldiv
     ___wmul
   _tempCalc
     _ADCRead (ARG)
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftsub (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
     ___fttol (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
     _log (ARG)
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       _eval_poly
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___wmul
       _frexp

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     3C      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     19      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      1D       9       36.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               30      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      CA      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BANK8                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BANK9                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BANK10               0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11               0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      CA      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Jul 19 16:59:59 2018

                       _stateCounter 00C0                                    _j 006A  
                                  _x 00D6               LCDWriteInt@fieldLength 0022  
            __size_of_PWM_Initialize 001F                          __CFG_CP$OFF 0000  
                                 l60 12A3                                   l57 129C  
                       ___awdiv@sign 0076                  ___wmul@multiplicand 0072  
        __size_of_PWM6_LoadDutyValue 0016                         ___ftadd@exp1 003C  
                       ___ftadd@exp2 003B                          __CFG_LVP$ON 0000  
                       ___ftadd@sign 003A                                  l220 138B  
                                l132 0F45                                  l221 137F  
                                l127 0EF1                                  l128 0F02  
                                l217 1373                                  l218 1375  
                                l219 137B                                  l605 0809  
                      LCDClear@index 0079                                  l491 04E3  
                                l660 0891                                  l773 0861  
                                l774 0869                                  l766 084E  
                                l857 096F                                  l797 0D2C  
                                _GIE 005F                                  _RB2 006A  
                       __CFG_CPD$OFF 0000                                  _log 0989  
                    __end_of_ADCRead 12AA                      _TMR2_Initialize 1252  
                       __CFG_BORV$LO 0000                                  wreg 0009  
                    __end_of_LCDInit 1451                         ?_LCDWriteInt 0020  
                       __CFG_ZCD$OFF 0000                         ___ftdiv@cntr 002A  
                       ___ftdiv@sign 002F                                 l3101 0B5C  
                               l3021 17BC                                 l3103 0B83  
                               l3015 17A2                                 l2321 0803  
                               l3041 17E5                                 l3025 17CE  
                               l3107 0B91                                 l3035 17DC  
                               l3027 17D0                                 l3203 0270  
                               l3221 02C0                                 l2431 0AA9  
                               l2415 0A66                                 l2511 094B  
                               l3047 17FD                                 l2343 0CBC  
                               l3311 046E                                 l3215 0294  
                               l2273 082B                                 l2409 0A50  
                               l2521 0972                                 l2513 0959  
                               l3073 0B0E                                 l3161 15A5  
                               l3049 17FE                                 l2361 0CE5  
                               l3305 0457                                 l3209 0276  
                               l2283 0853                                 l2275 0835  
                               l2443 0AC5                                 l2427 0AA1  
                               l3091 0B4A                                 l3083 0B15  
                               l3059 1281                                 l3155 1560  
                               l2371 0D07                                 l2339 0CB5  
                               l3315 0475                                 l3251 0396  
                               l2285 085B                                 l2277 083A  
                               l2269 0824                                 l2525 0980  
                               l3093 0B52                                 l3085 0B42  
                               l3149 151B                                 l2381 0D28  
                               l2373 0D0B                                 l2349 0CCB  
                               l3333 04DB                                 l3325 04AF  
                               l3341 04EC                                 l2463 1352  
                               l2439 0ABD                                 l2519 0966  
                               l3095 0B58                                 l3167 15EA  
                               l2367 0CF8                                 l2471 14A2  
                               l3343 04EF                                 l3327 04B3  
                               l3263 03CC                                 l3089 0B46  
                               l2641 13AE                                 l2385 0D3E  
                               l2369 0D02                                 l2537 14D9  
                               l3361 0525                                 l3281 0400  
                               l3257 03B4                                 l2811 162B  
                               l2635 139A                                 l2379 0D1E  
                               l2475 14B8                                 l2555 1714  
                               l3347 0500                                 l3275 03E2  
                               l3195 025C                                 l2493 091B  
                               l2821 1633                                 l2805 1620  
                               l2901 13C5                                 l2389 0D50  
                               l2741 09A8                                 l2823 163F  
                               l2399 0D6B                                 l3287 0418  
                               l2833 165A                                 l2905 13D1  
                               l2747 09BB                                 l3491 07A9  
                               l2941 00EE                                 l2837 1662  
                               l2829 1651                                 l2909 13DA  
                               l2853 0035                                 l2943 00F6  
                               l2847 001F                                 l2775 08B2  
                               l2767 08A2                                 l2927 0E99  
                               l3495 07B2                                 l2961 01B1  
                               l2945 0108                                 l2793 08F9  
                               l2785 08E0                                 l2777 08C0  
                               l2875 008F                                 l2867 0076  
                               l2973 0218                                 l2957 0197  
                               l2965 01CA                                 l2789 08EB  
                               l2991 0F1D                                 l2887 12F4  
                               l2899 13B9                                 l2987 0F10  
                               ?_log 0047                                 STR_1 1825  
                               STR_2 1820                                 STR_3 181B  
                               u2115 0856                                 u3005 164A  
                               _LATA 0016                                 _LATB 0017  
                               u3015 1652                                 _LATC 0018  
                               u2225 080A                                 u3105 0090  
                               u2155 0870                                 u2075 0830  
                               u2235 080F                                 u3205 0DEF  
                               u2405 0D0C                                 u4005 048B  
                               u2095 0849                                 u3215 0E29  
                               u4015 04A8                                 u2505 0A72  
                               u3145 13BC                                 u3065 0047  
                               u3225 0E74                                 u2345 0CE6  
                               u4025 04CD                                 _T2PR 028D  
                               u2515 0A82                                 u3315 016A  
                               u3075 0057                                 u2435 0D1F  
                               u4107 0264                                 u3165 13CB  
                               u3085 0077                                 u4117 17EF  
                               u2535 0AAA                                 u3175 13D2  
                               u4127 1474                                 u3095 0086  
                               u3255 0EA4                                 u2375 0CF9  
                               u2800 1414                                 u2545 0AB0  
                               u4137 1484                                 u3505 17B8  
                               _T4PR 0293                                 u2715 0967  
                               u3275 00CC                                 u3435 0F5F  
                               u3515 17C6                                 u3195 0D99  
                               u3285 00E0                                 u2575 0AC6  
                               u2655 0922                                 u3375 0EDD  
                               u2585 0ACC                                 u3705 155A  
                               u3465 0FB4                                 u2905 08D5  
                               u3570 0AF8                                 u3635 0B71  
                               u3715 159F                                 u3475 1790  
                               u2915 08E1                                 u2685 094C  
                               u3725 15E4                                 u3485 179C  
                               u3495 17AC                                 u3665 12CF  
                               u2785 1398                                 u3905 03F1  
                               u3825 03A5                                 u3675 12E5  
                               u2795 13AC                                 u2875 08B5  
                               u3685 12B9                                 u3925 040D  
                               u3845 03C1                                 u2975 1636  
                               u3695 1515                                 u2895 08C1  
                               u3785 0384                                 u2995 1640  
                               u3955 0450                                 u3875 03DF  
                               u3975 0467                  tempCalc@analogValue 004D  
                               _WPUA 0F39                                 _WPUB 0F44  
                               _WPUC 0F4F                                 _WPUE 0F65  
                               _Imin 00CC                                 _Iref 00C4  
                               _Iout 00D2                         __CFG_WRT$OFF 0000  
                      __CFG_FCMEN$ON 0000                                 _Vref 005C  
                               _main 0228                         ___ftpack@arg 0070  
                       ___ftpack@exp 0073                                 fsr0h 0005  
                               fsr1h 0007                                 indf0 0000  
                               fsr0l 0004                                 indf1 0001  
                               fsr1l 0006                                 btemp 007E  
                               log@x 0047                         ?_readIAnalog 0026  
                      __CFG_BOREN$ON 0000                                 start 0002  
                      __CFG_CSWEN$ON 0000                        __CFG_MCLRE$ON 0000  
                       ___ftmul@cntr 002E                         ___ftmul@sign 002F  
                   __end_of_LCDClear 13B3                         ___fttol@exp1 003D  
                              ??_log 004A                         ___fttol@lval 0039  
__size_of_Init_Battery_State_Machine 0063       __size_of_OSCILLATOR_Initialize 0009  
                   __end_of_LCDWrite 138D        __end_of_OSCILLATOR_Initialize 1246  
                    __end_of___aldiv 0902                                _ADACQ 009D  
                              _ADACT 0099                                _ADCAP 009B  
                              ?_main 0070                                _ADCLK 0098  
                              _ADPCH 009E                                _ADREF 009A  
                    __end_of___awdiv 1667                                _ADPRE 009C  
                    __end_of___ftadd 0D83                        __CFG_WDTE$OFF 0000  
                              _ADRPT 010D                      __end_of___ftdiv 00B1  
                    __end_of___ftmul 0AED                      ___awdiv@divisor 0070  
                    __end_of___ftsub 130A                      __end_of___fttol 0989  
                              _T2CON 028E                                _LATA5 00B5  
                              _T4CON 0294                                _T2HLT 028F  
                              _T4HLT 0295                                _T2TMR 028C  
                              _T2RST 0291                      __end_of___lwmod 13DF  
                              _T4TMR 0292                                _T4RST 0297  
                    ___awdiv@counter 0075                                _OSCEN 0891  
                              _TRISA 0011                                _TRISB 0012  
                              _TRISC 0013                      _TMR4_Initialize 1260  
                              _Imode 0064               ?_Battery_State_Machine 0070  
                              _cc_cv 00D4                        ___awtoft@sign 007D  
                              _frexp 14C7                                _fonts 1000  
                              _errno 00D0                        ___ftpack@sign 0074  
                              main@j 00E5                         main@slowLoop 00DF  
                              status 0003                                wtemp0 007E  
                    __initialization 07B5                          log@exponent 004B  
                       __end_of_main 07B5              __end_of_TMR2_Initialize 1260  
                          ??_ADCRead 0073                               ??_main 0058  
                      ___fttol@sign1 0038                            ??_LCDInit 0075  
             Battery_State_Machine@z 0043              LCDWrite@data_or_command 0072  
                             _ADCON0 0093                               _ADCON1 0094  
                             _ADCON2 0095                               _ADCON3 0096  
                             ?_frexp 0070                               _ADLTHH 010F  
                             _ADLTHL 010E                               _ADRESH 008D  
                             _ADRESL 008C                               _CCPR1H 030D  
                             _CCPR1L 030C                               _ADSTAT 0097  
                             _ADUTHH 0111                     ___awdiv@dividend 0072  
                             _ADUTHL 0110                     __end_of___awtoft 1368  
                             _ANSELA 0F38                               _ANSELB 0F43  
                             _ANSELC 0F4E                     __end_of___ftpack 0880  
                             _RA6PPS 0F16                               _RA7PPS 0F17  
                             _RB5PPS 0F1D                       __CFG_WDTCCS$SC 0000  
                             _FVRCON 090C                               _OSCFRQ 0893  
                     __CFG_PWRTE$OFF 0000                       _LCDWriteString 1281  
                       _CCPTMRS0bits 021E                         _CCPTMRS1bits 021F  
                             ___ftge 148C                            ??___aldiv 0078  
                             ___wmul 0801                            ??___awdiv 0074  
                          ??___ftadd 0036                       __CFG_STVREN$ON 0000  
                     _PWM_Initialize 1329                            ??___ftdiv 0026  
                          ??___ftmul 0026                            ??___ftsub 007E  
                          ??___fttol 0034                            ??___lwmod 0074  
                             _gotoXY 126E                               _button 006C  
            __end_of_TMR4_Initialize 126E                     ___awdiv@quotient 0077  
                             _totals 0120                ___ftmul@f3_as_product 002B  
                   __end_of_tempCalc 0C8D                         LCDWrite@data 0070  
                       LCDWriteInt@i 002F                         LCDWriteInt@j 002E  
                          ?_LCDClear 0070                    _SYSTEM_Initialize 1451  
               __size_of_LCDWriteInt 00B9                     __end_oflog@coeff 181B  
            __end_of__initialization 07FD                           ___ftadd@f1 0030  
                         ___ftadd@f2 0033                           ___ftge@ff1 0070  
                         ___ftge@ff2 0073                            ?_LCDWrite 0070  
                 ?_SYSTEM_Initialize 0070               __end_of_LCDWriteString 1295  
                       eval_poly@res 0044                           ___ftdiv@f1 0023  
                         ___ftdiv@f2 0020                           ___ftdiv@f3 002B  
                         ___awtoft@c 0078                           ___ftmul@f1 0020  
                         ___ftmul@f2 0023               __end_of_PWM_Initialize 1348  
               __size_of_readIAnalog 013E                           ___ftsub@f1 0040  
                         ___ftsub@f2 003D                           ___fttol@f1 0030  
                     __pcstackCOMMON 0070                         __pidataBANK0 0006  
                       __pidataBANK2 1235                  ??_SYSTEM_Initialize 0043  
                      __end_of_frexp 1502                        __end_of_fonts 112F  
                          LCDWrite@d 0073                            LCDWrite@i 0074  
                 _PWM1_LoadDutyValue 12AA                     ?_TMR2_Initialize 0070  
                         _cc_cv_mode 0EC1          __size_of_PWM7_LoadDutyValue 0016  
                     main@efficiency 00D7                  ?_PWM1_LoadDutyValue 0070  
                  LCDWriteInt@F14390 0130                    _calculateCurrent0 1502  
                  _calculateCurrent1 1547                    _calculateCurrent2 158C  
                  _calculateCurrent3 15D1                              ??_frexp 0074  
          __end_of_SYSTEM_Initialize 148C                           __pbssBANK0 005C  
                         __pbssBANK1 00A0                           __pbssBANK2 0120  
                 ?_calculateCurrent0 0070                   ?_calculateCurrent1 0070  
                 ?_calculateCurrent2 0070                   ?_calculateCurrent3 0070  
                       _batteryState 0066                   __size_of_eval_poly 0060  
                         ??_LCDClear 0078                       main@faultCount 00DA  
                         ??_LCDWrite 0071                      ?_LCDWriteString 007C  
               ??_PWM1_LoadDutyValue 0072                  ??_calculateCurrent0 003E  
                ??_calculateCurrent1 003E                  ??_calculateCurrent2 003E  
                ??_calculateCurrent3 003E                      ?_PWM_Initialize 0070  
                         __pmaintext 0228                              ?___ftge 0070  
                            ?___wmul 0070                      __CFG_PPS1WAY$ON 0000  
         __end_of_PWM6_LoadDutyValue 12D6                              ?_gotoXY 0075  
                            _ADCRead 1295                     ?_TMR4_Initialize 0070  
                          ?___awtoft 0078                            ?___ftpack 0070  
                            _ADSTPTH 0113                              _ADSTPTL 0112  
           __CFG_SCANE$not_available 0000                  __CFG_RSTOSC$HFINT32 0000  
            __size_of_ADC_Initialize 001F              ??_Battery_State_Machine 003E  
                            _LCDInit 1416            __end_of_calculateCurrent0 1547  
          __end_of_calculateCurrent1 158C            __end_of_calculateCurrent2 15D1  
          __end_of_calculateCurrent3 1616                              _OSCCON1 088D  
                            _OSCCON3 088F                              _OSCTUNE 0892  
                            _PWM6DCH 038D                              _PWM6DCL 038C  
                            _PWM7DCH 0391                              _PWM7DCL 0390  
                            _PWM6CON 038E                              _PWM7CON 0392  
                            _PPSLOCK 0E8F                       main@menuButton 00E4  
                     main@dutyCycle1 00EA                       main@dutyCycle6 00EC  
                     main@dutyCycle7 00EE                    main@tempFanOutput 00E8  
                         _lastButton 006B                            ?_tempCalc 004D  
                            ___aldiv 0880                      __size_of___ftge 003B  
                            ___awdiv 1616                              ___ftadd 0C8D  
                         _readButton 177E                              ___ftdiv 0008  
                    __size_of___wmul 001B                              ___ftmul 0A39  
                            ___ftsub 12EC                              ___fttol 0902  
                 main@displayRefresh 00DE                              ___lwmod 13B3  
                    __size_of_gotoXY 0013                           ??___awtoft 007B  
                         ??___ftpack 0075                    __end_of_eval_poly 171B  
                            __ptext1 0BA6                              __ptext2 0989  
                            __ptext3 14C7                              __ptext4 16BB  
                            __ptext5 148C                              __ptext6 12EC  
                            __ptext7 0C8D                              __ptext8 0D83  
                            __ptext9 0880                          ?_cc_cv_mode 0070  
              _OSCILLATOR_Initialize 123D                            _T2CONbits 028E  
                            _current 00B8                         __size_of_log 00B0  
                     ADCRead@channel 0073                     ___aldiv@dividend 0074  
                          _T4CONbits 0294             ??_PIN_MANAGER_Initialize 0070  
                            _samples 2260           __size_of_SYSTEM_Initialize 003B  
                            clrloop0 1247                              _voltage 00B0  
       ??_Init_Battery_State_Machine 003E                 end_of_initialization 07FD  
              LCDWriteCharacter@base 007A                              gotoXY@x 0077  
                            gotoXY@y 0075                           ??_tempCalc 007E  
                   ___aldiv@quotient 0022                    _LCDWriteCharacter 1667  
              __CFG_WDTCPS$WDTCPS_31 0000                   ?_LCDWriteCharacter 0070  
         __size_of_calculateCurrent0 0045           __size_of_calculateCurrent1 0045  
         __size_of_calculateCurrent2 0045           __size_of_calculateCurrent3 0045  
                          _TRISAbits 0011                  ??_LCDWriteCharacter 0076  
                   __CFG_FEXTOSC$OFF 0000         PWM1_LoadDutyValue@dutyCycle1 0070  
                        _CCP1CONbits 030E                          ___ftdiv@exp 002E  
                __size_of_cc_cv_mode 013F                    __size_of_LCDClear 0026  
         LCDWriteCharacter@character 0079                    __size_of_LCDWrite 0025  
                        ___ftmul@exp 002A            __end_of_LCDWriteCharacter 16BB  
                        ?_readButton 0070            readIAnalog@analog_channel 0079  
                     __end_of___ftge 14C7                            _VHoldMode 0062  
                     __end_of___wmul 081C                       _ADC_Initialize 130A  
                     __end_of_gotoXY 1281               ?_OSCILLATOR_Initialize 0070  
                          _IminCount 00C8                  start_initialization 07B5  
                         eval_poly@d 0040                           eval_poly@n 0042  
                         eval_poly@x 003D                    main@faultNotReset 00DC  
    __size_of_PIN_MANAGER_Initialize 0037                          __end_of_log 0A39  
                      ??_LCDWriteInt 0025                     ??_LCDWriteString 0020  
                         frexp@value 0070                     ??_PWM_Initialize 0070  
                      ??_readIAnalog 0028                     __CFG_LPBOREN$OFF 0000  
                           ??___ftge 0076                    tempCalc@steinhart 0055  
                           ??___wmul 0074               __end_of_ADC_Initialize 1329  
                        __pdataBANK0 006D                        _tempCalc$1297 0052  
                        __pdataBANK2 0135           __end_of_PWM7_LoadDutyValue 12EC  
                           ??_gotoXY 0076                             ?_ADCRead 0070  
       PWM7_LoadDutyValue@dutyCycle7 0070                    __size_of___awtoft 0020  
                           ?_LCDInit 0070                    __size_of___ftpack 0064  
                        __pbssBIGRAM 2260       __size_of_Battery_State_Machine 0177  
      __end_of_Battery_State_Machine 0228                            ___latbits 0002  
                      __pcstackBANK0 0020                        __pcstackBANK1 00D7  
                 _PWM6_LoadDutyValue 12C0             __size_of_TMR2_Initialize 000E  
 __end_of_Init_Battery_State_Machine 177E           _Init_Battery_State_Machine 171B  
                __size_of_readButton 0082                  ?_PWM6_LoadDutyValue 0070  
                __end_of_LCDWriteInt 0BA6                          _batteryTemp 006D  
        __size_of_PWM1_LoadDutyValue 0016               _PIN_MANAGER_Initialize 13DF  
         __size_of_LCDWriteCharacter 0054                             ?___aldiv 0070  
                __end_of_readIAnalog 0EC1                    __size_of_tempCalc 00E7  
                           ?___awdiv 0070                             ?___ftadd 0030  
                           ?___ftdiv 0020                             ?___ftmul 0020  
                           ?___ftsub 003D                             ?___fttol 0030  
                   LCDWriteInt@value 0020                             ?___lwmod 0070  
                    ?_ADC_Initialize 0070                 ??_PWM6_LoadDutyValue 0072  
                       ??_cc_cv_mode 003E                            _eval_poly 16BB  
           __size_of_TMR4_Initialize 000E                       __size_of_frexp 003B  
                           _T2CLKCON 0290                             _T4CLKCON 0296  
                        cc_cv_mode@z 0045                             _LCDClear 138D  
                    ___aldiv@divisor 0070                      ___aldiv@counter 0020  
                     ___wmul@product 0074                             _LATAbits 0016  
                           _LCDWrite 1368                            clear_ram0 1246  
                           _PIE0bits 0716                   __end_of_cc_cv_mode 1000  
                           _PIR4bits 0710                     readIAnalog@value 007B  
                          main@MPPT0 00E2                            main@MPPT1 00E0  
                   __size_of_ADCRead 0015                           _ADCON0bits 0093  
                  ___wmul@multiplier 0070                           ?_eval_poly 003D  
                   __size_of_LCDInit 003B                             _Ianalogs 00A0  
                        _LCDWriteInt 0AED          Init_Battery_State_Machine@z 0042  
                  ??_TMR2_Initialize 0070                          _readIAnalog 0D83  
                          frexp@eptr 0073                             _Vanalogs 00A8  
                       ??_readButton 0074              ??_OSCILLATOR_Initialize 0070  
               LCDWriteInt@numPlaces 0023                     __size_of___aldiv 0082  
                   __size_of___awdiv 0051                     __size_of___ftadd 00F6  
                   __size_of___ftdiv 00A9                     __size_of___ftmul 00B4  
                   __size_of___ftsub 001E                     __size_of___fttol 0087  
                   __size_of___lwmod 002C                          _readButtons 0060  
                           ___awtoft 1348                             ___ftpack 081C  
                           _channels 0135                             __ptext10 177E  
                           __ptext11 1295                             __ptext20 1252  
                           __ptext12 0EC1                             __ptext21 1329  
                           __ptext13 15D1                             __ptext30 12C0  
                           __ptext22 13DF                             __ptext14 158C  
                           __ptext31 12AA                             __ptext23 123D  
                           __ptext15 1547                             __ptext40 0902  
                           __ptext32 1281                             __ptext24 1416  
                           __ptext16 1502                             __ptext41 0A39  
                           __ptext33 0AED                             __ptext25 138D  
                           __ptext17 0008                             __ptext42 1348  
                           __ptext34 13B3                             __ptext26 126E  
                           __ptext18 1451                             __ptext43 081C  
                           __ptext35 1616                             __ptext27 171B  
                           __ptext19 1260                             __ptext36 1667  
                           __ptext28 130A                             __ptext37 0801  
                           __ptext29 12D6                             __ptext38 1368  
                           __ptext39 00B1                      LCDWriteInt@sign 0024  
                          tempCalc@R 004F                   __end_of_readButton 1800  
                  ??_TMR4_Initialize 0070                        __size_of_main 058D  
               __CFG_WDTCWS$WDTCWS_7 0000                             _tempCalc 0BA6  
        PIN_MANAGER_Initialize@state 0070                             log@coeff 1800  
                        ??_eval_poly 007E                          _sampleIndex 0068  
                 _PWM7_LoadDutyValue 12D6          ?_Init_Battery_State_Machine 0070  
                   ___lwmod@dividend 0072                       LCDWriteInt@str 0029  
            ?_PIN_MANAGER_Initialize 0070                  ?_PWM7_LoadDutyValue 0070  
                  __CFG_CLKOUTEN$OFF 0000                          _PPSLOCKbits 0E8F  
                   ??_ADC_Initialize 0070         PWM6_LoadDutyValue@dutyCycle6 0070  
                      __pstringtext1 1000                        __pstringtext2 1800  
                      __pstringtext3 1820                        __pstringtext4 1825  
                      __pstringtext5 0000                 ??_PWM7_LoadDutyValue 0072  
                    ___lwmod@divisor 0070                      ___lwmod@counter 0075  
           LCDWriteString@characters 007C                         ___aldiv@sign 0021  
                 readIAnalog@channel 0026                _Battery_State_Machine 00B1  
     __end_of_PIN_MANAGER_Initialize 1416           __end_of_PWM1_LoadDutyValue 12C0  
                      main@IOutTotal 00E6              __size_of_LCDWriteString 0014  
