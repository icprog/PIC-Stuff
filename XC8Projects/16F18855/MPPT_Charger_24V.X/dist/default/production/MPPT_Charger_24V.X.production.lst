

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri Aug 17 16:46:38 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F18855
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	stringtext2,global,class=STRCODE,delta=2
     8                           	psect	stringtext3,global,class=STRCODE,delta=2
     9                           	psect	stringtext4,global,class=STRCODE,delta=2
    10                           	psect	stringtext5,global,class=STRCODE,delta=2
    11                           	psect	cinit,global,class=CODE,merge=1,delta=2
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    16                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    17                           	psect	inittext,global,class=CODE,delta=2
    18                           	psect	clrtext,global,class=CODE,delta=2
    19                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    20                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    22                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    23                           	psect	text1,local,class=CODE,merge=1,delta=2
    24                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    25                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    27                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    29                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    30                           	psect	text8,local,class=CODE,merge=1,delta=2
    31                           	psect	text9,local,class=CODE,merge=1,delta=2
    32                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    33                           	psect	text11,local,class=CODE,merge=1,delta=2
    34                           	psect	text12,local,class=CODE,merge=1,delta=2
    35                           	psect	text13,local,class=CODE,merge=1,delta=2
    36                           	psect	text14,local,class=CODE,merge=1,delta=2
    37                           	psect	text15,local,class=CODE,merge=1,delta=2
    38                           	psect	text16,local,class=CODE,merge=1,delta=2
    39                           	psect	text17,local,class=CODE,merge=1,delta=2
    40                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    41                           	psect	text19,local,class=CODE,merge=1,delta=2
    42                           	psect	text20,local,class=CODE,merge=1,delta=2
    43                           	psect	text21,local,class=CODE,merge=1,delta=2
    44                           	psect	text22,local,class=CODE,merge=1,delta=2
    45                           	psect	text23,local,class=CODE,merge=1,delta=2
    46                           	psect	text24,local,class=CODE,merge=1,delta=2
    47                           	psect	text25,local,class=CODE,merge=1,delta=2
    48                           	psect	text26,local,class=CODE,merge=1,delta=2
    49                           	psect	text27,local,class=CODE,merge=1,delta=2
    50                           	psect	text28,local,class=CODE,merge=1,delta=2
    51                           	psect	text29,local,class=CODE,merge=1,delta=2
    52                           	psect	text30,local,class=CODE,merge=1,delta=2
    53                           	psect	text31,local,class=CODE,merge=1,delta=2
    54                           	psect	text32,local,class=CODE,merge=1,delta=2
    55                           	psect	text33,local,class=CODE,merge=1,delta=2
    56                           	psect	text34,local,class=CODE,merge=1,delta=2
    57                           	psect	text35,local,class=CODE,merge=1,delta=2,group=2
    58                           	psect	text36,local,class=CODE,merge=1,delta=2,group=2
    59                           	psect	text37,local,class=CODE,merge=1,delta=2
    60                           	psect	text38,local,class=CODE,merge=1,delta=2,group=2
    61                           	psect	text39,local,class=CODE,merge=1,delta=2
    62                           	psect	text40,local,class=CODE,merge=1,delta=2
    63                           	psect	text41,local,class=CODE,merge=1,delta=2,group=2
    64                           	psect	text42,local,class=CODE,merge=1,delta=2,group=2
    65                           	psect	text43,local,class=CODE,merge=1,delta=2,group=2
    66                           	psect	text44,local,class=CODE,merge=1,delta=2,group=2
    67                           	dabs	1,0x620,48
    68                           	dabs	1,0x5A8,72
    69                           	dabs	1,0x5A0,8
    70                           	dabs	1,0x520,80
    71                           	dabs	1,0x4A0,80
    72                           	dabs	1,0x420,80
    73                           	dabs	1,0x3A0,80
    74                           	dabs	1,0x328,72
    75                           	dabs	1,0x21E8,0,_Isamples
    76                           	dabs	1,0x2378,0,_Vsamples
    77                           	dabs	1,0x7E,2
    78  0000                     
    79                           ; Version 1.45
    80                           ; Generated 16/11/2017 GMT
    81                           ; 
    82                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    83                           ; All rights reserved.
    84                           ; 
    85                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    86                           ; 
    87                           ; Redistribution and use in source and binary forms, with or without modification, are
    88                           ; permitted provided that the following conditions are met:
    89                           ; 
    90                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    91                           ;        conditions and the following disclaimer.
    92                           ; 
    93                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    94                           ;        of conditions and the following disclaimer in the documentation and/or other
    95                           ;        materials provided with the distribution.
    96                           ; 
    97                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    98                           ;        software without specific prior written permission.
    99                           ; 
   100                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   101                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   102                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   103                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   104                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   105                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   106                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   107                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   108                           ; 
   109                           ; 
   110                           ; Code-generator required, PIC16F18855 Definitions
   111                           ; 
   112                           ; SFR Addresses
   113  0000                     	;# 
   114  0001                     	;# 
   115  0002                     	;# 
   116  0003                     	;# 
   117  0004                     	;# 
   118  0005                     	;# 
   119  0006                     	;# 
   120  0007                     	;# 
   121  0008                     	;# 
   122  0009                     	;# 
   123  000A                     	;# 
   124  000B                     	;# 
   125  000C                     	;# 
   126  000D                     	;# 
   127  000E                     	;# 
   128  0010                     	;# 
   129  0011                     	;# 
   130  0012                     	;# 
   131  0013                     	;# 
   132  0016                     	;# 
   133  0017                     	;# 
   134  0018                     	;# 
   135  001C                     	;# 
   136  001C                     	;# 
   137  001D                     	;# 
   138  001D                     	;# 
   139  001E                     	;# 
   140  001F                     	;# 
   141  008C                     	;# 
   142  008C                     	;# 
   143  008D                     	;# 
   144  008E                     	;# 
   145  008E                     	;# 
   146  008F                     	;# 
   147  0090                     	;# 
   148  0090                     	;# 
   149  0091                     	;# 
   150  0093                     	;# 
   151  0094                     	;# 
   152  0095                     	;# 
   153  0096                     	;# 
   154  0097                     	;# 
   155  0098                     	;# 
   156  0099                     	;# 
   157  009A                     	;# 
   158  009B                     	;# 
   159  009C                     	;# 
   160  009D                     	;# 
   161  009E                     	;# 
   162  010C                     	;# 
   163  010D                     	;# 
   164  010E                     	;# 
   165  010E                     	;# 
   166  010F                     	;# 
   167  0110                     	;# 
   168  0110                     	;# 
   169  0111                     	;# 
   170  0112                     	;# 
   171  0112                     	;# 
   172  0113                     	;# 
   173  0114                     	;# 
   174  0114                     	;# 
   175  0115                     	;# 
   176  0116                     	;# 
   177  0116                     	;# 
   178  0117                     	;# 
   179  0119                     	;# 
   180  0119                     	;# 
   181  0119                     	;# 
   182  011A                     	;# 
   183  011A                     	;# 
   184  011A                     	;# 
   185  011B                     	;# 
   186  011B                     	;# 
   187  011B                     	;# 
   188  011B                     	;# 
   189  011B                     	;# 
   190  011C                     	;# 
   191  011C                     	;# 
   192  011C                     	;# 
   193  011D                     	;# 
   194  011D                     	;# 
   195  011D                     	;# 
   196  011E                     	;# 
   197  011E                     	;# 
   198  011E                     	;# 
   199  011F                     	;# 
   200  011F                     	;# 
   201  011F                     	;# 
   202  011F                     	;# 
   203  011F                     	;# 
   204  018C                     	;# 
   205  018D                     	;# 
   206  018E                     	;# 
   207  018F                     	;# 
   208  0190                     	;# 
   209  0191                     	;# 
   210  0192                     	;# 
   211  0196                     	;# 
   212  0197                     	;# 
   213  0198                     	;# 
   214  0199                     	;# 
   215  019A                     	;# 
   216  019B                     	;# 
   217  019C                     	;# 
   218  020C                     	;# 
   219  020C                     	;# 
   220  020D                     	;# 
   221  020E                     	;# 
   222  020F                     	;# 
   223  020F                     	;# 
   224  0210                     	;# 
   225  0210                     	;# 
   226  0211                     	;# 
   227  0211                     	;# 
   228  0212                     	;# 
   229  0212                     	;# 
   230  0213                     	;# 
   231  0214                     	;# 
   232  0215                     	;# 
   233  0215                     	;# 
   234  0216                     	;# 
   235  0216                     	;# 
   236  0217                     	;# 
   237  0217                     	;# 
   238  0218                     	;# 
   239  0218                     	;# 
   240  0219                     	;# 
   241  021A                     	;# 
   242  021B                     	;# 
   243  021B                     	;# 
   244  021C                     	;# 
   245  021C                     	;# 
   246  021D                     	;# 
   247  021D                     	;# 
   248  021E                     	;# 
   249  021F                     	;# 
   250  028C                     	;# 
   251  028C                     	;# 
   252  028D                     	;# 
   253  028D                     	;# 
   254  028E                     	;# 
   255  028F                     	;# 
   256  0290                     	;# 
   257  0290                     	;# 
   258  0291                     	;# 
   259  0292                     	;# 
   260  0292                     	;# 
   261  0293                     	;# 
   262  0293                     	;# 
   263  0294                     	;# 
   264  0295                     	;# 
   265  0296                     	;# 
   266  0296                     	;# 
   267  0297                     	;# 
   268  0298                     	;# 
   269  0298                     	;# 
   270  0299                     	;# 
   271  0299                     	;# 
   272  029A                     	;# 
   273  029B                     	;# 
   274  029C                     	;# 
   275  029C                     	;# 
   276  029D                     	;# 
   277  030C                     	;# 
   278  030C                     	;# 
   279  030D                     	;# 
   280  030E                     	;# 
   281  030F                     	;# 
   282  0310                     	;# 
   283  0310                     	;# 
   284  0311                     	;# 
   285  0312                     	;# 
   286  0313                     	;# 
   287  0314                     	;# 
   288  0314                     	;# 
   289  0315                     	;# 
   290  0316                     	;# 
   291  0317                     	;# 
   292  0318                     	;# 
   293  0318                     	;# 
   294  0319                     	;# 
   295  031A                     	;# 
   296  031B                     	;# 
   297  031C                     	;# 
   298  031C                     	;# 
   299  031D                     	;# 
   300  031E                     	;# 
   301  031F                     	;# 
   302  038C                     	;# 
   303  038D                     	;# 
   304  038E                     	;# 
   305  0390                     	;# 
   306  0391                     	;# 
   307  0392                     	;# 
   308  040C                     	;# 
   309  040D                     	;# 
   310  040E                     	;# 
   311  040F                     	;# 
   312  0410                     	;# 
   313  0411                     	;# 
   314  0416                     	;# 
   315  0416                     	;# 
   316  0417                     	;# 
   317  0418                     	;# 
   318  0418                     	;# 
   319  0419                     	;# 
   320  041A                     	;# 
   321  041A                     	;# 
   322  041B                     	;# 
   323  041C                     	;# 
   324  041C                     	;# 
   325  041D                     	;# 
   326  041E                     	;# 
   327  041F                     	;# 
   328  048C                     	;# 
   329  048C                     	;# 
   330  048D                     	;# 
   331  048E                     	;# 
   332  048F                     	;# 
   333  048F                     	;# 
   334  0490                     	;# 
   335  0491                     	;# 
   336  0492                     	;# 
   337  0492                     	;# 
   338  0493                     	;# 
   339  0494                     	;# 
   340  0495                     	;# 
   341  0495                     	;# 
   342  0496                     	;# 
   343  0497                     	;# 
   344  0498                     	;# 
   345  0499                     	;# 
   346  049A                     	;# 
   347  049B                     	;# 
   348  049C                     	;# 
   349  049D                     	;# 
   350  050C                     	;# 
   351  050C                     	;# 
   352  050D                     	;# 
   353  050E                     	;# 
   354  050F                     	;# 
   355  050F                     	;# 
   356  0510                     	;# 
   357  0511                     	;# 
   358  0512                     	;# 
   359  0512                     	;# 
   360  0513                     	;# 
   361  0514                     	;# 
   362  0515                     	;# 
   363  0515                     	;# 
   364  0516                     	;# 
   365  0517                     	;# 
   366  0518                     	;# 
   367  0519                     	;# 
   368  051A                     	;# 
   369  051B                     	;# 
   370  051C                     	;# 
   371  051D                     	;# 
   372  058C                     	;# 
   373  058C                     	;# 
   374  058D                     	;# 
   375  058E                     	;# 
   376  058F                     	;# 
   377  058F                     	;# 
   378  0590                     	;# 
   379  0591                     	;# 
   380  0592                     	;# 
   381  0593                     	;# 
   382  060C                     	;# 
   383  060D                     	;# 
   384  060E                     	;# 
   385  060F                     	;# 
   386  0610                     	;# 
   387  0611                     	;# 
   388  0612                     	;# 
   389  0613                     	;# 
   390  0614                     	;# 
   391  0616                     	;# 
   392  0617                     	;# 
   393  0618                     	;# 
   394  0619                     	;# 
   395  061A                     	;# 
   396  061B                     	;# 
   397  061C                     	;# 
   398  061D                     	;# 
   399  061E                     	;# 
   400  068C                     	;# 
   401  068D                     	;# 
   402  068E                     	;# 
   403  068F                     	;# 
   404  0690                     	;# 
   405  0691                     	;# 
   406  0692                     	;# 
   407  0693                     	;# 
   408  0694                     	;# 
   409  070C                     	;# 
   410  070D                     	;# 
   411  070E                     	;# 
   412  070F                     	;# 
   413  0710                     	;# 
   414  0711                     	;# 
   415  0712                     	;# 
   416  0713                     	;# 
   417  0714                     	;# 
   418  0716                     	;# 
   419  0717                     	;# 
   420  0718                     	;# 
   421  0719                     	;# 
   422  071A                     	;# 
   423  071B                     	;# 
   424  071C                     	;# 
   425  071D                     	;# 
   426  071E                     	;# 
   427  0796                     	;# 
   428  0797                     	;# 
   429  0798                     	;# 
   430  0799                     	;# 
   431  079A                     	;# 
   432  079B                     	;# 
   433  080C                     	;# 
   434  080D                     	;# 
   435  080E                     	;# 
   436  080F                     	;# 
   437  0810                     	;# 
   438  0811                     	;# 
   439  0812                     	;# 
   440  0813                     	;# 
   441  0814                     	;# 
   442  081A                     	;# 
   443  081B                     	;# 
   444  081C                     	;# 
   445  081D                     	;# 
   446  081E                     	;# 
   447  081F                     	;# 
   448  088C                     	;# 
   449  088D                     	;# 
   450  088E                     	;# 
   451  088F                     	;# 
   452  0890                     	;# 
   453  0891                     	;# 
   454  0892                     	;# 
   455  0893                     	;# 
   456  0895                     	;# 
   457  0896                     	;# 
   458  0897                     	;# 
   459  0898                     	;# 
   460  0899                     	;# 
   461  089A                     	;# 
   462  089B                     	;# 
   463  090C                     	;# 
   464  090E                     	;# 
   465  090F                     	;# 
   466  091F                     	;# 
   467  091F                     	;# 
   468  098F                     	;# 
   469  098F                     	;# 
   470  0990                     	;# 
   471  0991                     	;# 
   472  0992                     	;# 
   473  0993                     	;# 
   474  0994                     	;# 
   475  0995                     	;# 
   476  0996                     	;# 
   477  0997                     	;# 
   478  0E0F                     	;# 
   479  0E10                     	;# 
   480  0E11                     	;# 
   481  0E12                     	;# 
   482  0E13                     	;# 
   483  0E14                     	;# 
   484  0E15                     	;# 
   485  0E16                     	;# 
   486  0E17                     	;# 
   487  0E18                     	;# 
   488  0E19                     	;# 
   489  0E1A                     	;# 
   490  0E1B                     	;# 
   491  0E1C                     	;# 
   492  0E1D                     	;# 
   493  0E1E                     	;# 
   494  0E1F                     	;# 
   495  0E20                     	;# 
   496  0E21                     	;# 
   497  0E22                     	;# 
   498  0E23                     	;# 
   499  0E24                     	;# 
   500  0E25                     	;# 
   501  0E26                     	;# 
   502  0E27                     	;# 
   503  0E28                     	;# 
   504  0E29                     	;# 
   505  0E2A                     	;# 
   506  0E2B                     	;# 
   507  0E2C                     	;# 
   508  0E2D                     	;# 
   509  0E2E                     	;# 
   510  0E2F                     	;# 
   511  0E30                     	;# 
   512  0E31                     	;# 
   513  0E32                     	;# 
   514  0E33                     	;# 
   515  0E34                     	;# 
   516  0E35                     	;# 
   517  0E36                     	;# 
   518  0E37                     	;# 
   519  0E8F                     	;# 
   520  0E90                     	;# 
   521  0E91                     	;# 
   522  0E92                     	;# 
   523  0E93                     	;# 
   524  0E94                     	;# 
   525  0E95                     	;# 
   526  0E96                     	;# 
   527  0E97                     	;# 
   528  0E9C                     	;# 
   529  0E9D                     	;# 
   530  0E9E                     	;# 
   531  0EA1                     	;# 
   532  0EA2                     	;# 
   533  0EA3                     	;# 
   534  0EA4                     	;# 
   535  0EA5                     	;# 
   536  0EA9                     	;# 
   537  0EAA                     	;# 
   538  0EAB                     	;# 
   539  0EAC                     	;# 
   540  0EB1                     	;# 
   541  0EB2                     	;# 
   542  0EB3                     	;# 
   543  0EB8                     	;# 
   544  0EB9                     	;# 
   545  0EBA                     	;# 
   546  0EBB                     	;# 
   547  0EBC                     	;# 
   548  0EBD                     	;# 
   549  0EBE                     	;# 
   550  0EC3                     	;# 
   551  0EC5                     	;# 
   552  0EC6                     	;# 
   553  0EC7                     	;# 
   554  0EC8                     	;# 
   555  0EC9                     	;# 
   556  0ECA                     	;# 
   557  0ECB                     	;# 
   558  0ECC                     	;# 
   559  0F10                     	;# 
   560  0F11                     	;# 
   561  0F12                     	;# 
   562  0F13                     	;# 
   563  0F14                     	;# 
   564  0F15                     	;# 
   565  0F16                     	;# 
   566  0F17                     	;# 
   567  0F18                     	;# 
   568  0F19                     	;# 
   569  0F1A                     	;# 
   570  0F1B                     	;# 
   571  0F1C                     	;# 
   572  0F1D                     	;# 
   573  0F1E                     	;# 
   574  0F1F                     	;# 
   575  0F20                     	;# 
   576  0F21                     	;# 
   577  0F22                     	;# 
   578  0F23                     	;# 
   579  0F24                     	;# 
   580  0F25                     	;# 
   581  0F26                     	;# 
   582  0F27                     	;# 
   583  0F38                     	;# 
   584  0F39                     	;# 
   585  0F3A                     	;# 
   586  0F3B                     	;# 
   587  0F3C                     	;# 
   588  0F3D                     	;# 
   589  0F3E                     	;# 
   590  0F3F                     	;# 
   591  0F40                     	;# 
   592  0F41                     	;# 
   593  0F43                     	;# 
   594  0F44                     	;# 
   595  0F45                     	;# 
   596  0F46                     	;# 
   597  0F47                     	;# 
   598  0F48                     	;# 
   599  0F49                     	;# 
   600  0F4A                     	;# 
   601  0F4B                     	;# 
   602  0F4C                     	;# 
   603  0F4E                     	;# 
   604  0F4F                     	;# 
   605  0F50                     	;# 
   606  0F51                     	;# 
   607  0F52                     	;# 
   608  0F53                     	;# 
   609  0F54                     	;# 
   610  0F55                     	;# 
   611  0F56                     	;# 
   612  0F57                     	;# 
   613  0F65                     	;# 
   614  0F68                     	;# 
   615  0F69                     	;# 
   616  0F6A                     	;# 
   617  0F6B                     	;# 
   618  0FE4                     	;# 
   619  0FE5                     	;# 
   620  0FE6                     	;# 
   621  0FE7                     	;# 
   622  0FE8                     	;# 
   623  0FE9                     	;# 
   624  0FEA                     	;# 
   625  0FEB                     	;# 
   626  0FED                     	;# 
   627  0FEE                     	;# 
   628  0FEF                     	;# 
   629  0000                     	;# 
   630  0001                     	;# 
   631  0002                     	;# 
   632  0003                     	;# 
   633  0004                     	;# 
   634  0005                     	;# 
   635  0006                     	;# 
   636  0007                     	;# 
   637  0008                     	;# 
   638  0009                     	;# 
   639  000A                     	;# 
   640  000B                     	;# 
   641  000C                     	;# 
   642  000D                     	;# 
   643  000E                     	;# 
   644  0010                     	;# 
   645  0011                     	;# 
   646  0012                     	;# 
   647  0013                     	;# 
   648  0016                     	;# 
   649  0017                     	;# 
   650  0018                     	;# 
   651  001C                     	;# 
   652  001C                     	;# 
   653  001D                     	;# 
   654  001D                     	;# 
   655  001E                     	;# 
   656  001F                     	;# 
   657  008C                     	;# 
   658  008C                     	;# 
   659  008D                     	;# 
   660  008E                     	;# 
   661  008E                     	;# 
   662  008F                     	;# 
   663  0090                     	;# 
   664  0090                     	;# 
   665  0091                     	;# 
   666  0093                     	;# 
   667  0094                     	;# 
   668  0095                     	;# 
   669  0096                     	;# 
   670  0097                     	;# 
   671  0098                     	;# 
   672  0099                     	;# 
   673  009A                     	;# 
   674  009B                     	;# 
   675  009C                     	;# 
   676  009D                     	;# 
   677  009E                     	;# 
   678  010C                     	;# 
   679  010D                     	;# 
   680  010E                     	;# 
   681  010E                     	;# 
   682  010F                     	;# 
   683  0110                     	;# 
   684  0110                     	;# 
   685  0111                     	;# 
   686  0112                     	;# 
   687  0112                     	;# 
   688  0113                     	;# 
   689  0114                     	;# 
   690  0114                     	;# 
   691  0115                     	;# 
   692  0116                     	;# 
   693  0116                     	;# 
   694  0117                     	;# 
   695  0119                     	;# 
   696  0119                     	;# 
   697  0119                     	;# 
   698  011A                     	;# 
   699  011A                     	;# 
   700  011A                     	;# 
   701  011B                     	;# 
   702  011B                     	;# 
   703  011B                     	;# 
   704  011B                     	;# 
   705  011B                     	;# 
   706  011C                     	;# 
   707  011C                     	;# 
   708  011C                     	;# 
   709  011D                     	;# 
   710  011D                     	;# 
   711  011D                     	;# 
   712  011E                     	;# 
   713  011E                     	;# 
   714  011E                     	;# 
   715  011F                     	;# 
   716  011F                     	;# 
   717  011F                     	;# 
   718  011F                     	;# 
   719  011F                     	;# 
   720  018C                     	;# 
   721  018D                     	;# 
   722  018E                     	;# 
   723  018F                     	;# 
   724  0190                     	;# 
   725  0191                     	;# 
   726  0192                     	;# 
   727  0196                     	;# 
   728  0197                     	;# 
   729  0198                     	;# 
   730  0199                     	;# 
   731  019A                     	;# 
   732  019B                     	;# 
   733  019C                     	;# 
   734  020C                     	;# 
   735  020C                     	;# 
   736  020D                     	;# 
   737  020E                     	;# 
   738  020F                     	;# 
   739  020F                     	;# 
   740  0210                     	;# 
   741  0210                     	;# 
   742  0211                     	;# 
   743  0211                     	;# 
   744  0212                     	;# 
   745  0212                     	;# 
   746  0213                     	;# 
   747  0214                     	;# 
   748  0215                     	;# 
   749  0215                     	;# 
   750  0216                     	;# 
   751  0216                     	;# 
   752  0217                     	;# 
   753  0217                     	;# 
   754  0218                     	;# 
   755  0218                     	;# 
   756  0219                     	;# 
   757  021A                     	;# 
   758  021B                     	;# 
   759  021B                     	;# 
   760  021C                     	;# 
   761  021C                     	;# 
   762  021D                     	;# 
   763  021D                     	;# 
   764  021E                     	;# 
   765  021F                     	;# 
   766  028C                     	;# 
   767  028C                     	;# 
   768  028D                     	;# 
   769  028D                     	;# 
   770  028E                     	;# 
   771  028F                     	;# 
   772  0290                     	;# 
   773  0290                     	;# 
   774  0291                     	;# 
   775  0292                     	;# 
   776  0292                     	;# 
   777  0293                     	;# 
   778  0293                     	;# 
   779  0294                     	;# 
   780  0295                     	;# 
   781  0296                     	;# 
   782  0296                     	;# 
   783  0297                     	;# 
   784  0298                     	;# 
   785  0298                     	;# 
   786  0299                     	;# 
   787  0299                     	;# 
   788  029A                     	;# 
   789  029B                     	;# 
   790  029C                     	;# 
   791  029C                     	;# 
   792  029D                     	;# 
   793  030C                     	;# 
   794  030C                     	;# 
   795  030D                     	;# 
   796  030E                     	;# 
   797  030F                     	;# 
   798  0310                     	;# 
   799  0310                     	;# 
   800  0311                     	;# 
   801  0312                     	;# 
   802  0313                     	;# 
   803  0314                     	;# 
   804  0314                     	;# 
   805  0315                     	;# 
   806  0316                     	;# 
   807  0317                     	;# 
   808  0318                     	;# 
   809  0318                     	;# 
   810  0319                     	;# 
   811  031A                     	;# 
   812  031B                     	;# 
   813  031C                     	;# 
   814  031C                     	;# 
   815  031D                     	;# 
   816  031E                     	;# 
   817  031F                     	;# 
   818  038C                     	;# 
   819  038D                     	;# 
   820  038E                     	;# 
   821  0390                     	;# 
   822  0391                     	;# 
   823  0392                     	;# 
   824  040C                     	;# 
   825  040D                     	;# 
   826  040E                     	;# 
   827  040F                     	;# 
   828  0410                     	;# 
   829  0411                     	;# 
   830  0416                     	;# 
   831  0416                     	;# 
   832  0417                     	;# 
   833  0418                     	;# 
   834  0418                     	;# 
   835  0419                     	;# 
   836  041A                     	;# 
   837  041A                     	;# 
   838  041B                     	;# 
   839  041C                     	;# 
   840  041C                     	;# 
   841  041D                     	;# 
   842  041E                     	;# 
   843  041F                     	;# 
   844  048C                     	;# 
   845  048C                     	;# 
   846  048D                     	;# 
   847  048E                     	;# 
   848  048F                     	;# 
   849  048F                     	;# 
   850  0490                     	;# 
   851  0491                     	;# 
   852  0492                     	;# 
   853  0492                     	;# 
   854  0493                     	;# 
   855  0494                     	;# 
   856  0495                     	;# 
   857  0495                     	;# 
   858  0496                     	;# 
   859  0497                     	;# 
   860  0498                     	;# 
   861  0499                     	;# 
   862  049A                     	;# 
   863  049B                     	;# 
   864  049C                     	;# 
   865  049D                     	;# 
   866  050C                     	;# 
   867  050C                     	;# 
   868  050D                     	;# 
   869  050E                     	;# 
   870  050F                     	;# 
   871  050F                     	;# 
   872  0510                     	;# 
   873  0511                     	;# 
   874  0512                     	;# 
   875  0512                     	;# 
   876  0513                     	;# 
   877  0514                     	;# 
   878  0515                     	;# 
   879  0515                     	;# 
   880  0516                     	;# 
   881  0517                     	;# 
   882  0518                     	;# 
   883  0519                     	;# 
   884  051A                     	;# 
   885  051B                     	;# 
   886  051C                     	;# 
   887  051D                     	;# 
   888  058C                     	;# 
   889  058C                     	;# 
   890  058D                     	;# 
   891  058E                     	;# 
   892  058F                     	;# 
   893  058F                     	;# 
   894  0590                     	;# 
   895  0591                     	;# 
   896  0592                     	;# 
   897  0593                     	;# 
   898  060C                     	;# 
   899  060D                     	;# 
   900  060E                     	;# 
   901  060F                     	;# 
   902  0610                     	;# 
   903  0611                     	;# 
   904  0612                     	;# 
   905  0613                     	;# 
   906  0614                     	;# 
   907  0616                     	;# 
   908  0617                     	;# 
   909  0618                     	;# 
   910  0619                     	;# 
   911  061A                     	;# 
   912  061B                     	;# 
   913  061C                     	;# 
   914  061D                     	;# 
   915  061E                     	;# 
   916  068C                     	;# 
   917  068D                     	;# 
   918  068E                     	;# 
   919  068F                     	;# 
   920  0690                     	;# 
   921  0691                     	;# 
   922  0692                     	;# 
   923  0693                     	;# 
   924  0694                     	;# 
   925  070C                     	;# 
   926  070D                     	;# 
   927  070E                     	;# 
   928  070F                     	;# 
   929  0710                     	;# 
   930  0711                     	;# 
   931  0712                     	;# 
   932  0713                     	;# 
   933  0714                     	;# 
   934  0716                     	;# 
   935  0717                     	;# 
   936  0718                     	;# 
   937  0719                     	;# 
   938  071A                     	;# 
   939  071B                     	;# 
   940  071C                     	;# 
   941  071D                     	;# 
   942  071E                     	;# 
   943  0796                     	;# 
   944  0797                     	;# 
   945  0798                     	;# 
   946  0799                     	;# 
   947  079A                     	;# 
   948  079B                     	;# 
   949  080C                     	;# 
   950  080D                     	;# 
   951  080E                     	;# 
   952  080F                     	;# 
   953  0810                     	;# 
   954  0811                     	;# 
   955  0812                     	;# 
   956  0813                     	;# 
   957  0814                     	;# 
   958  081A                     	;# 
   959  081B                     	;# 
   960  081C                     	;# 
   961  081D                     	;# 
   962  081E                     	;# 
   963  081F                     	;# 
   964  088C                     	;# 
   965  088D                     	;# 
   966  088E                     	;# 
   967  088F                     	;# 
   968  0890                     	;# 
   969  0891                     	;# 
   970  0892                     	;# 
   971  0893                     	;# 
   972  0895                     	;# 
   973  0896                     	;# 
   974  0897                     	;# 
   975  0898                     	;# 
   976  0899                     	;# 
   977  089A                     	;# 
   978  089B                     	;# 
   979  090C                     	;# 
   980  090E                     	;# 
   981  090F                     	;# 
   982  091F                     	;# 
   983  091F                     	;# 
   984  098F                     	;# 
   985  098F                     	;# 
   986  0990                     	;# 
   987  0991                     	;# 
   988  0992                     	;# 
   989  0993                     	;# 
   990  0994                     	;# 
   991  0995                     	;# 
   992  0996                     	;# 
   993  0997                     	;# 
   994  0E0F                     	;# 
   995  0E10                     	;# 
   996  0E11                     	;# 
   997  0E12                     	;# 
   998  0E13                     	;# 
   999  0E14                     	;# 
  1000  0E15                     	;# 
  1001  0E16                     	;# 
  1002  0E17                     	;# 
  1003  0E18                     	;# 
  1004  0E19                     	;# 
  1005  0E1A                     	;# 
  1006  0E1B                     	;# 
  1007  0E1C                     	;# 
  1008  0E1D                     	;# 
  1009  0E1E                     	;# 
  1010  0E1F                     	;# 
  1011  0E20                     	;# 
  1012  0E21                     	;# 
  1013  0E22                     	;# 
  1014  0E23                     	;# 
  1015  0E24                     	;# 
  1016  0E25                     	;# 
  1017  0E26                     	;# 
  1018  0E27                     	;# 
  1019  0E28                     	;# 
  1020  0E29                     	;# 
  1021  0E2A                     	;# 
  1022  0E2B                     	;# 
  1023  0E2C                     	;# 
  1024  0E2D                     	;# 
  1025  0E2E                     	;# 
  1026  0E2F                     	;# 
  1027  0E30                     	;# 
  1028  0E31                     	;# 
  1029  0E32                     	;# 
  1030  0E33                     	;# 
  1031  0E34                     	;# 
  1032  0E35                     	;# 
  1033  0E36                     	;# 
  1034  0E37                     	;# 
  1035  0E8F                     	;# 
  1036  0E90                     	;# 
  1037  0E91                     	;# 
  1038  0E92                     	;# 
  1039  0E93                     	;# 
  1040  0E94                     	;# 
  1041  0E95                     	;# 
  1042  0E96                     	;# 
  1043  0E97                     	;# 
  1044  0E9C                     	;# 
  1045  0E9D                     	;# 
  1046  0E9E                     	;# 
  1047  0EA1                     	;# 
  1048  0EA2                     	;# 
  1049  0EA3                     	;# 
  1050  0EA4                     	;# 
  1051  0EA5                     	;# 
  1052  0EA9                     	;# 
  1053  0EAA                     	;# 
  1054  0EAB                     	;# 
  1055  0EAC                     	;# 
  1056  0EB1                     	;# 
  1057  0EB2                     	;# 
  1058  0EB3                     	;# 
  1059  0EB8                     	;# 
  1060  0EB9                     	;# 
  1061  0EBA                     	;# 
  1062  0EBB                     	;# 
  1063  0EBC                     	;# 
  1064  0EBD                     	;# 
  1065  0EBE                     	;# 
  1066  0EC3                     	;# 
  1067  0EC5                     	;# 
  1068  0EC6                     	;# 
  1069  0EC7                     	;# 
  1070  0EC8                     	;# 
  1071  0EC9                     	;# 
  1072  0ECA                     	;# 
  1073  0ECB                     	;# 
  1074  0ECC                     	;# 
  1075  0F10                     	;# 
  1076  0F11                     	;# 
  1077  0F12                     	;# 
  1078  0F13                     	;# 
  1079  0F14                     	;# 
  1080  0F15                     	;# 
  1081  0F16                     	;# 
  1082  0F17                     	;# 
  1083  0F18                     	;# 
  1084  0F19                     	;# 
  1085  0F1A                     	;# 
  1086  0F1B                     	;# 
  1087  0F1C                     	;# 
  1088  0F1D                     	;# 
  1089  0F1E                     	;# 
  1090  0F1F                     	;# 
  1091  0F20                     	;# 
  1092  0F21                     	;# 
  1093  0F22                     	;# 
  1094  0F23                     	;# 
  1095  0F24                     	;# 
  1096  0F25                     	;# 
  1097  0F26                     	;# 
  1098  0F27                     	;# 
  1099  0F38                     	;# 
  1100  0F39                     	;# 
  1101  0F3A                     	;# 
  1102  0F3B                     	;# 
  1103  0F3C                     	;# 
  1104  0F3D                     	;# 
  1105  0F3E                     	;# 
  1106  0F3F                     	;# 
  1107  0F40                     	;# 
  1108  0F41                     	;# 
  1109  0F43                     	;# 
  1110  0F44                     	;# 
  1111  0F45                     	;# 
  1112  0F46                     	;# 
  1113  0F47                     	;# 
  1114  0F48                     	;# 
  1115  0F49                     	;# 
  1116  0F4A                     	;# 
  1117  0F4B                     	;# 
  1118  0F4C                     	;# 
  1119  0F4E                     	;# 
  1120  0F4F                     	;# 
  1121  0F50                     	;# 
  1122  0F51                     	;# 
  1123  0F52                     	;# 
  1124  0F53                     	;# 
  1125  0F54                     	;# 
  1126  0F55                     	;# 
  1127  0F56                     	;# 
  1128  0F57                     	;# 
  1129  0F65                     	;# 
  1130  0F68                     	;# 
  1131  0F69                     	;# 
  1132  0F6A                     	;# 
  1133  0F6B                     	;# 
  1134  0FE4                     	;# 
  1135  0FE5                     	;# 
  1136  0FE6                     	;# 
  1137  0FE7                     	;# 
  1138  0FE8                     	;# 
  1139  0FE9                     	;# 
  1140  0FEA                     	;# 
  1141  0FEB                     	;# 
  1142  0FED                     	;# 
  1143  0FEE                     	;# 
  1144  0FEF                     	;# 
  1145  0000                     	;# 
  1146  0001                     	;# 
  1147  0002                     	;# 
  1148  0003                     	;# 
  1149  0004                     	;# 
  1150  0005                     	;# 
  1151  0006                     	;# 
  1152  0007                     	;# 
  1153  0008                     	;# 
  1154  0009                     	;# 
  1155  000A                     	;# 
  1156  000B                     	;# 
  1157  000C                     	;# 
  1158  000D                     	;# 
  1159  000E                     	;# 
  1160  0010                     	;# 
  1161  0011                     	;# 
  1162  0012                     	;# 
  1163  0013                     	;# 
  1164  0016                     	;# 
  1165  0017                     	;# 
  1166  0018                     	;# 
  1167  001C                     	;# 
  1168  001C                     	;# 
  1169  001D                     	;# 
  1170  001D                     	;# 
  1171  001E                     	;# 
  1172  001F                     	;# 
  1173  008C                     	;# 
  1174  008C                     	;# 
  1175  008D                     	;# 
  1176  008E                     	;# 
  1177  008E                     	;# 
  1178  008F                     	;# 
  1179  0090                     	;# 
  1180  0090                     	;# 
  1181  0091                     	;# 
  1182  0093                     	;# 
  1183  0094                     	;# 
  1184  0095                     	;# 
  1185  0096                     	;# 
  1186  0097                     	;# 
  1187  0098                     	;# 
  1188  0099                     	;# 
  1189  009A                     	;# 
  1190  009B                     	;# 
  1191  009C                     	;# 
  1192  009D                     	;# 
  1193  009E                     	;# 
  1194  010C                     	;# 
  1195  010D                     	;# 
  1196  010E                     	;# 
  1197  010E                     	;# 
  1198  010F                     	;# 
  1199  0110                     	;# 
  1200  0110                     	;# 
  1201  0111                     	;# 
  1202  0112                     	;# 
  1203  0112                     	;# 
  1204  0113                     	;# 
  1205  0114                     	;# 
  1206  0114                     	;# 
  1207  0115                     	;# 
  1208  0116                     	;# 
  1209  0116                     	;# 
  1210  0117                     	;# 
  1211  0119                     	;# 
  1212  0119                     	;# 
  1213  0119                     	;# 
  1214  011A                     	;# 
  1215  011A                     	;# 
  1216  011A                     	;# 
  1217  011B                     	;# 
  1218  011B                     	;# 
  1219  011B                     	;# 
  1220  011B                     	;# 
  1221  011B                     	;# 
  1222  011C                     	;# 
  1223  011C                     	;# 
  1224  011C                     	;# 
  1225  011D                     	;# 
  1226  011D                     	;# 
  1227  011D                     	;# 
  1228  011E                     	;# 
  1229  011E                     	;# 
  1230  011E                     	;# 
  1231  011F                     	;# 
  1232  011F                     	;# 
  1233  011F                     	;# 
  1234  011F                     	;# 
  1235  011F                     	;# 
  1236  018C                     	;# 
  1237  018D                     	;# 
  1238  018E                     	;# 
  1239  018F                     	;# 
  1240  0190                     	;# 
  1241  0191                     	;# 
  1242  0192                     	;# 
  1243  0196                     	;# 
  1244  0197                     	;# 
  1245  0198                     	;# 
  1246  0199                     	;# 
  1247  019A                     	;# 
  1248  019B                     	;# 
  1249  019C                     	;# 
  1250  020C                     	;# 
  1251  020C                     	;# 
  1252  020D                     	;# 
  1253  020E                     	;# 
  1254  020F                     	;# 
  1255  020F                     	;# 
  1256  0210                     	;# 
  1257  0210                     	;# 
  1258  0211                     	;# 
  1259  0211                     	;# 
  1260  0212                     	;# 
  1261  0212                     	;# 
  1262  0213                     	;# 
  1263  0214                     	;# 
  1264  0215                     	;# 
  1265  0215                     	;# 
  1266  0216                     	;# 
  1267  0216                     	;# 
  1268  0217                     	;# 
  1269  0217                     	;# 
  1270  0218                     	;# 
  1271  0218                     	;# 
  1272  0219                     	;# 
  1273  021A                     	;# 
  1274  021B                     	;# 
  1275  021B                     	;# 
  1276  021C                     	;# 
  1277  021C                     	;# 
  1278  021D                     	;# 
  1279  021D                     	;# 
  1280  021E                     	;# 
  1281  021F                     	;# 
  1282  028C                     	;# 
  1283  028C                     	;# 
  1284  028D                     	;# 
  1285  028D                     	;# 
  1286  028E                     	;# 
  1287  028F                     	;# 
  1288  0290                     	;# 
  1289  0290                     	;# 
  1290  0291                     	;# 
  1291  0292                     	;# 
  1292  0292                     	;# 
  1293  0293                     	;# 
  1294  0293                     	;# 
  1295  0294                     	;# 
  1296  0295                     	;# 
  1297  0296                     	;# 
  1298  0296                     	;# 
  1299  0297                     	;# 
  1300  0298                     	;# 
  1301  0298                     	;# 
  1302  0299                     	;# 
  1303  0299                     	;# 
  1304  029A                     	;# 
  1305  029B                     	;# 
  1306  029C                     	;# 
  1307  029C                     	;# 
  1308  029D                     	;# 
  1309  030C                     	;# 
  1310  030C                     	;# 
  1311  030D                     	;# 
  1312  030E                     	;# 
  1313  030F                     	;# 
  1314  0310                     	;# 
  1315  0310                     	;# 
  1316  0311                     	;# 
  1317  0312                     	;# 
  1318  0313                     	;# 
  1319  0314                     	;# 
  1320  0314                     	;# 
  1321  0315                     	;# 
  1322  0316                     	;# 
  1323  0317                     	;# 
  1324  0318                     	;# 
  1325  0318                     	;# 
  1326  0319                     	;# 
  1327  031A                     	;# 
  1328  031B                     	;# 
  1329  031C                     	;# 
  1330  031C                     	;# 
  1331  031D                     	;# 
  1332  031E                     	;# 
  1333  031F                     	;# 
  1334  038C                     	;# 
  1335  038D                     	;# 
  1336  038E                     	;# 
  1337  0390                     	;# 
  1338  0391                     	;# 
  1339  0392                     	;# 
  1340  040C                     	;# 
  1341  040D                     	;# 
  1342  040E                     	;# 
  1343  040F                     	;# 
  1344  0410                     	;# 
  1345  0411                     	;# 
  1346  0416                     	;# 
  1347  0416                     	;# 
  1348  0417                     	;# 
  1349  0418                     	;# 
  1350  0418                     	;# 
  1351  0419                     	;# 
  1352  041A                     	;# 
  1353  041A                     	;# 
  1354  041B                     	;# 
  1355  041C                     	;# 
  1356  041C                     	;# 
  1357  041D                     	;# 
  1358  041E                     	;# 
  1359  041F                     	;# 
  1360  048C                     	;# 
  1361  048C                     	;# 
  1362  048D                     	;# 
  1363  048E                     	;# 
  1364  048F                     	;# 
  1365  048F                     	;# 
  1366  0490                     	;# 
  1367  0491                     	;# 
  1368  0492                     	;# 
  1369  0492                     	;# 
  1370  0493                     	;# 
  1371  0494                     	;# 
  1372  0495                     	;# 
  1373  0495                     	;# 
  1374  0496                     	;# 
  1375  0497                     	;# 
  1376  0498                     	;# 
  1377  0499                     	;# 
  1378  049A                     	;# 
  1379  049B                     	;# 
  1380  049C                     	;# 
  1381  049D                     	;# 
  1382  050C                     	;# 
  1383  050C                     	;# 
  1384  050D                     	;# 
  1385  050E                     	;# 
  1386  050F                     	;# 
  1387  050F                     	;# 
  1388  0510                     	;# 
  1389  0511                     	;# 
  1390  0512                     	;# 
  1391  0512                     	;# 
  1392  0513                     	;# 
  1393  0514                     	;# 
  1394  0515                     	;# 
  1395  0515                     	;# 
  1396  0516                     	;# 
  1397  0517                     	;# 
  1398  0518                     	;# 
  1399  0519                     	;# 
  1400  051A                     	;# 
  1401  051B                     	;# 
  1402  051C                     	;# 
  1403  051D                     	;# 
  1404  058C                     	;# 
  1405  058C                     	;# 
  1406  058D                     	;# 
  1407  058E                     	;# 
  1408  058F                     	;# 
  1409  058F                     	;# 
  1410  0590                     	;# 
  1411  0591                     	;# 
  1412  0592                     	;# 
  1413  0593                     	;# 
  1414  060C                     	;# 
  1415  060D                     	;# 
  1416  060E                     	;# 
  1417  060F                     	;# 
  1418  0610                     	;# 
  1419  0611                     	;# 
  1420  0612                     	;# 
  1421  0613                     	;# 
  1422  0614                     	;# 
  1423  0616                     	;# 
  1424  0617                     	;# 
  1425  0618                     	;# 
  1426  0619                     	;# 
  1427  061A                     	;# 
  1428  061B                     	;# 
  1429  061C                     	;# 
  1430  061D                     	;# 
  1431  061E                     	;# 
  1432  068C                     	;# 
  1433  068D                     	;# 
  1434  068E                     	;# 
  1435  068F                     	;# 
  1436  0690                     	;# 
  1437  0691                     	;# 
  1438  0692                     	;# 
  1439  0693                     	;# 
  1440  0694                     	;# 
  1441  070C                     	;# 
  1442  070D                     	;# 
  1443  070E                     	;# 
  1444  070F                     	;# 
  1445  0710                     	;# 
  1446  0711                     	;# 
  1447  0712                     	;# 
  1448  0713                     	;# 
  1449  0714                     	;# 
  1450  0716                     	;# 
  1451  0717                     	;# 
  1452  0718                     	;# 
  1453  0719                     	;# 
  1454  071A                     	;# 
  1455  071B                     	;# 
  1456  071C                     	;# 
  1457  071D                     	;# 
  1458  071E                     	;# 
  1459  0796                     	;# 
  1460  0797                     	;# 
  1461  0798                     	;# 
  1462  0799                     	;# 
  1463  079A                     	;# 
  1464  079B                     	;# 
  1465  080C                     	;# 
  1466  080D                     	;# 
  1467  080E                     	;# 
  1468  080F                     	;# 
  1469  0810                     	;# 
  1470  0811                     	;# 
  1471  0812                     	;# 
  1472  0813                     	;# 
  1473  0814                     	;# 
  1474  081A                     	;# 
  1475  081B                     	;# 
  1476  081C                     	;# 
  1477  081D                     	;# 
  1478  081E                     	;# 
  1479  081F                     	;# 
  1480  088C                     	;# 
  1481  088D                     	;# 
  1482  088E                     	;# 
  1483  088F                     	;# 
  1484  0890                     	;# 
  1485  0891                     	;# 
  1486  0892                     	;# 
  1487  0893                     	;# 
  1488  0895                     	;# 
  1489  0896                     	;# 
  1490  0897                     	;# 
  1491  0898                     	;# 
  1492  0899                     	;# 
  1493  089A                     	;# 
  1494  089B                     	;# 
  1495  090C                     	;# 
  1496  090E                     	;# 
  1497  090F                     	;# 
  1498  091F                     	;# 
  1499  091F                     	;# 
  1500  098F                     	;# 
  1501  098F                     	;# 
  1502  0990                     	;# 
  1503  0991                     	;# 
  1504  0992                     	;# 
  1505  0993                     	;# 
  1506  0994                     	;# 
  1507  0995                     	;# 
  1508  0996                     	;# 
  1509  0997                     	;# 
  1510  0E0F                     	;# 
  1511  0E10                     	;# 
  1512  0E11                     	;# 
  1513  0E12                     	;# 
  1514  0E13                     	;# 
  1515  0E14                     	;# 
  1516  0E15                     	;# 
  1517  0E16                     	;# 
  1518  0E17                     	;# 
  1519  0E18                     	;# 
  1520  0E19                     	;# 
  1521  0E1A                     	;# 
  1522  0E1B                     	;# 
  1523  0E1C                     	;# 
  1524  0E1D                     	;# 
  1525  0E1E                     	;# 
  1526  0E1F                     	;# 
  1527  0E20                     	;# 
  1528  0E21                     	;# 
  1529  0E22                     	;# 
  1530  0E23                     	;# 
  1531  0E24                     	;# 
  1532  0E25                     	;# 
  1533  0E26                     	;# 
  1534  0E27                     	;# 
  1535  0E28                     	;# 
  1536  0E29                     	;# 
  1537  0E2A                     	;# 
  1538  0E2B                     	;# 
  1539  0E2C                     	;# 
  1540  0E2D                     	;# 
  1541  0E2E                     	;# 
  1542  0E2F                     	;# 
  1543  0E30                     	;# 
  1544  0E31                     	;# 
  1545  0E32                     	;# 
  1546  0E33                     	;# 
  1547  0E34                     	;# 
  1548  0E35                     	;# 
  1549  0E36                     	;# 
  1550  0E37                     	;# 
  1551  0E8F                     	;# 
  1552  0E90                     	;# 
  1553  0E91                     	;# 
  1554  0E92                     	;# 
  1555  0E93                     	;# 
  1556  0E94                     	;# 
  1557  0E95                     	;# 
  1558  0E96                     	;# 
  1559  0E97                     	;# 
  1560  0E9C                     	;# 
  1561  0E9D                     	;# 
  1562  0E9E                     	;# 
  1563  0EA1                     	;# 
  1564  0EA2                     	;# 
  1565  0EA3                     	;# 
  1566  0EA4                     	;# 
  1567  0EA5                     	;# 
  1568  0EA9                     	;# 
  1569  0EAA                     	;# 
  1570  0EAB                     	;# 
  1571  0EAC                     	;# 
  1572  0EB1                     	;# 
  1573  0EB2                     	;# 
  1574  0EB3                     	;# 
  1575  0EB8                     	;# 
  1576  0EB9                     	;# 
  1577  0EBA                     	;# 
  1578  0EBB                     	;# 
  1579  0EBC                     	;# 
  1580  0EBD                     	;# 
  1581  0EBE                     	;# 
  1582  0EC3                     	;# 
  1583  0EC5                     	;# 
  1584  0EC6                     	;# 
  1585  0EC7                     	;# 
  1586  0EC8                     	;# 
  1587  0EC9                     	;# 
  1588  0ECA                     	;# 
  1589  0ECB                     	;# 
  1590  0ECC                     	;# 
  1591  0F10                     	;# 
  1592  0F11                     	;# 
  1593  0F12                     	;# 
  1594  0F13                     	;# 
  1595  0F14                     	;# 
  1596  0F15                     	;# 
  1597  0F16                     	;# 
  1598  0F17                     	;# 
  1599  0F18                     	;# 
  1600  0F19                     	;# 
  1601  0F1A                     	;# 
  1602  0F1B                     	;# 
  1603  0F1C                     	;# 
  1604  0F1D                     	;# 
  1605  0F1E                     	;# 
  1606  0F1F                     	;# 
  1607  0F20                     	;# 
  1608  0F21                     	;# 
  1609  0F22                     	;# 
  1610  0F23                     	;# 
  1611  0F24                     	;# 
  1612  0F25                     	;# 
  1613  0F26                     	;# 
  1614  0F27                     	;# 
  1615  0F38                     	;# 
  1616  0F39                     	;# 
  1617  0F3A                     	;# 
  1618  0F3B                     	;# 
  1619  0F3C                     	;# 
  1620  0F3D                     	;# 
  1621  0F3E                     	;# 
  1622  0F3F                     	;# 
  1623  0F40                     	;# 
  1624  0F41                     	;# 
  1625  0F43                     	;# 
  1626  0F44                     	;# 
  1627  0F45                     	;# 
  1628  0F46                     	;# 
  1629  0F47                     	;# 
  1630  0F48                     	;# 
  1631  0F49                     	;# 
  1632  0F4A                     	;# 
  1633  0F4B                     	;# 
  1634  0F4C                     	;# 
  1635  0F4E                     	;# 
  1636  0F4F                     	;# 
  1637  0F50                     	;# 
  1638  0F51                     	;# 
  1639  0F52                     	;# 
  1640  0F53                     	;# 
  1641  0F54                     	;# 
  1642  0F55                     	;# 
  1643  0F56                     	;# 
  1644  0F57                     	;# 
  1645  0F65                     	;# 
  1646  0F68                     	;# 
  1647  0F69                     	;# 
  1648  0F6A                     	;# 
  1649  0F6B                     	;# 
  1650  0FE4                     	;# 
  1651  0FE5                     	;# 
  1652  0FE6                     	;# 
  1653  0FE7                     	;# 
  1654  0FE8                     	;# 
  1655  0FE9                     	;# 
  1656  0FEA                     	;# 
  1657  0FEB                     	;# 
  1658  0FED                     	;# 
  1659  0FEE                     	;# 
  1660  0FEF                     	;# 
  1661  0000                     	;# 
  1662  0001                     	;# 
  1663  0002                     	;# 
  1664  0003                     	;# 
  1665  0004                     	;# 
  1666  0005                     	;# 
  1667  0006                     	;# 
  1668  0007                     	;# 
  1669  0008                     	;# 
  1670  0009                     	;# 
  1671  000A                     	;# 
  1672  000B                     	;# 
  1673  000C                     	;# 
  1674  000D                     	;# 
  1675  000E                     	;# 
  1676  0010                     	;# 
  1677  0011                     	;# 
  1678  0012                     	;# 
  1679  0013                     	;# 
  1680  0016                     	;# 
  1681  0017                     	;# 
  1682  0018                     	;# 
  1683  001C                     	;# 
  1684  001C                     	;# 
  1685  001D                     	;# 
  1686  001D                     	;# 
  1687  001E                     	;# 
  1688  001F                     	;# 
  1689  008C                     	;# 
  1690  008C                     	;# 
  1691  008D                     	;# 
  1692  008E                     	;# 
  1693  008E                     	;# 
  1694  008F                     	;# 
  1695  0090                     	;# 
  1696  0090                     	;# 
  1697  0091                     	;# 
  1698  0093                     	;# 
  1699  0094                     	;# 
  1700  0095                     	;# 
  1701  0096                     	;# 
  1702  0097                     	;# 
  1703  0098                     	;# 
  1704  0099                     	;# 
  1705  009A                     	;# 
  1706  009B                     	;# 
  1707  009C                     	;# 
  1708  009D                     	;# 
  1709  009E                     	;# 
  1710  010C                     	;# 
  1711  010D                     	;# 
  1712  010E                     	;# 
  1713  010E                     	;# 
  1714  010F                     	;# 
  1715  0110                     	;# 
  1716  0110                     	;# 
  1717  0111                     	;# 
  1718  0112                     	;# 
  1719  0112                     	;# 
  1720  0113                     	;# 
  1721  0114                     	;# 
  1722  0114                     	;# 
  1723  0115                     	;# 
  1724  0116                     	;# 
  1725  0116                     	;# 
  1726  0117                     	;# 
  1727  0119                     	;# 
  1728  0119                     	;# 
  1729  0119                     	;# 
  1730  011A                     	;# 
  1731  011A                     	;# 
  1732  011A                     	;# 
  1733  011B                     	;# 
  1734  011B                     	;# 
  1735  011B                     	;# 
  1736  011B                     	;# 
  1737  011B                     	;# 
  1738  011C                     	;# 
  1739  011C                     	;# 
  1740  011C                     	;# 
  1741  011D                     	;# 
  1742  011D                     	;# 
  1743  011D                     	;# 
  1744  011E                     	;# 
  1745  011E                     	;# 
  1746  011E                     	;# 
  1747  011F                     	;# 
  1748  011F                     	;# 
  1749  011F                     	;# 
  1750  011F                     	;# 
  1751  011F                     	;# 
  1752  018C                     	;# 
  1753  018D                     	;# 
  1754  018E                     	;# 
  1755  018F                     	;# 
  1756  0190                     	;# 
  1757  0191                     	;# 
  1758  0192                     	;# 
  1759  0196                     	;# 
  1760  0197                     	;# 
  1761  0198                     	;# 
  1762  0199                     	;# 
  1763  019A                     	;# 
  1764  019B                     	;# 
  1765  019C                     	;# 
  1766  020C                     	;# 
  1767  020C                     	;# 
  1768  020D                     	;# 
  1769  020E                     	;# 
  1770  020F                     	;# 
  1771  020F                     	;# 
  1772  0210                     	;# 
  1773  0210                     	;# 
  1774  0211                     	;# 
  1775  0211                     	;# 
  1776  0212                     	;# 
  1777  0212                     	;# 
  1778  0213                     	;# 
  1779  0214                     	;# 
  1780  0215                     	;# 
  1781  0215                     	;# 
  1782  0216                     	;# 
  1783  0216                     	;# 
  1784  0217                     	;# 
  1785  0217                     	;# 
  1786  0218                     	;# 
  1787  0218                     	;# 
  1788  0219                     	;# 
  1789  021A                     	;# 
  1790  021B                     	;# 
  1791  021B                     	;# 
  1792  021C                     	;# 
  1793  021C                     	;# 
  1794  021D                     	;# 
  1795  021D                     	;# 
  1796  021E                     	;# 
  1797  021F                     	;# 
  1798  028C                     	;# 
  1799  028C                     	;# 
  1800  028D                     	;# 
  1801  028D                     	;# 
  1802  028E                     	;# 
  1803  028F                     	;# 
  1804  0290                     	;# 
  1805  0290                     	;# 
  1806  0291                     	;# 
  1807  0292                     	;# 
  1808  0292                     	;# 
  1809  0293                     	;# 
  1810  0293                     	;# 
  1811  0294                     	;# 
  1812  0295                     	;# 
  1813  0296                     	;# 
  1814  0296                     	;# 
  1815  0297                     	;# 
  1816  0298                     	;# 
  1817  0298                     	;# 
  1818  0299                     	;# 
  1819  0299                     	;# 
  1820  029A                     	;# 
  1821  029B                     	;# 
  1822  029C                     	;# 
  1823  029C                     	;# 
  1824  029D                     	;# 
  1825  030C                     	;# 
  1826  030C                     	;# 
  1827  030D                     	;# 
  1828  030E                     	;# 
  1829  030F                     	;# 
  1830  0310                     	;# 
  1831  0310                     	;# 
  1832  0311                     	;# 
  1833  0312                     	;# 
  1834  0313                     	;# 
  1835  0314                     	;# 
  1836  0314                     	;# 
  1837  0315                     	;# 
  1838  0316                     	;# 
  1839  0317                     	;# 
  1840  0318                     	;# 
  1841  0318                     	;# 
  1842  0319                     	;# 
  1843  031A                     	;# 
  1844  031B                     	;# 
  1845  031C                     	;# 
  1846  031C                     	;# 
  1847  031D                     	;# 
  1848  031E                     	;# 
  1849  031F                     	;# 
  1850  038C                     	;# 
  1851  038D                     	;# 
  1852  038E                     	;# 
  1853  0390                     	;# 
  1854  0391                     	;# 
  1855  0392                     	;# 
  1856  040C                     	;# 
  1857  040D                     	;# 
  1858  040E                     	;# 
  1859  040F                     	;# 
  1860  0410                     	;# 
  1861  0411                     	;# 
  1862  0416                     	;# 
  1863  0416                     	;# 
  1864  0417                     	;# 
  1865  0418                     	;# 
  1866  0418                     	;# 
  1867  0419                     	;# 
  1868  041A                     	;# 
  1869  041A                     	;# 
  1870  041B                     	;# 
  1871  041C                     	;# 
  1872  041C                     	;# 
  1873  041D                     	;# 
  1874  041E                     	;# 
  1875  041F                     	;# 
  1876  048C                     	;# 
  1877  048C                     	;# 
  1878  048D                     	;# 
  1879  048E                     	;# 
  1880  048F                     	;# 
  1881  048F                     	;# 
  1882  0490                     	;# 
  1883  0491                     	;# 
  1884  0492                     	;# 
  1885  0492                     	;# 
  1886  0493                     	;# 
  1887  0494                     	;# 
  1888  0495                     	;# 
  1889  0495                     	;# 
  1890  0496                     	;# 
  1891  0497                     	;# 
  1892  0498                     	;# 
  1893  0499                     	;# 
  1894  049A                     	;# 
  1895  049B                     	;# 
  1896  049C                     	;# 
  1897  049D                     	;# 
  1898  050C                     	;# 
  1899  050C                     	;# 
  1900  050D                     	;# 
  1901  050E                     	;# 
  1902  050F                     	;# 
  1903  050F                     	;# 
  1904  0510                     	;# 
  1905  0511                     	;# 
  1906  0512                     	;# 
  1907  0512                     	;# 
  1908  0513                     	;# 
  1909  0514                     	;# 
  1910  0515                     	;# 
  1911  0515                     	;# 
  1912  0516                     	;# 
  1913  0517                     	;# 
  1914  0518                     	;# 
  1915  0519                     	;# 
  1916  051A                     	;# 
  1917  051B                     	;# 
  1918  051C                     	;# 
  1919  051D                     	;# 
  1920  058C                     	;# 
  1921  058C                     	;# 
  1922  058D                     	;# 
  1923  058E                     	;# 
  1924  058F                     	;# 
  1925  058F                     	;# 
  1926  0590                     	;# 
  1927  0591                     	;# 
  1928  0592                     	;# 
  1929  0593                     	;# 
  1930  060C                     	;# 
  1931  060D                     	;# 
  1932  060E                     	;# 
  1933  060F                     	;# 
  1934  0610                     	;# 
  1935  0611                     	;# 
  1936  0612                     	;# 
  1937  0613                     	;# 
  1938  0614                     	;# 
  1939  0616                     	;# 
  1940  0617                     	;# 
  1941  0618                     	;# 
  1942  0619                     	;# 
  1943  061A                     	;# 
  1944  061B                     	;# 
  1945  061C                     	;# 
  1946  061D                     	;# 
  1947  061E                     	;# 
  1948  068C                     	;# 
  1949  068D                     	;# 
  1950  068E                     	;# 
  1951  068F                     	;# 
  1952  0690                     	;# 
  1953  0691                     	;# 
  1954  0692                     	;# 
  1955  0693                     	;# 
  1956  0694                     	;# 
  1957  070C                     	;# 
  1958  070D                     	;# 
  1959  070E                     	;# 
  1960  070F                     	;# 
  1961  0710                     	;# 
  1962  0711                     	;# 
  1963  0712                     	;# 
  1964  0713                     	;# 
  1965  0714                     	;# 
  1966  0716                     	;# 
  1967  0717                     	;# 
  1968  0718                     	;# 
  1969  0719                     	;# 
  1970  071A                     	;# 
  1971  071B                     	;# 
  1972  071C                     	;# 
  1973  071D                     	;# 
  1974  071E                     	;# 
  1975  0796                     	;# 
  1976  0797                     	;# 
  1977  0798                     	;# 
  1978  0799                     	;# 
  1979  079A                     	;# 
  1980  079B                     	;# 
  1981  080C                     	;# 
  1982  080D                     	;# 
  1983  080E                     	;# 
  1984  080F                     	;# 
  1985  0810                     	;# 
  1986  0811                     	;# 
  1987  0812                     	;# 
  1988  0813                     	;# 
  1989  0814                     	;# 
  1990  081A                     	;# 
  1991  081B                     	;# 
  1992  081C                     	;# 
  1993  081D                     	;# 
  1994  081E                     	;# 
  1995  081F                     	;# 
  1996  088C                     	;# 
  1997  088D                     	;# 
  1998  088E                     	;# 
  1999  088F                     	;# 
  2000  0890                     	;# 
  2001  0891                     	;# 
  2002  0892                     	;# 
  2003  0893                     	;# 
  2004  0895                     	;# 
  2005  0896                     	;# 
  2006  0897                     	;# 
  2007  0898                     	;# 
  2008  0899                     	;# 
  2009  089A                     	;# 
  2010  089B                     	;# 
  2011  090C                     	;# 
  2012  090E                     	;# 
  2013  090F                     	;# 
  2014  091F                     	;# 
  2015  091F                     	;# 
  2016  098F                     	;# 
  2017  098F                     	;# 
  2018  0990                     	;# 
  2019  0991                     	;# 
  2020  0992                     	;# 
  2021  0993                     	;# 
  2022  0994                     	;# 
  2023  0995                     	;# 
  2024  0996                     	;# 
  2025  0997                     	;# 
  2026  0E0F                     	;# 
  2027  0E10                     	;# 
  2028  0E11                     	;# 
  2029  0E12                     	;# 
  2030  0E13                     	;# 
  2031  0E14                     	;# 
  2032  0E15                     	;# 
  2033  0E16                     	;# 
  2034  0E17                     	;# 
  2035  0E18                     	;# 
  2036  0E19                     	;# 
  2037  0E1A                     	;# 
  2038  0E1B                     	;# 
  2039  0E1C                     	;# 
  2040  0E1D                     	;# 
  2041  0E1E                     	;# 
  2042  0E1F                     	;# 
  2043  0E20                     	;# 
  2044  0E21                     	;# 
  2045  0E22                     	;# 
  2046  0E23                     	;# 
  2047  0E24                     	;# 
  2048  0E25                     	;# 
  2049  0E26                     	;# 
  2050  0E27                     	;# 
  2051  0E28                     	;# 
  2052  0E29                     	;# 
  2053  0E2A                     	;# 
  2054  0E2B                     	;# 
  2055  0E2C                     	;# 
  2056  0E2D                     	;# 
  2057  0E2E                     	;# 
  2058  0E2F                     	;# 
  2059  0E30                     	;# 
  2060  0E31                     	;# 
  2061  0E32                     	;# 
  2062  0E33                     	;# 
  2063  0E34                     	;# 
  2064  0E35                     	;# 
  2065  0E36                     	;# 
  2066  0E37                     	;# 
  2067  0E8F                     	;# 
  2068  0E90                     	;# 
  2069  0E91                     	;# 
  2070  0E92                     	;# 
  2071  0E93                     	;# 
  2072  0E94                     	;# 
  2073  0E95                     	;# 
  2074  0E96                     	;# 
  2075  0E97                     	;# 
  2076  0E9C                     	;# 
  2077  0E9D                     	;# 
  2078  0E9E                     	;# 
  2079  0EA1                     	;# 
  2080  0EA2                     	;# 
  2081  0EA3                     	;# 
  2082  0EA4                     	;# 
  2083  0EA5                     	;# 
  2084  0EA9                     	;# 
  2085  0EAA                     	;# 
  2086  0EAB                     	;# 
  2087  0EAC                     	;# 
  2088  0EB1                     	;# 
  2089  0EB2                     	;# 
  2090  0EB3                     	;# 
  2091  0EB8                     	;# 
  2092  0EB9                     	;# 
  2093  0EBA                     	;# 
  2094  0EBB                     	;# 
  2095  0EBC                     	;# 
  2096  0EBD                     	;# 
  2097  0EBE                     	;# 
  2098  0EC3                     	;# 
  2099  0EC5                     	;# 
  2100  0EC6                     	;# 
  2101  0EC7                     	;# 
  2102  0EC8                     	;# 
  2103  0EC9                     	;# 
  2104  0ECA                     	;# 
  2105  0ECB                     	;# 
  2106  0ECC                     	;# 
  2107  0F10                     	;# 
  2108  0F11                     	;# 
  2109  0F12                     	;# 
  2110  0F13                     	;# 
  2111  0F14                     	;# 
  2112  0F15                     	;# 
  2113  0F16                     	;# 
  2114  0F17                     	;# 
  2115  0F18                     	;# 
  2116  0F19                     	;# 
  2117  0F1A                     	;# 
  2118  0F1B                     	;# 
  2119  0F1C                     	;# 
  2120  0F1D                     	;# 
  2121  0F1E                     	;# 
  2122  0F1F                     	;# 
  2123  0F20                     	;# 
  2124  0F21                     	;# 
  2125  0F22                     	;# 
  2126  0F23                     	;# 
  2127  0F24                     	;# 
  2128  0F25                     	;# 
  2129  0F26                     	;# 
  2130  0F27                     	;# 
  2131  0F38                     	;# 
  2132  0F39                     	;# 
  2133  0F3A                     	;# 
  2134  0F3B                     	;# 
  2135  0F3C                     	;# 
  2136  0F3D                     	;# 
  2137  0F3E                     	;# 
  2138  0F3F                     	;# 
  2139  0F40                     	;# 
  2140  0F41                     	;# 
  2141  0F43                     	;# 
  2142  0F44                     	;# 
  2143  0F45                     	;# 
  2144  0F46                     	;# 
  2145  0F47                     	;# 
  2146  0F48                     	;# 
  2147  0F49                     	;# 
  2148  0F4A                     	;# 
  2149  0F4B                     	;# 
  2150  0F4C                     	;# 
  2151  0F4E                     	;# 
  2152  0F4F                     	;# 
  2153  0F50                     	;# 
  2154  0F51                     	;# 
  2155  0F52                     	;# 
  2156  0F53                     	;# 
  2157  0F54                     	;# 
  2158  0F55                     	;# 
  2159  0F56                     	;# 
  2160  0F57                     	;# 
  2161  0F65                     	;# 
  2162  0F68                     	;# 
  2163  0F69                     	;# 
  2164  0F6A                     	;# 
  2165  0F6B                     	;# 
  2166  0FE4                     	;# 
  2167  0FE5                     	;# 
  2168  0FE6                     	;# 
  2169  0FE7                     	;# 
  2170  0FE8                     	;# 
  2171  0FE9                     	;# 
  2172  0FEA                     	;# 
  2173  0FEB                     	;# 
  2174  0FED                     	;# 
  2175  0FEE                     	;# 
  2176  0FEF                     	;# 
  2177  0000                     	;# 
  2178  0001                     	;# 
  2179  0002                     	;# 
  2180  0003                     	;# 
  2181  0004                     	;# 
  2182  0005                     	;# 
  2183  0006                     	;# 
  2184  0007                     	;# 
  2185  0008                     	;# 
  2186  0009                     	;# 
  2187  000A                     	;# 
  2188  000B                     	;# 
  2189  000C                     	;# 
  2190  000D                     	;# 
  2191  000E                     	;# 
  2192  0010                     	;# 
  2193  0011                     	;# 
  2194  0012                     	;# 
  2195  0013                     	;# 
  2196  0016                     	;# 
  2197  0017                     	;# 
  2198  0018                     	;# 
  2199  001C                     	;# 
  2200  001C                     	;# 
  2201  001D                     	;# 
  2202  001D                     	;# 
  2203  001E                     	;# 
  2204  001F                     	;# 
  2205  008C                     	;# 
  2206  008C                     	;# 
  2207  008D                     	;# 
  2208  008E                     	;# 
  2209  008E                     	;# 
  2210  008F                     	;# 
  2211  0090                     	;# 
  2212  0090                     	;# 
  2213  0091                     	;# 
  2214  0093                     	;# 
  2215  0094                     	;# 
  2216  0095                     	;# 
  2217  0096                     	;# 
  2218  0097                     	;# 
  2219  0098                     	;# 
  2220  0099                     	;# 
  2221  009A                     	;# 
  2222  009B                     	;# 
  2223  009C                     	;# 
  2224  009D                     	;# 
  2225  009E                     	;# 
  2226  010C                     	;# 
  2227  010D                     	;# 
  2228  010E                     	;# 
  2229  010E                     	;# 
  2230  010F                     	;# 
  2231  0110                     	;# 
  2232  0110                     	;# 
  2233  0111                     	;# 
  2234  0112                     	;# 
  2235  0112                     	;# 
  2236  0113                     	;# 
  2237  0114                     	;# 
  2238  0114                     	;# 
  2239  0115                     	;# 
  2240  0116                     	;# 
  2241  0116                     	;# 
  2242  0117                     	;# 
  2243  0119                     	;# 
  2244  0119                     	;# 
  2245  0119                     	;# 
  2246  011A                     	;# 
  2247  011A                     	;# 
  2248  011A                     	;# 
  2249  011B                     	;# 
  2250  011B                     	;# 
  2251  011B                     	;# 
  2252  011B                     	;# 
  2253  011B                     	;# 
  2254  011C                     	;# 
  2255  011C                     	;# 
  2256  011C                     	;# 
  2257  011D                     	;# 
  2258  011D                     	;# 
  2259  011D                     	;# 
  2260  011E                     	;# 
  2261  011E                     	;# 
  2262  011E                     	;# 
  2263  011F                     	;# 
  2264  011F                     	;# 
  2265  011F                     	;# 
  2266  011F                     	;# 
  2267  011F                     	;# 
  2268  018C                     	;# 
  2269  018D                     	;# 
  2270  018E                     	;# 
  2271  018F                     	;# 
  2272  0190                     	;# 
  2273  0191                     	;# 
  2274  0192                     	;# 
  2275  0196                     	;# 
  2276  0197                     	;# 
  2277  0198                     	;# 
  2278  0199                     	;# 
  2279  019A                     	;# 
  2280  019B                     	;# 
  2281  019C                     	;# 
  2282  020C                     	;# 
  2283  020C                     	;# 
  2284  020D                     	;# 
  2285  020E                     	;# 
  2286  020F                     	;# 
  2287  020F                     	;# 
  2288  0210                     	;# 
  2289  0210                     	;# 
  2290  0211                     	;# 
  2291  0211                     	;# 
  2292  0212                     	;# 
  2293  0212                     	;# 
  2294  0213                     	;# 
  2295  0214                     	;# 
  2296  0215                     	;# 
  2297  0215                     	;# 
  2298  0216                     	;# 
  2299  0216                     	;# 
  2300  0217                     	;# 
  2301  0217                     	;# 
  2302  0218                     	;# 
  2303  0218                     	;# 
  2304  0219                     	;# 
  2305  021A                     	;# 
  2306  021B                     	;# 
  2307  021B                     	;# 
  2308  021C                     	;# 
  2309  021C                     	;# 
  2310  021D                     	;# 
  2311  021D                     	;# 
  2312  021E                     	;# 
  2313  021F                     	;# 
  2314  028C                     	;# 
  2315  028C                     	;# 
  2316  028D                     	;# 
  2317  028D                     	;# 
  2318  028E                     	;# 
  2319  028F                     	;# 
  2320  0290                     	;# 
  2321  0290                     	;# 
  2322  0291                     	;# 
  2323  0292                     	;# 
  2324  0292                     	;# 
  2325  0293                     	;# 
  2326  0293                     	;# 
  2327  0294                     	;# 
  2328  0295                     	;# 
  2329  0296                     	;# 
  2330  0296                     	;# 
  2331  0297                     	;# 
  2332  0298                     	;# 
  2333  0298                     	;# 
  2334  0299                     	;# 
  2335  0299                     	;# 
  2336  029A                     	;# 
  2337  029B                     	;# 
  2338  029C                     	;# 
  2339  029C                     	;# 
  2340  029D                     	;# 
  2341  030C                     	;# 
  2342  030C                     	;# 
  2343  030D                     	;# 
  2344  030E                     	;# 
  2345  030F                     	;# 
  2346  0310                     	;# 
  2347  0310                     	;# 
  2348  0311                     	;# 
  2349  0312                     	;# 
  2350  0313                     	;# 
  2351  0314                     	;# 
  2352  0314                     	;# 
  2353  0315                     	;# 
  2354  0316                     	;# 
  2355  0317                     	;# 
  2356  0318                     	;# 
  2357  0318                     	;# 
  2358  0319                     	;# 
  2359  031A                     	;# 
  2360  031B                     	;# 
  2361  031C                     	;# 
  2362  031C                     	;# 
  2363  031D                     	;# 
  2364  031E                     	;# 
  2365  031F                     	;# 
  2366  038C                     	;# 
  2367  038D                     	;# 
  2368  038E                     	;# 
  2369  0390                     	;# 
  2370  0391                     	;# 
  2371  0392                     	;# 
  2372  040C                     	;# 
  2373  040D                     	;# 
  2374  040E                     	;# 
  2375  040F                     	;# 
  2376  0410                     	;# 
  2377  0411                     	;# 
  2378  0416                     	;# 
  2379  0416                     	;# 
  2380  0417                     	;# 
  2381  0418                     	;# 
  2382  0418                     	;# 
  2383  0419                     	;# 
  2384  041A                     	;# 
  2385  041A                     	;# 
  2386  041B                     	;# 
  2387  041C                     	;# 
  2388  041C                     	;# 
  2389  041D                     	;# 
  2390  041E                     	;# 
  2391  041F                     	;# 
  2392  048C                     	;# 
  2393  048C                     	;# 
  2394  048D                     	;# 
  2395  048E                     	;# 
  2396  048F                     	;# 
  2397  048F                     	;# 
  2398  0490                     	;# 
  2399  0491                     	;# 
  2400  0492                     	;# 
  2401  0492                     	;# 
  2402  0493                     	;# 
  2403  0494                     	;# 
  2404  0495                     	;# 
  2405  0495                     	;# 
  2406  0496                     	;# 
  2407  0497                     	;# 
  2408  0498                     	;# 
  2409  0499                     	;# 
  2410  049A                     	;# 
  2411  049B                     	;# 
  2412  049C                     	;# 
  2413  049D                     	;# 
  2414  050C                     	;# 
  2415  050C                     	;# 
  2416  050D                     	;# 
  2417  050E                     	;# 
  2418  050F                     	;# 
  2419  050F                     	;# 
  2420  0510                     	;# 
  2421  0511                     	;# 
  2422  0512                     	;# 
  2423  0512                     	;# 
  2424  0513                     	;# 
  2425  0514                     	;# 
  2426  0515                     	;# 
  2427  0515                     	;# 
  2428  0516                     	;# 
  2429  0517                     	;# 
  2430  0518                     	;# 
  2431  0519                     	;# 
  2432  051A                     	;# 
  2433  051B                     	;# 
  2434  051C                     	;# 
  2435  051D                     	;# 
  2436  058C                     	;# 
  2437  058C                     	;# 
  2438  058D                     	;# 
  2439  058E                     	;# 
  2440  058F                     	;# 
  2441  058F                     	;# 
  2442  0590                     	;# 
  2443  0591                     	;# 
  2444  0592                     	;# 
  2445  0593                     	;# 
  2446  060C                     	;# 
  2447  060D                     	;# 
  2448  060E                     	;# 
  2449  060F                     	;# 
  2450  0610                     	;# 
  2451  0611                     	;# 
  2452  0612                     	;# 
  2453  0613                     	;# 
  2454  0614                     	;# 
  2455  0616                     	;# 
  2456  0617                     	;# 
  2457  0618                     	;# 
  2458  0619                     	;# 
  2459  061A                     	;# 
  2460  061B                     	;# 
  2461  061C                     	;# 
  2462  061D                     	;# 
  2463  061E                     	;# 
  2464  068C                     	;# 
  2465  068D                     	;# 
  2466  068E                     	;# 
  2467  068F                     	;# 
  2468  0690                     	;# 
  2469  0691                     	;# 
  2470  0692                     	;# 
  2471  0693                     	;# 
  2472  0694                     	;# 
  2473  070C                     	;# 
  2474  070D                     	;# 
  2475  070E                     	;# 
  2476  070F                     	;# 
  2477  0710                     	;# 
  2478  0711                     	;# 
  2479  0712                     	;# 
  2480  0713                     	;# 
  2481  0714                     	;# 
  2482  0716                     	;# 
  2483  0717                     	;# 
  2484  0718                     	;# 
  2485  0719                     	;# 
  2486  071A                     	;# 
  2487  071B                     	;# 
  2488  071C                     	;# 
  2489  071D                     	;# 
  2490  071E                     	;# 
  2491  0796                     	;# 
  2492  0797                     	;# 
  2493  0798                     	;# 
  2494  0799                     	;# 
  2495  079A                     	;# 
  2496  079B                     	;# 
  2497  080C                     	;# 
  2498  080D                     	;# 
  2499  080E                     	;# 
  2500  080F                     	;# 
  2501  0810                     	;# 
  2502  0811                     	;# 
  2503  0812                     	;# 
  2504  0813                     	;# 
  2505  0814                     	;# 
  2506  081A                     	;# 
  2507  081B                     	;# 
  2508  081C                     	;# 
  2509  081D                     	;# 
  2510  081E                     	;# 
  2511  081F                     	;# 
  2512  088C                     	;# 
  2513  088D                     	;# 
  2514  088E                     	;# 
  2515  088F                     	;# 
  2516  0890                     	;# 
  2517  0891                     	;# 
  2518  0892                     	;# 
  2519  0893                     	;# 
  2520  0895                     	;# 
  2521  0896                     	;# 
  2522  0897                     	;# 
  2523  0898                     	;# 
  2524  0899                     	;# 
  2525  089A                     	;# 
  2526  089B                     	;# 
  2527  090C                     	;# 
  2528  090E                     	;# 
  2529  090F                     	;# 
  2530  091F                     	;# 
  2531  091F                     	;# 
  2532  098F                     	;# 
  2533  098F                     	;# 
  2534  0990                     	;# 
  2535  0991                     	;# 
  2536  0992                     	;# 
  2537  0993                     	;# 
  2538  0994                     	;# 
  2539  0995                     	;# 
  2540  0996                     	;# 
  2541  0997                     	;# 
  2542  0E0F                     	;# 
  2543  0E10                     	;# 
  2544  0E11                     	;# 
  2545  0E12                     	;# 
  2546  0E13                     	;# 
  2547  0E14                     	;# 
  2548  0E15                     	;# 
  2549  0E16                     	;# 
  2550  0E17                     	;# 
  2551  0E18                     	;# 
  2552  0E19                     	;# 
  2553  0E1A                     	;# 
  2554  0E1B                     	;# 
  2555  0E1C                     	;# 
  2556  0E1D                     	;# 
  2557  0E1E                     	;# 
  2558  0E1F                     	;# 
  2559  0E20                     	;# 
  2560  0E21                     	;# 
  2561  0E22                     	;# 
  2562  0E23                     	;# 
  2563  0E24                     	;# 
  2564  0E25                     	;# 
  2565  0E26                     	;# 
  2566  0E27                     	;# 
  2567  0E28                     	;# 
  2568  0E29                     	;# 
  2569  0E2A                     	;# 
  2570  0E2B                     	;# 
  2571  0E2C                     	;# 
  2572  0E2D                     	;# 
  2573  0E2E                     	;# 
  2574  0E2F                     	;# 
  2575  0E30                     	;# 
  2576  0E31                     	;# 
  2577  0E32                     	;# 
  2578  0E33                     	;# 
  2579  0E34                     	;# 
  2580  0E35                     	;# 
  2581  0E36                     	;# 
  2582  0E37                     	;# 
  2583  0E8F                     	;# 
  2584  0E90                     	;# 
  2585  0E91                     	;# 
  2586  0E92                     	;# 
  2587  0E93                     	;# 
  2588  0E94                     	;# 
  2589  0E95                     	;# 
  2590  0E96                     	;# 
  2591  0E97                     	;# 
  2592  0E9C                     	;# 
  2593  0E9D                     	;# 
  2594  0E9E                     	;# 
  2595  0EA1                     	;# 
  2596  0EA2                     	;# 
  2597  0EA3                     	;# 
  2598  0EA4                     	;# 
  2599  0EA5                     	;# 
  2600  0EA9                     	;# 
  2601  0EAA                     	;# 
  2602  0EAB                     	;# 
  2603  0EAC                     	;# 
  2604  0EB1                     	;# 
  2605  0EB2                     	;# 
  2606  0EB3                     	;# 
  2607  0EB8                     	;# 
  2608  0EB9                     	;# 
  2609  0EBA                     	;# 
  2610  0EBB                     	;# 
  2611  0EBC                     	;# 
  2612  0EBD                     	;# 
  2613  0EBE                     	;# 
  2614  0EC3                     	;# 
  2615  0EC5                     	;# 
  2616  0EC6                     	;# 
  2617  0EC7                     	;# 
  2618  0EC8                     	;# 
  2619  0EC9                     	;# 
  2620  0ECA                     	;# 
  2621  0ECB                     	;# 
  2622  0ECC                     	;# 
  2623  0F10                     	;# 
  2624  0F11                     	;# 
  2625  0F12                     	;# 
  2626  0F13                     	;# 
  2627  0F14                     	;# 
  2628  0F15                     	;# 
  2629  0F16                     	;# 
  2630  0F17                     	;# 
  2631  0F18                     	;# 
  2632  0F19                     	;# 
  2633  0F1A                     	;# 
  2634  0F1B                     	;# 
  2635  0F1C                     	;# 
  2636  0F1D                     	;# 
  2637  0F1E                     	;# 
  2638  0F1F                     	;# 
  2639  0F20                     	;# 
  2640  0F21                     	;# 
  2641  0F22                     	;# 
  2642  0F23                     	;# 
  2643  0F24                     	;# 
  2644  0F25                     	;# 
  2645  0F26                     	;# 
  2646  0F27                     	;# 
  2647  0F38                     	;# 
  2648  0F39                     	;# 
  2649  0F3A                     	;# 
  2650  0F3B                     	;# 
  2651  0F3C                     	;# 
  2652  0F3D                     	;# 
  2653  0F3E                     	;# 
  2654  0F3F                     	;# 
  2655  0F40                     	;# 
  2656  0F41                     	;# 
  2657  0F43                     	;# 
  2658  0F44                     	;# 
  2659  0F45                     	;# 
  2660  0F46                     	;# 
  2661  0F47                     	;# 
  2662  0F48                     	;# 
  2663  0F49                     	;# 
  2664  0F4A                     	;# 
  2665  0F4B                     	;# 
  2666  0F4C                     	;# 
  2667  0F4E                     	;# 
  2668  0F4F                     	;# 
  2669  0F50                     	;# 
  2670  0F51                     	;# 
  2671  0F52                     	;# 
  2672  0F53                     	;# 
  2673  0F54                     	;# 
  2674  0F55                     	;# 
  2675  0F56                     	;# 
  2676  0F57                     	;# 
  2677  0F65                     	;# 
  2678  0F68                     	;# 
  2679  0F69                     	;# 
  2680  0F6A                     	;# 
  2681  0F6B                     	;# 
  2682  0FE4                     	;# 
  2683  0FE5                     	;# 
  2684  0FE6                     	;# 
  2685  0FE7                     	;# 
  2686  0FE8                     	;# 
  2687  0FE9                     	;# 
  2688  0FEA                     	;# 
  2689  0FEB                     	;# 
  2690  0FED                     	;# 
  2691  0FEE                     	;# 
  2692  0FEF                     	;# 
  2693  0000                     	;# 
  2694  0001                     	;# 
  2695  0002                     	;# 
  2696  0003                     	;# 
  2697  0004                     	;# 
  2698  0005                     	;# 
  2699  0006                     	;# 
  2700  0007                     	;# 
  2701  0008                     	;# 
  2702  0009                     	;# 
  2703  000A                     	;# 
  2704  000B                     	;# 
  2705  000C                     	;# 
  2706  000D                     	;# 
  2707  000E                     	;# 
  2708  0010                     	;# 
  2709  0011                     	;# 
  2710  0012                     	;# 
  2711  0013                     	;# 
  2712  0016                     	;# 
  2713  0017                     	;# 
  2714  0018                     	;# 
  2715  001C                     	;# 
  2716  001C                     	;# 
  2717  001D                     	;# 
  2718  001D                     	;# 
  2719  001E                     	;# 
  2720  001F                     	;# 
  2721  008C                     	;# 
  2722  008C                     	;# 
  2723  008D                     	;# 
  2724  008E                     	;# 
  2725  008E                     	;# 
  2726  008F                     	;# 
  2727  0090                     	;# 
  2728  0090                     	;# 
  2729  0091                     	;# 
  2730  0093                     	;# 
  2731  0094                     	;# 
  2732  0095                     	;# 
  2733  0096                     	;# 
  2734  0097                     	;# 
  2735  0098                     	;# 
  2736  0099                     	;# 
  2737  009A                     	;# 
  2738  009B                     	;# 
  2739  009C                     	;# 
  2740  009D                     	;# 
  2741  009E                     	;# 
  2742  010C                     	;# 
  2743  010D                     	;# 
  2744  010E                     	;# 
  2745  010E                     	;# 
  2746  010F                     	;# 
  2747  0110                     	;# 
  2748  0110                     	;# 
  2749  0111                     	;# 
  2750  0112                     	;# 
  2751  0112                     	;# 
  2752  0113                     	;# 
  2753  0114                     	;# 
  2754  0114                     	;# 
  2755  0115                     	;# 
  2756  0116                     	;# 
  2757  0116                     	;# 
  2758  0117                     	;# 
  2759  0119                     	;# 
  2760  0119                     	;# 
  2761  0119                     	;# 
  2762  011A                     	;# 
  2763  011A                     	;# 
  2764  011A                     	;# 
  2765  011B                     	;# 
  2766  011B                     	;# 
  2767  011B                     	;# 
  2768  011B                     	;# 
  2769  011B                     	;# 
  2770  011C                     	;# 
  2771  011C                     	;# 
  2772  011C                     	;# 
  2773  011D                     	;# 
  2774  011D                     	;# 
  2775  011D                     	;# 
  2776  011E                     	;# 
  2777  011E                     	;# 
  2778  011E                     	;# 
  2779  011F                     	;# 
  2780  011F                     	;# 
  2781  011F                     	;# 
  2782  011F                     	;# 
  2783  011F                     	;# 
  2784  018C                     	;# 
  2785  018D                     	;# 
  2786  018E                     	;# 
  2787  018F                     	;# 
  2788  0190                     	;# 
  2789  0191                     	;# 
  2790  0192                     	;# 
  2791  0196                     	;# 
  2792  0197                     	;# 
  2793  0198                     	;# 
  2794  0199                     	;# 
  2795  019A                     	;# 
  2796  019B                     	;# 
  2797  019C                     	;# 
  2798  020C                     	;# 
  2799  020C                     	;# 
  2800  020D                     	;# 
  2801  020E                     	;# 
  2802  020F                     	;# 
  2803  020F                     	;# 
  2804  0210                     	;# 
  2805  0210                     	;# 
  2806  0211                     	;# 
  2807  0211                     	;# 
  2808  0212                     	;# 
  2809  0212                     	;# 
  2810  0213                     	;# 
  2811  0214                     	;# 
  2812  0215                     	;# 
  2813  0215                     	;# 
  2814  0216                     	;# 
  2815  0216                     	;# 
  2816  0217                     	;# 
  2817  0217                     	;# 
  2818  0218                     	;# 
  2819  0218                     	;# 
  2820  0219                     	;# 
  2821  021A                     	;# 
  2822  021B                     	;# 
  2823  021B                     	;# 
  2824  021C                     	;# 
  2825  021C                     	;# 
  2826  021D                     	;# 
  2827  021D                     	;# 
  2828  021E                     	;# 
  2829  021F                     	;# 
  2830  028C                     	;# 
  2831  028C                     	;# 
  2832  028D                     	;# 
  2833  028D                     	;# 
  2834  028E                     	;# 
  2835  028F                     	;# 
  2836  0290                     	;# 
  2837  0290                     	;# 
  2838  0291                     	;# 
  2839  0292                     	;# 
  2840  0292                     	;# 
  2841  0293                     	;# 
  2842  0293                     	;# 
  2843  0294                     	;# 
  2844  0295                     	;# 
  2845  0296                     	;# 
  2846  0296                     	;# 
  2847  0297                     	;# 
  2848  0298                     	;# 
  2849  0298                     	;# 
  2850  0299                     	;# 
  2851  0299                     	;# 
  2852  029A                     	;# 
  2853  029B                     	;# 
  2854  029C                     	;# 
  2855  029C                     	;# 
  2856  029D                     	;# 
  2857  030C                     	;# 
  2858  030C                     	;# 
  2859  030D                     	;# 
  2860  030E                     	;# 
  2861  030F                     	;# 
  2862  0310                     	;# 
  2863  0310                     	;# 
  2864  0311                     	;# 
  2865  0312                     	;# 
  2866  0313                     	;# 
  2867  0314                     	;# 
  2868  0314                     	;# 
  2869  0315                     	;# 
  2870  0316                     	;# 
  2871  0317                     	;# 
  2872  0318                     	;# 
  2873  0318                     	;# 
  2874  0319                     	;# 
  2875  031A                     	;# 
  2876  031B                     	;# 
  2877  031C                     	;# 
  2878  031C                     	;# 
  2879  031D                     	;# 
  2880  031E                     	;# 
  2881  031F                     	;# 
  2882  038C                     	;# 
  2883  038D                     	;# 
  2884  038E                     	;# 
  2885  0390                     	;# 
  2886  0391                     	;# 
  2887  0392                     	;# 
  2888  040C                     	;# 
  2889  040D                     	;# 
  2890  040E                     	;# 
  2891  040F                     	;# 
  2892  0410                     	;# 
  2893  0411                     	;# 
  2894  0416                     	;# 
  2895  0416                     	;# 
  2896  0417                     	;# 
  2897  0418                     	;# 
  2898  0418                     	;# 
  2899  0419                     	;# 
  2900  041A                     	;# 
  2901  041A                     	;# 
  2902  041B                     	;# 
  2903  041C                     	;# 
  2904  041C                     	;# 
  2905  041D                     	;# 
  2906  041E                     	;# 
  2907  041F                     	;# 
  2908  048C                     	;# 
  2909  048C                     	;# 
  2910  048D                     	;# 
  2911  048E                     	;# 
  2912  048F                     	;# 
  2913  048F                     	;# 
  2914  0490                     	;# 
  2915  0491                     	;# 
  2916  0492                     	;# 
  2917  0492                     	;# 
  2918  0493                     	;# 
  2919  0494                     	;# 
  2920  0495                     	;# 
  2921  0495                     	;# 
  2922  0496                     	;# 
  2923  0497                     	;# 
  2924  0498                     	;# 
  2925  0499                     	;# 
  2926  049A                     	;# 
  2927  049B                     	;# 
  2928  049C                     	;# 
  2929  049D                     	;# 
  2930  050C                     	;# 
  2931  050C                     	;# 
  2932  050D                     	;# 
  2933  050E                     	;# 
  2934  050F                     	;# 
  2935  050F                     	;# 
  2936  0510                     	;# 
  2937  0511                     	;# 
  2938  0512                     	;# 
  2939  0512                     	;# 
  2940  0513                     	;# 
  2941  0514                     	;# 
  2942  0515                     	;# 
  2943  0515                     	;# 
  2944  0516                     	;# 
  2945  0517                     	;# 
  2946  0518                     	;# 
  2947  0519                     	;# 
  2948  051A                     	;# 
  2949  051B                     	;# 
  2950  051C                     	;# 
  2951  051D                     	;# 
  2952  058C                     	;# 
  2953  058C                     	;# 
  2954  058D                     	;# 
  2955  058E                     	;# 
  2956  058F                     	;# 
  2957  058F                     	;# 
  2958  0590                     	;# 
  2959  0591                     	;# 
  2960  0592                     	;# 
  2961  0593                     	;# 
  2962  060C                     	;# 
  2963  060D                     	;# 
  2964  060E                     	;# 
  2965  060F                     	;# 
  2966  0610                     	;# 
  2967  0611                     	;# 
  2968  0612                     	;# 
  2969  0613                     	;# 
  2970  0614                     	;# 
  2971  0616                     	;# 
  2972  0617                     	;# 
  2973  0618                     	;# 
  2974  0619                     	;# 
  2975  061A                     	;# 
  2976  061B                     	;# 
  2977  061C                     	;# 
  2978  061D                     	;# 
  2979  061E                     	;# 
  2980  068C                     	;# 
  2981  068D                     	;# 
  2982  068E                     	;# 
  2983  068F                     	;# 
  2984  0690                     	;# 
  2985  0691                     	;# 
  2986  0692                     	;# 
  2987  0693                     	;# 
  2988  0694                     	;# 
  2989  070C                     	;# 
  2990  070D                     	;# 
  2991  070E                     	;# 
  2992  070F                     	;# 
  2993  0710                     	;# 
  2994  0711                     	;# 
  2995  0712                     	;# 
  2996  0713                     	;# 
  2997  0714                     	;# 
  2998  0716                     	;# 
  2999  0717                     	;# 
  3000  0718                     	;# 
  3001  0719                     	;# 
  3002  071A                     	;# 
  3003  071B                     	;# 
  3004  071C                     	;# 
  3005  071D                     	;# 
  3006  071E                     	;# 
  3007  0796                     	;# 
  3008  0797                     	;# 
  3009  0798                     	;# 
  3010  0799                     	;# 
  3011  079A                     	;# 
  3012  079B                     	;# 
  3013  080C                     	;# 
  3014  080D                     	;# 
  3015  080E                     	;# 
  3016  080F                     	;# 
  3017  0810                     	;# 
  3018  0811                     	;# 
  3019  0812                     	;# 
  3020  0813                     	;# 
  3021  0814                     	;# 
  3022  081A                     	;# 
  3023  081B                     	;# 
  3024  081C                     	;# 
  3025  081D                     	;# 
  3026  081E                     	;# 
  3027  081F                     	;# 
  3028  088C                     	;# 
  3029  088D                     	;# 
  3030  088E                     	;# 
  3031  088F                     	;# 
  3032  0890                     	;# 
  3033  0891                     	;# 
  3034  0892                     	;# 
  3035  0893                     	;# 
  3036  0895                     	;# 
  3037  0896                     	;# 
  3038  0897                     	;# 
  3039  0898                     	;# 
  3040  0899                     	;# 
  3041  089A                     	;# 
  3042  089B                     	;# 
  3043  090C                     	;# 
  3044  090E                     	;# 
  3045  090F                     	;# 
  3046  091F                     	;# 
  3047  091F                     	;# 
  3048  098F                     	;# 
  3049  098F                     	;# 
  3050  0990                     	;# 
  3051  0991                     	;# 
  3052  0992                     	;# 
  3053  0993                     	;# 
  3054  0994                     	;# 
  3055  0995                     	;# 
  3056  0996                     	;# 
  3057  0997                     	;# 
  3058  0E0F                     	;# 
  3059  0E10                     	;# 
  3060  0E11                     	;# 
  3061  0E12                     	;# 
  3062  0E13                     	;# 
  3063  0E14                     	;# 
  3064  0E15                     	;# 
  3065  0E16                     	;# 
  3066  0E17                     	;# 
  3067  0E18                     	;# 
  3068  0E19                     	;# 
  3069  0E1A                     	;# 
  3070  0E1B                     	;# 
  3071  0E1C                     	;# 
  3072  0E1D                     	;# 
  3073  0E1E                     	;# 
  3074  0E1F                     	;# 
  3075  0E20                     	;# 
  3076  0E21                     	;# 
  3077  0E22                     	;# 
  3078  0E23                     	;# 
  3079  0E24                     	;# 
  3080  0E25                     	;# 
  3081  0E26                     	;# 
  3082  0E27                     	;# 
  3083  0E28                     	;# 
  3084  0E29                     	;# 
  3085  0E2A                     	;# 
  3086  0E2B                     	;# 
  3087  0E2C                     	;# 
  3088  0E2D                     	;# 
  3089  0E2E                     	;# 
  3090  0E2F                     	;# 
  3091  0E30                     	;# 
  3092  0E31                     	;# 
  3093  0E32                     	;# 
  3094  0E33                     	;# 
  3095  0E34                     	;# 
  3096  0E35                     	;# 
  3097  0E36                     	;# 
  3098  0E37                     	;# 
  3099  0E8F                     	;# 
  3100  0E90                     	;# 
  3101  0E91                     	;# 
  3102  0E92                     	;# 
  3103  0E93                     	;# 
  3104  0E94                     	;# 
  3105  0E95                     	;# 
  3106  0E96                     	;# 
  3107  0E97                     	;# 
  3108  0E9C                     	;# 
  3109  0E9D                     	;# 
  3110  0E9E                     	;# 
  3111  0EA1                     	;# 
  3112  0EA2                     	;# 
  3113  0EA3                     	;# 
  3114  0EA4                     	;# 
  3115  0EA5                     	;# 
  3116  0EA9                     	;# 
  3117  0EAA                     	;# 
  3118  0EAB                     	;# 
  3119  0EAC                     	;# 
  3120  0EB1                     	;# 
  3121  0EB2                     	;# 
  3122  0EB3                     	;# 
  3123  0EB8                     	;# 
  3124  0EB9                     	;# 
  3125  0EBA                     	;# 
  3126  0EBB                     	;# 
  3127  0EBC                     	;# 
  3128  0EBD                     	;# 
  3129  0EBE                     	;# 
  3130  0EC3                     	;# 
  3131  0EC5                     	;# 
  3132  0EC6                     	;# 
  3133  0EC7                     	;# 
  3134  0EC8                     	;# 
  3135  0EC9                     	;# 
  3136  0ECA                     	;# 
  3137  0ECB                     	;# 
  3138  0ECC                     	;# 
  3139  0F10                     	;# 
  3140  0F11                     	;# 
  3141  0F12                     	;# 
  3142  0F13                     	;# 
  3143  0F14                     	;# 
  3144  0F15                     	;# 
  3145  0F16                     	;# 
  3146  0F17                     	;# 
  3147  0F18                     	;# 
  3148  0F19                     	;# 
  3149  0F1A                     	;# 
  3150  0F1B                     	;# 
  3151  0F1C                     	;# 
  3152  0F1D                     	;# 
  3153  0F1E                     	;# 
  3154  0F1F                     	;# 
  3155  0F20                     	;# 
  3156  0F21                     	;# 
  3157  0F22                     	;# 
  3158  0F23                     	;# 
  3159  0F24                     	;# 
  3160  0F25                     	;# 
  3161  0F26                     	;# 
  3162  0F27                     	;# 
  3163  0F38                     	;# 
  3164  0F39                     	;# 
  3165  0F3A                     	;# 
  3166  0F3B                     	;# 
  3167  0F3C                     	;# 
  3168  0F3D                     	;# 
  3169  0F3E                     	;# 
  3170  0F3F                     	;# 
  3171  0F40                     	;# 
  3172  0F41                     	;# 
  3173  0F43                     	;# 
  3174  0F44                     	;# 
  3175  0F45                     	;# 
  3176  0F46                     	;# 
  3177  0F47                     	;# 
  3178  0F48                     	;# 
  3179  0F49                     	;# 
  3180  0F4A                     	;# 
  3181  0F4B                     	;# 
  3182  0F4C                     	;# 
  3183  0F4E                     	;# 
  3184  0F4F                     	;# 
  3185  0F50                     	;# 
  3186  0F51                     	;# 
  3187  0F52                     	;# 
  3188  0F53                     	;# 
  3189  0F54                     	;# 
  3190  0F55                     	;# 
  3191  0F56                     	;# 
  3192  0F57                     	;# 
  3193  0F65                     	;# 
  3194  0F68                     	;# 
  3195  0F69                     	;# 
  3196  0F6A                     	;# 
  3197  0F6B                     	;# 
  3198  0FE4                     	;# 
  3199  0FE5                     	;# 
  3200  0FE6                     	;# 
  3201  0FE7                     	;# 
  3202  0FE8                     	;# 
  3203  0FE9                     	;# 
  3204  0FEA                     	;# 
  3205  0FEB                     	;# 
  3206  0FED                     	;# 
  3207  0FEE                     	;# 
  3208  0FEF                     	;# 
  3209  0000                     	;# 
  3210  0001                     	;# 
  3211  0002                     	;# 
  3212  0003                     	;# 
  3213  0004                     	;# 
  3214  0005                     	;# 
  3215  0006                     	;# 
  3216  0007                     	;# 
  3217  0008                     	;# 
  3218  0009                     	;# 
  3219  000A                     	;# 
  3220  000B                     	;# 
  3221  000C                     	;# 
  3222  000D                     	;# 
  3223  000E                     	;# 
  3224  0010                     	;# 
  3225  0011                     	;# 
  3226  0012                     	;# 
  3227  0013                     	;# 
  3228  0016                     	;# 
  3229  0017                     	;# 
  3230  0018                     	;# 
  3231  001C                     	;# 
  3232  001C                     	;# 
  3233  001D                     	;# 
  3234  001D                     	;# 
  3235  001E                     	;# 
  3236  001F                     	;# 
  3237  008C                     	;# 
  3238  008C                     	;# 
  3239  008D                     	;# 
  3240  008E                     	;# 
  3241  008E                     	;# 
  3242  008F                     	;# 
  3243  0090                     	;# 
  3244  0090                     	;# 
  3245  0091                     	;# 
  3246  0093                     	;# 
  3247  0094                     	;# 
  3248  0095                     	;# 
  3249  0096                     	;# 
  3250  0097                     	;# 
  3251  0098                     	;# 
  3252  0099                     	;# 
  3253  009A                     	;# 
  3254  009B                     	;# 
  3255  009C                     	;# 
  3256  009D                     	;# 
  3257  009E                     	;# 
  3258  010C                     	;# 
  3259  010D                     	;# 
  3260  010E                     	;# 
  3261  010E                     	;# 
  3262  010F                     	;# 
  3263  0110                     	;# 
  3264  0110                     	;# 
  3265  0111                     	;# 
  3266  0112                     	;# 
  3267  0112                     	;# 
  3268  0113                     	;# 
  3269  0114                     	;# 
  3270  0114                     	;# 
  3271  0115                     	;# 
  3272  0116                     	;# 
  3273  0116                     	;# 
  3274  0117                     	;# 
  3275  0119                     	;# 
  3276  0119                     	;# 
  3277  0119                     	;# 
  3278  011A                     	;# 
  3279  011A                     	;# 
  3280  011A                     	;# 
  3281  011B                     	;# 
  3282  011B                     	;# 
  3283  011B                     	;# 
  3284  011B                     	;# 
  3285  011B                     	;# 
  3286  011C                     	;# 
  3287  011C                     	;# 
  3288  011C                     	;# 
  3289  011D                     	;# 
  3290  011D                     	;# 
  3291  011D                     	;# 
  3292  011E                     	;# 
  3293  011E                     	;# 
  3294  011E                     	;# 
  3295  011F                     	;# 
  3296  011F                     	;# 
  3297  011F                     	;# 
  3298  011F                     	;# 
  3299  011F                     	;# 
  3300  018C                     	;# 
  3301  018D                     	;# 
  3302  018E                     	;# 
  3303  018F                     	;# 
  3304  0190                     	;# 
  3305  0191                     	;# 
  3306  0192                     	;# 
  3307  0196                     	;# 
  3308  0197                     	;# 
  3309  0198                     	;# 
  3310  0199                     	;# 
  3311  019A                     	;# 
  3312  019B                     	;# 
  3313  019C                     	;# 
  3314  020C                     	;# 
  3315  020C                     	;# 
  3316  020D                     	;# 
  3317  020E                     	;# 
  3318  020F                     	;# 
  3319  020F                     	;# 
  3320  0210                     	;# 
  3321  0210                     	;# 
  3322  0211                     	;# 
  3323  0211                     	;# 
  3324  0212                     	;# 
  3325  0212                     	;# 
  3326  0213                     	;# 
  3327  0214                     	;# 
  3328  0215                     	;# 
  3329  0215                     	;# 
  3330  0216                     	;# 
  3331  0216                     	;# 
  3332  0217                     	;# 
  3333  0217                     	;# 
  3334  0218                     	;# 
  3335  0218                     	;# 
  3336  0219                     	;# 
  3337  021A                     	;# 
  3338  021B                     	;# 
  3339  021B                     	;# 
  3340  021C                     	;# 
  3341  021C                     	;# 
  3342  021D                     	;# 
  3343  021D                     	;# 
  3344  021E                     	;# 
  3345  021F                     	;# 
  3346  028C                     	;# 
  3347  028C                     	;# 
  3348  028D                     	;# 
  3349  028D                     	;# 
  3350  028E                     	;# 
  3351  028F                     	;# 
  3352  0290                     	;# 
  3353  0290                     	;# 
  3354  0291                     	;# 
  3355  0292                     	;# 
  3356  0292                     	;# 
  3357  0293                     	;# 
  3358  0293                     	;# 
  3359  0294                     	;# 
  3360  0295                     	;# 
  3361  0296                     	;# 
  3362  0296                     	;# 
  3363  0297                     	;# 
  3364  0298                     	;# 
  3365  0298                     	;# 
  3366  0299                     	;# 
  3367  0299                     	;# 
  3368  029A                     	;# 
  3369  029B                     	;# 
  3370  029C                     	;# 
  3371  029C                     	;# 
  3372  029D                     	;# 
  3373  030C                     	;# 
  3374  030C                     	;# 
  3375  030D                     	;# 
  3376  030E                     	;# 
  3377  030F                     	;# 
  3378  0310                     	;# 
  3379  0310                     	;# 
  3380  0311                     	;# 
  3381  0312                     	;# 
  3382  0313                     	;# 
  3383  0314                     	;# 
  3384  0314                     	;# 
  3385  0315                     	;# 
  3386  0316                     	;# 
  3387  0317                     	;# 
  3388  0318                     	;# 
  3389  0318                     	;# 
  3390  0319                     	;# 
  3391  031A                     	;# 
  3392  031B                     	;# 
  3393  031C                     	;# 
  3394  031C                     	;# 
  3395  031D                     	;# 
  3396  031E                     	;# 
  3397  031F                     	;# 
  3398  038C                     	;# 
  3399  038D                     	;# 
  3400  038E                     	;# 
  3401  0390                     	;# 
  3402  0391                     	;# 
  3403  0392                     	;# 
  3404  040C                     	;# 
  3405  040D                     	;# 
  3406  040E                     	;# 
  3407  040F                     	;# 
  3408  0410                     	;# 
  3409  0411                     	;# 
  3410  0416                     	;# 
  3411  0416                     	;# 
  3412  0417                     	;# 
  3413  0418                     	;# 
  3414  0418                     	;# 
  3415  0419                     	;# 
  3416  041A                     	;# 
  3417  041A                     	;# 
  3418  041B                     	;# 
  3419  041C                     	;# 
  3420  041C                     	;# 
  3421  041D                     	;# 
  3422  041E                     	;# 
  3423  041F                     	;# 
  3424  048C                     	;# 
  3425  048C                     	;# 
  3426  048D                     	;# 
  3427  048E                     	;# 
  3428  048F                     	;# 
  3429  048F                     	;# 
  3430  0490                     	;# 
  3431  0491                     	;# 
  3432  0492                     	;# 
  3433  0492                     	;# 
  3434  0493                     	;# 
  3435  0494                     	;# 
  3436  0495                     	;# 
  3437  0495                     	;# 
  3438  0496                     	;# 
  3439  0497                     	;# 
  3440  0498                     	;# 
  3441  0499                     	;# 
  3442  049A                     	;# 
  3443  049B                     	;# 
  3444  049C                     	;# 
  3445  049D                     	;# 
  3446  050C                     	;# 
  3447  050C                     	;# 
  3448  050D                     	;# 
  3449  050E                     	;# 
  3450  050F                     	;# 
  3451  050F                     	;# 
  3452  0510                     	;# 
  3453  0511                     	;# 
  3454  0512                     	;# 
  3455  0512                     	;# 
  3456  0513                     	;# 
  3457  0514                     	;# 
  3458  0515                     	;# 
  3459  0515                     	;# 
  3460  0516                     	;# 
  3461  0517                     	;# 
  3462  0518                     	;# 
  3463  0519                     	;# 
  3464  051A                     	;# 
  3465  051B                     	;# 
  3466  051C                     	;# 
  3467  051D                     	;# 
  3468  058C                     	;# 
  3469  058C                     	;# 
  3470  058D                     	;# 
  3471  058E                     	;# 
  3472  058F                     	;# 
  3473  058F                     	;# 
  3474  0590                     	;# 
  3475  0591                     	;# 
  3476  0592                     	;# 
  3477  0593                     	;# 
  3478  060C                     	;# 
  3479  060D                     	;# 
  3480  060E                     	;# 
  3481  060F                     	;# 
  3482  0610                     	;# 
  3483  0611                     	;# 
  3484  0612                     	;# 
  3485  0613                     	;# 
  3486  0614                     	;# 
  3487  0616                     	;# 
  3488  0617                     	;# 
  3489  0618                     	;# 
  3490  0619                     	;# 
  3491  061A                     	;# 
  3492  061B                     	;# 
  3493  061C                     	;# 
  3494  061D                     	;# 
  3495  061E                     	;# 
  3496  068C                     	;# 
  3497  068D                     	;# 
  3498  068E                     	;# 
  3499  068F                     	;# 
  3500  0690                     	;# 
  3501  0691                     	;# 
  3502  0692                     	;# 
  3503  0693                     	;# 
  3504  0694                     	;# 
  3505  070C                     	;# 
  3506  070D                     	;# 
  3507  070E                     	;# 
  3508  070F                     	;# 
  3509  0710                     	;# 
  3510  0711                     	;# 
  3511  0712                     	;# 
  3512  0713                     	;# 
  3513  0714                     	;# 
  3514  0716                     	;# 
  3515  0717                     	;# 
  3516  0718                     	;# 
  3517  0719                     	;# 
  3518  071A                     	;# 
  3519  071B                     	;# 
  3520  071C                     	;# 
  3521  071D                     	;# 
  3522  071E                     	;# 
  3523  0796                     	;# 
  3524  0797                     	;# 
  3525  0798                     	;# 
  3526  0799                     	;# 
  3527  079A                     	;# 
  3528  079B                     	;# 
  3529  080C                     	;# 
  3530  080D                     	;# 
  3531  080E                     	;# 
  3532  080F                     	;# 
  3533  0810                     	;# 
  3534  0811                     	;# 
  3535  0812                     	;# 
  3536  0813                     	;# 
  3537  0814                     	;# 
  3538  081A                     	;# 
  3539  081B                     	;# 
  3540  081C                     	;# 
  3541  081D                     	;# 
  3542  081E                     	;# 
  3543  081F                     	;# 
  3544  088C                     	;# 
  3545  088D                     	;# 
  3546  088E                     	;# 
  3547  088F                     	;# 
  3548  0890                     	;# 
  3549  0891                     	;# 
  3550  0892                     	;# 
  3551  0893                     	;# 
  3552  0895                     	;# 
  3553  0896                     	;# 
  3554  0897                     	;# 
  3555  0898                     	;# 
  3556  0899                     	;# 
  3557  089A                     	;# 
  3558  089B                     	;# 
  3559  090C                     	;# 
  3560  090E                     	;# 
  3561  090F                     	;# 
  3562  091F                     	;# 
  3563  091F                     	;# 
  3564  098F                     	;# 
  3565  098F                     	;# 
  3566  0990                     	;# 
  3567  0991                     	;# 
  3568  0992                     	;# 
  3569  0993                     	;# 
  3570  0994                     	;# 
  3571  0995                     	;# 
  3572  0996                     	;# 
  3573  0997                     	;# 
  3574  0E0F                     	;# 
  3575  0E10                     	;# 
  3576  0E11                     	;# 
  3577  0E12                     	;# 
  3578  0E13                     	;# 
  3579  0E14                     	;# 
  3580  0E15                     	;# 
  3581  0E16                     	;# 
  3582  0E17                     	;# 
  3583  0E18                     	;# 
  3584  0E19                     	;# 
  3585  0E1A                     	;# 
  3586  0E1B                     	;# 
  3587  0E1C                     	;# 
  3588  0E1D                     	;# 
  3589  0E1E                     	;# 
  3590  0E1F                     	;# 
  3591  0E20                     	;# 
  3592  0E21                     	;# 
  3593  0E22                     	;# 
  3594  0E23                     	;# 
  3595  0E24                     	;# 
  3596  0E25                     	;# 
  3597  0E26                     	;# 
  3598  0E27                     	;# 
  3599  0E28                     	;# 
  3600  0E29                     	;# 
  3601  0E2A                     	;# 
  3602  0E2B                     	;# 
  3603  0E2C                     	;# 
  3604  0E2D                     	;# 
  3605  0E2E                     	;# 
  3606  0E2F                     	;# 
  3607  0E30                     	;# 
  3608  0E31                     	;# 
  3609  0E32                     	;# 
  3610  0E33                     	;# 
  3611  0E34                     	;# 
  3612  0E35                     	;# 
  3613  0E36                     	;# 
  3614  0E37                     	;# 
  3615  0E8F                     	;# 
  3616  0E90                     	;# 
  3617  0E91                     	;# 
  3618  0E92                     	;# 
  3619  0E93                     	;# 
  3620  0E94                     	;# 
  3621  0E95                     	;# 
  3622  0E96                     	;# 
  3623  0E97                     	;# 
  3624  0E9C                     	;# 
  3625  0E9D                     	;# 
  3626  0E9E                     	;# 
  3627  0EA1                     	;# 
  3628  0EA2                     	;# 
  3629  0EA3                     	;# 
  3630  0EA4                     	;# 
  3631  0EA5                     	;# 
  3632  0EA9                     	;# 
  3633  0EAA                     	;# 
  3634  0EAB                     	;# 
  3635  0EAC                     	;# 
  3636  0EB1                     	;# 
  3637  0EB2                     	;# 
  3638  0EB3                     	;# 
  3639  0EB8                     	;# 
  3640  0EB9                     	;# 
  3641  0EBA                     	;# 
  3642  0EBB                     	;# 
  3643  0EBC                     	;# 
  3644  0EBD                     	;# 
  3645  0EBE                     	;# 
  3646  0EC3                     	;# 
  3647  0EC5                     	;# 
  3648  0EC6                     	;# 
  3649  0EC7                     	;# 
  3650  0EC8                     	;# 
  3651  0EC9                     	;# 
  3652  0ECA                     	;# 
  3653  0ECB                     	;# 
  3654  0ECC                     	;# 
  3655  0F10                     	;# 
  3656  0F11                     	;# 
  3657  0F12                     	;# 
  3658  0F13                     	;# 
  3659  0F14                     	;# 
  3660  0F15                     	;# 
  3661  0F16                     	;# 
  3662  0F17                     	;# 
  3663  0F18                     	;# 
  3664  0F19                     	;# 
  3665  0F1A                     	;# 
  3666  0F1B                     	;# 
  3667  0F1C                     	;# 
  3668  0F1D                     	;# 
  3669  0F1E                     	;# 
  3670  0F1F                     	;# 
  3671  0F20                     	;# 
  3672  0F21                     	;# 
  3673  0F22                     	;# 
  3674  0F23                     	;# 
  3675  0F24                     	;# 
  3676  0F25                     	;# 
  3677  0F26                     	;# 
  3678  0F27                     	;# 
  3679  0F38                     	;# 
  3680  0F39                     	;# 
  3681  0F3A                     	;# 
  3682  0F3B                     	;# 
  3683  0F3C                     	;# 
  3684  0F3D                     	;# 
  3685  0F3E                     	;# 
  3686  0F3F                     	;# 
  3687  0F40                     	;# 
  3688  0F41                     	;# 
  3689  0F43                     	;# 
  3690  0F44                     	;# 
  3691  0F45                     	;# 
  3692  0F46                     	;# 
  3693  0F47                     	;# 
  3694  0F48                     	;# 
  3695  0F49                     	;# 
  3696  0F4A                     	;# 
  3697  0F4B                     	;# 
  3698  0F4C                     	;# 
  3699  0F4E                     	;# 
  3700  0F4F                     	;# 
  3701  0F50                     	;# 
  3702  0F51                     	;# 
  3703  0F52                     	;# 
  3704  0F53                     	;# 
  3705  0F54                     	;# 
  3706  0F55                     	;# 
  3707  0F56                     	;# 
  3708  0F57                     	;# 
  3709  0F65                     	;# 
  3710  0F68                     	;# 
  3711  0F69                     	;# 
  3712  0F6A                     	;# 
  3713  0F6B                     	;# 
  3714  0FE4                     	;# 
  3715  0FE5                     	;# 
  3716  0FE6                     	;# 
  3717  0FE7                     	;# 
  3718  0FE8                     	;# 
  3719  0FE9                     	;# 
  3720  0FEA                     	;# 
  3721  0FEB                     	;# 
  3722  0FED                     	;# 
  3723  0FEE                     	;# 
  3724  0FEF                     	;# 
  3725  0000                     	;# 
  3726  0001                     	;# 
  3727  0002                     	;# 
  3728  0003                     	;# 
  3729  0004                     	;# 
  3730  0005                     	;# 
  3731  0006                     	;# 
  3732  0007                     	;# 
  3733  0008                     	;# 
  3734  0009                     	;# 
  3735  000A                     	;# 
  3736  000B                     	;# 
  3737  000C                     	;# 
  3738  000D                     	;# 
  3739  000E                     	;# 
  3740  0010                     	;# 
  3741  0011                     	;# 
  3742  0012                     	;# 
  3743  0013                     	;# 
  3744  0016                     	;# 
  3745  0017                     	;# 
  3746  0018                     	;# 
  3747  001C                     	;# 
  3748  001C                     	;# 
  3749  001D                     	;# 
  3750  001D                     	;# 
  3751  001E                     	;# 
  3752  001F                     	;# 
  3753  008C                     	;# 
  3754  008C                     	;# 
  3755  008D                     	;# 
  3756  008E                     	;# 
  3757  008E                     	;# 
  3758  008F                     	;# 
  3759  0090                     	;# 
  3760  0090                     	;# 
  3761  0091                     	;# 
  3762  0093                     	;# 
  3763  0094                     	;# 
  3764  0095                     	;# 
  3765  0096                     	;# 
  3766  0097                     	;# 
  3767  0098                     	;# 
  3768  0099                     	;# 
  3769  009A                     	;# 
  3770  009B                     	;# 
  3771  009C                     	;# 
  3772  009D                     	;# 
  3773  009E                     	;# 
  3774  010C                     	;# 
  3775  010D                     	;# 
  3776  010E                     	;# 
  3777  010E                     	;# 
  3778  010F                     	;# 
  3779  0110                     	;# 
  3780  0110                     	;# 
  3781  0111                     	;# 
  3782  0112                     	;# 
  3783  0112                     	;# 
  3784  0113                     	;# 
  3785  0114                     	;# 
  3786  0114                     	;# 
  3787  0115                     	;# 
  3788  0116                     	;# 
  3789  0116                     	;# 
  3790  0117                     	;# 
  3791  0119                     	;# 
  3792  0119                     	;# 
  3793  0119                     	;# 
  3794  011A                     	;# 
  3795  011A                     	;# 
  3796  011A                     	;# 
  3797  011B                     	;# 
  3798  011B                     	;# 
  3799  011B                     	;# 
  3800  011B                     	;# 
  3801  011B                     	;# 
  3802  011C                     	;# 
  3803  011C                     	;# 
  3804  011C                     	;# 
  3805  011D                     	;# 
  3806  011D                     	;# 
  3807  011D                     	;# 
  3808  011E                     	;# 
  3809  011E                     	;# 
  3810  011E                     	;# 
  3811  011F                     	;# 
  3812  011F                     	;# 
  3813  011F                     	;# 
  3814  011F                     	;# 
  3815  011F                     	;# 
  3816  018C                     	;# 
  3817  018D                     	;# 
  3818  018E                     	;# 
  3819  018F                     	;# 
  3820  0190                     	;# 
  3821  0191                     	;# 
  3822  0192                     	;# 
  3823  0196                     	;# 
  3824  0197                     	;# 
  3825  0198                     	;# 
  3826  0199                     	;# 
  3827  019A                     	;# 
  3828  019B                     	;# 
  3829  019C                     	;# 
  3830  020C                     	;# 
  3831  020C                     	;# 
  3832  020D                     	;# 
  3833  020E                     	;# 
  3834  020F                     	;# 
  3835  020F                     	;# 
  3836  0210                     	;# 
  3837  0210                     	;# 
  3838  0211                     	;# 
  3839  0211                     	;# 
  3840  0212                     	;# 
  3841  0212                     	;# 
  3842  0213                     	;# 
  3843  0214                     	;# 
  3844  0215                     	;# 
  3845  0215                     	;# 
  3846  0216                     	;# 
  3847  0216                     	;# 
  3848  0217                     	;# 
  3849  0217                     	;# 
  3850  0218                     	;# 
  3851  0218                     	;# 
  3852  0219                     	;# 
  3853  021A                     	;# 
  3854  021B                     	;# 
  3855  021B                     	;# 
  3856  021C                     	;# 
  3857  021C                     	;# 
  3858  021D                     	;# 
  3859  021D                     	;# 
  3860  021E                     	;# 
  3861  021F                     	;# 
  3862  028C                     	;# 
  3863  028C                     	;# 
  3864  028D                     	;# 
  3865  028D                     	;# 
  3866  028E                     	;# 
  3867  028F                     	;# 
  3868  0290                     	;# 
  3869  0290                     	;# 
  3870  0291                     	;# 
  3871  0292                     	;# 
  3872  0292                     	;# 
  3873  0293                     	;# 
  3874  0293                     	;# 
  3875  0294                     	;# 
  3876  0295                     	;# 
  3877  0296                     	;# 
  3878  0296                     	;# 
  3879  0297                     	;# 
  3880  0298                     	;# 
  3881  0298                     	;# 
  3882  0299                     	;# 
  3883  0299                     	;# 
  3884  029A                     	;# 
  3885  029B                     	;# 
  3886  029C                     	;# 
  3887  029C                     	;# 
  3888  029D                     	;# 
  3889  030C                     	;# 
  3890  030C                     	;# 
  3891  030D                     	;# 
  3892  030E                     	;# 
  3893  030F                     	;# 
  3894  0310                     	;# 
  3895  0310                     	;# 
  3896  0311                     	;# 
  3897  0312                     	;# 
  3898  0313                     	;# 
  3899  0314                     	;# 
  3900  0314                     	;# 
  3901  0315                     	;# 
  3902  0316                     	;# 
  3903  0317                     	;# 
  3904  0318                     	;# 
  3905  0318                     	;# 
  3906  0319                     	;# 
  3907  031A                     	;# 
  3908  031B                     	;# 
  3909  031C                     	;# 
  3910  031C                     	;# 
  3911  031D                     	;# 
  3912  031E                     	;# 
  3913  031F                     	;# 
  3914  038C                     	;# 
  3915  038D                     	;# 
  3916  038E                     	;# 
  3917  0390                     	;# 
  3918  0391                     	;# 
  3919  0392                     	;# 
  3920  040C                     	;# 
  3921  040D                     	;# 
  3922  040E                     	;# 
  3923  040F                     	;# 
  3924  0410                     	;# 
  3925  0411                     	;# 
  3926  0416                     	;# 
  3927  0416                     	;# 
  3928  0417                     	;# 
  3929  0418                     	;# 
  3930  0418                     	;# 
  3931  0419                     	;# 
  3932  041A                     	;# 
  3933  041A                     	;# 
  3934  041B                     	;# 
  3935  041C                     	;# 
  3936  041C                     	;# 
  3937  041D                     	;# 
  3938  041E                     	;# 
  3939  041F                     	;# 
  3940  048C                     	;# 
  3941  048C                     	;# 
  3942  048D                     	;# 
  3943  048E                     	;# 
  3944  048F                     	;# 
  3945  048F                     	;# 
  3946  0490                     	;# 
  3947  0491                     	;# 
  3948  0492                     	;# 
  3949  0492                     	;# 
  3950  0493                     	;# 
  3951  0494                     	;# 
  3952  0495                     	;# 
  3953  0495                     	;# 
  3954  0496                     	;# 
  3955  0497                     	;# 
  3956  0498                     	;# 
  3957  0499                     	;# 
  3958  049A                     	;# 
  3959  049B                     	;# 
  3960  049C                     	;# 
  3961  049D                     	;# 
  3962  050C                     	;# 
  3963  050C                     	;# 
  3964  050D                     	;# 
  3965  050E                     	;# 
  3966  050F                     	;# 
  3967  050F                     	;# 
  3968  0510                     	;# 
  3969  0511                     	;# 
  3970  0512                     	;# 
  3971  0512                     	;# 
  3972  0513                     	;# 
  3973  0514                     	;# 
  3974  0515                     	;# 
  3975  0515                     	;# 
  3976  0516                     	;# 
  3977  0517                     	;# 
  3978  0518                     	;# 
  3979  0519                     	;# 
  3980  051A                     	;# 
  3981  051B                     	;# 
  3982  051C                     	;# 
  3983  051D                     	;# 
  3984  058C                     	;# 
  3985  058C                     	;# 
  3986  058D                     	;# 
  3987  058E                     	;# 
  3988  058F                     	;# 
  3989  058F                     	;# 
  3990  0590                     	;# 
  3991  0591                     	;# 
  3992  0592                     	;# 
  3993  0593                     	;# 
  3994  060C                     	;# 
  3995  060D                     	;# 
  3996  060E                     	;# 
  3997  060F                     	;# 
  3998  0610                     	;# 
  3999  0611                     	;# 
  4000  0612                     	;# 
  4001  0613                     	;# 
  4002  0614                     	;# 
  4003  0616                     	;# 
  4004  0617                     	;# 
  4005  0618                     	;# 
  4006  0619                     	;# 
  4007  061A                     	;# 
  4008  061B                     	;# 
  4009  061C                     	;# 
  4010  061D                     	;# 
  4011  061E                     	;# 
  4012  068C                     	;# 
  4013  068D                     	;# 
  4014  068E                     	;# 
  4015  068F                     	;# 
  4016  0690                     	;# 
  4017  0691                     	;# 
  4018  0692                     	;# 
  4019  0693                     	;# 
  4020  0694                     	;# 
  4021  070C                     	;# 
  4022  070D                     	;# 
  4023  070E                     	;# 
  4024  070F                     	;# 
  4025  0710                     	;# 
  4026  0711                     	;# 
  4027  0712                     	;# 
  4028  0713                     	;# 
  4029  0714                     	;# 
  4030  0716                     	;# 
  4031  0717                     	;# 
  4032  0718                     	;# 
  4033  0719                     	;# 
  4034  071A                     	;# 
  4035  071B                     	;# 
  4036  071C                     	;# 
  4037  071D                     	;# 
  4038  071E                     	;# 
  4039  0796                     	;# 
  4040  0797                     	;# 
  4041  0798                     	;# 
  4042  0799                     	;# 
  4043  079A                     	;# 
  4044  079B                     	;# 
  4045  080C                     	;# 
  4046  080D                     	;# 
  4047  080E                     	;# 
  4048  080F                     	;# 
  4049  0810                     	;# 
  4050  0811                     	;# 
  4051  0812                     	;# 
  4052  0813                     	;# 
  4053  0814                     	;# 
  4054  081A                     	;# 
  4055  081B                     	;# 
  4056  081C                     	;# 
  4057  081D                     	;# 
  4058  081E                     	;# 
  4059  081F                     	;# 
  4060  088C                     	;# 
  4061  088D                     	;# 
  4062  088E                     	;# 
  4063  088F                     	;# 
  4064  0890                     	;# 
  4065  0891                     	;# 
  4066  0892                     	;# 
  4067  0893                     	;# 
  4068  0895                     	;# 
  4069  0896                     	;# 
  4070  0897                     	;# 
  4071  0898                     	;# 
  4072  0899                     	;# 
  4073  089A                     	;# 
  4074  089B                     	;# 
  4075  090C                     	;# 
  4076  090E                     	;# 
  4077  090F                     	;# 
  4078  091F                     	;# 
  4079  091F                     	;# 
  4080  098F                     	;# 
  4081  098F                     	;# 
  4082  0990                     	;# 
  4083  0991                     	;# 
  4084  0992                     	;# 
  4085  0993                     	;# 
  4086  0994                     	;# 
  4087  0995                     	;# 
  4088  0996                     	;# 
  4089  0997                     	;# 
  4090  0E0F                     	;# 
  4091  0E10                     	;# 
  4092  0E11                     	;# 
  4093  0E12                     	;# 
  4094  0E13                     	;# 
  4095  0E14                     	;# 
  4096  0E15                     	;# 
  4097  0E16                     	;# 
  4098  0E17                     	;# 
  4099  0E18                     	;# 
  4100  0E19                     	;# 
  4101  0E1A                     	;# 
  4102  0E1B                     	;# 
  4103  0E1C                     	;# 
  4104  0E1D                     	;# 
  4105  0E1E                     	;# 
  4106  0E1F                     	;# 
  4107  0E20                     	;# 
  4108  0E21                     	;# 
  4109  0E22                     	;# 
  4110  0E23                     	;# 
  4111  0E24                     	;# 
  4112  0E25                     	;# 
  4113  0E26                     	;# 
  4114  0E27                     	;# 
  4115  0E28                     	;# 
  4116  0E29                     	;# 
  4117  0E2A                     	;# 
  4118  0E2B                     	;# 
  4119  0E2C                     	;# 
  4120  0E2D                     	;# 
  4121  0E2E                     	;# 
  4122  0E2F                     	;# 
  4123  0E30                     	;# 
  4124  0E31                     	;# 
  4125  0E32                     	;# 
  4126  0E33                     	;# 
  4127  0E34                     	;# 
  4128  0E35                     	;# 
  4129  0E36                     	;# 
  4130  0E37                     	;# 
  4131  0E8F                     	;# 
  4132  0E90                     	;# 
  4133  0E91                     	;# 
  4134  0E92                     	;# 
  4135  0E93                     	;# 
  4136  0E94                     	;# 
  4137  0E95                     	;# 
  4138  0E96                     	;# 
  4139  0E97                     	;# 
  4140  0E9C                     	;# 
  4141  0E9D                     	;# 
  4142  0E9E                     	;# 
  4143  0EA1                     	;# 
  4144  0EA2                     	;# 
  4145  0EA3                     	;# 
  4146  0EA4                     	;# 
  4147  0EA5                     	;# 
  4148  0EA9                     	;# 
  4149  0EAA                     	;# 
  4150  0EAB                     	;# 
  4151  0EAC                     	;# 
  4152  0EB1                     	;# 
  4153  0EB2                     	;# 
  4154  0EB3                     	;# 
  4155  0EB8                     	;# 
  4156  0EB9                     	;# 
  4157  0EBA                     	;# 
  4158  0EBB                     	;# 
  4159  0EBC                     	;# 
  4160  0EBD                     	;# 
  4161  0EBE                     	;# 
  4162  0EC3                     	;# 
  4163  0EC5                     	;# 
  4164  0EC6                     	;# 
  4165  0EC7                     	;# 
  4166  0EC8                     	;# 
  4167  0EC9                     	;# 
  4168  0ECA                     	;# 
  4169  0ECB                     	;# 
  4170  0ECC                     	;# 
  4171  0F10                     	;# 
  4172  0F11                     	;# 
  4173  0F12                     	;# 
  4174  0F13                     	;# 
  4175  0F14                     	;# 
  4176  0F15                     	;# 
  4177  0F16                     	;# 
  4178  0F17                     	;# 
  4179  0F18                     	;# 
  4180  0F19                     	;# 
  4181  0F1A                     	;# 
  4182  0F1B                     	;# 
  4183  0F1C                     	;# 
  4184  0F1D                     	;# 
  4185  0F1E                     	;# 
  4186  0F1F                     	;# 
  4187  0F20                     	;# 
  4188  0F21                     	;# 
  4189  0F22                     	;# 
  4190  0F23                     	;# 
  4191  0F24                     	;# 
  4192  0F25                     	;# 
  4193  0F26                     	;# 
  4194  0F27                     	;# 
  4195  0F38                     	;# 
  4196  0F39                     	;# 
  4197  0F3A                     	;# 
  4198  0F3B                     	;# 
  4199  0F3C                     	;# 
  4200  0F3D                     	;# 
  4201  0F3E                     	;# 
  4202  0F3F                     	;# 
  4203  0F40                     	;# 
  4204  0F41                     	;# 
  4205  0F43                     	;# 
  4206  0F44                     	;# 
  4207  0F45                     	;# 
  4208  0F46                     	;# 
  4209  0F47                     	;# 
  4210  0F48                     	;# 
  4211  0F49                     	;# 
  4212  0F4A                     	;# 
  4213  0F4B                     	;# 
  4214  0F4C                     	;# 
  4215  0F4E                     	;# 
  4216  0F4F                     	;# 
  4217  0F50                     	;# 
  4218  0F51                     	;# 
  4219  0F52                     	;# 
  4220  0F53                     	;# 
  4221  0F54                     	;# 
  4222  0F55                     	;# 
  4223  0F56                     	;# 
  4224  0F57                     	;# 
  4225  0F65                     	;# 
  4226  0F68                     	;# 
  4227  0F69                     	;# 
  4228  0F6A                     	;# 
  4229  0F6B                     	;# 
  4230  0FE4                     	;# 
  4231  0FE5                     	;# 
  4232  0FE6                     	;# 
  4233  0FE7                     	;# 
  4234  0FE8                     	;# 
  4235  0FE9                     	;# 
  4236  0FEA                     	;# 
  4237  0FEB                     	;# 
  4238  0FED                     	;# 
  4239  0FEE                     	;# 
  4240  0FEF                     	;# 
  4241  0000                     	;# 
  4242  0001                     	;# 
  4243  0002                     	;# 
  4244  0003                     	;# 
  4245  0004                     	;# 
  4246  0005                     	;# 
  4247  0006                     	;# 
  4248  0007                     	;# 
  4249  0008                     	;# 
  4250  0009                     	;# 
  4251  000A                     	;# 
  4252  000B                     	;# 
  4253  000C                     	;# 
  4254  000D                     	;# 
  4255  000E                     	;# 
  4256  0010                     	;# 
  4257  0011                     	;# 
  4258  0012                     	;# 
  4259  0013                     	;# 
  4260  0016                     	;# 
  4261  0017                     	;# 
  4262  0018                     	;# 
  4263  001C                     	;# 
  4264  001C                     	;# 
  4265  001D                     	;# 
  4266  001D                     	;# 
  4267  001E                     	;# 
  4268  001F                     	;# 
  4269  008C                     	;# 
  4270  008C                     	;# 
  4271  008D                     	;# 
  4272  008E                     	;# 
  4273  008E                     	;# 
  4274  008F                     	;# 
  4275  0090                     	;# 
  4276  0090                     	;# 
  4277  0091                     	;# 
  4278  0093                     	;# 
  4279  0094                     	;# 
  4280  0095                     	;# 
  4281  0096                     	;# 
  4282  0097                     	;# 
  4283  0098                     	;# 
  4284  0099                     	;# 
  4285  009A                     	;# 
  4286  009B                     	;# 
  4287  009C                     	;# 
  4288  009D                     	;# 
  4289  009E                     	;# 
  4290  010C                     	;# 
  4291  010D                     	;# 
  4292  010E                     	;# 
  4293  010E                     	;# 
  4294  010F                     	;# 
  4295  0110                     	;# 
  4296  0110                     	;# 
  4297  0111                     	;# 
  4298  0112                     	;# 
  4299  0112                     	;# 
  4300  0113                     	;# 
  4301  0114                     	;# 
  4302  0114                     	;# 
  4303  0115                     	;# 
  4304  0116                     	;# 
  4305  0116                     	;# 
  4306  0117                     	;# 
  4307  0119                     	;# 
  4308  0119                     	;# 
  4309  0119                     	;# 
  4310  011A                     	;# 
  4311  011A                     	;# 
  4312  011A                     	;# 
  4313  011B                     	;# 
  4314  011B                     	;# 
  4315  011B                     	;# 
  4316  011B                     	;# 
  4317  011B                     	;# 
  4318  011C                     	;# 
  4319  011C                     	;# 
  4320  011C                     	;# 
  4321  011D                     	;# 
  4322  011D                     	;# 
  4323  011D                     	;# 
  4324  011E                     	;# 
  4325  011E                     	;# 
  4326  011E                     	;# 
  4327  011F                     	;# 
  4328  011F                     	;# 
  4329  011F                     	;# 
  4330  011F                     	;# 
  4331  011F                     	;# 
  4332  018C                     	;# 
  4333  018D                     	;# 
  4334  018E                     	;# 
  4335  018F                     	;# 
  4336  0190                     	;# 
  4337  0191                     	;# 
  4338  0192                     	;# 
  4339  0196                     	;# 
  4340  0197                     	;# 
  4341  0198                     	;# 
  4342  0199                     	;# 
  4343  019A                     	;# 
  4344  019B                     	;# 
  4345  019C                     	;# 
  4346  020C                     	;# 
  4347  020C                     	;# 
  4348  020D                     	;# 
  4349  020E                     	;# 
  4350  020F                     	;# 
  4351  020F                     	;# 
  4352  0210                     	;# 
  4353  0210                     	;# 
  4354  0211                     	;# 
  4355  0211                     	;# 
  4356  0212                     	;# 
  4357  0212                     	;# 
  4358  0213                     	;# 
  4359  0214                     	;# 
  4360  0215                     	;# 
  4361  0215                     	;# 
  4362  0216                     	;# 
  4363  0216                     	;# 
  4364  0217                     	;# 
  4365  0217                     	;# 
  4366  0218                     	;# 
  4367  0218                     	;# 
  4368  0219                     	;# 
  4369  021A                     	;# 
  4370  021B                     	;# 
  4371  021B                     	;# 
  4372  021C                     	;# 
  4373  021C                     	;# 
  4374  021D                     	;# 
  4375  021D                     	;# 
  4376  021E                     	;# 
  4377  021F                     	;# 
  4378  028C                     	;# 
  4379  028C                     	;# 
  4380  028D                     	;# 
  4381  028D                     	;# 
  4382  028E                     	;# 
  4383  028F                     	;# 
  4384  0290                     	;# 
  4385  0290                     	;# 
  4386  0291                     	;# 
  4387  0292                     	;# 
  4388  0292                     	;# 
  4389  0293                     	;# 
  4390  0293                     	;# 
  4391  0294                     	;# 
  4392  0295                     	;# 
  4393  0296                     	;# 
  4394  0296                     	;# 
  4395  0297                     	;# 
  4396  0298                     	;# 
  4397  0298                     	;# 
  4398  0299                     	;# 
  4399  0299                     	;# 
  4400  029A                     	;# 
  4401  029B                     	;# 
  4402  029C                     	;# 
  4403  029C                     	;# 
  4404  029D                     	;# 
  4405  030C                     	;# 
  4406  030C                     	;# 
  4407  030D                     	;# 
  4408  030E                     	;# 
  4409  030F                     	;# 
  4410  0310                     	;# 
  4411  0310                     	;# 
  4412  0311                     	;# 
  4413  0312                     	;# 
  4414  0313                     	;# 
  4415  0314                     	;# 
  4416  0314                     	;# 
  4417  0315                     	;# 
  4418  0316                     	;# 
  4419  0317                     	;# 
  4420  0318                     	;# 
  4421  0318                     	;# 
  4422  0319                     	;# 
  4423  031A                     	;# 
  4424  031B                     	;# 
  4425  031C                     	;# 
  4426  031C                     	;# 
  4427  031D                     	;# 
  4428  031E                     	;# 
  4429  031F                     	;# 
  4430  038C                     	;# 
  4431  038D                     	;# 
  4432  038E                     	;# 
  4433  0390                     	;# 
  4434  0391                     	;# 
  4435  0392                     	;# 
  4436  040C                     	;# 
  4437  040D                     	;# 
  4438  040E                     	;# 
  4439  040F                     	;# 
  4440  0410                     	;# 
  4441  0411                     	;# 
  4442  0416                     	;# 
  4443  0416                     	;# 
  4444  0417                     	;# 
  4445  0418                     	;# 
  4446  0418                     	;# 
  4447  0419                     	;# 
  4448  041A                     	;# 
  4449  041A                     	;# 
  4450  041B                     	;# 
  4451  041C                     	;# 
  4452  041C                     	;# 
  4453  041D                     	;# 
  4454  041E                     	;# 
  4455  041F                     	;# 
  4456  048C                     	;# 
  4457  048C                     	;# 
  4458  048D                     	;# 
  4459  048E                     	;# 
  4460  048F                     	;# 
  4461  048F                     	;# 
  4462  0490                     	;# 
  4463  0491                     	;# 
  4464  0492                     	;# 
  4465  0492                     	;# 
  4466  0493                     	;# 
  4467  0494                     	;# 
  4468  0495                     	;# 
  4469  0495                     	;# 
  4470  0496                     	;# 
  4471  0497                     	;# 
  4472  0498                     	;# 
  4473  0499                     	;# 
  4474  049A                     	;# 
  4475  049B                     	;# 
  4476  049C                     	;# 
  4477  049D                     	;# 
  4478  050C                     	;# 
  4479  050C                     	;# 
  4480  050D                     	;# 
  4481  050E                     	;# 
  4482  050F                     	;# 
  4483  050F                     	;# 
  4484  0510                     	;# 
  4485  0511                     	;# 
  4486  0512                     	;# 
  4487  0512                     	;# 
  4488  0513                     	;# 
  4489  0514                     	;# 
  4490  0515                     	;# 
  4491  0515                     	;# 
  4492  0516                     	;# 
  4493  0517                     	;# 
  4494  0518                     	;# 
  4495  0519                     	;# 
  4496  051A                     	;# 
  4497  051B                     	;# 
  4498  051C                     	;# 
  4499  051D                     	;# 
  4500  058C                     	;# 
  4501  058C                     	;# 
  4502  058D                     	;# 
  4503  058E                     	;# 
  4504  058F                     	;# 
  4505  058F                     	;# 
  4506  0590                     	;# 
  4507  0591                     	;# 
  4508  0592                     	;# 
  4509  0593                     	;# 
  4510  060C                     	;# 
  4511  060D                     	;# 
  4512  060E                     	;# 
  4513  060F                     	;# 
  4514  0610                     	;# 
  4515  0611                     	;# 
  4516  0612                     	;# 
  4517  0613                     	;# 
  4518  0614                     	;# 
  4519  0616                     	;# 
  4520  0617                     	;# 
  4521  0618                     	;# 
  4522  0619                     	;# 
  4523  061A                     	;# 
  4524  061B                     	;# 
  4525  061C                     	;# 
  4526  061D                     	;# 
  4527  061E                     	;# 
  4528  068C                     	;# 
  4529  068D                     	;# 
  4530  068E                     	;# 
  4531  068F                     	;# 
  4532  0690                     	;# 
  4533  0691                     	;# 
  4534  0692                     	;# 
  4535  0693                     	;# 
  4536  0694                     	;# 
  4537  070C                     	;# 
  4538  070D                     	;# 
  4539  070E                     	;# 
  4540  070F                     	;# 
  4541  0710                     	;# 
  4542  0711                     	;# 
  4543  0712                     	;# 
  4544  0713                     	;# 
  4545  0714                     	;# 
  4546  0716                     	;# 
  4547  0717                     	;# 
  4548  0718                     	;# 
  4549  0719                     	;# 
  4550  071A                     	;# 
  4551  071B                     	;# 
  4552  071C                     	;# 
  4553  071D                     	;# 
  4554  071E                     	;# 
  4555  0796                     	;# 
  4556  0797                     	;# 
  4557  0798                     	;# 
  4558  0799                     	;# 
  4559  079A                     	;# 
  4560  079B                     	;# 
  4561  080C                     	;# 
  4562  080D                     	;# 
  4563  080E                     	;# 
  4564  080F                     	;# 
  4565  0810                     	;# 
  4566  0811                     	;# 
  4567  0812                     	;# 
  4568  0813                     	;# 
  4569  0814                     	;# 
  4570  081A                     	;# 
  4571  081B                     	;# 
  4572  081C                     	;# 
  4573  081D                     	;# 
  4574  081E                     	;# 
  4575  081F                     	;# 
  4576  088C                     	;# 
  4577  088D                     	;# 
  4578  088E                     	;# 
  4579  088F                     	;# 
  4580  0890                     	;# 
  4581  0891                     	;# 
  4582  0892                     	;# 
  4583  0893                     	;# 
  4584  0895                     	;# 
  4585  0896                     	;# 
  4586  0897                     	;# 
  4587  0898                     	;# 
  4588  0899                     	;# 
  4589  089A                     	;# 
  4590  089B                     	;# 
  4591  090C                     	;# 
  4592  090E                     	;# 
  4593  090F                     	;# 
  4594  091F                     	;# 
  4595  091F                     	;# 
  4596  098F                     	;# 
  4597  098F                     	;# 
  4598  0990                     	;# 
  4599  0991                     	;# 
  4600  0992                     	;# 
  4601  0993                     	;# 
  4602  0994                     	;# 
  4603  0995                     	;# 
  4604  0996                     	;# 
  4605  0997                     	;# 
  4606  0E0F                     	;# 
  4607  0E10                     	;# 
  4608  0E11                     	;# 
  4609  0E12                     	;# 
  4610  0E13                     	;# 
  4611  0E14                     	;# 
  4612  0E15                     	;# 
  4613  0E16                     	;# 
  4614  0E17                     	;# 
  4615  0E18                     	;# 
  4616  0E19                     	;# 
  4617  0E1A                     	;# 
  4618  0E1B                     	;# 
  4619  0E1C                     	;# 
  4620  0E1D                     	;# 
  4621  0E1E                     	;# 
  4622  0E1F                     	;# 
  4623  0E20                     	;# 
  4624  0E21                     	;# 
  4625  0E22                     	;# 
  4626  0E23                     	;# 
  4627  0E24                     	;# 
  4628  0E25                     	;# 
  4629  0E26                     	;# 
  4630  0E27                     	;# 
  4631  0E28                     	;# 
  4632  0E29                     	;# 
  4633  0E2A                     	;# 
  4634  0E2B                     	;# 
  4635  0E2C                     	;# 
  4636  0E2D                     	;# 
  4637  0E2E                     	;# 
  4638  0E2F                     	;# 
  4639  0E30                     	;# 
  4640  0E31                     	;# 
  4641  0E32                     	;# 
  4642  0E33                     	;# 
  4643  0E34                     	;# 
  4644  0E35                     	;# 
  4645  0E36                     	;# 
  4646  0E37                     	;# 
  4647  0E8F                     	;# 
  4648  0E90                     	;# 
  4649  0E91                     	;# 
  4650  0E92                     	;# 
  4651  0E93                     	;# 
  4652  0E94                     	;# 
  4653  0E95                     	;# 
  4654  0E96                     	;# 
  4655  0E97                     	;# 
  4656  0E9C                     	;# 
  4657  0E9D                     	;# 
  4658  0E9E                     	;# 
  4659  0EA1                     	;# 
  4660  0EA2                     	;# 
  4661  0EA3                     	;# 
  4662  0EA4                     	;# 
  4663  0EA5                     	;# 
  4664  0EA9                     	;# 
  4665  0EAA                     	;# 
  4666  0EAB                     	;# 
  4667  0EAC                     	;# 
  4668  0EB1                     	;# 
  4669  0EB2                     	;# 
  4670  0EB3                     	;# 
  4671  0EB8                     	;# 
  4672  0EB9                     	;# 
  4673  0EBA                     	;# 
  4674  0EBB                     	;# 
  4675  0EBC                     	;# 
  4676  0EBD                     	;# 
  4677  0EBE                     	;# 
  4678  0EC3                     	;# 
  4679  0EC5                     	;# 
  4680  0EC6                     	;# 
  4681  0EC7                     	;# 
  4682  0EC8                     	;# 
  4683  0EC9                     	;# 
  4684  0ECA                     	;# 
  4685  0ECB                     	;# 
  4686  0ECC                     	;# 
  4687  0F10                     	;# 
  4688  0F11                     	;# 
  4689  0F12                     	;# 
  4690  0F13                     	;# 
  4691  0F14                     	;# 
  4692  0F15                     	;# 
  4693  0F16                     	;# 
  4694  0F17                     	;# 
  4695  0F18                     	;# 
  4696  0F19                     	;# 
  4697  0F1A                     	;# 
  4698  0F1B                     	;# 
  4699  0F1C                     	;# 
  4700  0F1D                     	;# 
  4701  0F1E                     	;# 
  4702  0F1F                     	;# 
  4703  0F20                     	;# 
  4704  0F21                     	;# 
  4705  0F22                     	;# 
  4706  0F23                     	;# 
  4707  0F24                     	;# 
  4708  0F25                     	;# 
  4709  0F26                     	;# 
  4710  0F27                     	;# 
  4711  0F38                     	;# 
  4712  0F39                     	;# 
  4713  0F3A                     	;# 
  4714  0F3B                     	;# 
  4715  0F3C                     	;# 
  4716  0F3D                     	;# 
  4717  0F3E                     	;# 
  4718  0F3F                     	;# 
  4719  0F40                     	;# 
  4720  0F41                     	;# 
  4721  0F43                     	;# 
  4722  0F44                     	;# 
  4723  0F45                     	;# 
  4724  0F46                     	;# 
  4725  0F47                     	;# 
  4726  0F48                     	;# 
  4727  0F49                     	;# 
  4728  0F4A                     	;# 
  4729  0F4B                     	;# 
  4730  0F4C                     	;# 
  4731  0F4E                     	;# 
  4732  0F4F                     	;# 
  4733  0F50                     	;# 
  4734  0F51                     	;# 
  4735  0F52                     	;# 
  4736  0F53                     	;# 
  4737  0F54                     	;# 
  4738  0F55                     	;# 
  4739  0F56                     	;# 
  4740  0F57                     	;# 
  4741  0F65                     	;# 
  4742  0F68                     	;# 
  4743  0F69                     	;# 
  4744  0F6A                     	;# 
  4745  0F6B                     	;# 
  4746  0FE4                     	;# 
  4747  0FE5                     	;# 
  4748  0FE6                     	;# 
  4749  0FE7                     	;# 
  4750  0FE8                     	;# 
  4751  0FE9                     	;# 
  4752  0FEA                     	;# 
  4753  0FEB                     	;# 
  4754  0FED                     	;# 
  4755  0FEE                     	;# 
  4756  0FEF                     	;# 
  4757  0000                     	;# 
  4758  0001                     	;# 
  4759  0002                     	;# 
  4760  0003                     	;# 
  4761  0004                     	;# 
  4762  0005                     	;# 
  4763  0006                     	;# 
  4764  0007                     	;# 
  4765  0008                     	;# 
  4766  0009                     	;# 
  4767  000A                     	;# 
  4768  000B                     	;# 
  4769  000C                     	;# 
  4770  000D                     	;# 
  4771  000E                     	;# 
  4772  0010                     	;# 
  4773  0011                     	;# 
  4774  0012                     	;# 
  4775  0013                     	;# 
  4776  0016                     	;# 
  4777  0017                     	;# 
  4778  0018                     	;# 
  4779  001C                     	;# 
  4780  001C                     	;# 
  4781  001D                     	;# 
  4782  001D                     	;# 
  4783  001E                     	;# 
  4784  001F                     	;# 
  4785  008C                     	;# 
  4786  008C                     	;# 
  4787  008D                     	;# 
  4788  008E                     	;# 
  4789  008E                     	;# 
  4790  008F                     	;# 
  4791  0090                     	;# 
  4792  0090                     	;# 
  4793  0091                     	;# 
  4794  0093                     	;# 
  4795  0094                     	;# 
  4796  0095                     	;# 
  4797  0096                     	;# 
  4798  0097                     	;# 
  4799  0098                     	;# 
  4800  0099                     	;# 
  4801  009A                     	;# 
  4802  009B                     	;# 
  4803  009C                     	;# 
  4804  009D                     	;# 
  4805  009E                     	;# 
  4806  010C                     	;# 
  4807  010D                     	;# 
  4808  010E                     	;# 
  4809  010E                     	;# 
  4810  010F                     	;# 
  4811  0110                     	;# 
  4812  0110                     	;# 
  4813  0111                     	;# 
  4814  0112                     	;# 
  4815  0112                     	;# 
  4816  0113                     	;# 
  4817  0114                     	;# 
  4818  0114                     	;# 
  4819  0115                     	;# 
  4820  0116                     	;# 
  4821  0116                     	;# 
  4822  0117                     	;# 
  4823  0119                     	;# 
  4824  0119                     	;# 
  4825  0119                     	;# 
  4826  011A                     	;# 
  4827  011A                     	;# 
  4828  011A                     	;# 
  4829  011B                     	;# 
  4830  011B                     	;# 
  4831  011B                     	;# 
  4832  011B                     	;# 
  4833  011B                     	;# 
  4834  011C                     	;# 
  4835  011C                     	;# 
  4836  011C                     	;# 
  4837  011D                     	;# 
  4838  011D                     	;# 
  4839  011D                     	;# 
  4840  011E                     	;# 
  4841  011E                     	;# 
  4842  011E                     	;# 
  4843  011F                     	;# 
  4844  011F                     	;# 
  4845  011F                     	;# 
  4846  011F                     	;# 
  4847  011F                     	;# 
  4848  018C                     	;# 
  4849  018D                     	;# 
  4850  018E                     	;# 
  4851  018F                     	;# 
  4852  0190                     	;# 
  4853  0191                     	;# 
  4854  0192                     	;# 
  4855  0196                     	;# 
  4856  0197                     	;# 
  4857  0198                     	;# 
  4858  0199                     	;# 
  4859  019A                     	;# 
  4860  019B                     	;# 
  4861  019C                     	;# 
  4862  020C                     	;# 
  4863  020C                     	;# 
  4864  020D                     	;# 
  4865  020E                     	;# 
  4866  020F                     	;# 
  4867  020F                     	;# 
  4868  0210                     	;# 
  4869  0210                     	;# 
  4870  0211                     	;# 
  4871  0211                     	;# 
  4872  0212                     	;# 
  4873  0212                     	;# 
  4874  0213                     	;# 
  4875  0214                     	;# 
  4876  0215                     	;# 
  4877  0215                     	;# 
  4878  0216                     	;# 
  4879  0216                     	;# 
  4880  0217                     	;# 
  4881  0217                     	;# 
  4882  0218                     	;# 
  4883  0218                     	;# 
  4884  0219                     	;# 
  4885  021A                     	;# 
  4886  021B                     	;# 
  4887  021B                     	;# 
  4888  021C                     	;# 
  4889  021C                     	;# 
  4890  021D                     	;# 
  4891  021D                     	;# 
  4892  021E                     	;# 
  4893  021F                     	;# 
  4894  028C                     	;# 
  4895  028C                     	;# 
  4896  028D                     	;# 
  4897  028D                     	;# 
  4898  028E                     	;# 
  4899  028F                     	;# 
  4900  0290                     	;# 
  4901  0290                     	;# 
  4902  0291                     	;# 
  4903  0292                     	;# 
  4904  0292                     	;# 
  4905  0293                     	;# 
  4906  0293                     	;# 
  4907  0294                     	;# 
  4908  0295                     	;# 
  4909  0296                     	;# 
  4910  0296                     	;# 
  4911  0297                     	;# 
  4912  0298                     	;# 
  4913  0298                     	;# 
  4914  0299                     	;# 
  4915  0299                     	;# 
  4916  029A                     	;# 
  4917  029B                     	;# 
  4918  029C                     	;# 
  4919  029C                     	;# 
  4920  029D                     	;# 
  4921  030C                     	;# 
  4922  030C                     	;# 
  4923  030D                     	;# 
  4924  030E                     	;# 
  4925  030F                     	;# 
  4926  0310                     	;# 
  4927  0310                     	;# 
  4928  0311                     	;# 
  4929  0312                     	;# 
  4930  0313                     	;# 
  4931  0314                     	;# 
  4932  0314                     	;# 
  4933  0315                     	;# 
  4934  0316                     	;# 
  4935  0317                     	;# 
  4936  0318                     	;# 
  4937  0318                     	;# 
  4938  0319                     	;# 
  4939  031A                     	;# 
  4940  031B                     	;# 
  4941  031C                     	;# 
  4942  031C                     	;# 
  4943  031D                     	;# 
  4944  031E                     	;# 
  4945  031F                     	;# 
  4946  038C                     	;# 
  4947  038D                     	;# 
  4948  038E                     	;# 
  4949  0390                     	;# 
  4950  0391                     	;# 
  4951  0392                     	;# 
  4952  040C                     	;# 
  4953  040D                     	;# 
  4954  040E                     	;# 
  4955  040F                     	;# 
  4956  0410                     	;# 
  4957  0411                     	;# 
  4958  0416                     	;# 
  4959  0416                     	;# 
  4960  0417                     	;# 
  4961  0418                     	;# 
  4962  0418                     	;# 
  4963  0419                     	;# 
  4964  041A                     	;# 
  4965  041A                     	;# 
  4966  041B                     	;# 
  4967  041C                     	;# 
  4968  041C                     	;# 
  4969  041D                     	;# 
  4970  041E                     	;# 
  4971  041F                     	;# 
  4972  048C                     	;# 
  4973  048C                     	;# 
  4974  048D                     	;# 
  4975  048E                     	;# 
  4976  048F                     	;# 
  4977  048F                     	;# 
  4978  0490                     	;# 
  4979  0491                     	;# 
  4980  0492                     	;# 
  4981  0492                     	;# 
  4982  0493                     	;# 
  4983  0494                     	;# 
  4984  0495                     	;# 
  4985  0495                     	;# 
  4986  0496                     	;# 
  4987  0497                     	;# 
  4988  0498                     	;# 
  4989  0499                     	;# 
  4990  049A                     	;# 
  4991  049B                     	;# 
  4992  049C                     	;# 
  4993  049D                     	;# 
  4994  050C                     	;# 
  4995  050C                     	;# 
  4996  050D                     	;# 
  4997  050E                     	;# 
  4998  050F                     	;# 
  4999  050F                     	;# 
  5000  0510                     	;# 
  5001  0511                     	;# 
  5002  0512                     	;# 
  5003  0512                     	;# 
  5004  0513                     	;# 
  5005  0514                     	;# 
  5006  0515                     	;# 
  5007  0515                     	;# 
  5008  0516                     	;# 
  5009  0517                     	;# 
  5010  0518                     	;# 
  5011  0519                     	;# 
  5012  051A                     	;# 
  5013  051B                     	;# 
  5014  051C                     	;# 
  5015  051D                     	;# 
  5016  058C                     	;# 
  5017  058C                     	;# 
  5018  058D                     	;# 
  5019  058E                     	;# 
  5020  058F                     	;# 
  5021  058F                     	;# 
  5022  0590                     	;# 
  5023  0591                     	;# 
  5024  0592                     	;# 
  5025  0593                     	;# 
  5026  060C                     	;# 
  5027  060D                     	;# 
  5028  060E                     	;# 
  5029  060F                     	;# 
  5030  0610                     	;# 
  5031  0611                     	;# 
  5032  0612                     	;# 
  5033  0613                     	;# 
  5034  0614                     	;# 
  5035  0616                     	;# 
  5036  0617                     	;# 
  5037  0618                     	;# 
  5038  0619                     	;# 
  5039  061A                     	;# 
  5040  061B                     	;# 
  5041  061C                     	;# 
  5042  061D                     	;# 
  5043  061E                     	;# 
  5044  068C                     	;# 
  5045  068D                     	;# 
  5046  068E                     	;# 
  5047  068F                     	;# 
  5048  0690                     	;# 
  5049  0691                     	;# 
  5050  0692                     	;# 
  5051  0693                     	;# 
  5052  0694                     	;# 
  5053  070C                     	;# 
  5054  070D                     	;# 
  5055  070E                     	;# 
  5056  070F                     	;# 
  5057  0710                     	;# 
  5058  0711                     	;# 
  5059  0712                     	;# 
  5060  0713                     	;# 
  5061  0714                     	;# 
  5062  0716                     	;# 
  5063  0717                     	;# 
  5064  0718                     	;# 
  5065  0719                     	;# 
  5066  071A                     	;# 
  5067  071B                     	;# 
  5068  071C                     	;# 
  5069  071D                     	;# 
  5070  071E                     	;# 
  5071  0796                     	;# 
  5072  0797                     	;# 
  5073  0798                     	;# 
  5074  0799                     	;# 
  5075  079A                     	;# 
  5076  079B                     	;# 
  5077  080C                     	;# 
  5078  080D                     	;# 
  5079  080E                     	;# 
  5080  080F                     	;# 
  5081  0810                     	;# 
  5082  0811                     	;# 
  5083  0812                     	;# 
  5084  0813                     	;# 
  5085  0814                     	;# 
  5086  081A                     	;# 
  5087  081B                     	;# 
  5088  081C                     	;# 
  5089  081D                     	;# 
  5090  081E                     	;# 
  5091  081F                     	;# 
  5092  088C                     	;# 
  5093  088D                     	;# 
  5094  088E                     	;# 
  5095  088F                     	;# 
  5096  0890                     	;# 
  5097  0891                     	;# 
  5098  0892                     	;# 
  5099  0893                     	;# 
  5100  0895                     	;# 
  5101  0896                     	;# 
  5102  0897                     	;# 
  5103  0898                     	;# 
  5104  0899                     	;# 
  5105  089A                     	;# 
  5106  089B                     	;# 
  5107  090C                     	;# 
  5108  090E                     	;# 
  5109  090F                     	;# 
  5110  091F                     	;# 
  5111  091F                     	;# 
  5112  098F                     	;# 
  5113  098F                     	;# 
  5114  0990                     	;# 
  5115  0991                     	;# 
  5116  0992                     	;# 
  5117  0993                     	;# 
  5118  0994                     	;# 
  5119  0995                     	;# 
  5120  0996                     	;# 
  5121  0997                     	;# 
  5122  0E0F                     	;# 
  5123  0E10                     	;# 
  5124  0E11                     	;# 
  5125  0E12                     	;# 
  5126  0E13                     	;# 
  5127  0E14                     	;# 
  5128  0E15                     	;# 
  5129  0E16                     	;# 
  5130  0E17                     	;# 
  5131  0E18                     	;# 
  5132  0E19                     	;# 
  5133  0E1A                     	;# 
  5134  0E1B                     	;# 
  5135  0E1C                     	;# 
  5136  0E1D                     	;# 
  5137  0E1E                     	;# 
  5138  0E1F                     	;# 
  5139  0E20                     	;# 
  5140  0E21                     	;# 
  5141  0E22                     	;# 
  5142  0E23                     	;# 
  5143  0E24                     	;# 
  5144  0E25                     	;# 
  5145  0E26                     	;# 
  5146  0E27                     	;# 
  5147  0E28                     	;# 
  5148  0E29                     	;# 
  5149  0E2A                     	;# 
  5150  0E2B                     	;# 
  5151  0E2C                     	;# 
  5152  0E2D                     	;# 
  5153  0E2E                     	;# 
  5154  0E2F                     	;# 
  5155  0E30                     	;# 
  5156  0E31                     	;# 
  5157  0E32                     	;# 
  5158  0E33                     	;# 
  5159  0E34                     	;# 
  5160  0E35                     	;# 
  5161  0E36                     	;# 
  5162  0E37                     	;# 
  5163  0E8F                     	;# 
  5164  0E90                     	;# 
  5165  0E91                     	;# 
  5166  0E92                     	;# 
  5167  0E93                     	;# 
  5168  0E94                     	;# 
  5169  0E95                     	;# 
  5170  0E96                     	;# 
  5171  0E97                     	;# 
  5172  0E9C                     	;# 
  5173  0E9D                     	;# 
  5174  0E9E                     	;# 
  5175  0EA1                     	;# 
  5176  0EA2                     	;# 
  5177  0EA3                     	;# 
  5178  0EA4                     	;# 
  5179  0EA5                     	;# 
  5180  0EA9                     	;# 
  5181  0EAA                     	;# 
  5182  0EAB                     	;# 
  5183  0EAC                     	;# 
  5184  0EB1                     	;# 
  5185  0EB2                     	;# 
  5186  0EB3                     	;# 
  5187  0EB8                     	;# 
  5188  0EB9                     	;# 
  5189  0EBA                     	;# 
  5190  0EBB                     	;# 
  5191  0EBC                     	;# 
  5192  0EBD                     	;# 
  5193  0EBE                     	;# 
  5194  0EC3                     	;# 
  5195  0EC5                     	;# 
  5196  0EC6                     	;# 
  5197  0EC7                     	;# 
  5198  0EC8                     	;# 
  5199  0EC9                     	;# 
  5200  0ECA                     	;# 
  5201  0ECB                     	;# 
  5202  0ECC                     	;# 
  5203  0F10                     	;# 
  5204  0F11                     	;# 
  5205  0F12                     	;# 
  5206  0F13                     	;# 
  5207  0F14                     	;# 
  5208  0F15                     	;# 
  5209  0F16                     	;# 
  5210  0F17                     	;# 
  5211  0F18                     	;# 
  5212  0F19                     	;# 
  5213  0F1A                     	;# 
  5214  0F1B                     	;# 
  5215  0F1C                     	;# 
  5216  0F1D                     	;# 
  5217  0F1E                     	;# 
  5218  0F1F                     	;# 
  5219  0F20                     	;# 
  5220  0F21                     	;# 
  5221  0F22                     	;# 
  5222  0F23                     	;# 
  5223  0F24                     	;# 
  5224  0F25                     	;# 
  5225  0F26                     	;# 
  5226  0F27                     	;# 
  5227  0F38                     	;# 
  5228  0F39                     	;# 
  5229  0F3A                     	;# 
  5230  0F3B                     	;# 
  5231  0F3C                     	;# 
  5232  0F3D                     	;# 
  5233  0F3E                     	;# 
  5234  0F3F                     	;# 
  5235  0F40                     	;# 
  5236  0F41                     	;# 
  5237  0F43                     	;# 
  5238  0F44                     	;# 
  5239  0F45                     	;# 
  5240  0F46                     	;# 
  5241  0F47                     	;# 
  5242  0F48                     	;# 
  5243  0F49                     	;# 
  5244  0F4A                     	;# 
  5245  0F4B                     	;# 
  5246  0F4C                     	;# 
  5247  0F4E                     	;# 
  5248  0F4F                     	;# 
  5249  0F50                     	;# 
  5250  0F51                     	;# 
  5251  0F52                     	;# 
  5252  0F53                     	;# 
  5253  0F54                     	;# 
  5254  0F55                     	;# 
  5255  0F56                     	;# 
  5256  0F57                     	;# 
  5257  0F65                     	;# 
  5258  0F68                     	;# 
  5259  0F69                     	;# 
  5260  0F6A                     	;# 
  5261  0F6B                     	;# 
  5262  0FE4                     	;# 
  5263  0FE5                     	;# 
  5264  0FE6                     	;# 
  5265  0FE7                     	;# 
  5266  0FE8                     	;# 
  5267  0FE9                     	;# 
  5268  0FEA                     	;# 
  5269  0FEB                     	;# 
  5270  0FED                     	;# 
  5271  0FEE                     	;# 
  5272  0FEF                     	;_Isamples
  5273                           
  5274                           	psect	idataBANK0
  5275  0804                     __pidataBANK0:	
  5276                           
  5277                           ;initializer for _batteryTemp
  5278  0804  34FA               	retlw	250
  5279  0805  3400               	retlw	0
  5280                           
  5281                           	psect	idataBANK2
  5282  1FDD                     __pidataBANK2:	
  5283                           
  5284                           ;initializer for _Vchannels
  5285  1FDD  3415               	retlw	21
  5286  1FDE  3400               	retlw	0
  5287  1FDF  3411               	retlw	17
  5288  1FE0  3400               	retlw	0
  5289  1FE1  3417               	retlw	23
  5290  1FE2  3400               	retlw	0
  5291  1FE3  3413               	retlw	19
  5292  1FE4  3400               	retlw	0
  5293                           
  5294                           ;initializer for _Ichannels
  5295  1FE5  3414               	retlw	20
  5296  1FE6  3400               	retlw	0
  5297  1FE7  3410               	retlw	16
  5298  1FE8  3400               	retlw	0
  5299  1FE9  3416               	retlw	22
  5300  1FEA  3400               	retlw	0
  5301  1FEB  3412               	retlw	18
  5302  1FEC  3400               	retlw	0
  5303                           
  5304                           	psect	stringtext1
  5305  1000                     __pstringtext1:	
  5306  1000                     _fonts:	
  5307  1000  3400               	retlw	0
  5308  1001  3400               	retlw	0
  5309  1002  3400               	retlw	0
  5310  1003  3400               	retlw	0
  5311  1004  344E               	retlw	78
  5312  1005  3400               	retlw	0
  5313  1006  3406               	retlw	6
  5314  1007  3400               	retlw	0
  5315  1008  3406               	retlw	6
  5316  1009  34FF               	retlw	255
  5317  100A  34FF               	retlw	255
  5318  100B  34FF               	retlw	255
  5319  100C  3448               	retlw	72
  5320  100D  34D6               	retlw	214
  5321  100E  3424               	retlw	36
  5322  100F  3412               	retlw	18
  5323  1010  3408               	retlw	8
  5324  1011  3424               	retlw	36
  5325  1012  34FF               	retlw	255
  5326  1013  34FF               	retlw	255
  5327  1014  34FF               	retlw	255
  5328  1015  3400               	retlw	0
  5329  1016  3406               	retlw	6
  5330  1017  3400               	retlw	0
  5331  1018  3438               	retlw	56
  5332  1019  3444               	retlw	68
  5333  101A  3482               	retlw	130
  5334  101B  3482               	retlw	130
  5335  101C  3444               	retlw	68
  5336  101D  3438               	retlw	56
  5337  101E  3414               	retlw	20
  5338  101F  3408               	retlw	8
  5339  1020  343E               	retlw	62
  5340  1021  3410               	retlw	16
  5341  1022  3438               	retlw	56
  5342  1023  3410               	retlw	16
  5343  1024  34A0               	retlw	160
  5344  1025  3460               	retlw	96
  5345  1026  3400               	retlw	0
  5346  1027  3410               	retlw	16
  5347  1028  3410               	retlw	16
  5348  1029  3410               	retlw	16
  5349  102A  3460               	retlw	96
  5350  102B  3460               	retlw	96
  5351  102C  3400               	retlw	0
  5352  102D  3460               	retlw	96
  5353  102E  3418               	retlw	24
  5354  102F  3406               	retlw	6
  5355  1030  347C               	retlw	124
  5356  1031  3442               	retlw	66
  5357  1032  347C               	retlw	124
  5358  1033  3444               	retlw	68
  5359  1034  347E               	retlw	126
  5360  1035  3440               	retlw	64
  5361  1036  3464               	retlw	100
  5362  1037  3452               	retlw	82
  5363  1038  344C               	retlw	76
  5364  1039  344A               	retlw	74
  5365  103A  344A               	retlw	74
  5366  103B  3434               	retlw	52
  5367  103C  3438               	retlw	56
  5368  103D  3424               	retlw	36
  5369  103E  347E               	retlw	126
  5370  103F  344E               	retlw	78
  5371  1040  344A               	retlw	74
  5372  1041  3432               	retlw	50
  5373  1042  343C               	retlw	60
  5374  1043  344A               	retlw	74
  5375  1044  3432               	retlw	50
  5376  1045  3462               	retlw	98
  5377  1046  341A               	retlw	26
  5378  1047  3406               	retlw	6
  5379  1048  3476               	retlw	118
  5380  1049  344A               	retlw	74
  5381  104A  3476               	retlw	118
  5382  104B  344C               	retlw	76
  5383  104C  3452               	retlw	82
  5384  104D  343C               	retlw	60
  5385  104E  346C               	retlw	108
  5386  104F  346C               	retlw	108
  5387  1050  3400               	retlw	0
  5388  1051  34AC               	retlw	172
  5389  1052  346C               	retlw	108
  5390  1053  3400               	retlw	0
  5391  1054  3410               	retlw	16
  5392  1055  3428               	retlw	40
  5393  1056  3444               	retlw	68
  5394  1057  3428               	retlw	40
  5395  1058  3428               	retlw	40
  5396  1059  3428               	retlw	40
  5397  105A  3444               	retlw	68
  5398  105B  3428               	retlw	40
  5399  105C  3410               	retlw	16
  5400  105D  3402               	retlw	2
  5401  105E  3459               	retlw	89
  5402  105F  3406               	retlw	6
  5403  1060  34FF               	retlw	255
  5404  1061  34FF               	retlw	255
  5405  1062  34FF               	retlw	255
  5406  1063  347C               	retlw	124
  5407  1064  3412               	retlw	18
  5408  1065  347C               	retlw	124
  5409  1066  347E               	retlw	126
  5410  1067  345A               	retlw	90
  5411  1068  3434               	retlw	52
  5412  1069  343C               	retlw	60
  5413  106A  3442               	retlw	66
  5414  106B  3442               	retlw	66
  5415  106C  347E               	retlw	126
  5416  106D  3442               	retlw	66
  5417  106E  343C               	retlw	60
  5418  106F  347E               	retlw	126
  5419  1070  344A               	retlw	74
  5420  1071  3442               	retlw	66
  5421  1072  347E               	retlw	126
  5422  1073  340A               	retlw	10
  5423  1074  340A               	retlw	10
  5424  1075  343C               	retlw	60
  5425  1076  3452               	retlw	82
  5426  1077  3434               	retlw	52
  5427  1078  347E               	retlw	126
  5428  1079  3408               	retlw	8
  5429  107A  347E               	retlw	126
  5430  107B  3442               	retlw	66
  5431  107C  347E               	retlw	126
  5432  107D  3442               	retlw	66
  5433  107E  3430               	retlw	48
  5434  107F  3440               	retlw	64
  5435  1080  343E               	retlw	62
  5436  1081  347E               	retlw	126
  5437  1082  3418               	retlw	24
  5438  1083  3466               	retlw	102
  5439  1084  347E               	retlw	126
  5440  1085  3440               	retlw	64
  5441  1086  3440               	retlw	64
  5442  1087  347E               	retlw	126
  5443  1088  341C               	retlw	28
  5444  1089  347E               	retlw	126
  5445  108A  347E               	retlw	126
  5446  108B  3402               	retlw	2
  5447  108C  347E               	retlw	126
  5448  108D  343C               	retlw	60
  5449  108E  3442               	retlw	66
  5450  108F  343C               	retlw	60
  5451  1090  347E               	retlw	126
  5452  1091  3412               	retlw	18
  5453  1092  340C               	retlw	12
  5454  1093  347E               	retlw	126
  5455  1094  3462               	retlw	98
  5456  1095  34FE               	retlw	254
  5457  1096  347E               	retlw	126
  5458  1097  3432               	retlw	50
  5459  1098  344E               	retlw	78
  5460  1099  3444               	retlw	68
  5461  109A  344A               	retlw	74
  5462  109B  3432               	retlw	50
  5463  109C  3402               	retlw	2
  5464  109D  347E               	retlw	126
  5465  109E  3402               	retlw	2
  5466  109F  347E               	retlw	126
  5467  10A0  3440               	retlw	64
  5468  10A1  347E               	retlw	126
  5469  10A2  343E               	retlw	62
  5470  10A3  3440               	retlw	64
  5471  10A4  343E               	retlw	62
  5472  10A5  347E               	retlw	126
  5473  10A6  3438               	retlw	56
  5474  10A7  347E               	retlw	126
  5475  10A8  3466               	retlw	102
  5476  10A9  3418               	retlw	24
  5477  10AA  3466               	retlw	102
  5478  10AB  340E               	retlw	14
  5479  10AC  3470               	retlw	112
  5480  10AD  340E               	retlw	14
  5481  10AE  3462               	retlw	98
  5482  10AF  345A               	retlw	90
  5483  10B0  3446               	retlw	70
  5484  10B1  3400               	retlw	0
  5485  10B2  347E               	retlw	126
  5486  10B3  3442               	retlw	66
  5487  10B4  3406               	retlw	6
  5488  10B5  3418               	retlw	24
  5489  10B6  3460               	retlw	96
  5490  10B7  3442               	retlw	66
  5491  10B8  347E               	retlw	126
  5492  10B9  3400               	retlw	0
  5493  10BA  3404               	retlw	4
  5494  10BB  3402               	retlw	2
  5495  10BC  3404               	retlw	4
  5496  10BD  3440               	retlw	64
  5497  10BE  3440               	retlw	64
  5498  10BF  3440               	retlw	64
  5499  10C0  3400               	retlw	0
  5500  10C1  3402               	retlw	2
  5501  10C2  3404               	retlw	4
  5502  10C3  3474               	retlw	116
  5503  10C4  3454               	retlw	84
  5504  10C5  3478               	retlw	120
  5505  10C6  347E               	retlw	126
  5506  10C7  3448               	retlw	72
  5507  10C8  3430               	retlw	48
  5508  10C9  3430               	retlw	48
  5509  10CA  3448               	retlw	72
  5510  10CB  3448               	retlw	72
  5511  10CC  3430               	retlw	48
  5512  10CD  3448               	retlw	72
  5513  10CE  347E               	retlw	126
  5514  10CF  3438               	retlw	56
  5515  10D0  3454               	retlw	84
  5516  10D1  3458               	retlw	88
  5517  10D2  347C               	retlw	124
  5518  10D3  340A               	retlw	10
  5519  10D4  3402               	retlw	2
  5520  10D5  3498               	retlw	152
  5521  10D6  34A4               	retlw	164
  5522  10D7  347C               	retlw	124
  5523  10D8  347E               	retlw	126
  5524  10D9  3408               	retlw	8
  5525  10DA  3470               	retlw	112
  5526  10DB  3448               	retlw	72
  5527  10DC  347A               	retlw	122
  5528  10DD  3440               	retlw	64
  5529  10DE  3488               	retlw	136
  5530  10DF  34FA               	retlw	250
  5531  10E0  3400               	retlw	0
  5532  10E1  347E               	retlw	126
  5533  10E2  3418               	retlw	24
  5534  10E3  3464               	retlw	100
  5535  10E4  3442               	retlw	66
  5536  10E5  347E               	retlw	126
  5537  10E6  3440               	retlw	64
  5538  10E7  347C               	retlw	124
  5539  10E8  3438               	retlw	56
  5540  10E9  347C               	retlw	124
  5541  10EA  347C               	retlw	124
  5542  10EB  3404               	retlw	4
  5543  10EC  3478               	retlw	120
  5544  10ED  3438               	retlw	56
  5545  10EE  3444               	retlw	68
  5546  10EF  3438               	retlw	56
  5547  10F0  34FC               	retlw	252
  5548  10F1  3424               	retlw	36
  5549  10F2  3418               	retlw	24
  5550  10F3  3418               	retlw	24
  5551  10F4  3424               	retlw	36
  5552  10F5  34FC               	retlw	252
  5553  10F6  3478               	retlw	120
  5554  10F7  3404               	retlw	4
  5555  10F8  3404               	retlw	4
  5556  10F9  3448               	retlw	72
  5557  10FA  3454               	retlw	84
  5558  10FB  3424               	retlw	36
  5559  10FC  3404               	retlw	4
  5560  10FD  343E               	retlw	62
  5561  10FE  3444               	retlw	68
  5562  10FF  347C               	retlw	124
  5563  1100  3440               	retlw	64
  5564  1101  347C               	retlw	124
  5565  1102  343C               	retlw	60
  5566  1103  3440               	retlw	64
  5567  1104  343C               	retlw	60
  5568  1105  347C               	retlw	124
  5569  1106  3430               	retlw	48
  5570  1107  347C               	retlw	124
  5571  1108  346C               	retlw	108
  5572  1109  3410               	retlw	16
  5573  110A  346C               	retlw	108
  5574  110B  349C               	retlw	156
  5575  110C  34A0               	retlw	160
  5576  110D  347C               	retlw	124
  5577  110E  3464               	retlw	100
  5578  110F  3454               	retlw	84
  5579  1110  344C               	retlw	76
  5580  1111  340C               	retlw	12
  5581  1112  3412               	retlw	18
  5582  1113  340C               	retlw	12
  5583  1114  34FF               	retlw	255
  5584  1115  34FF               	retlw	255
  5585  1116  34FF               	retlw	255
  5586  1117  34FF               	retlw	255
  5587  1118  34FF               	retlw	255
  5588  1119  34FF               	retlw	255
  5589  111A  34FF               	retlw	255
  5590  111B  34FF               	retlw	255
  5591  111C  34FF               	retlw	255
  5592  111D  34FF               	retlw	255
  5593  111E  34FF               	retlw	255
  5594  111F  34FF               	retlw	255
  5595  1120  34FF               	retlw	255
  5596  1121  34FF               	retlw	255
  5597  1122  34FF               	retlw	255
  5598  1123  34FF               	retlw	255
  5599  1124  34FF               	retlw	255
  5600  1125  34FF               	retlw	255
  5601  1126  34FC               	retlw	252
  5602  1127  3440               	retlw	64
  5603  1128  347C               	retlw	124
  5604  1129  34FF               	retlw	255
  5605  112A  34FF               	retlw	255
  5606  112B  34FF               	retlw	255
  5607  112C  34FF               	retlw	255
  5608  112D  34FF               	retlw	255
  5609  112E  34FF               	retlw	255
  5610  112F                     __end_of_fonts:	
  5611                           
  5612                           	psect	stringtext2
  5613  1800                     __pstringtext2:	
  5614  1800                     log@coeff:	
  5615  1800  3400               	retlw	0
  5616  1801  3400               	retlw	0
  5617  1802  3400               	retlw	0
  5618  1803  3400               	retlw	0
  5619  1804  3480               	retlw	128
  5620  1805  343F               	retlw	63
  5621  1806  34F0               	retlw	240
  5622  1807  34FF               	retlw	255
  5623  1808  34BE               	retlw	190
  5624  1809  34E2               	retlw	226
  5625  180A  34A9               	retlw	169
  5626  180B  343E               	retlw	62
  5627  180C  3483               	retlw	131
  5628  180D  3476               	retlw	118
  5629  180E  34BE               	retlw	190
  5630  180F  34AE               	retlw	174
  5631  1810  342B               	retlw	43
  5632  1811  343E               	retlw	62
  5633  1812  343C               	retlw	60
  5634  1813  34C3               	retlw	195
  5635  1814  34BD               	retlw	189
  5636  1815  34D2               	retlw	210
  5637  1816  3413               	retlw	19
  5638  1817  343D               	retlw	61
  5639  1818  3478               	retlw	120
  5640  1819  34D3               	retlw	211
  5641  181A  34BB               	retlw	187
  5642  181B                     __end_oflog@coeff:	
  5643  0013                     _TRISC	set	19
  5644  0012                     _TRISB	set	18
  5645  0011                     _TRISA	set	17
  5646  0018                     _LATC	set	24
  5647  0017                     _LATB	set	23
  5648  0016                     _LATA	set	22
  5649  0016                     _LATAbits	set	22
  5650  0011                     _TRISAbits	set	17
  5651  00B5                     _LATA5	set	181
  5652  006A                     _RB2	set	106
  5653  005F                     _GIE	set	95
  5654  0093                     _ADCON0	set	147
  5655  009D                     _ADACQ	set	157
  5656  009C                     _ADPRE	set	156
  5657  009B                     _ADCAP	set	155
  5658  009A                     _ADREF	set	154
  5659  0098                     _ADCLK	set	152
  5660  0097                     _ADSTAT	set	151
  5661  0099                     _ADACT	set	153
  5662  0096                     _ADCON3	set	150
  5663  0095                     _ADCON2	set	149
  5664  0094                     _ADCON1	set	148
  5665  008C                     _ADRESL	set	140
  5666  008D                     _ADRESH	set	141
  5667  0093                     _ADCON0bits	set	147
  5668  009E                     _ADPCH	set	158
  5669  0113                     _ADSTPTH	set	275
  5670  0112                     _ADSTPTL	set	274
  5671  0111                     _ADUTHH	set	273
  5672  0110                     _ADUTHL	set	272
  5673  010F                     _ADLTHH	set	271
  5674  010E                     _ADLTHL	set	270
  5675  010D                     _ADRPT	set	269
  5676  021E                     _CCPTMRS0bits	set	542
  5677  021F                     _CCPTMRS1bits	set	543
  5678  0294                     _T4CONbits	set	660
  5679  0292                     _T4TMR	set	658
  5680  0293                     _T4PR	set	659
  5681  0297                     _T4RST	set	663
  5682  0295                     _T4HLT	set	661
  5683  0296                     _T4CLKCON	set	662
  5684  0294                     _T4CON	set	660
  5685  028E                     _T2CONbits	set	654
  5686  028C                     _T2TMR	set	652
  5687  028D                     _T2PR	set	653
  5688  0291                     _T2RST	set	657
  5689  028F                     _T2HLT	set	655
  5690  0290                     _T2CLKCON	set	656
  5691  028E                     _T2CON	set	654
  5692  030C                     _CCPR1L	set	780
  5693  030D                     _CCPR1H	set	781
  5694  030E                     _CCP1CONbits	set	782
  5695  0390                     _PWM7DCL	set	912
  5696  0391                     _PWM7DCH	set	913
  5697  0392                     _PWM7CON	set	914
  5698  038C                     _PWM6DCL	set	908
  5699  038D                     _PWM6DCH	set	909
  5700  038E                     _PWM6CON	set	910
  5701  0710                     _PIR4bits	set	1808
  5702  0716                     _PIE0bits	set	1814
  5703  0892                     _OSCTUNE	set	2194
  5704  0893                     _OSCFRQ	set	2195
  5705  0891                     _OSCEN	set	2193
  5706  088F                     _OSCCON3	set	2191
  5707  088D                     _OSCCON1	set	2189
  5708  090C                     _FVRCON	set	2316
  5709  0E8F                     _PPSLOCKbits	set	3727
  5710  0E8F                     _PPSLOCK	set	3727
  5711  0F18                     _RB0PPS	set	3864
  5712  0F17                     _RA7PPS	set	3863
  5713  0F16                     _RA6PPS	set	3862
  5714  0F4E                     _ANSELC	set	3918
  5715  0F43                     _ANSELB	set	3907
  5716  0F38                     _ANSELA	set	3896
  5717  0F65                     _WPUE	set	3941
  5718  0F4F                     _WPUC	set	3919
  5719  0F44                     _WPUB	set	3908
  5720  0F39                     _WPUA	set	3897
  5721  181B                     STR_3:	
  5722  181B  3452               	retlw	82	;'R'
  5723  181C  3465               	retlw	101	;'e'
  5724  181D  3466               	retlw	102	;'f'
  5725  181E  343A               	retlw	58	;':'
  5726  181F  3400               	retlw	0
  5727                           
  5728                           	psect	stringtext3
  5729  1820                     __pstringtext3:	
  5730  1820                     STR_2:	
  5731  1820  344F               	retlw	79	;'O'
  5732  1821  3475               	retlw	117	;'u'
  5733  1822  3474               	retlw	116	;'t'
  5734  1823  343A               	retlw	58	;':'
  5735  1824  3400               	retlw	0
  5736                           
  5737                           	psect	stringtext4
  5738  1825                     __pstringtext4:	
  5739  1825                     STR_1:	
  5740  1825  3449               	retlw	73	;'I'
  5741  1826  346E               	retlw	110	;'n'
  5742  1827  343A               	retlw	58	;':'
  5743  1828  3400               	retlw	0
  5744                           
  5745                           	psect	stringtext5
  5746  0000                     __pstringtext5:	
  5747                           
  5748                           ; #config settings
  5749  0000                     
  5750                           	psect	cinit
  5751  07BC                     start_initialization:	
  5752  07BC                     __initialization:		;BIGRAM
  5753                           
  5754                           ; Initialize objects allocated to BANK0
  5755  07BC  3188  2004  3187   	fcall	__pidataBANK0	;fetch initializer
  5756  07BF  00ED               	movwf	__pdataBANK0& (0+127)
  5757  07C0  3188  2005  3187   	fcall	__pidataBANK0+1	;fetch initializer
  5758  07C3  00EE               	movwf	(__pdataBANK0+1)& (0+127)
  5759                           
  5760                           ; Initialize objects allocated to BANK2
  5761  07C4  30DD               	movlw	low __pidataBANK2
  5762  07C5  0084               	movwf	4
  5763  07C6  309F               	movlw	(high __pidataBANK2)| (0+128)
  5764  07C7  0085               	movwf	5
  5765  07C8  3048               	movlw	low __pdataBANK2
  5766  07C9  0086               	movwf	6
  5767  07CA  3001               	movlw	high __pdataBANK2
  5768  07CB  0087               	movwf	7
  5769  07CC  3000               	movlw	0
  5770  07CD  00FF               	movwf	btemp+1
  5771  07CE  3010               	movlw	16
  5772  07CF  319F  27B5  3187   	fcall	init_ram
  5773                           
  5774                           ; Clear objects allocated to BIGRAM
  5775  07D2  30E8               	movlw	low (0+8680)
  5776  07D3  0084               	movwf	4
  5777  07D4  3021               	movlw	high (0+8680)
  5778  07D5  0085               	movwf	5
  5779  07D6  3008               	movlw	8
  5780  07D7  00FE               	movwf	btemp
  5781  07D8  3002               	movlw	2
  5782  07D9  00FF               	movwf	btemp+1
  5783  07DA  319F  27A9  3187   	fcall	clear_ram0
  5784                           
  5785                           ; Clear objects allocated to BANK0
  5786  07DD  305A               	movlw	low __pbssBANK0
  5787  07DE  0084               	movwf	4
  5788  07DF  3000               	movlw	high __pbssBANK0
  5789  07E0  0085               	movwf	5
  5790  07E1  3013               	movlw	19
  5791  07E2  00FE               	movwf	btemp
  5792  07E3  3000               	movlw	0
  5793  07E4  00FF               	movwf	btemp+1
  5794  07E5  319F  27A9  3187   	fcall	clear_ram0
  5795                           
  5796                           ; Clear objects allocated to BANK1
  5797  07E8  30A0               	movlw	low __pbssBANK1
  5798  07E9  0084               	movwf	4
  5799  07EA  3000               	movlw	high __pbssBANK1
  5800  07EB  0085               	movwf	5
  5801  07EC  3034               	movlw	52
  5802  07ED  00FE               	movwf	btemp
  5803  07EE  3000               	movlw	0
  5804  07EF  00FF               	movwf	btemp+1
  5805  07F0  319F  27A9  3187   	fcall	clear_ram0
  5806                           
  5807                           ; Clear objects allocated to BANK2
  5808  07F3  3020               	movlw	low __pbssBANK2
  5809  07F4  0084               	movwf	4
  5810  07F5  3001               	movlw	high __pbssBANK2
  5811  07F6  0085               	movwf	5
  5812  07F7  3028               	movlw	40
  5813  07F8  00FE               	movwf	btemp
  5814  07F9  3000               	movlw	0
  5815  07FA  00FF               	movwf	btemp+1
  5816  07FB  319F  27A9         	fcall	clear_ram0
  5817  07FD                     end_of_initialization:	
  5818                           ;End of C runtime variable initialization code
  5819                           
  5820  07FD                     __end_of__initialization:	
  5821  07FD  0020               	movlb	0
  5822  07FE  3182  2A18         	ljmp	_main	;jump to C main() function
  5823                           
  5824                           	psect	bssBANK0
  5825  005A                     __pbssBANK0:	
  5826  005A                     _Vref:	
  5827  005A                     	ds	4
  5828  005E                     _readButtons:	
  5829  005E                     	ds	2
  5830  0060                     _VHoldMode:	
  5831  0060                     	ds	2
  5832  0062                     _Imode:	
  5833  0062                     	ds	2
  5834  0064                     _batteryState:	
  5835  0064                     	ds	2
  5836  0066                     _VsampleIndex:	
  5837  0066                     	ds	2
  5838  0068                     _IsampleIndex:	
  5839  0068                     	ds	2
  5840  006A                     _j:	
  5841  006A                     	ds	1
  5842  006B                     _lastButton:	
  5843  006B                     	ds	1
  5844  006C                     _button:	
  5845  006C                     	ds	1
  5846                           
  5847                           	psect	dataBANK0
  5848  006D                     __pdataBANK0:	
  5849  006D                     _batteryTemp:	
  5850  006D                     	ds	2
  5851                           
  5852                           	psect	bssBANK1
  5853  00A0                     __pbssBANK1:	
  5854  00A0                     _Ianalogs:	
  5855  00A0                     	ds	8
  5856  00A8                     _voltage:	
  5857  00A8                     	ds	8
  5858  00B0                     _current:	
  5859  00B0                     	ds	8
  5860  00B8                     LCDWriteInt@F14392:	
  5861  00B8                     	ds	5
  5862  00BD                     _stateCounter:	
  5863  00BD                     	ds	4
  5864  00C1                     _Iref:	
  5865  00C1                     	ds	4
  5866  00C5                     _IminCount:	
  5867  00C5                     	ds	4
  5868  00C9                     _Imin:	
  5869  00C9                     	ds	4
  5870  00CD                     _errno:	
  5871  00CD                     	ds	2
  5872  00CF                     _Iout:	
  5873  00CF                     	ds	2
  5874  00D1                     _cc_cv:	
  5875  00D1                     	ds	2
  5876  00D3                     _x:	
  5877  00D3                     	ds	1
  5878                           
  5879                           	psect	bssBANK2
  5880  0120                     __pbssBANK2:	
  5881  0120                     _Vtotals:	
  5882  0120                     	ds	16
  5883  0130                     _Itotals:	
  5884  0130                     	ds	16
  5885  0140                     _Vanalogs:	
  5886  0140                     	ds	8
  5887                           
  5888                           	psect	dataBANK2
  5889  0148                     __pdataBANK2:	
  5890  0148                     _Vchannels:	
  5891  0148                     	ds	8
  5892  0150                     _Ichannels:	
  5893  0150                     	ds	8
  5894                           
  5895                           	psect	inittext
  5896  1FB5                     init_ram:	
  5897  1FB5  00FE               	movwf	126
  5898  1FB6                     initloop:	
  5899  1FB6  0012               	moviw fsr0++
  5900  1FB7  001E               	movwi fsr1++
  5901  1FB8  3001               	movlw	1
  5902  1FB9  02FE               	subwf	126,f
  5903  1FBA  3000               	movlw	0
  5904  1FBB  3BFF               	subwfb	127,f
  5905  1FBC  087F               	movf	127,w
  5906  1FBD  047E               	iorwf	126,w
  5907  1FBE  1903               	btfsc	3,2
  5908  1FBF  3400               	retlw	0
  5909  1FC0  2FB6               	goto	initloop
  5910                           
  5911                           	psect	clrtext
  5912  1FA9                     clear_ram0:	
  5913                           ;	Called with FSR0 containing the base address, and
  5914                           ;	btemp/btemp+1 has the size to clear
  5915                           
  5916  1FA9  0064               	clrwdt	;clear the watchdog before getting into this loop
  5917  1FAA                     clrloop0:	
  5918  1FAA  0180               	clrf	0	;clear RAM location pointed to by FSR
  5919  1FAB  3101               	addfsr 0,1
  5920  1FAC  3001               	movlw	1
  5921  1FAD  02FE               	subwf	126,f
  5922  1FAE  3000               	movlw	0
  5923  1FAF  3BFF               	subwfb	127,f
  5924  1FB0  087F               	movf	127,w
  5925  1FB1  047E               	iorwf	126,w
  5926  1FB2  1903               	btfsc	3,2
  5927  1FB3  3400               	retlw	0	;all done for this memory range, return
  5928  1FB4  2FAA               	goto	clrloop0	;have we reached the end yet?
  5929                           
  5930                           	psect	cstackBANK1
  5931  00D4                     __pcstackBANK1:	
  5932  00D4                     main@efficiency:	
  5933                           
  5934                           ; 3 bytes @ 0x0
  5935  00D4                     	ds	3
  5936  00D7                     main@faultCount:	
  5937                           
  5938                           ; 2 bytes @ 0x3
  5939  00D7                     	ds	2
  5940  00D9                     main@faultNotReset:	
  5941                           
  5942                           ; 2 bytes @ 0x5
  5943  00D9                     	ds	2
  5944  00DB                     main@displayRefresh:	
  5945                           
  5946                           ; 1 bytes @ 0x7
  5947  00DB                     	ds	1
  5948  00DC                     main@fastLoop:	
  5949                           
  5950                           ; 1 bytes @ 0x8
  5951  00DC                     	ds	1
  5952  00DD                     main@slowLoop:	
  5953                           
  5954                           ; 1 bytes @ 0x9
  5955  00DD                     	ds	1
  5956  00DE                     main@MPPT1:	
  5957                           
  5958                           ; 2 bytes @ 0xA
  5959  00DE                     	ds	2
  5960  00E0                     main@MPPT0:	
  5961                           
  5962                           ; 2 bytes @ 0xC
  5963  00E0                     	ds	2
  5964  00E2                     main@largerIOut:	
  5965                           
  5966                           ; 2 bytes @ 0xE
  5967  00E2                     	ds	2
  5968  00E4                     main@menuButton:	
  5969                           
  5970                           ; 1 bytes @ 0x10
  5971  00E4                     	ds	1
  5972  00E5                     main@dutyCycle1:	
  5973                           
  5974                           ; 2 bytes @ 0x11
  5975  00E5                     	ds	2
  5976  00E7                     main@tempFanOutput:	
  5977                           
  5978                           ; 2 bytes @ 0x13
  5979  00E7                     	ds	2
  5980  00E9                     main@dutyCycle6:	
  5981                           
  5982                           ; 2 bytes @ 0x15
  5983  00E9                     	ds	2
  5984  00EB                     main@dutyCycle7:	
  5985                           
  5986                           ; 2 bytes @ 0x17
  5987  00EB                     	ds	2
  5988  00ED                     main@j:	
  5989                           
  5990                           ; 1 bytes @ 0x19
  5991  00ED                     	ds	1
  5992                           
  5993                           	psect	cstackCOMMON
  5994  0070                     __pcstackCOMMON:	
  5995  0070                     ?___ftge:	
  5996  0070                     ?_LCDWrite:	
  5997                           ; 1 bit 
  5998                           
  5999  0070                     ?_OSCILLATOR_Initialize:	
  6000                           ; 1 bytes @ 0x0
  6001                           
  6002  0070                     ??_OSCILLATOR_Initialize:	
  6003                           ; 1 bytes @ 0x0
  6004                           
  6005  0070                     ?_TMR2_Initialize:	
  6006                           ; 1 bytes @ 0x0
  6007                           
  6008  0070                     ??_TMR2_Initialize:	
  6009                           ; 1 bytes @ 0x0
  6010                           
  6011  0070                     ?_TMR4_Initialize:	
  6012                           ; 1 bytes @ 0x0
  6013                           
  6014  0070                     ??_TMR4_Initialize:	
  6015                           ; 1 bytes @ 0x0
  6016                           
  6017  0070                     ?_calculateCurrent0:	
  6018                           ; 1 bytes @ 0x0
  6019                           
  6020  0070                     ?_calculateCurrent1:	
  6021                           ; 1 bytes @ 0x0
  6022                           
  6023  0070                     ?_calculateCurrent2:	
  6024                           ; 1 bytes @ 0x0
  6025                           
  6026  0070                     ?_calculateCurrent3:	
  6027                           ; 1 bytes @ 0x0
  6028                           
  6029  0070                     ?_ADC_Initialize:	
  6030                           ; 1 bytes @ 0x0
  6031                           
  6032  0070                     ??_ADC_Initialize:	
  6033                           ; 1 bytes @ 0x0
  6034                           
  6035  0070                     ?_Init_Battery_State_Machine:	
  6036                           ; 1 bytes @ 0x0
  6037                           
  6038  0070                     ?_Battery_State_Machine:	
  6039                           ; 1 bytes @ 0x0
  6040                           
  6041  0070                     ?_cc_cv_mode:	
  6042                           ; 1 bytes @ 0x0
  6043                           
  6044  0070                     ?_readButton:	
  6045                           ; 1 bytes @ 0x0
  6046                           
  6047  0070                     ?_LCDWriteCharacter:	
  6048                           ; 1 bytes @ 0x0
  6049                           
  6050  0070                     ?_LCDClear:	
  6051                           ; 1 bytes @ 0x0
  6052                           
  6053  0070                     ?_LCDInit:	
  6054                           ; 1 bytes @ 0x0
  6055                           
  6056  0070                     ?_PIN_MANAGER_Initialize:	
  6057                           ; 1 bytes @ 0x0
  6058                           
  6059  0070                     ??_PIN_MANAGER_Initialize:	
  6060                           ; 1 bytes @ 0x0
  6061                           
  6062  0070                     ?_PWM_Initialize:	
  6063                           ; 1 bytes @ 0x0
  6064                           
  6065  0070                     ??_PWM_Initialize:	
  6066                           ; 1 bytes @ 0x0
  6067                           
  6068  0070                     ?_PWM6_LoadDutyValue:	
  6069                           ; 1 bytes @ 0x0
  6070                           
  6071  0070                     ?_PWM7_LoadDutyValue:	
  6072                           ; 1 bytes @ 0x0
  6073                           
  6074  0070                     ?_PWM1_LoadDutyValue:	
  6075                           ; 1 bytes @ 0x0
  6076                           
  6077  0070                     ?_SYSTEM_Initialize:	
  6078                           ; 1 bytes @ 0x0
  6079                           
  6080  0070                     ?_main:	
  6081                           ; 1 bytes @ 0x0
  6082                           
  6083  0070                     ?_ADCRead:	
  6084                           ; 1 bytes @ 0x0
  6085                           
  6086  0070                     ?___wmul:	
  6087                           ; 2 bytes @ 0x0
  6088                           
  6089  0070                     ?___awdiv:	
  6090                           ; 2 bytes @ 0x0
  6091                           
  6092  0070                     ?___lwmod:	
  6093                           ; 2 bytes @ 0x0
  6094                           
  6095  0070                     ?___ftpack:	
  6096                           ; 2 bytes @ 0x0
  6097                           
  6098  0070                     ?_frexp:	
  6099                           ; 3 bytes @ 0x0
  6100                           
  6101  0070                     ?___aldiv:	
  6102                           ; 3 bytes @ 0x0
  6103                           
  6104  0070                     LCDWrite@data:	
  6105                           ; 4 bytes @ 0x0
  6106                           
  6107  0070                     PIN_MANAGER_Initialize@state:	
  6108                           ; 1 bytes @ 0x0
  6109                           
  6110  0070                     PWM6_LoadDutyValue@dutyCycle6:	
  6111                           ; 1 bytes @ 0x0
  6112                           
  6113  0070                     PWM7_LoadDutyValue@dutyCycle7:	
  6114                           ; 2 bytes @ 0x0
  6115                           
  6116  0070                     PWM1_LoadDutyValue@dutyCycle1:	
  6117                           ; 2 bytes @ 0x0
  6118                           
  6119  0070                     ___wmul@multiplier:	
  6120                           ; 2 bytes @ 0x0
  6121                           
  6122  0070                     ___awdiv@divisor:	
  6123                           ; 2 bytes @ 0x0
  6124                           
  6125  0070                     ___lwmod@divisor:	
  6126                           ; 2 bytes @ 0x0
  6127                           
  6128  0070                     ___ftpack@arg:	
  6129                           ; 2 bytes @ 0x0
  6130                           
  6131  0070                     ___ftge@ff1:	
  6132                           ; 3 bytes @ 0x0
  6133                           
  6134  0070                     frexp@value:	
  6135                           ; 3 bytes @ 0x0
  6136                           
  6137  0070                     ___aldiv@divisor:	
  6138                           ; 3 bytes @ 0x0
  6139                           
  6140                           
  6141                           ; 4 bytes @ 0x0
  6142  0070                     	ds	1
  6143  0071                     ??_LCDWrite:	
  6144                           
  6145                           ; 1 bytes @ 0x1
  6146  0071                     	ds	1
  6147  0072                     ??_PWM6_LoadDutyValue:	
  6148  0072                     ??_PWM7_LoadDutyValue:	
  6149                           ; 1 bytes @ 0x2
  6150                           
  6151  0072                     ??_PWM1_LoadDutyValue:	
  6152                           ; 1 bytes @ 0x2
  6153                           
  6154  0072                     LCDWrite@data_or_command:	
  6155                           ; 1 bytes @ 0x2
  6156                           
  6157  0072                     ___wmul@multiplicand:	
  6158                           ; 1 bytes @ 0x2
  6159                           
  6160  0072                     ___awdiv@dividend:	
  6161                           ; 2 bytes @ 0x2
  6162                           
  6163  0072                     ___lwmod@dividend:	
  6164                           ; 2 bytes @ 0x2
  6165                           
  6166                           
  6167                           ; 2 bytes @ 0x2
  6168  0072                     	ds	1
  6169  0073                     ??_ADCRead:	
  6170  0073                     ADCRead@channel:	
  6171                           ; 1 bytes @ 0x3
  6172                           
  6173  0073                     LCDWrite@d:	
  6174                           ; 1 bytes @ 0x3
  6175                           
  6176  0073                     ___ftpack@exp:	
  6177                           ; 1 bytes @ 0x3
  6178                           
  6179  0073                     frexp@eptr:	
  6180                           ; 1 bytes @ 0x3
  6181                           
  6182  0073                     ___ftge@ff2:	
  6183                           ; 1 bytes @ 0x3
  6184                           
  6185                           
  6186                           ; 3 bytes @ 0x3
  6187  0073                     	ds	1
  6188  0074                     ??_frexp:	
  6189  0074                     ??_readButton:	
  6190                           ; 1 bytes @ 0x4
  6191                           
  6192  0074                     ??___wmul:	
  6193                           ; 1 bytes @ 0x4
  6194                           
  6195  0074                     ??___awdiv:	
  6196                           ; 1 bytes @ 0x4
  6197                           
  6198  0074                     ??___lwmod:	
  6199                           ; 1 bytes @ 0x4
  6200                           
  6201  0074                     LCDWrite@i:	
  6202                           ; 1 bytes @ 0x4
  6203                           
  6204  0074                     ___ftpack@sign:	
  6205                           ; 1 bytes @ 0x4
  6206                           
  6207  0074                     ___wmul@product:	
  6208                           ; 1 bytes @ 0x4
  6209                           
  6210  0074                     ___aldiv@dividend:	
  6211                           ; 2 bytes @ 0x4
  6212                           
  6213                           
  6214                           ; 4 bytes @ 0x4
  6215  0074                     	ds	1
  6216  0075                     ??___ftpack:	
  6217  0075                     ?_gotoXY:	
  6218                           ; 1 bytes @ 0x5
  6219                           
  6220  0075                     ??_LCDInit:	
  6221                           ; 1 bytes @ 0x5
  6222                           
  6223  0075                     gotoXY@y:	
  6224                           ; 1 bytes @ 0x5
  6225                           
  6226  0075                     ___awdiv@counter:	
  6227                           ; 1 bytes @ 0x5
  6228                           
  6229  0075                     ___lwmod@counter:	
  6230                           ; 1 bytes @ 0x5
  6231                           
  6232                           
  6233                           ; 1 bytes @ 0x5
  6234  0075                     	ds	1
  6235  0076                     ??_gotoXY:	
  6236  0076                     ??_LCDWriteCharacter:	
  6237                           ; 1 bytes @ 0x6
  6238                           
  6239  0076                     ??___ftge:	
  6240                           ; 1 bytes @ 0x6
  6241                           
  6242  0076                     ___awdiv@sign:	
  6243                           ; 1 bytes @ 0x6
  6244                           
  6245                           
  6246                           ; 1 bytes @ 0x6
  6247  0076                     	ds	1
  6248  0077                     gotoXY@x:	
  6249  0077                     ___awdiv@quotient:	
  6250                           ; 1 bytes @ 0x7
  6251                           
  6252                           
  6253                           ; 2 bytes @ 0x7
  6254  0077                     	ds	1
  6255  0078                     ??_LCDClear:	
  6256  0078                     ??___aldiv:	
  6257                           ; 1 bytes @ 0x8
  6258                           
  6259  0078                     ?___awtoft:	
  6260                           ; 1 bytes @ 0x8
  6261                           
  6262  0078                     ___awtoft@c:	
  6263                           ; 3 bytes @ 0x8
  6264                           
  6265                           
  6266                           ; 2 bytes @ 0x8
  6267  0078                     	ds	1
  6268  0079                     LCDWriteCharacter@character:	
  6269  0079                     readIAnalog@analog_channel:	
  6270                           ; 1 bytes @ 0x9
  6271                           
  6272  0079                     readVAnalog@analog_channel:	
  6273                           ; 2 bytes @ 0x9
  6274                           
  6275  0079                     LCDClear@index:	
  6276                           ; 2 bytes @ 0x9
  6277                           
  6278                           
  6279                           ; 2 bytes @ 0x9
  6280  0079                     	ds	1
  6281  007A                     LCDWriteCharacter@base:	
  6282                           
  6283                           ; 2 bytes @ 0xA
  6284  007A                     	ds	1
  6285  007B                     ??___awtoft:	
  6286  007B                     readIAnalog@value:	
  6287                           ; 1 bytes @ 0xB
  6288                           
  6289  007B                     readVAnalog@value:	
  6290                           ; 2 bytes @ 0xB
  6291                           
  6292                           
  6293                           ; 2 bytes @ 0xB
  6294  007B                     	ds	1
  6295  007C                     ?_LCDWriteString:	
  6296  007C                     LCDWriteString@characters:	
  6297                           ; 1 bytes @ 0xC
  6298                           
  6299                           
  6300                           ; 2 bytes @ 0xC
  6301  007C                     	ds	1
  6302  007D                     ___awtoft@sign:	
  6303                           
  6304                           ; 1 bytes @ 0xD
  6305  007D                     	ds	1
  6306  007E                     ??_eval_poly:	
  6307  007E                     ??_tempCalc:	
  6308                           ; 1 bytes @ 0xE
  6309                           
  6310  007E                     ??___ftsub:	
  6311                           ; 1 bytes @ 0xE
  6312                           
  6313                           
  6314                           	psect	cstackBANK0
  6315  0020                     __pcstackBANK0:	
  6316                           ; 1 bytes @ 0xE
  6317                           
  6318  0020                     ??_LCDWriteString:	
  6319  0020                     ?_LCDWriteInt:	
  6320                           ; 1 bytes @ 0x0
  6321                           
  6322  0020                     ?___ftdiv:	
  6323                           ; 1 bytes @ 0x0
  6324                           
  6325  0020                     ?___ftmul:	
  6326                           ; 3 bytes @ 0x0
  6327                           
  6328  0020                     ___aldiv@counter:	
  6329                           ; 3 bytes @ 0x0
  6330                           
  6331  0020                     LCDWriteInt@value:	
  6332                           ; 1 bytes @ 0x0
  6333                           
  6334  0020                     ___ftdiv@f2:	
  6335                           ; 2 bytes @ 0x0
  6336                           
  6337  0020                     ___ftmul@f1:	
  6338                           ; 3 bytes @ 0x0
  6339                           
  6340                           
  6341                           ; 3 bytes @ 0x0
  6342  0020                     	ds	1
  6343  0021                     ___aldiv@sign:	
  6344                           
  6345                           ; 1 bytes @ 0x1
  6346  0021                     	ds	1
  6347  0022                     LCDWriteInt@fieldLength:	
  6348  0022                     ___aldiv@quotient:	
  6349                           ; 1 bytes @ 0x2
  6350                           
  6351                           
  6352                           ; 4 bytes @ 0x2
  6353  0022                     	ds	1
  6354  0023                     LCDWriteInt@numPlaces:	
  6355  0023                     ___ftdiv@f1:	
  6356                           ; 1 bytes @ 0x3
  6357                           
  6358  0023                     ___ftmul@f2:	
  6359                           ; 3 bytes @ 0x3
  6360                           
  6361                           
  6362                           ; 3 bytes @ 0x3
  6363  0023                     	ds	1
  6364  0024                     LCDWriteInt@sign:	
  6365                           
  6366                           ; 1 bytes @ 0x4
  6367  0024                     	ds	1
  6368  0025                     ??_LCDWriteInt:	
  6369                           
  6370                           ; 1 bytes @ 0x5
  6371  0025                     	ds	1
  6372  0026                     ??___ftdiv:	
  6373  0026                     ??___ftmul:	
  6374                           ; 1 bytes @ 0x6
  6375                           
  6376  0026                     ?_readIAnalog:	
  6377                           ; 1 bytes @ 0x6
  6378                           
  6379  0026                     ?_readVAnalog:	
  6380                           ; 2 bytes @ 0x6
  6381                           
  6382  0026                     readIAnalog@channel:	
  6383                           ; 2 bytes @ 0x6
  6384                           
  6385  0026                     readVAnalog@channel:	
  6386                           ; 2 bytes @ 0x6
  6387                           
  6388                           
  6389                           ; 2 bytes @ 0x6
  6390  0026                     	ds	2
  6391  0028                     ??_readIAnalog:	
  6392  0028                     ??_readVAnalog:	
  6393                           ; 1 bytes @ 0x8
  6394                           
  6395                           
  6396                           ; 1 bytes @ 0x8
  6397  0028                     	ds	1
  6398  0029                     LCDWriteInt@str:	
  6399                           
  6400                           ; 5 bytes @ 0x9
  6401  0029                     	ds	1
  6402  002A                     ___ftdiv@cntr:	
  6403  002A                     ___ftmul@exp:	
  6404                           ; 1 bytes @ 0xA
  6405                           
  6406                           
  6407                           ; 1 bytes @ 0xA
  6408  002A                     	ds	1
  6409  002B                     ___ftdiv@f3:	
  6410  002B                     ___ftmul@f3_as_product:	
  6411                           ; 3 bytes @ 0xB
  6412                           
  6413                           
  6414                           ; 3 bytes @ 0xB
  6415  002B                     	ds	3
  6416  002E                     LCDWriteInt@j:	
  6417  002E                     ___ftdiv@exp:	
  6418                           ; 1 bytes @ 0xE
  6419                           
  6420  002E                     ___ftmul@cntr:	
  6421                           ; 1 bytes @ 0xE
  6422                           
  6423                           
  6424                           ; 1 bytes @ 0xE
  6425  002E                     	ds	1
  6426  002F                     LCDWriteInt@i:	
  6427  002F                     ___ftdiv@sign:	
  6428                           ; 1 bytes @ 0xF
  6429                           
  6430  002F                     ___ftmul@sign:	
  6431                           ; 1 bytes @ 0xF
  6432                           
  6433                           
  6434                           ; 1 bytes @ 0xF
  6435  002F                     	ds	1
  6436  0030                     ?___ftadd:	
  6437  0030                     ?___fttol:	
  6438                           ; 3 bytes @ 0x10
  6439                           
  6440  0030                     ___ftadd@f1:	
  6441                           ; 4 bytes @ 0x10
  6442                           
  6443  0030                     ___fttol@f1:	
  6444                           ; 3 bytes @ 0x10
  6445                           
  6446                           
  6447                           ; 3 bytes @ 0x10
  6448  0030                     	ds	3
  6449  0033                     ___ftadd@f2:	
  6450                           
  6451                           ; 3 bytes @ 0x13
  6452  0033                     	ds	1
  6453  0034                     ??___fttol:	
  6454                           
  6455                           ; 1 bytes @ 0x14
  6456  0034                     	ds	2
  6457  0036                     ??___ftadd:	
  6458                           
  6459                           ; 1 bytes @ 0x16
  6460  0036                     	ds	2
  6461  0038                     ___fttol@sign1:	
  6462                           
  6463                           ; 1 bytes @ 0x18
  6464  0038                     	ds	1
  6465  0039                     ___fttol@lval:	
  6466                           
  6467                           ; 4 bytes @ 0x19
  6468  0039                     	ds	1
  6469  003A                     ___ftadd@sign:	
  6470                           
  6471                           ; 1 bytes @ 0x1A
  6472  003A                     	ds	1
  6473  003B                     ___ftadd@exp2:	
  6474                           
  6475                           ; 1 bytes @ 0x1B
  6476  003B                     	ds	1
  6477  003C                     ___ftadd@exp1:	
  6478                           
  6479                           ; 1 bytes @ 0x1C
  6480  003C                     	ds	1
  6481  003D                     ?_eval_poly:	
  6482  003D                     ?___ftsub:	
  6483                           ; 3 bytes @ 0x1D
  6484                           
  6485  003D                     ___fttol@exp1:	
  6486                           ; 3 bytes @ 0x1D
  6487                           
  6488  003D                     ___ftsub@f2:	
  6489                           ; 1 bytes @ 0x1D
  6490                           
  6491  003D                     eval_poly@x:	
  6492                           ; 3 bytes @ 0x1D
  6493                           
  6494                           
  6495                           ; 3 bytes @ 0x1D
  6496  003D                     	ds	1
  6497  003E                     ??_calculateCurrent0:	
  6498  003E                     ??_calculateCurrent1:	
  6499                           ; 1 bytes @ 0x1E
  6500                           
  6501  003E                     ??_calculateCurrent2:	
  6502                           ; 1 bytes @ 0x1E
  6503                           
  6504  003E                     ??_calculateCurrent3:	
  6505                           ; 1 bytes @ 0x1E
  6506                           
  6507  003E                     ??_Init_Battery_State_Machine:	
  6508                           ; 1 bytes @ 0x1E
  6509                           
  6510  003E                     ??_Battery_State_Machine:	
  6511                           ; 1 bytes @ 0x1E
  6512                           
  6513  003E                     ??_cc_cv_mode:	
  6514                           ; 1 bytes @ 0x1E
  6515                           
  6516                           
  6517                           ; 1 bytes @ 0x1E
  6518  003E                     	ds	2
  6519  0040                     eval_poly@d:	
  6520  0040                     ___ftsub@f1:	
  6521                           ; 2 bytes @ 0x20
  6522                           
  6523                           
  6524                           ; 3 bytes @ 0x20
  6525  0040                     	ds	2
  6526  0042                     Init_Battery_State_Machine@z:	
  6527  0042                     eval_poly@n:	
  6528                           ; 1 bytes @ 0x22
  6529                           
  6530                           
  6531                           ; 2 bytes @ 0x22
  6532  0042                     	ds	1
  6533  0043                     ??_SYSTEM_Initialize:	
  6534  0043                     Battery_State_Machine@z:	
  6535                           ; 1 bytes @ 0x23
  6536                           
  6537                           
  6538                           ; 1 bytes @ 0x23
  6539  0043                     	ds	1
  6540  0044                     eval_poly@res:	
  6541                           
  6542                           ; 3 bytes @ 0x24
  6543  0044                     	ds	1
  6544  0045                     cc_cv_mode@z:	
  6545                           
  6546                           ; 1 bytes @ 0x25
  6547  0045                     	ds	2
  6548  0047                     ?_log:	
  6549  0047                     log@x:	
  6550                           ; 3 bytes @ 0x27
  6551                           
  6552                           
  6553                           ; 3 bytes @ 0x27
  6554  0047                     	ds	3
  6555  004A                     ??_log:	
  6556                           
  6557                           ; 1 bytes @ 0x2A
  6558  004A                     	ds	1
  6559  004B                     log@exponent:	
  6560                           
  6561                           ; 2 bytes @ 0x2B
  6562  004B                     	ds	2
  6563  004D                     ?_tempCalc:	
  6564  004D                     tempCalc@analogValue:	
  6565                           ; 2 bytes @ 0x2D
  6566                           
  6567                           
  6568                           ; 2 bytes @ 0x2D
  6569  004D                     	ds	2
  6570  004F                     tempCalc@R:	
  6571                           
  6572                           ; 3 bytes @ 0x2F
  6573  004F                     	ds	3
  6574  0052                     _tempCalc$1311:	
  6575                           
  6576                           ; 3 bytes @ 0x32
  6577  0052                     	ds	3
  6578  0055                     tempCalc@steinhart:	
  6579                           
  6580                           ; 3 bytes @ 0x35
  6581  0055                     	ds	3
  6582  0058                     ??_main:	
  6583                           
  6584                           ; 1 bytes @ 0x38
  6585  0058                     	ds	2
  6586                           
  6587                           	psect	maintext
  6588  0218                     __pmaintext:	
  6589 ;;
  6590 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  6591 ;;
  6592 ;; *************** function _main *****************
  6593 ;; Defined at:
  6594 ;;		line 33 in file "main.c"
  6595 ;; Parameters:    Size  Location     Type
  6596 ;;		None
  6597 ;; Auto vars:     Size  Location     Type
  6598 ;;  efficiency      3    0[BANK1 ] float 
  6599 ;;  dutyCycle7      2   23[BANK1 ] unsigned int 
  6600 ;;  dutyCycle6      2   21[BANK1 ] unsigned int 
  6601 ;;  tempFanOutpu    2   19[BANK1 ] unsigned int 
  6602 ;;  dutyCycle1      2   17[BANK1 ] unsigned int 
  6603 ;;  largerIOut      2   14[BANK1 ] int 
  6604 ;;  MPPT0           2   12[BANK1 ] int 
  6605 ;;  MPPT1           2   10[BANK1 ] int 
  6606 ;;  faultNotRese    2    5[BANK1 ] unsigned int 
  6607 ;;  faultCount      2    3[BANK1 ] unsigned int 
  6608 ;;  j               1   25[BANK1 ] unsigned char 
  6609 ;;  menuButton      1   16[BANK1 ] unsigned char 
  6610 ;;  slowLoop        1    9[BANK1 ] unsigned char 
  6611 ;;  fastLoop        1    8[BANK1 ] unsigned char 
  6612 ;;  displayRefre    1    7[BANK1 ] unsigned char 
  6613 ;; Return value:  Size  Location     Type
  6614 ;;                  1    wreg      void 
  6615 ;; Registers used:
  6616 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6617 ;; Tracked objects:
  6618 ;;		On entry : B1F/0
  6619 ;;		On exit  : 0/0
  6620 ;;		Unchanged: 0/0
  6621 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6622 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6623 ;;      Locals:         0       0      26       0       0       0       0       0       0       0       0       0       
      +0       0
  6624 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6625 ;;      Totals:         0       2      26       0       0       0       0       0       0       0       0       0       
      +0       0
  6626 ;;Total ram usage:       28 bytes
  6627 ;; Hardware stack levels required when called:    5
  6628 ;; This function calls:
  6629 ;;		_ADCRead
  6630 ;;		_Battery_State_Machine
  6631 ;;		_LCDClear
  6632 ;;		_LCDInit
  6633 ;;		_LCDWriteCharacter
  6634 ;;		_LCDWriteInt
  6635 ;;		_LCDWriteString
  6636 ;;		_PWM1_LoadDutyValue
  6637 ;;		_PWM6_LoadDutyValue
  6638 ;;		_PWM7_LoadDutyValue
  6639 ;;		_SYSTEM_Initialize
  6640 ;;		___awtoft
  6641 ;;		___ftdiv
  6642 ;;		___fttol
  6643 ;;		_calculateCurrent0
  6644 ;;		_calculateCurrent1
  6645 ;;		_calculateCurrent2
  6646 ;;		_calculateCurrent3
  6647 ;;		_cc_cv_mode
  6648 ;;		_gotoXY
  6649 ;;		_readButton
  6650 ;;		_readIAnalog
  6651 ;;		_readVAnalog
  6652 ;;		_tempCalc
  6653 ;; This function is called by:
  6654 ;;		Startup code after reset
  6655 ;; This function uses a non-reentrant model
  6656 ;;
  6657                           
  6658                           
  6659                           ;psect for function _main
  6660  0218                     _main:	
  6661                           
  6662                           ;main.c: 35: int16_t MPPT0 = 3144;
  6663                           
  6664                           ;incstack = 0
  6665                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6666  0218  3048               	movlw	72
  6667  0219  0021               	movlb	1	; select bank1
  6668  021A  00E0               	movwf	main@MPPT0^(0+128)
  6669  021B  300C               	movlw	12
  6670  021C  00E1               	movwf	(main@MPPT0^(0+128)+1)
  6671                           
  6672                           ;main.c: 36: int16_t MPPT1 = 3144;
  6673  021D  3048               	movlw	72
  6674  021E  00DE               	movwf	main@MPPT1^(0+128)
  6675  021F  300C               	movlw	12
  6676  0220  00DF               	movwf	(main@MPPT1^(0+128)+1)
  6677                           
  6678                           ;main.c: 38: extern uint8_t batteryState[2];
  6679                           ;main.c: 39: uint8_t displayRefresh = 0;
  6680  0221  01DB               	clrf	main@displayRefresh^(0+128)
  6681                           
  6682                           ;main.c: 40: uint16_t dutyCycle6 = 1023;
  6683  0222  30FF               	movlw	255
  6684  0223  00E9               	movwf	main@dutyCycle6^(0+128)
  6685  0224  3003               	movlw	3
  6686  0225  00EA               	movwf	(main@dutyCycle6^(0+128)+1)
  6687                           
  6688                           ;main.c: 41: uint16_t dutyCycle7 = 1023;
  6689  0226  30FF               	movlw	255
  6690  0227  00EB               	movwf	main@dutyCycle7^(0+128)
  6691  0228  3003               	movlw	3
  6692  0229  00EC               	movwf	(main@dutyCycle7^(0+128)+1)
  6693                           
  6694                           ;main.c: 42: uint16_t dutyCycle1 = 260;
  6695  022A  3004               	movlw	4
  6696  022B  00E5               	movwf	main@dutyCycle1^(0+128)
  6697  022C  3001               	movlw	1
  6698  022D  00E6               	movwf	(main@dutyCycle1^(0+128)+1)
  6699                           
  6700                           ;main.c: 43: float efficiency = 0;
  6701  022E  3000               	movlw	0
  6702  022F  00D4               	movwf	main@efficiency^(0+128)
  6703  0230  3000               	movlw	0
  6704  0231  00D5               	movwf	(main@efficiency+1)^(0+128)
  6705  0232  3000               	movlw	0
  6706  0233  00D6               	movwf	(main@efficiency+2)^(0+128)
  6707                           
  6708                           ;main.c: 44: uint16_t faultCount = 0;
  6709  0234  01D7               	clrf	main@faultCount^(0+128)
  6710  0235  01D8               	clrf	(main@faultCount+1)^(0+128)
  6711                           
  6712                           ;main.c: 45: uint16_t faultNotReset = 0;
  6713  0236  01D9               	clrf	main@faultNotReset^(0+128)
  6714  0237  01DA               	clrf	(main@faultNotReset+1)^(0+128)
  6715                           
  6716                           ;main.c: 46: extern uint16_t IminCount[2];
  6717                           ;main.c: 47: extern int8_t Imode[2];
  6718                           ;main.c: 48: int16_t largerIOut = 0;
  6719  0238  01E2               	clrf	main@largerIOut^(0+128)
  6720  0239  01E3               	clrf	(main@largerIOut+1)^(0+128)
  6721                           
  6722                           ;main.c: 49: extern int16_t Iref[2];
  6723                           ;main.c: 50: uint8_t j = 0;
  6724  023A  01ED               	clrf	main@j^(0+128)
  6725                           
  6726                           ;main.c: 51: uint8_t menuButton = 0;
  6727  023B  01E4               	clrf	main@menuButton^(0+128)
  6728                           
  6729                           ;main.c: 52: uint8_t fastLoop = 0;
  6730  023C  01DC               	clrf	main@fastLoop^(0+128)
  6731                           
  6732                           ;main.c: 53: uint8_t slowLoop = 200;
  6733  023D  30C8               	movlw	200
  6734  023E  0020               	movlb	0	; select bank0
  6735  023F  00D8               	movwf	??_main
  6736  0240  0858               	movf	??_main,w
  6737  0241  0021               	movlb	1	; select bank1
  6738  0242  00DD               	movwf	main@slowLoop^(0+128)
  6739                           
  6740                           ;main.c: 54: uint16_t tempFanOutput = 60;
  6741  0243  303C               	movlw	60
  6742  0244  00E7               	movwf	main@tempFanOutput^(0+128)
  6743  0245  3000               	movlw	0
  6744  0246  00E8               	movwf	(main@tempFanOutput^(0+128)+1)
  6745                           
  6746                           ;main.c: 55: extern int8_t VHoldMode[2];
  6747                           ;main.c: 56: extern int16_t Vref[2];
  6748                           ;main.c: 59: SYSTEM_Initialize();
  6749  0247  3193  2307  3182   	fcall	_SYSTEM_Initialize
  6750                           
  6751                           ;main.c: 61: LCDClear();
  6752  024A  3192  2243  3182   	fcall	_LCDClear
  6753  024D                     l3269:	
  6754                           ;main.c: 63: void calculateCurrent0(void);
  6755                           ;main.c: 64: void calculateCurrent1(void);
  6756                           ;main.c: 65: void calculateCurrent2(void);
  6757                           ;main.c: 66: void calculateCurrent3(void);
  6758                           ;main.c: 69: while (1)
  6759                           
  6760                           
  6761                           ;main.c: 70: {
  6762                           ;main.c: 71: if(!(RB2))
  6763  024D  0020               	movlb	0	; select bank0
  6764  024E  190D               	btfsc	13,2	;volatile
  6765  024F  2A61               	goto	l3277
  6766                           
  6767                           ;main.c: 72: {
  6768                           ;main.c: 73: LATA5=0;
  6769  0250  1296               	bcf	22,5	;volatile
  6770                           
  6771                           ;main.c: 74: _delay((unsigned long)((1000)*(32000000/4000000.0)));
  6772  0251  300B               	movlw	11
  6773  0252  0020               	movlb	0	; select bank0
  6774  0253  00D8               	movwf	??_main
  6775  0254  3062               	movlw	98
  6776  0255                     u4327:	
  6777  0255  0B89               	decfsz	9,f
  6778  0256  2A55               	goto	u4327
  6779  0257  0BD8               	decfsz	??_main,f
  6780  0258  2A55               	goto	u4327
  6781  0259  0000               	nop
  6782                           
  6783                           ;main.c: 75: faultCount+=1;
  6784  025A  3001               	movlw	1
  6785  025B  0021               	movlb	1	; select bank1
  6786  025C  07D7               	addwf	main@faultCount^(0+128),f
  6787  025D  3000               	movlw	0
  6788  025E  3DD8               	addwfc	(main@faultCount+1)^(0+128),f
  6789                           
  6790                           ;main.c: 76: LATA5=1;
  6791  025F  0020               	movlb	0	; select bank0
  6792  0260  1696               	bsf	22,5	;volatile
  6793  0261                     l3277:	
  6794                           
  6795                           ;main.c: 77: }
  6796                           ;main.c: 78: for(j=0;j<4;j++) Ianalogs[j]=readIAnalog(j);
  6797  0261  0021               	movlb	1	; select bank1
  6798  0262  01ED               	clrf	main@j^(0+128)
  6799  0263  3004               	movlw	4
  6800  0264  026D               	subwf	main@j^(0+128),w
  6801  0265  1803               	btfsc	3,0
  6802  0266  2A85               	goto	l3289
  6803  0267                     l3283:	
  6804  0267  086D               	movf	main@j^(0+128),w
  6805  0268  0020               	movlb	0	; select bank0
  6806  0269  00D8               	movwf	??_main
  6807  026A  01D9               	clrf	??_main+1
  6808  026B  0858               	movf	??_main,w
  6809  026C  00A6               	movwf	readIAnalog@channel
  6810  026D  0859               	movf	??_main+1,w
  6811  026E  00A7               	movwf	readIAnalog@channel+1
  6812  026F  318C  2445  3182   	fcall	_readIAnalog
  6813  0272  0021               	movlb	1	; select bank1
  6814  0273  356D               	lslf	main@j^(0+128),w
  6815  0274  3EA0               	addlw	(low (_Ianalogs| 0))& (0+255)
  6816  0275  0086               	movwf	6
  6817  0276  0187               	clrf	7
  6818  0277  0020               	movlb	0	; select bank0
  6819  0278  0826               	movf	?_readIAnalog,w
  6820  0279  3FC0               	movwi [0]fsr1
  6821  027A  0827               	movf	?_readIAnalog+1,w
  6822  027B  3FC1               	movwi [1]fsr1
  6823  027C  3001               	movlw	1
  6824  027D  00D8               	movwf	??_main
  6825  027E  0858               	movf	??_main,w
  6826  027F  0021               	movlb	1	; select bank1
  6827  0280  07ED               	addwf	main@j^(0+128),f
  6828  0281  3004               	movlw	4
  6829  0282  026D               	subwf	main@j^(0+128),w
  6830  0283  1C03               	skipc
  6831  0284  2A67               	goto	l3283
  6832  0285                     l3289:	
  6833                           
  6834                           ;main.c: 80: for(j=0;j<4;j++) Vanalogs[j]=readVAnalog(j);
  6835  0285  01ED               	clrf	main@j^(0+128)
  6836  0286  3004               	movlw	4
  6837  0287  026D               	subwf	main@j^(0+128),w
  6838  0288  1803               	btfsc	3,0
  6839  0289  2AA9               	goto	l471
  6840  028A                     l3295:	
  6841  028A  086D               	movf	main@j^(0+128),w
  6842  028B  0020               	movlb	0	; select bank0
  6843  028C  00D8               	movwf	??_main
  6844  028D  01D9               	clrf	??_main+1
  6845  028E  0858               	movf	??_main,w
  6846  028F  00A6               	movwf	readVAnalog@channel
  6847  0290  0859               	movf	??_main+1,w
  6848  0291  00A7               	movwf	readVAnalog@channel+1
  6849  0292  318D  2583  3182   	fcall	_readVAnalog
  6850  0295  0021               	movlb	1	; select bank1
  6851  0296  356D               	lslf	main@j^(0+128),w
  6852  0297  3E40               	addlw	(low (_Vanalogs| (0+256)))& (0+255)
  6853  0298  0086               	movwf	6
  6854  0299  3001               	movlw	1	; select bank2/3
  6855  029A  0087               	movwf	7
  6856  029B  0020               	movlb	0	; select bank0
  6857  029C  0826               	movf	?_readVAnalog,w
  6858  029D  3FC0               	movwi [0]fsr1
  6859  029E  0827               	movf	?_readVAnalog+1,w
  6860  029F  3FC1               	movwi [1]fsr1
  6861  02A0  3001               	movlw	1
  6862  02A1  00D8               	movwf	??_main
  6863  02A2  0858               	movf	??_main,w
  6864  02A3  0021               	movlb	1	; select bank1
  6865  02A4  07ED               	addwf	main@j^(0+128),f
  6866  02A5  3004               	movlw	4
  6867  02A6  026D               	subwf	main@j^(0+128),w
  6868  02A7  1C03               	skipc
  6869  02A8  2A8A               	goto	l3295
  6870  02A9                     l471:	
  6871                           
  6872                           ;main.c: 89: if(!(RB2))faultNotReset+=1;
  6873  02A9  0020               	movlb	0	; select bank0
  6874  02AA  190D               	btfsc	13,2	;volatile
  6875  02AB  2AB1               	goto	l472
  6876  02AC  3001               	movlw	1
  6877  02AD  0021               	movlb	1	; select bank1
  6878  02AE  07D9               	addwf	main@faultNotReset^(0+128),f
  6879  02AF  3000               	movlw	0
  6880  02B0  3DDA               	addwfc	(main@faultNotReset+1)^(0+128),f
  6881  02B1                     l472:	
  6882                           
  6883                           ;main.c: 91: if(fastLoop>5)
  6884  02B1  3006               	movlw	6
  6885  02B2  0021               	movlb	1	; select bank1
  6886  02B3  025C               	subwf	main@fastLoop^(0+128),w
  6887  02B4  1C03               	skipc
  6888  02B5  2C13               	goto	l3357
  6889                           
  6890                           ;main.c: 92: {
  6891                           ;main.c: 93: voltage[0]=(int16_t)(Vanalogs[0]/.54245);
  6892  02B6  0022               	movlb	2	; select bank2
  6893  02B7  0841               	movf	(_Vanalogs+1)^(0+256),w
  6894  02B8  00F9               	movwf	___awtoft@c+1
  6895  02B9  0840               	movf	_Vanalogs^(0+256),w
  6896  02BA  00F8               	movwf	___awtoft@c
  6897  02BB  3191  21FE  3182   	fcall	___awtoft
  6898  02BE  0878               	movf	?___awtoft,w
  6899  02BF  0020               	movlb	0	; select bank0
  6900  02C0  00A3               	movwf	___ftdiv@f1
  6901  02C1  0879               	movf	?___awtoft+1,w
  6902  02C2  00A4               	movwf	___ftdiv@f1+1
  6903  02C3  087A               	movf	?___awtoft+2,w
  6904  02C4  00A5               	movwf	___ftdiv@f1+2
  6905  02C5  30DE               	movlw	222
  6906  02C6  00A0               	movwf	___ftdiv@f2
  6907  02C7  300A               	movlw	10
  6908  02C8  00A1               	movwf	___ftdiv@f2+1
  6909  02C9  303F               	movlw	63
  6910  02CA  00A2               	movwf	___ftdiv@f2+2
  6911  02CB  3197  2757  3182   	fcall	___ftdiv
  6912  02CE  0020               	movlb	0	; select bank0
  6913  02CF  0820               	movf	?___ftdiv,w
  6914  02D0  00B0               	movwf	___fttol@f1
  6915  02D1  0821               	movf	?___ftdiv+1,w
  6916  02D2  00B1               	movwf	___fttol@f1+1
  6917  02D3  0822               	movf	?___ftdiv+2,w
  6918  02D4  00B2               	movwf	___fttol@f1+2
  6919  02D5  3180  201A  3182   	fcall	___fttol
  6920  02D8  0020               	movlb	0	; select bank0
  6921  02D9  0831               	movf	?___fttol+1,w
  6922  02DA  0021               	movlb	1	; select bank1
  6923  02DB  00A9               	movwf	(_voltage+1)^(0+128)
  6924  02DC  0020               	movlb	0	; select bank0
  6925  02DD  0830               	movf	?___fttol,w
  6926  02DE  0021               	movlb	1	; select bank1
  6927  02DF  00A8               	movwf	_voltage^(0+128)
  6928                           
  6929                           ;main.c: 95: voltage[1]=(int16_t)(Vanalogs[1]/.54395);
  6930  02E0  0022               	movlb	2	; select bank2
  6931  02E1  0843               	movf	((_Vanalogs+1)^(0+256)+2),w
  6932  02E2  00F9               	movwf	___awtoft@c+1
  6933  02E3  0842               	movf	(_Vanalogs^(0+256)+2),w
  6934  02E4  00F8               	movwf	___awtoft@c
  6935  02E5  3191  21FE  3182   	fcall	___awtoft
  6936  02E8  0878               	movf	?___awtoft,w
  6937  02E9  0020               	movlb	0	; select bank0
  6938  02EA  00A3               	movwf	___ftdiv@f1
  6939  02EB  0879               	movf	?___awtoft+1,w
  6940  02EC  00A4               	movwf	___ftdiv@f1+1
  6941  02ED  087A               	movf	?___awtoft+2,w
  6942  02EE  00A5               	movwf	___ftdiv@f1+2
  6943  02EF  3040               	movlw	64
  6944  02F0  00A0               	movwf	___ftdiv@f2
  6945  02F1  300B               	movlw	11
  6946  02F2  00A1               	movwf	___ftdiv@f2+1
  6947  02F3  303F               	movlw	63
  6948  02F4  00A2               	movwf	___ftdiv@f2+2
  6949  02F5  3197  2757  3182   	fcall	___ftdiv
  6950  02F8  0020               	movlb	0	; select bank0
  6951  02F9  0820               	movf	?___ftdiv,w
  6952  02FA  00B0               	movwf	___fttol@f1
  6953  02FB  0821               	movf	?___ftdiv+1,w
  6954  02FC  00B1               	movwf	___fttol@f1+1
  6955  02FD  0822               	movf	?___ftdiv+2,w
  6956  02FE  00B2               	movwf	___fttol@f1+2
  6957  02FF  3180  201A  3182   	fcall	___fttol
  6958  0302  0020               	movlb	0	; select bank0
  6959  0303  0831               	movf	?___fttol+1,w
  6960  0304  0021               	movlb	1	; select bank1
  6961  0305  00AB               	movwf	((_voltage+1)^(0+128)+2)
  6962  0306  0020               	movlb	0	; select bank0
  6963  0307  0830               	movf	?___fttol,w
  6964  0308  0021               	movlb	1	; select bank1
  6965  0309  00AA               	movwf	(_voltage^(0+128)+2)
  6966                           
  6967                           ;main.c: 97: voltage[2]=(int16_t)(Vanalogs[2]/.208100558);
  6968  030A  0022               	movlb	2	; select bank2
  6969  030B  0845               	movf	((_Vanalogs+1)^(0+256)+4),w
  6970  030C  00F9               	movwf	___awtoft@c+1
  6971  030D  0844               	movf	(_Vanalogs^(0+256)+4),w
  6972  030E  00F8               	movwf	___awtoft@c
  6973  030F  3191  21FE  3182   	fcall	___awtoft
  6974  0312  0878               	movf	?___awtoft,w
  6975  0313  0020               	movlb	0	; select bank0
  6976  0314  00A3               	movwf	___ftdiv@f1
  6977  0315  0879               	movf	?___awtoft+1,w
  6978  0316  00A4               	movwf	___ftdiv@f1+1
  6979  0317  087A               	movf	?___awtoft+2,w
  6980  0318  00A5               	movwf	___ftdiv@f1+2
  6981  0319  3018               	movlw	24
  6982  031A  00A0               	movwf	___ftdiv@f2
  6983  031B  3055               	movlw	85
  6984  031C  00A1               	movwf	___ftdiv@f2+1
  6985  031D  303E               	movlw	62
  6986  031E  00A2               	movwf	___ftdiv@f2+2
  6987  031F  3197  2757  3182   	fcall	___ftdiv
  6988  0322  0020               	movlb	0	; select bank0
  6989  0323  0820               	movf	?___ftdiv,w
  6990  0324  00B0               	movwf	___fttol@f1
  6991  0325  0821               	movf	?___ftdiv+1,w
  6992  0326  00B1               	movwf	___fttol@f1+1
  6993  0327  0822               	movf	?___ftdiv+2,w
  6994  0328  00B2               	movwf	___fttol@f1+2
  6995  0329  3180  201A  3182   	fcall	___fttol
  6996  032C  0020               	movlb	0	; select bank0
  6997  032D  0831               	movf	?___fttol+1,w
  6998  032E  0021               	movlb	1	; select bank1
  6999  032F  00AD               	movwf	((_voltage+1)^(0+128)+4)
  7000  0330  0020               	movlb	0	; select bank0
  7001  0331  0830               	movf	?___fttol,w
  7002  0332  0021               	movlb	1	; select bank1
  7003  0333  00AC               	movwf	(_voltage^(0+128)+4)
  7004                           
  7005                           ;main.c: 99: voltage[3]=(int16_t)(Vanalogs[3]/.207755);
  7006  0334  0022               	movlb	2	; select bank2
  7007  0335  0847               	movf	((_Vanalogs+1)^(0+256)+6),w
  7008  0336  00F9               	movwf	___awtoft@c+1
  7009  0337  0846               	movf	(_Vanalogs^(0+256)+6),w
  7010  0338  00F8               	movwf	___awtoft@c
  7011  0339  3191  21FE  3182   	fcall	___awtoft
  7012  033C  0878               	movf	?___awtoft,w
  7013  033D  0020               	movlb	0	; select bank0
  7014  033E  00A3               	movwf	___ftdiv@f1
  7015  033F  0879               	movf	?___awtoft+1,w
  7016  0340  00A4               	movwf	___ftdiv@f1+1
  7017  0341  087A               	movf	?___awtoft+2,w
  7018  0342  00A5               	movwf	___ftdiv@f1+2
  7019  0343  30BE               	movlw	190
  7020  0344  00A0               	movwf	___ftdiv@f2
  7021  0345  3054               	movlw	84
  7022  0346  00A1               	movwf	___ftdiv@f2+1
  7023  0347  303E               	movlw	62
  7024  0348  00A2               	movwf	___ftdiv@f2+2
  7025  0349  3197  2757  3182   	fcall	___ftdiv
  7026  034C  0020               	movlb	0	; select bank0
  7027  034D  0820               	movf	?___ftdiv,w
  7028  034E  00B0               	movwf	___fttol@f1
  7029  034F  0821               	movf	?___ftdiv+1,w
  7030  0350  00B1               	movwf	___fttol@f1+1
  7031  0351  0822               	movf	?___ftdiv+2,w
  7032  0352  00B2               	movwf	___fttol@f1+2
  7033  0353  3180  201A  3182   	fcall	___fttol
  7034  0356  0020               	movlb	0	; select bank0
  7035  0357  0831               	movf	?___fttol+1,w
  7036  0358  0021               	movlb	1	; select bank1
  7037  0359  00AF               	movwf	((_voltage+1)^(0+128)+6)
  7038  035A  0020               	movlb	0	; select bank0
  7039  035B  0830               	movf	?___fttol,w
  7040  035C  0021               	movlb	1	; select bank1
  7041  035D  00AE               	movwf	(_voltage^(0+128)+6)
  7042                           
  7043                           ;main.c: 101: calculateCurrent0();
  7044  035E  3193  23B8  3182   	fcall	_calculateCurrent0
  7045                           
  7046                           ;main.c: 103: calculateCurrent1();
  7047  0361  3193  23FD  3182   	fcall	_calculateCurrent1
  7048                           
  7049                           ;main.c: 105: calculateCurrent2();
  7050  0364  3194  2442  3182   	fcall	_calculateCurrent2
  7051                           
  7052                           ;main.c: 107: calculateCurrent3();
  7053  0367  3188  2006  3182   	fcall	_calculateCurrent3
  7054                           
  7055                           ;main.c: 109: if(Imode[0])
  7056  036A  0020               	movlb	0	; select bank0
  7057  036B  0862               	movf	_Imode,w
  7058  036C  1903               	btfsc	3,2
  7059  036D  2B8F               	goto	l3319
  7060                           
  7061                           ;main.c: 110: {
  7062                           ;main.c: 111: if(voltage[2]<MPPT0)
  7063  036E  0021               	movlb	1	; select bank1
  7064  036F  082D               	movf	((_voltage+1)^(0+128)+4),w
  7065  0370  3A80               	xorlw	128
  7066  0371  0020               	movlb	0	; select bank0
  7067  0372  00D8               	movwf	??_main
  7068  0373  0021               	movlb	1	; select bank1
  7069  0374  0861               	movf	(main@MPPT0+1)^(0+128),w
  7070  0375  3A80               	xorlw	128
  7071  0376  0020               	movlb	0	; select bank0
  7072  0377  0258               	subwf	??_main,w
  7073  0378  1D03               	skipz
  7074  0379  2B7D               	goto	u3995
  7075  037A  0021               	movlb	1	; select bank1
  7076  037B  0860               	movf	main@MPPT0^(0+128),w
  7077  037C  022C               	subwf	(_voltage^(0+128)+4),w
  7078  037D                     u3995:	
  7079  037D  1C03               	btfss	3,0
  7080  037E  2BA0               	goto	L3
  7081                           
  7082                           ;main.c: 118: else if(voltage[2]>MPPT0)
  7083                           
  7084                           ;main.c: 116: }
  7085                           ;main.c: 117: }
  7086                           
  7087                           ;main.c: 114: {
  7088                           ;main.c: 115: dutyCycle6+=1;
  7089                           
  7090                           ;main.c: 112: {
  7091                           ;main.c: 113: if(dutyCycle6<1023)
  7092  037F  0021               	movlb	1	; select bank1
  7093  0380  0861               	movf	(main@MPPT0+1)^(0+128),w
  7094  0381  3A80               	xorlw	128
  7095  0382  0020               	movlb	0	; select bank0
  7096  0383  00D8               	movwf	??_main
  7097  0384  0021               	movlb	1	; select bank1
  7098  0385  082D               	movf	((_voltage+1)^(0+128)+4),w
  7099  0386  3A80               	xorlw	128
  7100  0387  0020               	movlb	0	; select bank0
  7101  0388  0258               	subwf	??_main,w
  7102  0389  1D03               	skipz
  7103  038A  2BBA               	goto	u4055
  7104  038B  0021               	movlb	1	; select bank1
  7105  038C  082C               	movf	(_voltage^(0+128)+4),w
  7106  038D  0260               	subwf	main@MPPT0^(0+128),w
  7107  038E  2BBA               	goto	u4055
  7108  038F                     l3319:	
  7109                           ;main.c: 126: }
  7110                           
  7111                           ;main.c: 123: }
  7112                           ;main.c: 124: }
  7113                           
  7114                           ;main.c: 121: {
  7115                           ;main.c: 122: dutyCycle6-=1;
  7116                           
  7117                           ;main.c: 119: {
  7118                           ;main.c: 120: if(dutyCycle6>0)
  7119                           
  7120                           
  7121                           ;main.c: 127: else
  7122                           ;main.c: 128: {
  7123                           ;main.c: 129: if(voltage[0]>(int16_t)Vref[0])
  7124  038F  0020               	movlb	0	; select bank0
  7125  0390  085B               	movf	_Vref+1,w
  7126  0391  3A80               	xorlw	128
  7127  0392  00D8               	movwf	??_main
  7128  0393  0021               	movlb	1	; select bank1
  7129  0394  0829               	movf	(_voltage+1)^(0+128),w
  7130  0395  3A80               	xorlw	128
  7131  0396  0020               	movlb	0	; select bank0
  7132  0397  0258               	subwf	??_main,w
  7133  0398  1D03               	skipz
  7134  0399  2B9E               	goto	u4035
  7135  039A  0021               	movlb	1	; select bank1
  7136  039B  0828               	movf	_voltage^(0+128),w
  7137  039C  0020               	movlb	0	; select bank0
  7138  039D  025A               	subwf	_Vref,w
  7139  039E                     u4035:	
  7140  039E  1803               	skipnc
  7141  039F  2BAD               	goto	l3325
  7142  03A0                     L3:	
  7143                           
  7144                           ;main.c: 130: {
  7145                           ;main.c: 131: if(dutyCycle6<1023) dutyCycle6+=1;
  7146  03A0  3003               	movlw	3
  7147  03A1  0021               	movlb	1	; select bank1
  7148  03A2  026A               	subwf	(main@dutyCycle6+1)^(0+128),w
  7149  03A3  30FF               	movlw	255
  7150  03A4  1903               	skipnz
  7151  03A5  0269               	subwf	main@dutyCycle6^(0+128),w
  7152  03A6  1803               	skipnc
  7153  03A7  2BC5               	goto	l3331
  7154  03A8  3001               	movlw	1
  7155  03A9  07E9               	addwf	main@dutyCycle6^(0+128),f
  7156  03AA  3000               	movlw	0
  7157  03AB  3DEA               	addwfc	(main@dutyCycle6+1)^(0+128),f
  7158                           
  7159                           ;main.c: 132: }
  7160  03AC  2BC5               	goto	l3331
  7161  03AD                     l3325:	
  7162                           
  7163                           ;main.c: 133: else if(voltage[0]<(int16_t)Vref[0])
  7164  03AD  0021               	movlb	1	; select bank1
  7165  03AE  0829               	movf	(_voltage+1)^(0+128),w
  7166  03AF  3A80               	xorlw	128
  7167  03B0  0020               	movlb	0	; select bank0
  7168  03B1  00D8               	movwf	??_main
  7169  03B2  085B               	movf	_Vref+1,w
  7170  03B3  3A80               	xorlw	128
  7171  03B4  0258               	subwf	??_main,w
  7172  03B5  1D03               	skipz
  7173  03B6  2BBA               	goto	u4055
  7174  03B7  085A               	movf	_Vref,w
  7175  03B8  0021               	movlb	1	; select bank1
  7176  03B9  0228               	subwf	_voltage^(0+128),w
  7177  03BA                     u4055:	
  7178  03BA  1803               	skipnc
  7179  03BB  2BC5               	goto	l3331
  7180                           
  7181                           ;main.c: 134: {
  7182                           ;main.c: 135: if(dutyCycle6>0) dutyCycle6-=1;;
  7183  03BC  0021               	movlb	1	; select bank1
  7184  03BD  0869               	movf	main@dutyCycle6^(0+128),w
  7185  03BE  046A               	iorwf	(main@dutyCycle6+1)^(0+128),w
  7186  03BF  1903               	btfsc	3,2
  7187  03C0  2BC5               	goto	l3331
  7188  03C1  3001               	movlw	1
  7189  03C2  02E9               	subwf	main@dutyCycle6^(0+128),f
  7190  03C3  3000               	movlw	0
  7191  03C4  3BEA               	subwfb	(main@dutyCycle6+1)^(0+128),f
  7192  03C5                     l3331:	
  7193                           ;main.c: 136: }
  7194                           
  7195                           
  7196                           ;main.c: 138: }
  7197                           ;main.c: 140: if(Imode[1])
  7198  03C5  0020               	movlb	0	; select bank0
  7199  03C6  0863               	movf	_Imode+1,w
  7200  03C7  1903               	btfsc	3,2
  7201  03C8  2BDB               	goto	l3343
  7202                           
  7203                           ;main.c: 141: {
  7204                           ;main.c: 142: if(voltage[3]<MPPT1)
  7205  03C9  0021               	movlb	1	; select bank1
  7206  03CA  082F               	movf	((_voltage+1)^(0+128)+6),w
  7207  03CB  3A80               	xorlw	128
  7208  03CC  0020               	movlb	0	; select bank0
  7209  03CD  00D8               	movwf	??_main
  7210  03CE  0021               	movlb	1	; select bank1
  7211  03CF  085F               	movf	(main@MPPT1+1)^(0+128),w
  7212  03D0  3A80               	xorlw	128
  7213  03D1  0020               	movlb	0	; select bank0
  7214  03D2  0258               	subwf	??_main,w
  7215  03D3  1D03               	skipz
  7216  03D4  2BD8               	goto	u4085
  7217  03D5  0021               	movlb	1	; select bank1
  7218  03D6  085E               	movf	main@MPPT1^(0+128),w
  7219  03D7  022E               	subwf	(_voltage^(0+128)+6),w
  7220  03D8                     u4085:	
  7221  03D8  1C03               	btfss	3,0
  7222  03D9  2BEC               	goto	L4
  7223                           
  7224                           ;main.c: 147: }
  7225                           ;main.c: 148: }
  7226                           
  7227                           ;main.c: 145: {
  7228                           ;main.c: 146: dutyCycle7+=1;
  7229                           
  7230                           ;main.c: 143: {
  7231                           ;main.c: 144: if(dutyCycle7<1023)
  7232  03DA  2C08               	goto	L5
  7233  03DB                     l3343:	
  7234                           ;main.c: 152: }
  7235                           ;main.c: 153: }
  7236                           
  7237                           ;main.c: 150: {
  7238                           ;main.c: 151: dutyCycle7-=1;
  7239                           
  7240                           ;main.c: 149: else if(dutyCycle7>0)
  7241                           
  7242                           
  7243                           ;main.c: 154: else
  7244                           ;main.c: 155: {
  7245                           ;main.c: 156: if(voltage[1]>(int16_t)Vref[1])
  7246  03DB  0020               	movlb	0	; select bank0
  7247  03DC  085D               	movf	_Vref+3,w
  7248  03DD  3A80               	xorlw	128
  7249  03DE  00D8               	movwf	??_main
  7250  03DF  0021               	movlb	1	; select bank1
  7251  03E0  082B               	movf	((_voltage+1)^(0+128)+2),w
  7252  03E1  3A80               	xorlw	128
  7253  03E2  0020               	movlb	0	; select bank0
  7254  03E3  0258               	subwf	??_main,w
  7255  03E4  1D03               	skipz
  7256  03E5  2BEA               	goto	u4115
  7257  03E6  0021               	movlb	1	; select bank1
  7258  03E7  082A               	movf	(_voltage^(0+128)+2),w
  7259  03E8  0020               	movlb	0	; select bank0
  7260  03E9  025C               	subwf	_Vref+2,w
  7261  03EA                     u4115:	
  7262  03EA  1803               	skipnc
  7263  03EB  2BF9               	goto	l3349
  7264  03EC                     L4:	
  7265                           
  7266                           ;main.c: 157: {
  7267                           ;main.c: 158: if(dutyCycle7<1023) dutyCycle7+=1;
  7268  03EC  3003               	movlw	3
  7269  03ED  0021               	movlb	1	; select bank1
  7270  03EE  026C               	subwf	(main@dutyCycle7+1)^(0+128),w
  7271  03EF  30FF               	movlw	255
  7272  03F0  1903               	skipnz
  7273  03F1  026B               	subwf	main@dutyCycle7^(0+128),w
  7274  03F2  1803               	skipnc
  7275  03F3  2C11               	goto	l3355
  7276  03F4  3001               	movlw	1
  7277  03F5  07EB               	addwf	main@dutyCycle7^(0+128),f
  7278  03F6  3000               	movlw	0
  7279  03F7  3DEC               	addwfc	(main@dutyCycle7+1)^(0+128),f
  7280                           
  7281                           ;main.c: 159: }
  7282  03F8  2C11               	goto	l3355
  7283  03F9                     l3349:	
  7284                           
  7285                           ;main.c: 160: else if(voltage[1]<(int16_t)Vref[1])
  7286  03F9  0021               	movlb	1	; select bank1
  7287  03FA  082B               	movf	((_voltage+1)^(0+128)+2),w
  7288  03FB  3A80               	xorlw	128
  7289  03FC  0020               	movlb	0	; select bank0
  7290  03FD  00D8               	movwf	??_main
  7291  03FE  085D               	movf	_Vref+3,w
  7292  03FF  3A80               	xorlw	128
  7293  0400  0258               	subwf	??_main,w
  7294  0401  1D03               	skipz
  7295  0402  2C06               	goto	u4135
  7296  0403  085C               	movf	_Vref+2,w
  7297  0404  0021               	movlb	1	; select bank1
  7298  0405  022A               	subwf	(_voltage^(0+128)+2),w
  7299  0406                     u4135:	
  7300  0406  1803               	skipnc
  7301  0407  2C11               	goto	l3355
  7302  0408                     L5:	
  7303                           
  7304                           ;main.c: 161: {
  7305                           ;main.c: 162: if(dutyCycle7>0) dutyCycle7-=1;;
  7306  0408  0021               	movlb	1	; select bank1
  7307  0409  086B               	movf	main@dutyCycle7^(0+128),w
  7308  040A  046C               	iorwf	(main@dutyCycle7+1)^(0+128),w
  7309  040B  1903               	btfsc	3,2
  7310  040C  2C11               	goto	l3355
  7311  040D  3001               	movlw	1
  7312  040E  02EB               	subwf	main@dutyCycle7^(0+128),f
  7313  040F  3000               	movlw	0
  7314  0410  3BEC               	subwfb	(main@dutyCycle7+1)^(0+128),f
  7315  0411                     l3355:	
  7316                           ;main.c: 163: }
  7317                           
  7318                           
  7319                           ;main.c: 165: }
  7320                           ;main.c: 166: fastLoop=0;
  7321  0411  0021               	movlb	1	; select bank1
  7322  0412  01DC               	clrf	main@fastLoop^(0+128)
  7323  0413                     l3357:	
  7324                           
  7325                           ;main.c: 167: }
  7326                           ;main.c: 169: fastLoop+=1;
  7327  0413  3001               	movlw	1
  7328  0414  0020               	movlb	0	; select bank0
  7329  0415  00D8               	movwf	??_main
  7330  0416  0858               	movf	??_main,w
  7331  0417  0021               	movlb	1	; select bank1
  7332  0418  07DC               	addwf	main@fastLoop^(0+128),f
  7333                           
  7334                           ;main.c: 170: slowLoop+=1;
  7335  0419  3001               	movlw	1
  7336  041A  0020               	movlb	0	; select bank0
  7337  041B  00D8               	movwf	??_main
  7338  041C  0858               	movf	??_main,w
  7339  041D  0021               	movlb	1	; select bank1
  7340  041E  07DD               	addwf	main@slowLoop^(0+128),f
  7341                           
  7342                           ;main.c: 172: PWM1_LoadDutyValue(dutyCycle1);
  7343  041F  0866               	movf	(main@dutyCycle1+1)^(0+128),w
  7344  0420  00F1               	movwf	PWM1_LoadDutyValue@dutyCycle1+1
  7345  0421  0865               	movf	main@dutyCycle1^(0+128),w
  7346  0422  00F0               	movwf	PWM1_LoadDutyValue@dutyCycle1
  7347  0423  3191  215B  3182   	fcall	_PWM1_LoadDutyValue
  7348                           
  7349                           ;main.c: 173: PWM6_LoadDutyValue(dutyCycle6);
  7350  0426  0021               	movlb	1	; select bank1
  7351  0427  086A               	movf	(main@dutyCycle6+1)^(0+128),w
  7352  0428  00F1               	movwf	PWM6_LoadDutyValue@dutyCycle6+1
  7353  0429  0869               	movf	main@dutyCycle6^(0+128),w
  7354  042A  00F0               	movwf	PWM6_LoadDutyValue@dutyCycle6
  7355  042B  3191  2171  3182   	fcall	_PWM6_LoadDutyValue
  7356                           
  7357                           ;main.c: 174: PWM7_LoadDutyValue(dutyCycle7);
  7358  042E  0021               	movlb	1	; select bank1
  7359  042F  086C               	movf	(main@dutyCycle7+1)^(0+128),w
  7360  0430  00F1               	movwf	PWM7_LoadDutyValue@dutyCycle7+1
  7361  0431  086B               	movf	main@dutyCycle7^(0+128),w
  7362  0432  00F0               	movwf	PWM7_LoadDutyValue@dutyCycle7
  7363  0433  3180  2004  3182   	fcall	_PWM7_LoadDutyValue
  7364                           
  7365                           ;main.c: 176: menuButton = readButton();
  7366  0436  3196  2653  3182   	fcall	_readButton
  7367  0439  0020               	movlb	0	; select bank0
  7368  043A  00D8               	movwf	??_main
  7369  043B  0858               	movf	??_main,w
  7370  043C  0021               	movlb	1	; select bank1
  7371  043D  00E4               	movwf	main@menuButton^(0+128)
  7372                           
  7373                           ;main.c: 177: if(menuButton == 2) if(MPPT0>2700)MPPT1-=1;
  7374  043E  3002               	movlw	2
  7375  043F  0664               	xorwf	main@menuButton^(0+128),w
  7376  0440  1D03               	btfss	3,2
  7377  0441  2C54               	goto	l3375
  7378  0442  0861               	movf	(main@MPPT0+1)^(0+128),w
  7379  0443  3A80               	xorlw	128
  7380  0444  0020               	movlb	0	; select bank0
  7381  0445  00D8               	movwf	??_main
  7382  0446  308A               	movlw	138
  7383  0447  0258               	subwf	??_main,w
  7384  0448  1D03               	skipz
  7385  0449  2C4D               	goto	u4165
  7386  044A  308D               	movlw	141
  7387  044B  0021               	movlb	1	; select bank1
  7388  044C  0260               	subwf	main@MPPT0^(0+128),w
  7389  044D                     u4165:	
  7390  044D  1C03               	skipc
  7391  044E  2C54               	goto	l3375
  7392  044F  30FF               	movlw	255
  7393  0450  0021               	movlb	1	; select bank1
  7394  0451  07DE               	addwf	main@MPPT1^(0+128),f
  7395  0452  30FF               	movlw	255
  7396  0453  3DDF               	addwfc	(main@MPPT1+1)^(0+128),f
  7397  0454                     l3375:	
  7398                           
  7399                           ;main.c: 178: if(menuButton == 3)if(MPPT1<3200)MPPT1+=1;
  7400  0454  3003               	movlw	3
  7401  0455  0021               	movlb	1	; select bank1
  7402  0456  0664               	xorwf	main@menuButton^(0+128),w
  7403  0457  1D03               	btfss	3,2
  7404  0458  2C6B               	goto	l3381
  7405  0459  085F               	movf	(main@MPPT1+1)^(0+128),w
  7406  045A  3A80               	xorlw	128
  7407  045B  0020               	movlb	0	; select bank0
  7408  045C  00D8               	movwf	??_main
  7409  045D  308C               	movlw	140
  7410  045E  0258               	subwf	??_main,w
  7411  045F  1D03               	skipz
  7412  0460  2C64               	goto	u4185
  7413  0461  3080               	movlw	128
  7414  0462  0021               	movlb	1	; select bank1
  7415  0463  025E               	subwf	main@MPPT1^(0+128),w
  7416  0464                     u4185:	
  7417  0464  1803               	skipnc
  7418  0465  2C6B               	goto	l3381
  7419  0466  3001               	movlw	1
  7420  0467  0021               	movlb	1	; select bank1
  7421  0468  07DE               	addwf	main@MPPT1^(0+128),f
  7422  0469  3000               	movlw	0
  7423  046A  3DDF               	addwfc	(main@MPPT1+1)^(0+128),f
  7424  046B                     l3381:	
  7425                           
  7426                           ;main.c: 179: if(menuButton == 1)LCDInit();
  7427  046B  0021               	movlb	1	; select bank1
  7428  046C  0364               	decf	main@menuButton^(0+128),w
  7429  046D  1D03               	btfss	3,2
  7430  046E  2C72               	goto	l3385
  7431  046F  3192  22CC  3182   	fcall	_LCDInit
  7432  0472                     l3385:	
  7433                           
  7434                           ;main.c: 181: if(slowLoop>250)
  7435  0472  30FB               	movlw	251
  7436  0473  0021               	movlb	1	; select bank1
  7437  0474  025D               	subwf	main@slowLoop^(0+128),w
  7438  0475  1C03               	skipc
  7439  0476  2A4D               	goto	l3269
  7440                           
  7441                           ;main.c: 182: {
  7442                           ;main.c: 183: if(current[0]>current[1])
  7443  0477  0833               	movf	((_current+1)^(0+128)+2),w
  7444  0478  3A80               	xorlw	128
  7445  0479  0020               	movlb	0	; select bank0
  7446  047A  00D8               	movwf	??_main
  7447  047B  0021               	movlb	1	; select bank1
  7448  047C  0831               	movf	(_current+1)^(0+128),w
  7449  047D  3A80               	xorlw	128
  7450  047E  0020               	movlb	0	; select bank0
  7451  047F  0258               	subwf	??_main,w
  7452  0480  1D03               	skipz
  7453  0481  2C85               	goto	u4215
  7454  0482  0021               	movlb	1	; select bank1
  7455  0483  0830               	movf	_current^(0+128),w
  7456  0484  0232               	subwf	(_current^(0+128)+2),w
  7457  0485                     u4215:	
  7458  0485  1803               	skipnc
  7459  0486  2C8C               	goto	l3391
  7460                           
  7461                           ;main.c: 184: {
  7462                           ;main.c: 185: largerIOut=current[0];
  7463  0487  0021               	movlb	1	; select bank1
  7464  0488  0831               	movf	(_current+1)^(0+128),w
  7465  0489  00E3               	movwf	(main@largerIOut+1)^(0+128)
  7466  048A  0830               	movf	_current^(0+128),w
  7467  048B  2C90               	goto	L1
  7468  048C                     l3391:	
  7469                           ;main.c: 186: }
  7470                           
  7471                           
  7472                           ;main.c: 187: else
  7473                           ;main.c: 188: {
  7474                           ;main.c: 189: largerIOut=current[1];
  7475  048C  0021               	movlb	1	; select bank1
  7476  048D  0833               	movf	((_current+1)^(0+128)+2),w
  7477  048E  00E3               	movwf	(main@largerIOut+1)^(0+128)
  7478  048F  0832               	movf	(_current^(0+128)+2),w
  7479  0490                     L1:	
  7480  0490  00E2               	movwf	main@largerIOut^(0+128)
  7481                           
  7482                           ;main.c: 190: }
  7483                           ;main.c: 192: if(largerIOut>25)
  7484  0491  0863               	movf	(main@largerIOut+1)^(0+128),w
  7485  0492  3A80               	xorlw	128
  7486  0493  0020               	movlb	0	; select bank0
  7487  0494  00D8               	movwf	??_main
  7488  0495  3080               	movlw	128
  7489  0496  0258               	subwf	??_main,w
  7490  0497  1D03               	skipz
  7491  0498  2C9C               	goto	u4225
  7492  0499  301A               	movlw	26
  7493  049A  0021               	movlb	1	; select bank1
  7494  049B  0262               	subwf	main@largerIOut^(0+128),w
  7495  049C                     u4225:	
  7496  049C  1C03               	skipc
  7497  049D  2CF0               	goto	l3411
  7498                           
  7499                           ;main.c: 193: {
  7500                           ;main.c: 194: if((uint16_t)largerIOut+5>dutyCycle1)
  7501  049E  0021               	movlb	1	; select bank1
  7502  049F  0862               	movf	main@largerIOut^(0+128),w
  7503  04A0  3E05               	addlw	5
  7504  04A1  0020               	movlb	0	; select bank0
  7505  04A2  00D8               	movwf	??_main
  7506  04A3  3000               	movlw	0
  7507  04A4  0021               	movlb	1	; select bank1
  7508  04A5  3D63               	addwfc	(main@largerIOut+1)^(0+128),w
  7509  04A6  0020               	movlb	0	; select bank0
  7510  04A7  00D9               	movwf	??_main+1
  7511  04A8  0859               	movf	??_main+1,w
  7512  04A9  0021               	movlb	1	; select bank1
  7513  04AA  0266               	subwf	(main@dutyCycle1+1)^(0+128),w
  7514  04AB  1D03               	skipz
  7515  04AC  2CB1               	goto	u4235
  7516  04AD  0020               	movlb	0	; select bank0
  7517  04AE  0858               	movf	??_main,w
  7518  04AF  0021               	movlb	1	; select bank1
  7519  04B0  0265               	subwf	main@dutyCycle1^(0+128),w
  7520  04B1                     u4235:	
  7521  04B1  1803               	skipnc
  7522  04B2  2CB8               	goto	l3397
  7523                           
  7524                           ;main.c: 195: {
  7525                           ;main.c: 196: dutyCycle1+=1;
  7526  04B3  3001               	movlw	1
  7527  04B4  07E5               	addwf	main@dutyCycle1^(0+128),f
  7528  04B5  3000               	movlw	0
  7529  04B6  3DE6               	addwfc	(main@dutyCycle1+1)^(0+128),f
  7530                           
  7531                           ;main.c: 197: }
  7532  04B7  2CBC               	goto	l3399
  7533  04B8                     l3397:	
  7534                           
  7535                           ;main.c: 198: else dutyCycle1-=1;
  7536  04B8  3001               	movlw	1
  7537  04B9  02E5               	subwf	main@dutyCycle1^(0+128),f
  7538  04BA  3000               	movlw	0
  7539  04BB  3BE6               	subwfb	(main@dutyCycle1+1)^(0+128),f
  7540  04BC                     l3399:	
  7541                           
  7542                           ;main.c: 200: if((uint16_t)largerIOut+5>tempFanOutput)
  7543  04BC  0862               	movf	main@largerIOut^(0+128),w
  7544  04BD  3E05               	addlw	5
  7545  04BE  0020               	movlb	0	; select bank0
  7546  04BF  00D8               	movwf	??_main
  7547  04C0  3000               	movlw	0
  7548  04C1  0021               	movlb	1	; select bank1
  7549  04C2  3D63               	addwfc	(main@largerIOut+1)^(0+128),w
  7550  04C3  0020               	movlb	0	; select bank0
  7551  04C4  00D9               	movwf	??_main+1
  7552  04C5  0859               	movf	??_main+1,w
  7553  04C6  0021               	movlb	1	; select bank1
  7554  04C7  0268               	subwf	(main@tempFanOutput+1)^(0+128),w
  7555  04C8  1D03               	skipz
  7556  04C9  2CCE               	goto	u4245
  7557  04CA  0020               	movlb	0	; select bank0
  7558  04CB  0858               	movf	??_main,w
  7559  04CC  0021               	movlb	1	; select bank1
  7560  04CD  0267               	subwf	main@tempFanOutput^(0+128),w
  7561  04CE                     u4245:	
  7562  04CE  1803               	skipnc
  7563  04CF  2CDC               	goto	l3405
  7564                           
  7565                           ;main.c: 201: {
  7566                           ;main.c: 202: if(tempFanOutput<75)
  7567  04D0  3000               	movlw	0
  7568  04D1  0268               	subwf	(main@tempFanOutput+1)^(0+128),w
  7569  04D2  304B               	movlw	75
  7570  04D3  1903               	skipnz
  7571  04D4  0267               	subwf	main@tempFanOutput^(0+128),w
  7572  04D5  1803               	skipnc
  7573  04D6  2CE4               	goto	l513
  7574                           
  7575                           ;main.c: 203: {
  7576                           ;main.c: 204: tempFanOutput+=1;
  7577  04D7  3001               	movlw	1
  7578  04D8  07E7               	addwf	main@tempFanOutput^(0+128),f
  7579  04D9  3000               	movlw	0
  7580  04DA  3DE8               	addwfc	(main@tempFanOutput+1)^(0+128),f
  7581                           
  7582                           ;main.c: 205: }
  7583                           ;main.c: 206: }
  7584  04DB  2CE4               	goto	l513
  7585  04DC                     l3405:	
  7586                           
  7587                           ;main.c: 207: else
  7588                           ;main.c: 208: {
  7589                           ;main.c: 209: if(tempFanOutput>0)tempFanOutput-=1;
  7590  04DC  0867               	movf	main@tempFanOutput^(0+128),w
  7591  04DD  0468               	iorwf	(main@tempFanOutput+1)^(0+128),w
  7592  04DE  1903               	btfsc	3,2
  7593  04DF  2CE4               	goto	l513
  7594  04E0  3001               	movlw	1
  7595  04E1  02E7               	subwf	main@tempFanOutput^(0+128),f
  7596  04E2  3000               	movlw	0
  7597  04E3  3BE8               	subwfb	(main@tempFanOutput+1)^(0+128),f
  7598  04E4                     l513:	
  7599                           
  7600                           ;main.c: 210: }
  7601                           ;main.c: 212: dutyCycle1=tempFanOutput;
  7602  04E4  0868               	movf	(main@tempFanOutput+1)^(0+128),w
  7603  04E5  00E6               	movwf	(main@dutyCycle1+1)^(0+128)
  7604  04E6  0867               	movf	main@tempFanOutput^(0+128),w
  7605  04E7  00E5               	movwf	main@dutyCycle1^(0+128)
  7606                           
  7607                           ;main.c: 213: if(dutyCycle1<19)dutyCycle1=0;
  7608  04E8  3000               	movlw	0
  7609  04E9  0266               	subwf	(main@dutyCycle1+1)^(0+128),w
  7610  04EA  3013               	movlw	19
  7611  04EB  1903               	skipnz
  7612  04EC  0265               	subwf	main@dutyCycle1^(0+128),w
  7613  04ED  1803               	skipnc
  7614  04EE  2CF3               	goto	l3413
  7615  04EF  2CF1               	goto	L2
  7616  04F0                     l3411:	
  7617                           ;main.c: 214: }
  7618                           
  7619                           
  7620                           ;main.c: 215: else
  7621                           ;main.c: 216: {
  7622                           ;main.c: 217: dutyCycle1=0;
  7623  04F0  0021               	movlb	1	; select bank1
  7624  04F1                     L2:	
  7625  04F1  01E5               	clrf	main@dutyCycle1^(0+128)
  7626  04F2  01E6               	clrf	(main@dutyCycle1+1)^(0+128)
  7627  04F3                     l3413:	
  7628                           
  7629                           ;main.c: 218: }
  7630                           ;main.c: 219: if(!(RB2))
  7631  04F3  0020               	movlb	0	; select bank0
  7632  04F4  190D               	btfsc	13,2	;volatile
  7633  04F5  2D04               	goto	l3417
  7634                           
  7635                           ;main.c: 220: {
  7636                           ;main.c: 221: dutyCycle1=55;
  7637  04F6  3037               	movlw	55
  7638  04F7  0021               	movlb	1	; select bank1
  7639  04F8  00E5               	movwf	main@dutyCycle1^(0+128)
  7640  04F9  3000               	movlw	0
  7641  04FA  00E6               	movwf	(main@dutyCycle1^(0+128)+1)
  7642                           
  7643                           ;main.c: 222: batteryState[0]=CHARGE;
  7644  04FB  3004               	movlw	4
  7645  04FC  0020               	movlb	0	; select bank0
  7646  04FD  00D8               	movwf	??_main
  7647  04FE  0858               	movf	??_main,w
  7648  04FF  00E4               	movwf	_batteryState
  7649                           
  7650                           ;main.c: 223: batteryState[1]=CHARGE;
  7651  0500  3004               	movlw	4
  7652  0501  00D8               	movwf	??_main
  7653  0502  0858               	movf	??_main,w
  7654  0503  00E5               	movwf	_batteryState+1
  7655  0504                     l3417:	
  7656                           
  7657                           ;main.c: 224: }
  7658                           ;main.c: 226: ADREF = 0x00;
  7659  0504  0021               	movlb	1	; select bank1
  7660  0505  019A               	clrf	26	;volatile
  7661                           
  7662                           ;main.c: 227: batteryTemp=tempCalc(ADCRead(9));
  7663  0506  3009               	movlw	9
  7664  0507  3191  2146  3182   	fcall	_ADCRead
  7665  050A  0871               	movf	?_ADCRead+1,w
  7666  050B  0020               	movlb	0	; select bank0
  7667  050C  00CE               	movwf	tempCalc@analogValue+1
  7668  050D  0870               	movf	?_ADCRead,w
  7669  050E  00CD               	movwf	tempCalc@analogValue
  7670  050F  318A  2268  3182   	fcall	_tempCalc
  7671  0512  0020               	movlb	0	; select bank0
  7672  0513  084E               	movf	?_tempCalc+1,w
  7673  0514  00EE               	movwf	_batteryTemp+1
  7674  0515  084D               	movf	?_tempCalc,w
  7675  0516  00ED               	movwf	_batteryTemp
  7676                           
  7677                           ;main.c: 228: ADREF = 0x03;
  7678  0517  3003               	movlw	3
  7679  0518  0021               	movlb	1	; select bank1
  7680  0519  009A               	movwf	26	;volatile
  7681                           
  7682                           ;main.c: 230: displayRefresh+=1;
  7683  051A  3001               	movlw	1
  7684  051B  0020               	movlb	0	; select bank0
  7685  051C  00D8               	movwf	??_main
  7686  051D  0858               	movf	??_main,w
  7687  051E  0021               	movlb	1	; select bank1
  7688  051F  07DB               	addwf	main@displayRefresh^(0+128),f
  7689                           
  7690                           ;main.c: 231: if(displayRefresh>80)
  7691  0520  3051               	movlw	81
  7692  0521  025B               	subwf	main@displayRefresh^(0+128),w
  7693  0522  1C03               	skipc
  7694  0523  2D29               	goto	l3431
  7695                           
  7696                           ;main.c: 232: {
  7697                           ;main.c: 233: LCDClear();
  7698  0524  3192  2243  3182   	fcall	_LCDClear
  7699                           
  7700                           ;main.c: 234: displayRefresh=0;
  7701  0527  0021               	movlb	1	; select bank1
  7702  0528  01DB               	clrf	main@displayRefresh^(0+128)
  7703  0529                     l3431:	
  7704                           
  7705                           ;main.c: 236: }
  7706                           ;main.c: 237: Battery_State_Machine(0);
  7707  0529  3000               	movlw	0
  7708  052A  3180  20A1  3182   	fcall	_Battery_State_Machine
  7709                           
  7710                           ;main.c: 238: Battery_State_Machine(1);
  7711  052D  3001               	movlw	1
  7712  052E  3180  20A1  3182   	fcall	_Battery_State_Machine
  7713                           
  7714                           ;main.c: 241: { gotoXY(0,0); LCDWriteString("In:");};
  7715  0531  01F5               	clrf	gotoXY@y
  7716  0532  3000               	movlw	0
  7717  0533  319F  27ED  3182   	fcall	_gotoXY
  7718  0536  3025               	movlw	low (STR_1| (0+32768))
  7719  0537  00FC               	movwf	LCDWriteString@characters
  7720  0538  3098               	movlw	high (STR_1| (0+32768))
  7721  0539  00FD               	movwf	LCDWriteString@characters+1
  7722  053A  3191  2132  3182   	fcall	_LCDWriteString
  7723                           
  7724                           ;main.c: 242: { gotoXY(26,0); LCDWriteString("Out:");};
  7725  053D  01F5               	clrf	gotoXY@y
  7726  053E  301A               	movlw	26
  7727  053F  319F  27ED  3182   	fcall	_gotoXY
  7728  0542  3020               	movlw	low (STR_2| (0+32768))
  7729  0543  00FC               	movwf	LCDWriteString@characters
  7730  0544  3098               	movlw	high (STR_2| (0+32768))
  7731  0545  00FD               	movwf	LCDWriteString@characters+1
  7732  0546  3191  2132  3182   	fcall	_LCDWriteString
  7733                           
  7734                           ;main.c: 243: { gotoXY(52,0); LCDWriteString("Ref:");};
  7735  0549  01F5               	clrf	gotoXY@y
  7736  054A  3034               	movlw	52
  7737  054B  319F  27ED  3182   	fcall	_gotoXY
  7738  054E  301B               	movlw	low (STR_3| (0+32768))
  7739  054F  00FC               	movwf	LCDWriteString@characters
  7740  0550  3098               	movlw	high (STR_3| (0+32768))
  7741  0551  00FD               	movwf	LCDWriteString@characters+1
  7742  0552  3191  2132  3182   	fcall	_LCDWriteString
  7743                           
  7744                           ;main.c: 245: { gotoXY(0,1); LCDWriteInt(voltage[2],4, 2, 0);};
  7745  0555  01F5               	clrf	gotoXY@y
  7746  0556  0AF5               	incf	gotoXY@y,f
  7747  0557  3000               	movlw	0
  7748  0558  319F  27ED  3182   	fcall	_gotoXY
  7749  055B  0021               	movlb	1	; select bank1
  7750  055C  082D               	movf	((_voltage+1)^(0+128)+4),w
  7751  055D  0020               	movlb	0	; select bank0
  7752  055E  00A1               	movwf	LCDWriteInt@value+1
  7753  055F  0021               	movlb	1	; select bank1
  7754  0560  082C               	movf	(_voltage^(0+128)+4),w
  7755  0561  0020               	movlb	0	; select bank0
  7756  0562  00A0               	movwf	LCDWriteInt@value
  7757  0563  3004               	movlw	4
  7758  0564  00D8               	movwf	??_main
  7759  0565  0858               	movf	??_main,w
  7760  0566  00A2               	movwf	LCDWriteInt@fieldLength
  7761  0567  3002               	movlw	2
  7762  0568  00D9               	movwf	??_main+1
  7763  0569  0859               	movf	??_main+1,w
  7764  056A  00A3               	movwf	LCDWriteInt@numPlaces
  7765  056B  01A4               	clrf	LCDWriteInt@sign
  7766  056C  3189  21AF  3182   	fcall	_LCDWriteInt
  7767                           
  7768                           ;main.c: 247: LCDWriteCharacter('V');
  7769  056F  3056               	movlw	86
  7770  0570  3194  24D8  3182   	fcall	_LCDWriteCharacter
  7771                           
  7772                           ;main.c: 249: { gotoXY(26,1); LCDWriteInt(voltage[0],4, 2, 0);};
  7773  0573  01F5               	clrf	gotoXY@y
  7774  0574  0AF5               	incf	gotoXY@y,f
  7775  0575  301A               	movlw	26
  7776  0576  319F  27ED  3182   	fcall	_gotoXY
  7777  0579  0021               	movlb	1	; select bank1
  7778  057A  0829               	movf	(_voltage+1)^(0+128),w
  7779  057B  0020               	movlb	0	; select bank0
  7780  057C  00A1               	movwf	LCDWriteInt@value+1
  7781  057D  0021               	movlb	1	; select bank1
  7782  057E  0828               	movf	_voltage^(0+128),w
  7783  057F  0020               	movlb	0	; select bank0
  7784  0580  00A0               	movwf	LCDWriteInt@value
  7785  0581  3004               	movlw	4
  7786  0582  00D8               	movwf	??_main
  7787  0583  0858               	movf	??_main,w
  7788  0584  00A2               	movwf	LCDWriteInt@fieldLength
  7789  0585  3002               	movlw	2
  7790  0586  00D9               	movwf	??_main+1
  7791  0587  0859               	movf	??_main+1,w
  7792  0588  00A3               	movwf	LCDWriteInt@numPlaces
  7793  0589  01A4               	clrf	LCDWriteInt@sign
  7794  058A  3189  21AF  3182   	fcall	_LCDWriteInt
  7795                           
  7796                           ;main.c: 251: LCDWriteCharacter('V');
  7797  058D  3056               	movlw	86
  7798  058E  3194  24D8  3182   	fcall	_LCDWriteCharacter
  7799                           
  7800                           ;main.c: 253: { gotoXY(52,1); LCDWriteInt(Vref[0],4, 2, 0);};
  7801  0591  01F5               	clrf	gotoXY@y
  7802  0592  0AF5               	incf	gotoXY@y,f
  7803  0593  3034               	movlw	52
  7804  0594  319F  27ED  3182   	fcall	_gotoXY
  7805  0597  0020               	movlb	0	; select bank0
  7806  0598  085B               	movf	_Vref+1,w
  7807  0599  00A1               	movwf	LCDWriteInt@value+1
  7808  059A  085A               	movf	_Vref,w
  7809  059B  00A0               	movwf	LCDWriteInt@value
  7810  059C  3004               	movlw	4
  7811  059D  00D8               	movwf	??_main
  7812  059E  0858               	movf	??_main,w
  7813  059F  00A2               	movwf	LCDWriteInt@fieldLength
  7814  05A0  3002               	movlw	2
  7815  05A1  00D9               	movwf	??_main+1
  7816  05A2  0859               	movf	??_main+1,w
  7817  05A3  00A3               	movwf	LCDWriteInt@numPlaces
  7818  05A4  01A4               	clrf	LCDWriteInt@sign
  7819  05A5  3189  21AF  3182   	fcall	_LCDWriteInt
  7820                           
  7821                           ;main.c: 254: LCDWriteCharacter('V');
  7822  05A8  3056               	movlw	86
  7823  05A9  3194  24D8  3182   	fcall	_LCDWriteCharacter
  7824                           
  7825                           ;main.c: 256: { gotoXY(80,1); LCDWriteInt(Imode[0],1, 0, 0);};
  7826  05AC  01F5               	clrf	gotoXY@y
  7827  05AD  0AF5               	incf	gotoXY@y,f
  7828  05AE  3050               	movlw	80
  7829  05AF  319F  27ED  3182   	fcall	_gotoXY
  7830  05B2  0020               	movlb	0	; select bank0
  7831  05B3  0862               	movf	_Imode,w
  7832  05B4  00A0               	movwf	LCDWriteInt@value
  7833  05B5  01A1               	clrf	LCDWriteInt@value+1
  7834  05B6  1BA0               	btfsc	LCDWriteInt@value,7
  7835  05B7  03A1               	decf	LCDWriteInt@value+1,f
  7836  05B8  01A2               	clrf	LCDWriteInt@fieldLength
  7837  05B9  0AA2               	incf	LCDWriteInt@fieldLength,f
  7838  05BA  01A3               	clrf	LCDWriteInt@numPlaces
  7839  05BB  01A4               	clrf	LCDWriteInt@sign
  7840  05BC  3189  21AF  3182   	fcall	_LCDWriteInt
  7841                           
  7842                           ;main.c: 258: { gotoXY(0,2); LCDWriteInt(current[2],3, 1, 0);};
  7843  05BF  3002               	movlw	2
  7844  05C0  0020               	movlb	0	; select bank0
  7845  05C1  00D8               	movwf	??_main
  7846  05C2  0858               	movf	??_main,w
  7847  05C3  00F5               	movwf	gotoXY@y
  7848  05C4  3000               	movlw	0
  7849  05C5  319F  27ED  3182   	fcall	_gotoXY
  7850  05C8  0021               	movlb	1	; select bank1
  7851  05C9  0835               	movf	((_current+1)^(0+128)+4),w
  7852  05CA  0020               	movlb	0	; select bank0
  7853  05CB  00A1               	movwf	LCDWriteInt@value+1
  7854  05CC  0021               	movlb	1	; select bank1
  7855  05CD  0834               	movf	(_current^(0+128)+4),w
  7856  05CE  0020               	movlb	0	; select bank0
  7857  05CF  00A0               	movwf	LCDWriteInt@value
  7858  05D0  3003               	movlw	3
  7859  05D1  00D8               	movwf	??_main
  7860  05D2  0858               	movf	??_main,w
  7861  05D3  00A2               	movwf	LCDWriteInt@fieldLength
  7862  05D4  01A3               	clrf	LCDWriteInt@numPlaces
  7863  05D5  0AA3               	incf	LCDWriteInt@numPlaces,f
  7864  05D6  01A4               	clrf	LCDWriteInt@sign
  7865  05D7  3189  21AF  3182   	fcall	_LCDWriteInt
  7866                           
  7867                           ;main.c: 259: LCDWriteCharacter('A');
  7868  05DA  3041               	movlw	65
  7869  05DB  3194  24D8  3182   	fcall	_LCDWriteCharacter
  7870                           
  7871                           ;main.c: 261: { gotoXY(26,2); LCDWriteInt(current[0],3, 1, 0);};
  7872  05DE  3002               	movlw	2
  7873  05DF  0020               	movlb	0	; select bank0
  7874  05E0  00D8               	movwf	??_main
  7875  05E1  0858               	movf	??_main,w
  7876  05E2  00F5               	movwf	gotoXY@y
  7877  05E3  301A               	movlw	26
  7878  05E4  319F  27ED  3182   	fcall	_gotoXY
  7879  05E7  0021               	movlb	1	; select bank1
  7880  05E8  0831               	movf	(_current+1)^(0+128),w
  7881  05E9  0020               	movlb	0	; select bank0
  7882  05EA  00A1               	movwf	LCDWriteInt@value+1
  7883  05EB  0021               	movlb	1	; select bank1
  7884  05EC  0830               	movf	_current^(0+128),w
  7885  05ED  0020               	movlb	0	; select bank0
  7886  05EE  00A0               	movwf	LCDWriteInt@value
  7887  05EF  3003               	movlw	3
  7888  05F0  00D8               	movwf	??_main
  7889  05F1  0858               	movf	??_main,w
  7890  05F2  00A2               	movwf	LCDWriteInt@fieldLength
  7891  05F3  01A3               	clrf	LCDWriteInt@numPlaces
  7892  05F4  0AA3               	incf	LCDWriteInt@numPlaces,f
  7893  05F5  01A4               	clrf	LCDWriteInt@sign
  7894  05F6  3189  21AF  3182   	fcall	_LCDWriteInt
  7895                           
  7896                           ;main.c: 262: LCDWriteCharacter('A');
  7897  05F9  3041               	movlw	65
  7898  05FA  3194  24D8  3182   	fcall	_LCDWriteCharacter
  7899                           
  7900                           ;main.c: 264: { gotoXY(52,2); LCDWriteInt(Iref[0],3, 1, 0);};
  7901  05FD  3002               	movlw	2
  7902  05FE  0020               	movlb	0	; select bank0
  7903  05FF  00D8               	movwf	??_main
  7904  0600  0858               	movf	??_main,w
  7905  0601  00F5               	movwf	gotoXY@y
  7906  0602  3034               	movlw	52
  7907  0603  319F  27ED  3182   	fcall	_gotoXY
  7908  0606  0021               	movlb	1	; select bank1
  7909  0607  0842               	movf	(_Iref+1)^(0+128),w
  7910  0608  0020               	movlb	0	; select bank0
  7911  0609  00A1               	movwf	LCDWriteInt@value+1
  7912  060A  0021               	movlb	1	; select bank1
  7913  060B  0841               	movf	_Iref^(0+128),w
  7914  060C  0020               	movlb	0	; select bank0
  7915  060D  00A0               	movwf	LCDWriteInt@value
  7916  060E  3003               	movlw	3
  7917  060F  00D8               	movwf	??_main
  7918  0610  0858               	movf	??_main,w
  7919  0611  00A2               	movwf	LCDWriteInt@fieldLength
  7920  0612  01A3               	clrf	LCDWriteInt@numPlaces
  7921  0613  0AA3               	incf	LCDWriteInt@numPlaces,f
  7922  0614  01A4               	clrf	LCDWriteInt@sign
  7923  0615  3189  21AF  3182   	fcall	_LCDWriteInt
  7924                           
  7925                           ;main.c: 265: LCDWriteCharacter('A');
  7926  0618  3041               	movlw	65
  7927  0619  3194  24D8  3182   	fcall	_LCDWriteCharacter
  7928                           
  7929                           ;main.c: 267: { gotoXY(80,2); LCDWriteInt(batteryState[0],1, 0, 0);};
  7930  061C  3002               	movlw	2
  7931  061D  0020               	movlb	0	; select bank0
  7932  061E  00D8               	movwf	??_main
  7933  061F  0858               	movf	??_main,w
  7934  0620  00F5               	movwf	gotoXY@y
  7935  0621  3050               	movlw	80
  7936  0622  319F  27ED  3182   	fcall	_gotoXY
  7937  0625  0020               	movlb	0	; select bank0
  7938  0626  0864               	movf	_batteryState,w
  7939  0627  00D8               	movwf	??_main
  7940  0628  01D9               	clrf	??_main+1
  7941  0629  0858               	movf	??_main,w
  7942  062A  00A0               	movwf	LCDWriteInt@value
  7943  062B  0859               	movf	??_main+1,w
  7944  062C  00A1               	movwf	LCDWriteInt@value+1
  7945  062D  01A2               	clrf	LCDWriteInt@fieldLength
  7946  062E  0AA2               	incf	LCDWriteInt@fieldLength,f
  7947  062F  01A3               	clrf	LCDWriteInt@numPlaces
  7948  0630  01A4               	clrf	LCDWriteInt@sign
  7949  0631  3189  21AF  3182   	fcall	_LCDWriteInt
  7950                           
  7951                           ;main.c: 269: { gotoXY(0,3); LCDWriteInt(voltage[3],4, 2, 0);};
  7952  0634  3003               	movlw	3
  7953  0635  0020               	movlb	0	; select bank0
  7954  0636  00D8               	movwf	??_main
  7955  0637  0858               	movf	??_main,w
  7956  0638  00F5               	movwf	gotoXY@y
  7957  0639  3000               	movlw	0
  7958  063A  319F  27ED  3182   	fcall	_gotoXY
  7959  063D  0021               	movlb	1	; select bank1
  7960  063E  082F               	movf	((_voltage+1)^(0+128)+6),w
  7961  063F  0020               	movlb	0	; select bank0
  7962  0640  00A1               	movwf	LCDWriteInt@value+1
  7963  0641  0021               	movlb	1	; select bank1
  7964  0642  082E               	movf	(_voltage^(0+128)+6),w
  7965  0643  0020               	movlb	0	; select bank0
  7966  0644  00A0               	movwf	LCDWriteInt@value
  7967  0645  3004               	movlw	4
  7968  0646  00D8               	movwf	??_main
  7969  0647  0858               	movf	??_main,w
  7970  0648  00A2               	movwf	LCDWriteInt@fieldLength
  7971  0649  3002               	movlw	2
  7972  064A  00D9               	movwf	??_main+1
  7973  064B  0859               	movf	??_main+1,w
  7974  064C  00A3               	movwf	LCDWriteInt@numPlaces
  7975  064D  01A4               	clrf	LCDWriteInt@sign
  7976  064E  3189  21AF  3182   	fcall	_LCDWriteInt
  7977                           
  7978                           ;main.c: 271: LCDWriteCharacter('V');
  7979  0651  3056               	movlw	86
  7980  0652  3194  24D8  3182   	fcall	_LCDWriteCharacter
  7981                           
  7982                           ;main.c: 273: { gotoXY(26,3); LCDWriteInt(voltage[1],4, 2, 0);};
  7983  0655  3003               	movlw	3
  7984  0656  0020               	movlb	0	; select bank0
  7985  0657  00D8               	movwf	??_main
  7986  0658  0858               	movf	??_main,w
  7987  0659  00F5               	movwf	gotoXY@y
  7988  065A  301A               	movlw	26
  7989  065B  319F  27ED  3182   	fcall	_gotoXY
  7990  065E  0021               	movlb	1	; select bank1
  7991  065F  082B               	movf	((_voltage+1)^(0+128)+2),w
  7992  0660  0020               	movlb	0	; select bank0
  7993  0661  00A1               	movwf	LCDWriteInt@value+1
  7994  0662  0021               	movlb	1	; select bank1
  7995  0663  082A               	movf	(_voltage^(0+128)+2),w
  7996  0664  0020               	movlb	0	; select bank0
  7997  0665  00A0               	movwf	LCDWriteInt@value
  7998  0666  3004               	movlw	4
  7999  0667  00D8               	movwf	??_main
  8000  0668  0858               	movf	??_main,w
  8001  0669  00A2               	movwf	LCDWriteInt@fieldLength
  8002  066A  3002               	movlw	2
  8003  066B  00D9               	movwf	??_main+1
  8004  066C  0859               	movf	??_main+1,w
  8005  066D  00A3               	movwf	LCDWriteInt@numPlaces
  8006  066E  01A4               	clrf	LCDWriteInt@sign
  8007  066F  3189  21AF  3182   	fcall	_LCDWriteInt
  8008                           
  8009                           ;main.c: 275: LCDWriteCharacter('V');
  8010  0672  3056               	movlw	86
  8011  0673  3194  24D8  3182   	fcall	_LCDWriteCharacter
  8012                           
  8013                           ;main.c: 277: { gotoXY(52,3); LCDWriteInt(Vref[1],4, 2, 0);};
  8014  0676  3003               	movlw	3
  8015  0677  0020               	movlb	0	; select bank0
  8016  0678  00D8               	movwf	??_main
  8017  0679  0858               	movf	??_main,w
  8018  067A  00F5               	movwf	gotoXY@y
  8019  067B  3034               	movlw	52
  8020  067C  319F  27ED  3182   	fcall	_gotoXY
  8021  067F  0020               	movlb	0	; select bank0
  8022  0680  085D               	movf	_Vref+3,w
  8023  0681  00A1               	movwf	LCDWriteInt@value+1
  8024  0682  085C               	movf	_Vref+2,w
  8025  0683  00A0               	movwf	LCDWriteInt@value
  8026  0684  3004               	movlw	4
  8027  0685  00D8               	movwf	??_main
  8028  0686  0858               	movf	??_main,w
  8029  0687  00A2               	movwf	LCDWriteInt@fieldLength
  8030  0688  3002               	movlw	2
  8031  0689  00D9               	movwf	??_main+1
  8032  068A  0859               	movf	??_main+1,w
  8033  068B  00A3               	movwf	LCDWriteInt@numPlaces
  8034  068C  01A4               	clrf	LCDWriteInt@sign
  8035  068D  3189  21AF  3182   	fcall	_LCDWriteInt
  8036                           
  8037                           ;main.c: 278: LCDWriteCharacter('V');
  8038  0690  3056               	movlw	86
  8039  0691  3194  24D8  3182   	fcall	_LCDWriteCharacter
  8040                           
  8041                           ;main.c: 280: { gotoXY(80,3); LCDWriteInt(Imode[1],1, 0, 0);};
  8042  0694  3003               	movlw	3
  8043  0695  0020               	movlb	0	; select bank0
  8044  0696  00D8               	movwf	??_main
  8045  0697  0858               	movf	??_main,w
  8046  0698  00F5               	movwf	gotoXY@y
  8047  0699  3050               	movlw	80
  8048  069A  319F  27ED  3182   	fcall	_gotoXY
  8049  069D  0020               	movlb	0	; select bank0
  8050  069E  0863               	movf	_Imode+1,w
  8051  069F  00A0               	movwf	LCDWriteInt@value
  8052  06A0  01A1               	clrf	LCDWriteInt@value+1
  8053  06A1  1BA0               	btfsc	LCDWriteInt@value,7
  8054  06A2  03A1               	decf	LCDWriteInt@value+1,f
  8055  06A3  01A2               	clrf	LCDWriteInt@fieldLength
  8056  06A4  0AA2               	incf	LCDWriteInt@fieldLength,f
  8057  06A5  01A3               	clrf	LCDWriteInt@numPlaces
  8058  06A6  01A4               	clrf	LCDWriteInt@sign
  8059  06A7  3189  21AF  3182   	fcall	_LCDWriteInt
  8060                           
  8061                           ;main.c: 289: { gotoXY(0,4); LCDWriteInt(current[3],3, 1, 0);};
  8062  06AA  3004               	movlw	4
  8063  06AB  0020               	movlb	0	; select bank0
  8064  06AC  00D8               	movwf	??_main
  8065  06AD  0858               	movf	??_main,w
  8066  06AE  00F5               	movwf	gotoXY@y
  8067  06AF  3000               	movlw	0
  8068  06B0  319F  27ED  3182   	fcall	_gotoXY
  8069  06B3  0021               	movlb	1	; select bank1
  8070  06B4  0837               	movf	((_current+1)^(0+128)+6),w
  8071  06B5  0020               	movlb	0	; select bank0
  8072  06B6  00A1               	movwf	LCDWriteInt@value+1
  8073  06B7  0021               	movlb	1	; select bank1
  8074  06B8  0836               	movf	(_current^(0+128)+6),w
  8075  06B9  0020               	movlb	0	; select bank0
  8076  06BA  00A0               	movwf	LCDWriteInt@value
  8077  06BB  3003               	movlw	3
  8078  06BC  00D8               	movwf	??_main
  8079  06BD  0858               	movf	??_main,w
  8080  06BE  00A2               	movwf	LCDWriteInt@fieldLength
  8081  06BF  01A3               	clrf	LCDWriteInt@numPlaces
  8082  06C0  0AA3               	incf	LCDWriteInt@numPlaces,f
  8083  06C1  01A4               	clrf	LCDWriteInt@sign
  8084  06C2  3189  21AF  3182   	fcall	_LCDWriteInt
  8085                           
  8086                           ;main.c: 290: LCDWriteCharacter('A');
  8087  06C5  3041               	movlw	65
  8088  06C6  3194  24D8  3182   	fcall	_LCDWriteCharacter
  8089                           
  8090                           ;main.c: 292: { gotoXY(26,4); LCDWriteInt(current[1],3, 1, 0);};
  8091  06C9  3004               	movlw	4
  8092  06CA  0020               	movlb	0	; select bank0
  8093  06CB  00D8               	movwf	??_main
  8094  06CC  0858               	movf	??_main,w
  8095  06CD  00F5               	movwf	gotoXY@y
  8096  06CE  301A               	movlw	26
  8097  06CF  319F  27ED  3182   	fcall	_gotoXY
  8098  06D2  0021               	movlb	1	; select bank1
  8099  06D3  0833               	movf	((_current+1)^(0+128)+2),w
  8100  06D4  0020               	movlb	0	; select bank0
  8101  06D5  00A1               	movwf	LCDWriteInt@value+1
  8102  06D6  0021               	movlb	1	; select bank1
  8103  06D7  0832               	movf	(_current^(0+128)+2),w
  8104  06D8  0020               	movlb	0	; select bank0
  8105  06D9  00A0               	movwf	LCDWriteInt@value
  8106  06DA  3003               	movlw	3
  8107  06DB  00D8               	movwf	??_main
  8108  06DC  0858               	movf	??_main,w
  8109  06DD  00A2               	movwf	LCDWriteInt@fieldLength
  8110  06DE  01A3               	clrf	LCDWriteInt@numPlaces
  8111  06DF  0AA3               	incf	LCDWriteInt@numPlaces,f
  8112  06E0  01A4               	clrf	LCDWriteInt@sign
  8113  06E1  3189  21AF  3182   	fcall	_LCDWriteInt
  8114                           
  8115                           ;main.c: 293: LCDWriteCharacter('A');
  8116  06E4  3041               	movlw	65
  8117  06E5  3194  24D8  3182   	fcall	_LCDWriteCharacter
  8118                           
  8119                           ;main.c: 295: { gotoXY(52,4); LCDWriteInt(Iref[1],3, 1, 0);};
  8120  06E8  3004               	movlw	4
  8121  06E9  0020               	movlb	0	; select bank0
  8122  06EA  00D8               	movwf	??_main
  8123  06EB  0858               	movf	??_main,w
  8124  06EC  00F5               	movwf	gotoXY@y
  8125  06ED  3034               	movlw	52
  8126  06EE  319F  27ED  3182   	fcall	_gotoXY
  8127  06F1  0021               	movlb	1	; select bank1
  8128  06F2  0844               	movf	((_Iref+1)^(0+128)+2),w
  8129  06F3  0020               	movlb	0	; select bank0
  8130  06F4  00A1               	movwf	LCDWriteInt@value+1
  8131  06F5  0021               	movlb	1	; select bank1
  8132  06F6  0843               	movf	(_Iref^(0+128)+2),w
  8133  06F7  0020               	movlb	0	; select bank0
  8134  06F8  00A0               	movwf	LCDWriteInt@value
  8135  06F9  3003               	movlw	3
  8136  06FA  00D8               	movwf	??_main
  8137  06FB  0858               	movf	??_main,w
  8138  06FC  00A2               	movwf	LCDWriteInt@fieldLength
  8139  06FD  01A3               	clrf	LCDWriteInt@numPlaces
  8140  06FE  0AA3               	incf	LCDWriteInt@numPlaces,f
  8141  06FF  01A4               	clrf	LCDWriteInt@sign
  8142  0700  3189  21AF  3182   	fcall	_LCDWriteInt
  8143                           
  8144                           ;main.c: 296: LCDWriteCharacter('A');
  8145  0703  3041               	movlw	65
  8146  0704  3194  24D8  3182   	fcall	_LCDWriteCharacter
  8147                           
  8148                           ;main.c: 298: { gotoXY(80,4); LCDWriteInt(batteryState[1],1, 0, 0);};
  8149  0707  3004               	movlw	4
  8150  0708  0020               	movlb	0	; select bank0
  8151  0709  00D8               	movwf	??_main
  8152  070A  0858               	movf	??_main,w
  8153  070B  00F5               	movwf	gotoXY@y
  8154  070C  3050               	movlw	80
  8155  070D  319F  27ED  3182   	fcall	_gotoXY
  8156  0710  0020               	movlb	0	; select bank0
  8157  0711  0865               	movf	_batteryState+1,w
  8158  0712  00D8               	movwf	??_main
  8159  0713  01D9               	clrf	??_main+1
  8160  0714  0858               	movf	??_main,w
  8161  0715  00A0               	movwf	LCDWriteInt@value
  8162  0716  0859               	movf	??_main+1,w
  8163  0717  00A1               	movwf	LCDWriteInt@value+1
  8164  0718  01A2               	clrf	LCDWriteInt@fieldLength
  8165  0719  0AA2               	incf	LCDWriteInt@fieldLength,f
  8166  071A  01A3               	clrf	LCDWriteInt@numPlaces
  8167  071B  01A4               	clrf	LCDWriteInt@sign
  8168  071C  3189  21AF  3182   	fcall	_LCDWriteInt
  8169                           
  8170                           ;main.c: 302: { gotoXY(0,5); LCDWriteInt(dutyCycle6,4, 0, 0);};
  8171  071F  3005               	movlw	5
  8172  0720  0020               	movlb	0	; select bank0
  8173  0721  00D8               	movwf	??_main
  8174  0722  0858               	movf	??_main,w
  8175  0723  00F5               	movwf	gotoXY@y
  8176  0724  3000               	movlw	0
  8177  0725  319F  27ED  3182   	fcall	_gotoXY
  8178  0728  0021               	movlb	1	; select bank1
  8179  0729  086A               	movf	(main@dutyCycle6+1)^(0+128),w
  8180  072A  0020               	movlb	0	; select bank0
  8181  072B  00A1               	movwf	LCDWriteInt@value+1
  8182  072C  0021               	movlb	1	; select bank1
  8183  072D  0869               	movf	main@dutyCycle6^(0+128),w
  8184  072E  0020               	movlb	0	; select bank0
  8185  072F  00A0               	movwf	LCDWriteInt@value
  8186  0730  3004               	movlw	4
  8187  0731  00D8               	movwf	??_main
  8188  0732  0858               	movf	??_main,w
  8189  0733  00A2               	movwf	LCDWriteInt@fieldLength
  8190  0734  01A3               	clrf	LCDWriteInt@numPlaces
  8191  0735  01A4               	clrf	LCDWriteInt@sign
  8192  0736  3189  21AF  3182   	fcall	_LCDWriteInt
  8193                           
  8194                           ;main.c: 303: { gotoXY(18,5); LCDWriteInt(VHoldMode[0],1, 0, 0);};
  8195  0739  3005               	movlw	5
  8196  073A  0020               	movlb	0	; select bank0
  8197  073B  00D8               	movwf	??_main
  8198  073C  0858               	movf	??_main,w
  8199  073D  00F5               	movwf	gotoXY@y
  8200  073E  3012               	movlw	18
  8201  073F  319F  27ED  3182   	fcall	_gotoXY
  8202  0742  0020               	movlb	0	; select bank0
  8203  0743  0860               	movf	_VHoldMode,w
  8204  0744  00A0               	movwf	LCDWriteInt@value
  8205  0745  01A1               	clrf	LCDWriteInt@value+1
  8206  0746  1BA0               	btfsc	LCDWriteInt@value,7
  8207  0747  03A1               	decf	LCDWriteInt@value+1,f
  8208  0748  01A2               	clrf	LCDWriteInt@fieldLength
  8209  0749  0AA2               	incf	LCDWriteInt@fieldLength,f
  8210  074A  01A3               	clrf	LCDWriteInt@numPlaces
  8211  074B  01A4               	clrf	LCDWriteInt@sign
  8212  074C  3189  21AF  3182   	fcall	_LCDWriteInt
  8213                           
  8214                           ;main.c: 304: LCDWriteCharacter(' ');
  8215  074F  3020               	movlw	32
  8216  0750  3194  24D8  3182   	fcall	_LCDWriteCharacter
  8217                           
  8218                           ;main.c: 305: { gotoXY(28,5); LCDWriteInt(dutyCycle7,4, 0, 0);};
  8219  0753  3005               	movlw	5
  8220  0754  0020               	movlb	0	; select bank0
  8221  0755  00D8               	movwf	??_main
  8222  0756  0858               	movf	??_main,w
  8223  0757  00F5               	movwf	gotoXY@y
  8224  0758  301C               	movlw	28
  8225  0759  319F  27ED  3182   	fcall	_gotoXY
  8226  075C  0021               	movlb	1	; select bank1
  8227  075D  086C               	movf	(main@dutyCycle7+1)^(0+128),w
  8228  075E  0020               	movlb	0	; select bank0
  8229  075F  00A1               	movwf	LCDWriteInt@value+1
  8230  0760  0021               	movlb	1	; select bank1
  8231  0761  086B               	movf	main@dutyCycle7^(0+128),w
  8232  0762  0020               	movlb	0	; select bank0
  8233  0763  00A0               	movwf	LCDWriteInt@value
  8234  0764  3004               	movlw	4
  8235  0765  00D8               	movwf	??_main
  8236  0766  0858               	movf	??_main,w
  8237  0767  00A2               	movwf	LCDWriteInt@fieldLength
  8238  0768  01A3               	clrf	LCDWriteInt@numPlaces
  8239  0769  01A4               	clrf	LCDWriteInt@sign
  8240  076A  3189  21AF  3182   	fcall	_LCDWriteInt
  8241                           
  8242                           ;main.c: 306: { gotoXY(46,5); LCDWriteInt(VHoldMode[1],1, 0, 0);};
  8243  076D  3005               	movlw	5
  8244  076E  0020               	movlb	0	; select bank0
  8245  076F  00D8               	movwf	??_main
  8246  0770  0858               	movf	??_main,w
  8247  0771  00F5               	movwf	gotoXY@y
  8248  0772  302E               	movlw	46
  8249  0773  319F  27ED  3182   	fcall	_gotoXY
  8250  0776  0020               	movlb	0	; select bank0
  8251  0777  0861               	movf	_VHoldMode+1,w
  8252  0778  00A0               	movwf	LCDWriteInt@value
  8253  0779  01A1               	clrf	LCDWriteInt@value+1
  8254  077A  1BA0               	btfsc	LCDWriteInt@value,7
  8255  077B  03A1               	decf	LCDWriteInt@value+1,f
  8256  077C  01A2               	clrf	LCDWriteInt@fieldLength
  8257  077D  0AA2               	incf	LCDWriteInt@fieldLength,f
  8258  077E  01A3               	clrf	LCDWriteInt@numPlaces
  8259  077F  01A4               	clrf	LCDWriteInt@sign
  8260  0780  3189  21AF  3182   	fcall	_LCDWriteInt
  8261                           
  8262                           ;main.c: 307: LCDWriteCharacter(' ');
  8263  0783  3020               	movlw	32
  8264  0784  3194  24D8  3182   	fcall	_LCDWriteCharacter
  8265                           
  8266                           ;main.c: 308: { gotoXY(56,5); LCDWriteInt(batteryTemp,3, 1, 0);};
  8267  0787  3005               	movlw	5
  8268  0788  0020               	movlb	0	; select bank0
  8269  0789  00D8               	movwf	??_main
  8270  078A  0858               	movf	??_main,w
  8271  078B  00F5               	movwf	gotoXY@y
  8272  078C  3038               	movlw	56
  8273  078D  319F  27ED  3182   	fcall	_gotoXY
  8274  0790  0020               	movlb	0	; select bank0
  8275  0791  086E               	movf	_batteryTemp+1,w
  8276  0792  00A1               	movwf	LCDWriteInt@value+1
  8277  0793  086D               	movf	_batteryTemp,w
  8278  0794  00A0               	movwf	LCDWriteInt@value
  8279  0795  3003               	movlw	3
  8280  0796  00D8               	movwf	??_main
  8281  0797  0858               	movf	??_main,w
  8282  0798  00A2               	movwf	LCDWriteInt@fieldLength
  8283  0799  01A3               	clrf	LCDWriteInt@numPlaces
  8284  079A  0AA3               	incf	LCDWriteInt@numPlaces,f
  8285  079B  01A4               	clrf	LCDWriteInt@sign
  8286  079C  3189  21AF  3182   	fcall	_LCDWriteInt
  8287                           
  8288                           ;main.c: 309: LCDWriteCharacter(123);
  8289  079F  307B               	movlw	123
  8290  07A0  3194  24D8  3182   	fcall	_LCDWriteCharacter
  8291                           
  8292                           ;main.c: 310: LCDWriteCharacter('C');
  8293  07A3  3043               	movlw	67
  8294  07A4  3194  24D8  3182   	fcall	_LCDWriteCharacter
  8295                           
  8296                           ;main.c: 380: if(batteryState[0] > FINISHED)
  8297  07A7  3003               	movlw	3
  8298  07A8  0020               	movlb	0	; select bank0
  8299  07A9  0264               	subwf	_batteryState,w
  8300  07AA  1C03               	skipc
  8301  07AB  2FB0               	goto	l3567
  8302                           
  8303                           ;main.c: 381: {
  8304                           ;main.c: 382: cc_cv_mode(0);
  8305  07AC  3000               	movlw	0
  8306  07AD  318E  26C1  3182   	fcall	_cc_cv_mode
  8307  07B0                     l3567:	
  8308                           
  8309                           ;main.c: 383: }
  8310                           ;main.c: 384: if(batteryState[1] > FINISHED)
  8311  07B0  3003               	movlw	3
  8312  07B1  0020               	movlb	0	; select bank0
  8313  07B2  0265               	subwf	_batteryState+1,w
  8314  07B3  1C03               	skipc
  8315  07B4  2FB9               	goto	l3571
  8316                           
  8317                           ;main.c: 385: {
  8318                           ;main.c: 386: cc_cv_mode(1);
  8319  07B5  3001               	movlw	1
  8320  07B6  318E  26C1  3182   	fcall	_cc_cv_mode
  8321  07B9                     l3571:	
  8322                           
  8323                           ;main.c: 387: }
  8324                           ;main.c: 388: slowLoop=0;
  8325  07B9  0021               	movlb	1	; select bank1
  8326  07BA  01DD               	clrf	main@slowLoop^(0+128)
  8327  07BB  2A4D               	goto	l3269
  8328  07BC                     __end_of_main:	
  8329                           
  8330                           	psect	text1
  8331  0A68                     __ptext1:	
  8332 ;; *************** function _tempCalc *****************
  8333 ;; Defined at:
  8334 ;;		line 4 in file "tempCalc.c"
  8335 ;; Parameters:    Size  Location     Type
  8336 ;;  analogValue     2   45[BANK0 ] int 
  8337 ;; Auto vars:     Size  Location     Type
  8338 ;;  steinhart       3   53[BANK0 ] float 
  8339 ;;  R               3   47[BANK0 ] float 
  8340 ;; Return value:  Size  Location     Type
  8341 ;;                  2   45[BANK0 ] int 
  8342 ;; Registers used:
  8343 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8344 ;; Tracked objects:
  8345 ;;		On entry : 0/0
  8346 ;;		On exit  : 0/0
  8347 ;;		Unchanged: 0/0
  8348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8349 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8350 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8351 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8352 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8353 ;;Total ram usage:       11 bytes
  8354 ;; Hardware stack levels used:    1
  8355 ;; Hardware stack levels required when called:    4
  8356 ;; This function calls:
  8357 ;;		___awtoft
  8358 ;;		___ftadd
  8359 ;;		___ftdiv
  8360 ;;		___ftmul
  8361 ;;		___ftsub
  8362 ;;		___fttol
  8363 ;;		_log
  8364 ;; This function is called by:
  8365 ;;		_main
  8366 ;; This function uses a non-reentrant model
  8367 ;;
  8368                           
  8369                           
  8370                           ;psect for function _tempCalc
  8371  0A68                     _tempCalc:	
  8372                           
  8373                           ;tempCalc.c: 6: float R, steinhart;
  8374                           ;tempCalc.c: 7: R=10030/(1023/(float)analogValue-1);
  8375                           
  8376                           ;incstack = 0
  8377                           ; Regs used in _tempCalc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8378  0A68  3000               	movlw	0
  8379  0A69  0020               	movlb	0	; select bank0
  8380  0A6A  00B0               	movwf	___ftadd@f1
  8381  0A6B  3080               	movlw	128
  8382  0A6C  00B1               	movwf	___ftadd@f1+1
  8383  0A6D  30BF               	movlw	191
  8384  0A6E  00B2               	movwf	___ftadd@f1+2
  8385  0A6F  084E               	movf	tempCalc@analogValue+1,w
  8386  0A70  00F9               	movwf	___awtoft@c+1
  8387  0A71  084D               	movf	tempCalc@analogValue,w
  8388  0A72  00F8               	movwf	___awtoft@c
  8389  0A73  3191  21FE  318A   	fcall	___awtoft
  8390  0A76  0878               	movf	?___awtoft,w
  8391  0A77  0020               	movlb	0	; select bank0
  8392  0A78  00A0               	movwf	___ftdiv@f2
  8393  0A79  0879               	movf	?___awtoft+1,w
  8394  0A7A  00A1               	movwf	___ftdiv@f2+1
  8395  0A7B  087A               	movf	?___awtoft+2,w
  8396  0A7C  00A2               	movwf	___ftdiv@f2+2
  8397  0A7D  30C0               	movlw	192
  8398  0A7E  00A3               	movwf	___ftdiv@f1
  8399  0A7F  307F               	movlw	127
  8400  0A80  00A4               	movwf	___ftdiv@f1+1
  8401  0A81  3044               	movlw	68
  8402  0A82  00A5               	movwf	___ftdiv@f1+2
  8403  0A83  3197  2757  318A   	fcall	___ftdiv
  8404  0A86  0020               	movlb	0	; select bank0
  8405  0A87  0820               	movf	?___ftdiv,w
  8406  0A88  00B3               	movwf	___ftadd@f2
  8407  0A89  0821               	movf	?___ftdiv+1,w
  8408  0A8A  00B4               	movwf	___ftadd@f2+1
  8409  0A8B  0822               	movf	?___ftdiv+2,w
  8410  0A8C  00B5               	movwf	___ftadd@f2+2
  8411  0A8D  318B  234F  318A   	fcall	___ftadd
  8412  0A90  0020               	movlb	0	; select bank0
  8413  0A91  0830               	movf	?___ftadd,w
  8414  0A92  00D2               	movwf	_tempCalc$1311
  8415  0A93  0831               	movf	?___ftadd+1,w
  8416  0A94  00D3               	movwf	_tempCalc$1311+1
  8417  0A95  0832               	movf	?___ftadd+2,w
  8418  0A96  00D4               	movwf	_tempCalc$1311+2
  8419                           
  8420                           ;tempCalc.c: 6: float R, steinhart;
  8421                           ;tempCalc.c: 7: R=10030/(1023/(float)analogValue-1);
  8422  0A97  0852               	movf	_tempCalc$1311,w
  8423  0A98  00A0               	movwf	___ftdiv@f2
  8424  0A99  0853               	movf	_tempCalc$1311+1,w
  8425  0A9A  00A1               	movwf	___ftdiv@f2+1
  8426  0A9B  0854               	movf	_tempCalc$1311+2,w
  8427  0A9C  00A2               	movwf	___ftdiv@f2+2
  8428  0A9D  30B8               	movlw	184
  8429  0A9E  00A3               	movwf	___ftdiv@f1
  8430  0A9F  301C               	movlw	28
  8431  0AA0  00A4               	movwf	___ftdiv@f1+1
  8432  0AA1  3046               	movlw	70
  8433  0AA2  00A5               	movwf	___ftdiv@f1+2
  8434  0AA3  3197  2757  318A   	fcall	___ftdiv
  8435  0AA6  0020               	movlb	0	; select bank0
  8436  0AA7  0820               	movf	?___ftdiv,w
  8437  0AA8  00CF               	movwf	tempCalc@R
  8438  0AA9  0821               	movf	?___ftdiv+1,w
  8439  0AAA  00D0               	movwf	tempCalc@R+1
  8440  0AAB  0822               	movf	?___ftdiv+2,w
  8441  0AAC  00D1               	movwf	tempCalc@R+2
  8442                           
  8443                           ;tempCalc.c: 8: steinhart=R/10010;
  8444  0AAD  3068               	movlw	104
  8445  0AAE  00A0               	movwf	___ftdiv@f2
  8446  0AAF  301C               	movlw	28
  8447  0AB0  00A1               	movwf	___ftdiv@f2+1
  8448  0AB1  3046               	movlw	70
  8449  0AB2  00A2               	movwf	___ftdiv@f2+2
  8450  0AB3  084F               	movf	tempCalc@R,w
  8451  0AB4  00A3               	movwf	___ftdiv@f1
  8452  0AB5  0850               	movf	tempCalc@R+1,w
  8453  0AB6  00A4               	movwf	___ftdiv@f1+1
  8454  0AB7  0851               	movf	tempCalc@R+2,w
  8455  0AB8  00A5               	movwf	___ftdiv@f1+2
  8456  0AB9  3197  2757  318A   	fcall	___ftdiv
  8457  0ABC  0020               	movlb	0	; select bank0
  8458  0ABD  0820               	movf	?___ftdiv,w
  8459  0ABE  00D5               	movwf	tempCalc@steinhart
  8460  0ABF  0821               	movf	?___ftdiv+1,w
  8461  0AC0  00D6               	movwf	tempCalc@steinhart+1
  8462  0AC1  0822               	movf	?___ftdiv+2,w
  8463  0AC2  00D7               	movwf	tempCalc@steinhart+2
  8464                           
  8465                           ;tempCalc.c: 9: steinhart=log(steinhart);
  8466  0AC3  0855               	movf	tempCalc@steinhart,w
  8467  0AC4  00C7               	movwf	log@x
  8468  0AC5  0856               	movf	tempCalc@steinhart+1,w
  8469  0AC6  00C8               	movwf	log@x+1
  8470  0AC7  0857               	movf	tempCalc@steinhart+2,w
  8471  0AC8  00C9               	movwf	log@x+2
  8472  0AC9  3188  204B  318A   	fcall	_log
  8473  0ACC  0020               	movlb	0	; select bank0
  8474  0ACD  0847               	movf	?_log,w
  8475  0ACE  00D5               	movwf	tempCalc@steinhart
  8476  0ACF  0848               	movf	?_log+1,w
  8477  0AD0  00D6               	movwf	tempCalc@steinhart+1
  8478  0AD1  0849               	movf	?_log+2,w
  8479  0AD2  00D7               	movwf	tempCalc@steinhart+2
  8480                           
  8481                           ;tempCalc.c: 10: steinhart/=3795.3;
  8482  0AD3  3035               	movlw	53
  8483  0AD4  00A0               	movwf	___ftdiv@f2
  8484  0AD5  306D               	movlw	109
  8485  0AD6  00A1               	movwf	___ftdiv@f2+1
  8486  0AD7  3045               	movlw	69
  8487  0AD8  00A2               	movwf	___ftdiv@f2+2
  8488  0AD9  0855               	movf	tempCalc@steinhart,w
  8489  0ADA  00A3               	movwf	___ftdiv@f1
  8490  0ADB  0856               	movf	tempCalc@steinhart+1,w
  8491  0ADC  00A4               	movwf	___ftdiv@f1+1
  8492  0ADD  0857               	movf	tempCalc@steinhart+2,w
  8493  0ADE  00A5               	movwf	___ftdiv@f1+2
  8494  0ADF  3197  2757  318A   	fcall	___ftdiv
  8495  0AE2  0020               	movlb	0	; select bank0
  8496  0AE3  0820               	movf	?___ftdiv,w
  8497  0AE4  00D5               	movwf	tempCalc@steinhart
  8498  0AE5  0821               	movf	?___ftdiv+1,w
  8499  0AE6  00D6               	movwf	tempCalc@steinhart+1
  8500  0AE7  0822               	movf	?___ftdiv+2,w
  8501  0AE8  00D7               	movwf	tempCalc@steinhart+2
  8502                           
  8503                           ;tempCalc.c: 11: steinhart+=1.0/(25+273.15);
  8504  0AE9  30CF               	movlw	207
  8505  0AEA  00B0               	movwf	___ftadd@f1
  8506  0AEB  305B               	movlw	91
  8507  0AEC  00B1               	movwf	___ftadd@f1+1
  8508  0AED  303B               	movlw	59
  8509  0AEE  00B2               	movwf	___ftadd@f1+2
  8510  0AEF  0855               	movf	tempCalc@steinhart,w
  8511  0AF0  00B3               	movwf	___ftadd@f2
  8512  0AF1  0856               	movf	tempCalc@steinhart+1,w
  8513  0AF2  00B4               	movwf	___ftadd@f2+1
  8514  0AF3  0857               	movf	tempCalc@steinhart+2,w
  8515  0AF4  00B5               	movwf	___ftadd@f2+2
  8516  0AF5  318B  234F  318A   	fcall	___ftadd
  8517  0AF8  0020               	movlb	0	; select bank0
  8518  0AF9  0830               	movf	?___ftadd,w
  8519  0AFA  00D5               	movwf	tempCalc@steinhart
  8520  0AFB  0831               	movf	?___ftadd+1,w
  8521  0AFC  00D6               	movwf	tempCalc@steinhart+1
  8522  0AFD  0832               	movf	?___ftadd+2,w
  8523  0AFE  00D7               	movwf	tempCalc@steinhart+2
  8524                           
  8525                           ;tempCalc.c: 12: steinhart=1.0/steinhart;
  8526  0AFF  0855               	movf	tempCalc@steinhart,w
  8527  0B00  00A0               	movwf	___ftdiv@f2
  8528  0B01  0856               	movf	tempCalc@steinhart+1,w
  8529  0B02  00A1               	movwf	___ftdiv@f2+1
  8530  0B03  0857               	movf	tempCalc@steinhart+2,w
  8531  0B04  00A2               	movwf	___ftdiv@f2+2
  8532  0B05  3000               	movlw	0
  8533  0B06  00A3               	movwf	___ftdiv@f1
  8534  0B07  3080               	movlw	128
  8535  0B08  00A4               	movwf	___ftdiv@f1+1
  8536  0B09  303F               	movlw	63
  8537  0B0A  00A5               	movwf	___ftdiv@f1+2
  8538  0B0B  3197  2757  318A   	fcall	___ftdiv
  8539  0B0E  0020               	movlb	0	; select bank0
  8540  0B0F  0820               	movf	?___ftdiv,w
  8541  0B10  00D5               	movwf	tempCalc@steinhart
  8542  0B11  0821               	movf	?___ftdiv+1,w
  8543  0B12  00D6               	movwf	tempCalc@steinhart+1
  8544  0B13  0822               	movf	?___ftdiv+2,w
  8545  0B14  00D7               	movwf	tempCalc@steinhart+2
  8546                           
  8547                           ;tempCalc.c: 13: steinhart-=273;
  8548  0B15  3080               	movlw	128
  8549  0B16  00BD               	movwf	___ftsub@f2
  8550  0B17  3088               	movlw	136
  8551  0B18  00BE               	movwf	___ftsub@f2+1
  8552  0B19  3043               	movlw	67
  8553  0B1A  00BF               	movwf	___ftsub@f2+2
  8554  0B1B  0855               	movf	tempCalc@steinhart,w
  8555  0B1C  00C0               	movwf	___ftsub@f1
  8556  0B1D  0856               	movf	tempCalc@steinhart+1,w
  8557  0B1E  00C1               	movwf	___ftsub@f1+1
  8558  0B1F  0857               	movf	tempCalc@steinhart+2,w
  8559  0B20  00C2               	movwf	___ftsub@f1+2
  8560  0B21  3191  21A2  318A   	fcall	___ftsub
  8561  0B24  0020               	movlb	0	; select bank0
  8562  0B25  083D               	movf	?___ftsub,w
  8563  0B26  00D5               	movwf	tempCalc@steinhart
  8564  0B27  083E               	movf	?___ftsub+1,w
  8565  0B28  00D6               	movwf	tempCalc@steinhart+1
  8566  0B29  083F               	movf	?___ftsub+2,w
  8567  0B2A  00D7               	movwf	tempCalc@steinhart+2
  8568                           
  8569                           ;tempCalc.c: 15: steinhart*=10;
  8570  0B2B  3000               	movlw	0
  8571  0B2C  00A0               	movwf	___ftmul@f1
  8572  0B2D  3020               	movlw	32
  8573  0B2E  00A1               	movwf	___ftmul@f1+1
  8574  0B2F  3041               	movlw	65
  8575  0B30  00A2               	movwf	___ftmul@f1+2
  8576  0B31  0855               	movf	tempCalc@steinhart,w
  8577  0B32  00A3               	movwf	___ftmul@f2
  8578  0B33  0856               	movf	tempCalc@steinhart+1,w
  8579  0B34  00A4               	movwf	___ftmul@f2+1
  8580  0B35  0857               	movf	tempCalc@steinhart+2,w
  8581  0B36  00A5               	movwf	___ftmul@f2+2
  8582  0B37  3188  20FB  318A   	fcall	___ftmul
  8583  0B3A  0020               	movlb	0	; select bank0
  8584  0B3B  0820               	movf	?___ftmul,w
  8585  0B3C  00D5               	movwf	tempCalc@steinhart
  8586  0B3D  0821               	movf	?___ftmul+1,w
  8587  0B3E  00D6               	movwf	tempCalc@steinhart+1
  8588  0B3F  0822               	movf	?___ftmul+2,w
  8589  0B40  00D7               	movwf	tempCalc@steinhart+2
  8590                           
  8591                           ;tempCalc.c: 18: return (int16_t)steinhart;
  8592  0B41  0855               	movf	tempCalc@steinhart,w
  8593  0B42  00B0               	movwf	___fttol@f1
  8594  0B43  0856               	movf	tempCalc@steinhart+1,w
  8595  0B44  00B1               	movwf	___fttol@f1+1
  8596  0B45  0857               	movf	tempCalc@steinhart+2,w
  8597  0B46  00B2               	movwf	___fttol@f1+2
  8598  0B47  3180  201A         	fcall	___fttol
  8599  0B49  0020               	movlb	0	; select bank0
  8600  0B4A  0831               	movf	?___fttol+1,w
  8601  0B4B  00CE               	movwf	?_tempCalc+1
  8602  0B4C  0830               	movf	?___fttol,w
  8603  0B4D  00CD               	movwf	?_tempCalc
  8604  0B4E  0008               	return
  8605  0B4F                     __end_of_tempCalc:	
  8606                           
  8607                           	psect	text2
  8608  084B                     __ptext2:	
  8609 ;; *************** function _log *****************
  8610 ;; Defined at:
  8611 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\log.c"
  8612 ;; Parameters:    Size  Location     Type
  8613 ;;  x               3   39[BANK0 ] int 
  8614 ;; Auto vars:     Size  Location     Type
  8615 ;;  exponent        2   43[BANK0 ] int 
  8616 ;; Return value:  Size  Location     Type
  8617 ;;                  3   39[BANK0 ] int 
  8618 ;; Registers used:
  8619 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8620 ;; Tracked objects:
  8621 ;;		On entry : 0/0
  8622 ;;		On exit  : 0/0
  8623 ;;		Unchanged: 0/0
  8624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8625 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8626 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8627 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8628 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8629 ;;Total ram usage:        6 bytes
  8630 ;; Hardware stack levels used:    1
  8631 ;; Hardware stack levels required when called:    3
  8632 ;; This function calls:
  8633 ;;		___awtoft
  8634 ;;		___ftadd
  8635 ;;		___ftge
  8636 ;;		___ftmul
  8637 ;;		_eval_poly
  8638 ;;		_frexp
  8639 ;; This function is called by:
  8640 ;;		_tempCalc
  8641 ;; This function uses a non-reentrant model
  8642 ;;
  8643                           
  8644                           
  8645                           ;psect for function _log
  8646  084B                     _log:	
  8647                           
  8648                           ;incstack = 0
  8649                           ; Regs used in _log: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8650  084B  0020               	movlb	0	; select bank0
  8651  084C  0847               	movf	log@x,w
  8652  084D  00F0               	movwf	___ftge@ff1
  8653  084E  0848               	movf	log@x+1,w
  8654  084F  00F1               	movwf	___ftge@ff1+1
  8655  0850  0849               	movf	log@x+2,w
  8656  0851  00F2               	movwf	___ftge@ff1+2
  8657  0852  3000               	movlw	0
  8658  0853  00F3               	movwf	___ftge@ff2
  8659  0854  3000               	movlw	0
  8660  0855  00F4               	movwf	___ftge@ff2+1
  8661  0856  3000               	movlw	0
  8662  0857  00F5               	movwf	___ftge@ff2+2
  8663  0858  3193  2342  3188   	fcall	___ftge
  8664  085B  1803               	btfsc	3,0
  8665  085C  286A               	goto	l2789
  8666  085D  3021               	movlw	33
  8667  085E  0021               	movlb	1	; select bank1
  8668  085F  00CD               	movwf	_errno^(0+128)
  8669  0860  3000               	movlw	0
  8670  0861  00CE               	movwf	(_errno^(0+128)+1)
  8671  0862  3000               	movlw	0
  8672  0863  0020               	movlb	0	; select bank0
  8673  0864  00C7               	movwf	?_log
  8674  0865  3000               	movlw	0
  8675  0866  00C8               	movwf	?_log+1
  8676  0867  3000               	movlw	0
  8677  0868  00C9               	movwf	?_log+2
  8678  0869  0008               	return
  8679  086A                     l2789:	
  8680  086A  0020               	movlb	0	; select bank0
  8681  086B  0849               	movf	log@x+2,w
  8682  086C  0448               	iorwf	log@x+1,w
  8683  086D  0447               	iorwf	log@x,w
  8684  086E  1D03               	skipz
  8685  086F  287D               	goto	l2795
  8686  0870  3022               	movlw	34
  8687  0871  0021               	movlb	1	; select bank1
  8688  0872  00CD               	movwf	_errno^(0+128)
  8689  0873  3000               	movlw	0
  8690  0874  00CE               	movwf	(_errno^(0+128)+1)
  8691  0875  3000               	movlw	0
  8692  0876  0020               	movlb	0	; select bank0
  8693  0877  00C7               	movwf	?_log
  8694  0878  3000               	movlw	0
  8695  0879  00C8               	movwf	?_log+1
  8696  087A  3000               	movlw	0
  8697  087B  00C9               	movwf	?_log+2
  8698  087C  0008               	return
  8699  087D                     l2795:	
  8700  087D  3000               	movlw	0
  8701  087E  00B0               	movwf	___ftadd@f1
  8702  087F  3080               	movlw	128
  8703  0880  00B1               	movwf	___ftadd@f1+1
  8704  0881  30BF               	movlw	191
  8705  0882  00B2               	movwf	___ftadd@f1+2
  8706  0883  3000               	movlw	0
  8707  0884  00A0               	movwf	___ftmul@f1
  8708  0885  3000               	movlw	0
  8709  0886  00A1               	movwf	___ftmul@f1+1
  8710  0887  3040               	movlw	64
  8711  0888  00A2               	movwf	___ftmul@f1+2
  8712  0889  304B               	movlw	(low (log@exponent| 0))& (0+255)
  8713  088A  00CA               	movwf	??_log
  8714  088B  084A               	movf	??_log,w
  8715  088C  00F3               	movwf	frexp@eptr
  8716  088D  0847               	movf	log@x,w
  8717  088E  00F0               	movwf	frexp@value
  8718  088F  0848               	movf	log@x+1,w
  8719  0890  00F1               	movwf	frexp@value+1
  8720  0891  0849               	movf	log@x+2,w
  8721  0892  00F2               	movwf	frexp@value+2
  8722  0893  3193  237D  3188   	fcall	_frexp
  8723  0896  0870               	movf	?_frexp,w
  8724  0897  0020               	movlb	0	; select bank0
  8725  0898  00A3               	movwf	___ftmul@f2
  8726  0899  0871               	movf	?_frexp+1,w
  8727  089A  00A4               	movwf	___ftmul@f2+1
  8728  089B  0872               	movf	?_frexp+2,w
  8729  089C  00A5               	movwf	___ftmul@f2+2
  8730  089D  3188  20FB  3188   	fcall	___ftmul
  8731  08A0  0020               	movlb	0	; select bank0
  8732  08A1  0820               	movf	?___ftmul,w
  8733  08A2  00B3               	movwf	___ftadd@f2
  8734  08A3  0821               	movf	?___ftmul+1,w
  8735  08A4  00B4               	movwf	___ftadd@f2+1
  8736  08A5  0822               	movf	?___ftmul+2,w
  8737  08A6  00B5               	movwf	___ftadd@f2+2
  8738  08A7  318B  234F  3188   	fcall	___ftadd
  8739  08AA  0020               	movlb	0	; select bank0
  8740  08AB  0830               	movf	?___ftadd,w
  8741  08AC  00C7               	movwf	log@x
  8742  08AD  0831               	movf	?___ftadd+1,w
  8743  08AE  00C8               	movwf	log@x+1
  8744  08AF  0832               	movf	?___ftadd+2,w
  8745  08B0  00C9               	movwf	log@x+2
  8746  08B1  30FF               	movlw	255
  8747  08B2  07CB               	addwf	log@exponent,f
  8748  08B3  30FF               	movlw	255
  8749  08B4  3DCC               	addwfc	log@exponent+1,f
  8750  08B5  0847               	movf	log@x,w
  8751  08B6  00BD               	movwf	eval_poly@x
  8752  08B7  0848               	movf	log@x+1,w
  8753  08B8  00BE               	movwf	eval_poly@x+1
  8754  08B9  0849               	movf	log@x+2,w
  8755  08BA  00BF               	movwf	eval_poly@x+2
  8756  08BB  3000               	movlw	low (log@coeff| (0+32768))
  8757  08BC  00C0               	movwf	eval_poly@d
  8758  08BD  3098               	movlw	high (log@coeff| (0+32768))
  8759  08BE  00C1               	movwf	eval_poly@d+1
  8760  08BF  3008               	movlw	8
  8761  08C0  00C2               	movwf	eval_poly@n
  8762  08C1  3000               	movlw	0
  8763  08C2  00C3               	movwf	eval_poly@n+1
  8764  08C3  3195  252C  3188   	fcall	_eval_poly
  8765  08C6  0020               	movlb	0	; select bank0
  8766  08C7  083D               	movf	?_eval_poly,w
  8767  08C8  00C7               	movwf	log@x
  8768  08C9  083E               	movf	?_eval_poly+1,w
  8769  08CA  00C8               	movwf	log@x+1
  8770  08CB  083F               	movf	?_eval_poly+2,w
  8771  08CC  00C9               	movwf	log@x+2
  8772  08CD  0847               	movf	log@x,w
  8773  08CE  00B0               	movwf	___ftadd@f1
  8774  08CF  0848               	movf	log@x+1,w
  8775  08D0  00B1               	movwf	___ftadd@f1+1
  8776  08D1  0849               	movf	log@x+2,w
  8777  08D2  00B2               	movwf	___ftadd@f1+2
  8778  08D3  3072               	movlw	114
  8779  08D4  00A0               	movwf	___ftmul@f1
  8780  08D5  3031               	movlw	49
  8781  08D6  00A1               	movwf	___ftmul@f1+1
  8782  08D7  303F               	movlw	63
  8783  08D8  00A2               	movwf	___ftmul@f1+2
  8784  08D9  084C               	movf	log@exponent+1,w
  8785  08DA  00F9               	movwf	___awtoft@c+1
  8786  08DB  084B               	movf	log@exponent,w
  8787  08DC  00F8               	movwf	___awtoft@c
  8788  08DD  3191  21FE  3188   	fcall	___awtoft
  8789  08E0  0878               	movf	?___awtoft,w
  8790  08E1  0020               	movlb	0	; select bank0
  8791  08E2  00A3               	movwf	___ftmul@f2
  8792  08E3  0879               	movf	?___awtoft+1,w
  8793  08E4  00A4               	movwf	___ftmul@f2+1
  8794  08E5  087A               	movf	?___awtoft+2,w
  8795  08E6  00A5               	movwf	___ftmul@f2+2
  8796  08E7  3188  20FB  3188   	fcall	___ftmul
  8797  08EA  0020               	movlb	0	; select bank0
  8798  08EB  0820               	movf	?___ftmul,w
  8799  08EC  00B3               	movwf	___ftadd@f2
  8800  08ED  0821               	movf	?___ftmul+1,w
  8801  08EE  00B4               	movwf	___ftadd@f2+1
  8802  08EF  0822               	movf	?___ftmul+2,w
  8803  08F0  00B5               	movwf	___ftadd@f2+2
  8804  08F1  318B  234F         	fcall	___ftadd
  8805  08F3  0020               	movlb	0	; select bank0
  8806  08F4  0830               	movf	?___ftadd,w
  8807  08F5  00C7               	movwf	?_log
  8808  08F6  0831               	movf	?___ftadd+1,w
  8809  08F7  00C8               	movwf	?_log+1
  8810  08F8  0832               	movf	?___ftadd+2,w
  8811  08F9  00C9               	movwf	?_log+2
  8812  08FA  0008               	return
  8813  08FB                     __end_of_log:	
  8814                           
  8815                           	psect	text3
  8816  137D                     __ptext3:	
  8817 ;; *************** function _frexp *****************
  8818 ;; Defined at:
  8819 ;;		line 254 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
  8820 ;; Parameters:    Size  Location     Type
  8821 ;;  value           3    0[COMMON] int 
  8822 ;;  eptr            1    3[COMMON] PTR int 
  8823 ;;		 -> log@exponent(2), 
  8824 ;; Auto vars:     Size  Location     Type
  8825 ;;		None
  8826 ;; Return value:  Size  Location     Type
  8827 ;;                  3    0[COMMON] PTR int 
  8828 ;; Registers used:
  8829 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8830 ;; Tracked objects:
  8831 ;;		On entry : 0/0
  8832 ;;		On exit  : 0/0
  8833 ;;		Unchanged: 0/0
  8834 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8835 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8836 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8837 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8838 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8839 ;;Total ram usage:        6 bytes
  8840 ;; Hardware stack levels used:    1
  8841 ;; This function calls:
  8842 ;;		Nothing
  8843 ;; This function is called by:
  8844 ;;		_log
  8845 ;; This function uses a non-reentrant model
  8846 ;;
  8847                           
  8848                           
  8849                           ;psect for function _frexp
  8850  137D                     _frexp:	
  8851                           
  8852                           ;incstack = 0
  8853                           ; Regs used in _frexp: [wreg+fsr1l+fsr1h+status,2+status,0]
  8854  137D  0872               	movf	frexp@value+2,w
  8855  137E  0471               	iorwf	frexp@value+1,w
  8856  137F  0470               	iorwf	frexp@value,w
  8857  1380  1D03               	skipz
  8858  1381  2B8F               	goto	l2585
  8859  1382  0873               	movf	frexp@eptr,w
  8860  1383  0086               	movwf	6
  8861  1384  0187               	clrf	7
  8862  1385  3000               	movlw	0
  8863  1386  3FC0               	movwi [0]fsr1
  8864  1387  3FC1               	movwi [1]fsr1
  8865  1388  3000               	movlw	0
  8866  1389  00F0               	movwf	?_frexp
  8867  138A  3000               	movlw	0
  8868  138B  00F1               	movwf	?_frexp+1
  8869  138C  3000               	movlw	0
  8870  138D  00F2               	movwf	?_frexp+2
  8871  138E  0008               	return
  8872  138F                     l2585:	
  8873  138F  0872               	movf	frexp@value+2,w
  8874  1390  397F               	andlw	127
  8875  1391  00F4               	movwf	??_frexp
  8876  1392  01F5               	clrf	??_frexp+1
  8877  1393  35F4               	lslf	??_frexp,f
  8878  1394  0DF5               	rlf	??_frexp+1,f
  8879  1395  0873               	movf	frexp@eptr,w
  8880  1396  0086               	movwf	6
  8881  1397  0187               	clrf	7
  8882  1398  0874               	movf	??_frexp,w
  8883  1399  3FC0               	movwi [0]fsr1
  8884  139A  0875               	movf	??_frexp+1,w
  8885  139B  3FC1               	movwi [1]fsr1
  8886  139C  0D71               	rlf	frexp@value+1,w
  8887  139D  0D71               	rlf	frexp@value+1,w
  8888  139E  3901               	andlw	1
  8889  139F  00F4               	movwf	??_frexp
  8890  13A0  01F5               	clrf	??_frexp+1
  8891  13A1  0873               	movf	frexp@eptr,w
  8892  13A2  0086               	movwf	6
  8893  13A3  0187               	clrf	7
  8894  13A4  0874               	movf	??_frexp,w
  8895  13A5  0481               	iorwf	1,f
  8896  13A6  3141               	addfsr 1,1
  8897  13A7  0875               	movf	??_frexp+1,w
  8898  13A8  0481               	iorwf	1,f
  8899  13A9  0873               	movf	frexp@eptr,w
  8900  13AA  0086               	movwf	6
  8901  13AB  0187               	clrf	7
  8902  13AC  3082               	movlw	130
  8903  13AD  0781               	addwf	1,f
  8904  13AE  3141               	addfsr 1,1
  8905  13AF  30FF               	movlw	255
  8906  13B0  3D81               	addwfc	1,f
  8907  13B1  317F               	addfsr 1,-1
  8908  13B2  0872               	movf	frexp@value+2,w
  8909  13B3  3980               	andlw	-128
  8910  13B4  383F               	iorlw	63
  8911  13B5  00F2               	movwf	frexp@value+2
  8912  13B6  13F1               	bcf	frexp@value+1,7
  8913  13B7  0008               	return
  8914  13B8                     __end_of_frexp:	
  8915                           
  8916                           	psect	text4
  8917  152C                     __ptext4:	
  8918 ;; *************** function _eval_poly *****************
  8919 ;; Defined at:
  8920 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\evalpoly.c"
  8921 ;; Parameters:    Size  Location     Type
  8922 ;;  x               3   29[BANK0 ] PTR int 
  8923 ;;  d               2   32[BANK0 ] PTR const 
  8924 ;;		 -> log@coeff(27), 
  8925 ;;  n               2   34[BANK0 ] int 
  8926 ;; Auto vars:     Size  Location     Type
  8927 ;;  res             3   36[BANK0 ] int 
  8928 ;; Return value:  Size  Location     Type
  8929 ;;                  3   29[BANK0 ] int 
  8930 ;; Registers used:
  8931 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8932 ;; Tracked objects:
  8933 ;;		On entry : 0/0
  8934 ;;		On exit  : 0/0
  8935 ;;		Unchanged: 0/0
  8936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8937 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8938 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8939 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8940 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8941 ;;Total ram usage:       10 bytes
  8942 ;; Hardware stack levels used:    1
  8943 ;; Hardware stack levels required when called:    2
  8944 ;; This function calls:
  8945 ;;		___ftadd
  8946 ;;		___ftmul
  8947 ;;		___wmul
  8948 ;; This function is called by:
  8949 ;;		_log
  8950 ;; This function uses a non-reentrant model
  8951 ;;
  8952                           
  8953                           
  8954                           ;psect for function _eval_poly
  8955  152C                     _eval_poly:	
  8956                           
  8957                           ;incstack = 0
  8958                           ; Regs used in _eval_poly: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8959  152C  0020               	movlb	0	; select bank0
  8960  152D  0843               	movf	eval_poly@n+1,w
  8961  152E  00F1               	movwf	___wmul@multiplier+1
  8962  152F  0842               	movf	eval_poly@n,w
  8963  1530  00F0               	movwf	___wmul@multiplier
  8964  1531  3003               	movlw	3
  8965  1532  00F2               	movwf	___wmul@multiplicand
  8966  1533  3000               	movlw	0
  8967  1534  00F3               	movwf	___wmul@multiplicand+1
  8968  1535  3191  2187  3195   	fcall	___wmul
  8969  1538  0020               	movlb	0	; select bank0
  8970  1539  0840               	movf	eval_poly@d,w
  8971  153A  0770               	addwf	?___wmul,w
  8972  153B  0084               	movwf	4
  8973  153C  0841               	movf	eval_poly@d+1,w
  8974  153D  3D71               	addwfc	?___wmul+1,w
  8975  153E  0085               	movwf	5
  8976  153F  3F00               	moviw [0]fsr0
  8977  1540  00C4               	movwf	eval_poly@res
  8978  1541  3F01               	moviw [1]fsr0
  8979  1542  00C5               	movwf	eval_poly@res+1
  8980  1543  3F02               	moviw [2]fsr0
  8981  1544                     L6:	
  8982  1544  00C6               	movwf	eval_poly@res+2
  8983  1545  0842               	movf	eval_poly@n,w
  8984  1546  0443               	iorwf	eval_poly@n+1,w
  8985  1547  1903               	btfsc	3,2
  8986  1548  2D85               	goto	l2603
  8987  1549  30FF               	movlw	255
  8988  154A  07C2               	addwf	eval_poly@n,f
  8989  154B  30FF               	movlw	255
  8990  154C  3DC3               	addwfc	eval_poly@n+1,f
  8991  154D  0843               	movf	eval_poly@n+1,w
  8992  154E  00F1               	movwf	___wmul@multiplier+1
  8993  154F  0842               	movf	eval_poly@n,w
  8994  1550  00F0               	movwf	___wmul@multiplier
  8995  1551  3003               	movlw	3
  8996  1552  00F2               	movwf	___wmul@multiplicand
  8997  1553  3000               	movlw	0
  8998  1554  00F3               	movwf	___wmul@multiplicand+1
  8999  1555  3191  2187  3195   	fcall	___wmul
  9000  1558  0020               	movlb	0	; select bank0
  9001  1559  0840               	movf	eval_poly@d,w
  9002  155A  0770               	addwf	?___wmul,w
  9003  155B  0084               	movwf	4
  9004  155C  0841               	movf	eval_poly@d+1,w
  9005  155D  3D71               	addwfc	?___wmul+1,w
  9006  155E  0085               	movwf	5
  9007  155F  3F00               	moviw [0]fsr0
  9008  1560  00B0               	movwf	___ftadd@f1
  9009  1561  3F01               	moviw [1]fsr0
  9010  1562  00B1               	movwf	___ftadd@f1+1
  9011  1563  3F02               	moviw [2]fsr0
  9012  1564  00B2               	movwf	___ftadd@f1+2
  9013  1565  0844               	movf	eval_poly@res,w
  9014  1566  00A0               	movwf	___ftmul@f1
  9015  1567  0845               	movf	eval_poly@res+1,w
  9016  1568  00A1               	movwf	___ftmul@f1+1
  9017  1569  0846               	movf	eval_poly@res+2,w
  9018  156A  00A2               	movwf	___ftmul@f1+2
  9019  156B  083D               	movf	eval_poly@x,w
  9020  156C  00A3               	movwf	___ftmul@f2
  9021  156D  083E               	movf	eval_poly@x+1,w
  9022  156E  00A4               	movwf	___ftmul@f2+1
  9023  156F  083F               	movf	eval_poly@x+2,w
  9024  1570  00A5               	movwf	___ftmul@f2+2
  9025  1571  3188  20FB  3195   	fcall	___ftmul
  9026  1574  0020               	movlb	0	; select bank0
  9027  1575  0820               	movf	?___ftmul,w
  9028  1576  00B3               	movwf	___ftadd@f2
  9029  1577  0821               	movf	?___ftmul+1,w
  9030  1578  00B4               	movwf	___ftadd@f2+1
  9031  1579  0822               	movf	?___ftmul+2,w
  9032  157A  00B5               	movwf	___ftadd@f2+2
  9033  157B  318B  234F  3195   	fcall	___ftadd
  9034  157E  0020               	movlb	0	; select bank0
  9035  157F  0830               	movf	?___ftadd,w
  9036  1580  00C4               	movwf	eval_poly@res
  9037  1581  0831               	movf	?___ftadd+1,w
  9038  1582  00C5               	movwf	eval_poly@res+1
  9039  1583  0832               	movf	?___ftadd+2,w
  9040  1584  2D44               	goto	L6
  9041  1585                     l2603:	
  9042  1585  0844               	movf	eval_poly@res,w
  9043  1586  00BD               	movwf	?_eval_poly
  9044  1587  0845               	movf	eval_poly@res+1,w
  9045  1588  00BE               	movwf	?_eval_poly+1
  9046  1589  0846               	movf	eval_poly@res+2,w
  9047  158A  00BF               	movwf	?_eval_poly+2
  9048  158B  0008               	return
  9049  158C                     __end_of_eval_poly:	
  9050                           
  9051                           	psect	text5
  9052  1342                     __ptext5:	
  9053 ;; *************** function ___ftge *****************
  9054 ;; Defined at:
  9055 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftge.c"
  9056 ;; Parameters:    Size  Location     Type
  9057 ;;  ff1             3    0[COMMON] float 
  9058 ;;  ff2             3    3[COMMON] float 
  9059 ;; Auto vars:     Size  Location     Type
  9060 ;;		None
  9061 ;; Return value:  Size  Location     Type
  9062 ;;		None               void
  9063 ;; Registers used:
  9064 ;;		wreg, status,2, status,0
  9065 ;; Tracked objects:
  9066 ;;		On entry : 0/0
  9067 ;;		On exit  : 0/0
  9068 ;;		Unchanged: 0/0
  9069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9070 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9071 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9072 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9073 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9074 ;;Total ram usage:        9 bytes
  9075 ;; Hardware stack levels used:    1
  9076 ;; This function calls:
  9077 ;;		Nothing
  9078 ;; This function is called by:
  9079 ;;		_log
  9080 ;; This function uses a non-reentrant model
  9081 ;;
  9082                           
  9083                           
  9084                           ;psect for function ___ftge
  9085  1342                     ___ftge:	
  9086                           
  9087                           ;incstack = 0
  9088                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  9089  1342  1FF2               	btfss	___ftge@ff1+2,7
  9090  1343  2B58               	goto	l2519
  9091  1344  0970               	comf	___ftge@ff1,w
  9092  1345  00F6               	movwf	??___ftge
  9093  1346  0971               	comf	___ftge@ff1+1,w
  9094  1347  00F7               	movwf	??___ftge+1
  9095  1348  0972               	comf	___ftge@ff1+2,w
  9096  1349  00F8               	movwf	??___ftge+2
  9097  134A  0AF6               	incf	??___ftge,f
  9098  134B  1903               	skipnz
  9099  134C  0AF7               	incf	??___ftge+1,f
  9100  134D  1903               	skipnz
  9101  134E  0AF8               	incf	??___ftge+2,f
  9102  134F  3000               	movlw	0
  9103  1350  0776               	addwf	??___ftge,w
  9104  1351  00F0               	movwf	___ftge@ff1
  9105  1352  3000               	movlw	0
  9106  1353  3D77               	addwfc	??___ftge+1,w
  9107  1354  00F1               	movwf	___ftge@ff1+1
  9108  1355  3080               	movlw	128
  9109  1356  3D78               	addwfc	??___ftge+2,w
  9110  1357  00F2               	movwf	___ftge@ff1+2
  9111  1358                     l2519:	
  9112  1358  1FF5               	btfss	___ftge@ff2+2,7
  9113  1359  2B6E               	goto	l2523
  9114  135A  0973               	comf	___ftge@ff2,w
  9115  135B  00F6               	movwf	??___ftge
  9116  135C  0974               	comf	___ftge@ff2+1,w
  9117  135D  00F7               	movwf	??___ftge+1
  9118  135E  0975               	comf	___ftge@ff2+2,w
  9119  135F  00F8               	movwf	??___ftge+2
  9120  1360  0AF6               	incf	??___ftge,f
  9121  1361  1903               	skipnz
  9122  1362  0AF7               	incf	??___ftge+1,f
  9123  1363  1903               	skipnz
  9124  1364  0AF8               	incf	??___ftge+2,f
  9125  1365  3000               	movlw	0
  9126  1366  0776               	addwf	??___ftge,w
  9127  1367  00F3               	movwf	___ftge@ff2
  9128  1368  3000               	movlw	0
  9129  1369  3D77               	addwfc	??___ftge+1,w
  9130  136A  00F4               	movwf	___ftge@ff2+1
  9131  136B  3080               	movlw	128
  9132  136C  3D78               	addwfc	??___ftge+2,w
  9133  136D  00F5               	movwf	___ftge@ff2+2
  9134  136E                     l2523:	
  9135  136E  3080               	movlw	128
  9136  136F  06F2               	xorwf	___ftge@ff1+2,f
  9137  1370  3080               	movlw	128
  9138  1371  06F5               	xorwf	___ftge@ff2+2,f
  9139  1372  0875               	movf	___ftge@ff2+2,w
  9140  1373  0272               	subwf	___ftge@ff1+2,w
  9141  1374  1D03               	skipz
  9142  1375  0008               	return
  9143  1376  0874               	movf	___ftge@ff2+1,w
  9144  1377  0271               	subwf	___ftge@ff1+1,w
  9145  1378  1D03               	skipz
  9146  1379  0008               	return
  9147  137A  0873               	movf	___ftge@ff2,w
  9148  137B  0270               	subwf	___ftge@ff1,w
  9149  137C  0008               	return
  9150  137D                     __end_of___ftge:	
  9151                           
  9152                           	psect	text6
  9153  11A2                     __ptext6:	
  9154 ;; *************** function ___ftsub *****************
  9155 ;; Defined at:
  9156 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftsub.c"
  9157 ;; Parameters:    Size  Location     Type
  9158 ;;  f2              3   29[BANK0 ] float 
  9159 ;;  f1              3   32[BANK0 ] float 
  9160 ;; Auto vars:     Size  Location     Type
  9161 ;;		None
  9162 ;; Return value:  Size  Location     Type
  9163 ;;                  3   29[BANK0 ] float 
  9164 ;; Registers used:
  9165 ;;		wreg, status,2, status,0, pclath, cstack
  9166 ;; Tracked objects:
  9167 ;;		On entry : 0/0
  9168 ;;		On exit  : 0/0
  9169 ;;		Unchanged: 0/0
  9170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9171 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9172 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9174 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9175 ;;Total ram usage:        6 bytes
  9176 ;; Hardware stack levels used:    1
  9177 ;; Hardware stack levels required when called:    2
  9178 ;; This function calls:
  9179 ;;		___ftadd
  9180 ;; This function is called by:
  9181 ;;		_tempCalc
  9182 ;; This function uses a non-reentrant model
  9183 ;;
  9184                           
  9185                           
  9186                           ;psect for function ___ftsub
  9187  11A2                     ___ftsub:	
  9188                           
  9189                           ;incstack = 0
  9190                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  9191  11A2  0020               	movlb	0	; select bank0
  9192  11A3  083F               	movf	___ftsub@f2+2,w
  9193  11A4  043E               	iorwf	___ftsub@f2+1,w
  9194  11A5  043D               	iorwf	___ftsub@f2,w
  9195  11A6  1903               	skipnz
  9196  11A7  29AA               	goto	l2935
  9197  11A8  3080               	movlw	128
  9198  11A9  06BF               	xorwf	___ftsub@f2+2,f
  9199  11AA                     l2935:	
  9200  11AA  0840               	movf	___ftsub@f1,w
  9201  11AB  00B0               	movwf	___ftadd@f1
  9202  11AC  0841               	movf	___ftsub@f1+1,w
  9203  11AD  00B1               	movwf	___ftadd@f1+1
  9204  11AE  0842               	movf	___ftsub@f1+2,w
  9205  11AF  00B2               	movwf	___ftadd@f1+2
  9206  11B0  083D               	movf	___ftsub@f2,w
  9207  11B1  00B3               	movwf	___ftadd@f2
  9208  11B2  083E               	movf	___ftsub@f2+1,w
  9209  11B3  00B4               	movwf	___ftadd@f2+1
  9210  11B4  083F               	movf	___ftsub@f2+2,w
  9211  11B5  00B5               	movwf	___ftadd@f2+2
  9212  11B6  318B  234F         	fcall	___ftadd
  9213  11B8  0020               	movlb	0	; select bank0
  9214  11B9  0830               	movf	?___ftadd,w
  9215  11BA  00BD               	movwf	?___ftsub
  9216  11BB  0831               	movf	?___ftadd+1,w
  9217  11BC  00BE               	movwf	?___ftsub+1
  9218  11BD  0832               	movf	?___ftadd+2,w
  9219  11BE  00BF               	movwf	?___ftsub+2
  9220  11BF  0008               	return
  9221  11C0                     __end_of___ftsub:	
  9222                           
  9223                           	psect	text7
  9224  0B4F                     __ptext7:	
  9225 ;; *************** function ___ftadd *****************
  9226 ;; Defined at:
  9227 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftadd.c"
  9228 ;; Parameters:    Size  Location     Type
  9229 ;;  f1              3   16[BANK0 ] float 
  9230 ;;  f2              3   19[BANK0 ] float 
  9231 ;; Auto vars:     Size  Location     Type
  9232 ;;  exp1            1   28[BANK0 ] unsigned char 
  9233 ;;  exp2            1   27[BANK0 ] unsigned char 
  9234 ;;  sign            1   26[BANK0 ] unsigned char 
  9235 ;; Return value:  Size  Location     Type
  9236 ;;                  3   16[BANK0 ] float 
  9237 ;; Registers used:
  9238 ;;		wreg, status,2, status,0, pclath, cstack
  9239 ;; Tracked objects:
  9240 ;;		On entry : 0/0
  9241 ;;		On exit  : 0/0
  9242 ;;		Unchanged: 0/0
  9243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9244 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9245 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9246 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9247 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9248 ;;Total ram usage:       13 bytes
  9249 ;; Hardware stack levels used:    1
  9250 ;; Hardware stack levels required when called:    1
  9251 ;; This function calls:
  9252 ;;		___ftpack
  9253 ;; This function is called by:
  9254 ;;		_tempCalc
  9255 ;;		___ftsub
  9256 ;;		_log
  9257 ;;		_eval_poly
  9258 ;; This function uses a non-reentrant model
  9259 ;;
  9260                           
  9261                           
  9262                           ;psect for function ___ftadd
  9263  0B4F                     ___ftadd:	
  9264                           
  9265                           ;incstack = 0
  9266                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  9267  0B4F  0020               	movlb	0	; select bank0
  9268  0B50  0830               	movf	___ftadd@f1,w
  9269  0B51  00B6               	movwf	??___ftadd
  9270  0B52  0831               	movf	___ftadd@f1+1,w
  9271  0B53  00B7               	movwf	??___ftadd+1
  9272  0B54  0832               	movf	___ftadd@f1+2,w
  9273  0B55  00B8               	movwf	??___ftadd+2
  9274  0B56  1003               	clrc
  9275  0B57  0D37               	rlf	??___ftadd+1,w
  9276  0B58  0D38               	rlf	??___ftadd+2,w
  9277  0B59  00B9               	movwf	??___ftadd+3
  9278  0B5A  0839               	movf	??___ftadd+3,w
  9279  0B5B  00BC               	movwf	___ftadd@exp1
  9280  0B5C  0833               	movf	___ftadd@f2,w
  9281  0B5D  00B6               	movwf	??___ftadd
  9282  0B5E  0834               	movf	___ftadd@f2+1,w
  9283  0B5F  00B7               	movwf	??___ftadd+1
  9284  0B60  0835               	movf	___ftadd@f2+2,w
  9285  0B61  00B8               	movwf	??___ftadd+2
  9286  0B62  1003               	clrc
  9287  0B63  0D37               	rlf	??___ftadd+1,w
  9288  0B64  0D38               	rlf	??___ftadd+2,w
  9289  0B65  00B9               	movwf	??___ftadd+3
  9290  0B66  0839               	movf	??___ftadd+3,w
  9291  0B67  00BB               	movwf	___ftadd@exp2
  9292  0B68  083C               	movf	___ftadd@exp1,w
  9293  0B69  1903               	btfsc	3,2
  9294  0B6A  2B77               	goto	l2387
  9295  0B6B  083B               	movf	___ftadd@exp2,w
  9296  0B6C  023C               	subwf	___ftadd@exp1,w
  9297  0B6D  1803               	skipnc
  9298  0B6E  2B7E               	goto	l2391
  9299  0B6F  033C               	decf	___ftadd@exp1,w
  9300  0B70  3AFF               	xorlw	255
  9301  0B71  073B               	addwf	___ftadd@exp2,w
  9302  0B72  00B6               	movwf	??___ftadd
  9303  0B73  3019               	movlw	25
  9304  0B74  0236               	subwf	??___ftadd,w
  9305  0B75  1C03               	skipc
  9306  0B76  2B7E               	goto	l2391
  9307  0B77                     l2387:	
  9308  0B77  0833               	movf	___ftadd@f2,w
  9309  0B78  00B0               	movwf	?___ftadd
  9310  0B79  0834               	movf	___ftadd@f2+1,w
  9311  0B7A  00B1               	movwf	?___ftadd+1
  9312  0B7B  0835               	movf	___ftadd@f2+2,w
  9313  0B7C  00B2               	movwf	?___ftadd+2
  9314  0B7D  0008               	return
  9315  0B7E                     l2391:	
  9316  0B7E  083B               	movf	___ftadd@exp2,w
  9317  0B7F  1903               	btfsc	3,2
  9318  0B80  0008               	return
  9319  0B81  083C               	movf	___ftadd@exp1,w
  9320  0B82  023B               	subwf	___ftadd@exp2,w
  9321  0B83  1803               	skipnc
  9322  0B84  2B8D               	goto	l2397
  9323  0B85  033B               	decf	___ftadd@exp2,w
  9324  0B86  3AFF               	xorlw	255
  9325  0B87  073C               	addwf	___ftadd@exp1,w
  9326  0B88  00B6               	movwf	??___ftadd
  9327  0B89  3019               	movlw	25
  9328  0B8A  0236               	subwf	??___ftadd,w
  9329  0B8B  1803               	btfsc	3,0
  9330  0B8C  0008               	return
  9331  0B8D                     l2397:	
  9332  0B8D  3006               	movlw	6
  9333  0B8E  00B6               	movwf	??___ftadd
  9334  0B8F  0836               	movf	??___ftadd,w
  9335  0B90  00BA               	movwf	___ftadd@sign
  9336  0B91  1BB2               	btfsc	___ftadd@f1+2,7
  9337  0B92  17BA               	bsf	___ftadd@sign,7
  9338  0B93  1BB5               	btfsc	___ftadd@f2+2,7
  9339  0B94  173A               	bsf	___ftadd@sign,6
  9340  0B95  17B1               	bsf	___ftadd@f1+1,7
  9341  0B96  30FF               	movlw	255
  9342  0B97  05B0               	andwf	___ftadd@f1,f
  9343  0B98  30FF               	movlw	255
  9344  0B99  05B1               	andwf	___ftadd@f1+1,f
  9345  0B9A  3000               	movlw	0
  9346  0B9B  05B2               	andwf	___ftadd@f1+2,f
  9347  0B9C  17B4               	bsf	___ftadd@f2+1,7
  9348  0B9D  30FF               	movlw	255
  9349  0B9E  05B3               	andwf	___ftadd@f2,f
  9350  0B9F  30FF               	movlw	255
  9351  0BA0  05B4               	andwf	___ftadd@f2+1,f
  9352  0BA1  3000               	movlw	0
  9353  0BA2  05B5               	andwf	___ftadd@f2+2,f
  9354  0BA3  083B               	movf	___ftadd@exp2,w
  9355  0BA4  023C               	subwf	___ftadd@exp1,w
  9356  0BA5  1803               	skipnc
  9357  0BA6  2BC9               	goto	l2419
  9358  0BA7                     l2409:	
  9359  0BA7  3001               	movlw	1
  9360  0BA8                     u2455:	
  9361  0BA8  35B3               	lslf	___ftadd@f2,f
  9362  0BA9  0DB4               	rlf	___ftadd@f2+1,f
  9363  0BAA  0DB5               	rlf	___ftadd@f2+2,f
  9364  0BAB  0B89               	decfsz	9,f
  9365  0BAC  2BA8               	goto	u2455
  9366  0BAD  3001               	movlw	1
  9367  0BAE  02BB               	subwf	___ftadd@exp2,f
  9368  0BAF  083B               	movf	___ftadd@exp2,w
  9369  0BB0  063C               	xorwf	___ftadd@exp1,w
  9370  0BB1  1903               	skipnz
  9371  0BB2  2BC4               	goto	l2417
  9372  0BB3  3001               	movlw	1
  9373  0BB4  02BA               	subwf	___ftadd@sign,f
  9374  0BB5  083A               	movf	___ftadd@sign,w
  9375  0BB6  3907               	andlw	7
  9376  0BB7  1903               	btfsc	3,2
  9377  0BB8  2BC4               	goto	l2417
  9378  0BB9  2BA7               	goto	l2409
  9379  0BBA                     l2415:	
  9380  0BBA  3001               	movlw	1
  9381  0BBB                     u2485:	
  9382  0BBB  36B2               	lsrf	___ftadd@f1+2,f
  9383  0BBC  0CB1               	rrf	___ftadd@f1+1,f
  9384  0BBD  0CB0               	rrf	___ftadd@f1,f
  9385  0BBE  0B89               	decfsz	9,f
  9386  0BBF  2BBB               	goto	u2485
  9387  0BC0  3001               	movlw	1
  9388  0BC1  00B6               	movwf	??___ftadd
  9389  0BC2  0836               	movf	??___ftadd,w
  9390  0BC3  07BC               	addwf	___ftadd@exp1,f
  9391  0BC4                     l2417:	
  9392  0BC4  083C               	movf	___ftadd@exp1,w
  9393  0BC5  063B               	xorwf	___ftadd@exp2,w
  9394  0BC6  1903               	btfsc	3,2
  9395  0BC7  2BEE               	goto	l817
  9396  0BC8  2BBA               	goto	l2415
  9397  0BC9                     l2419:	
  9398  0BC9  083C               	movf	___ftadd@exp1,w
  9399  0BCA  023B               	subwf	___ftadd@exp2,w
  9400  0BCB  1803               	skipnc
  9401  0BCC  2BEE               	goto	l817
  9402  0BCD                     l2421:	
  9403  0BCD  3001               	movlw	1
  9404  0BCE                     u2515:	
  9405  0BCE  35B0               	lslf	___ftadd@f1,f
  9406  0BCF  0DB1               	rlf	___ftadd@f1+1,f
  9407  0BD0  0DB2               	rlf	___ftadd@f1+2,f
  9408  0BD1  0B89               	decfsz	9,f
  9409  0BD2  2BCE               	goto	u2515
  9410  0BD3  3001               	movlw	1
  9411  0BD4  02BC               	subwf	___ftadd@exp1,f
  9412  0BD5  083B               	movf	___ftadd@exp2,w
  9413  0BD6  063C               	xorwf	___ftadd@exp1,w
  9414  0BD7  1903               	skipnz
  9415  0BD8  2BEA               	goto	l2429
  9416  0BD9  3001               	movlw	1
  9417  0BDA  02BA               	subwf	___ftadd@sign,f
  9418  0BDB  083A               	movf	___ftadd@sign,w
  9419  0BDC  3907               	andlw	7
  9420  0BDD  1903               	btfsc	3,2
  9421  0BDE  2BEA               	goto	l2429
  9422  0BDF  2BCD               	goto	l2421
  9423  0BE0                     l2427:	
  9424  0BE0  3001               	movlw	1
  9425  0BE1                     u2545:	
  9426  0BE1  36B5               	lsrf	___ftadd@f2+2,f
  9427  0BE2  0CB4               	rrf	___ftadd@f2+1,f
  9428  0BE3  0CB3               	rrf	___ftadd@f2,f
  9429  0BE4  0B89               	decfsz	9,f
  9430  0BE5  2BE1               	goto	u2545
  9431  0BE6  3001               	movlw	1
  9432  0BE7  00B6               	movwf	??___ftadd
  9433  0BE8  0836               	movf	??___ftadd,w
  9434  0BE9  07BB               	addwf	___ftadd@exp2,f
  9435  0BEA                     l2429:	
  9436  0BEA  083C               	movf	___ftadd@exp1,w
  9437  0BEB  063B               	xorwf	___ftadd@exp2,w
  9438  0BEC  1D03               	skipz
  9439  0BED  2BE0               	goto	l2427
  9440  0BEE                     l817:	
  9441  0BEE  1FBA               	btfss	___ftadd@sign,7
  9442  0BEF  2C00               	goto	l2433
  9443  0BF0  30FF               	movlw	255
  9444  0BF1  06B0               	xorwf	___ftadd@f1,f
  9445  0BF2  30FF               	movlw	255
  9446  0BF3  06B1               	xorwf	___ftadd@f1+1,f
  9447  0BF4  30FF               	movlw	255
  9448  0BF5  06B2               	xorwf	___ftadd@f1+2,f
  9449  0BF6  3001               	movlw	1
  9450  0BF7  07B0               	addwf	___ftadd@f1,f
  9451  0BF8  3000               	movlw	0
  9452  0BF9  1803               	skipnc
  9453  0BFA  3001               	movlw	1
  9454  0BFB  07B1               	addwf	___ftadd@f1+1,f
  9455  0BFC  3000               	movlw	0
  9456  0BFD  1803               	skipnc
  9457  0BFE  3001               	movlw	1
  9458  0BFF  07B2               	addwf	___ftadd@f1+2,f
  9459  0C00                     l2433:	
  9460  0C00  1F3A               	btfss	___ftadd@sign,6
  9461  0C01  2C12               	goto	l2437
  9462  0C02  30FF               	movlw	255
  9463  0C03  06B3               	xorwf	___ftadd@f2,f
  9464  0C04  30FF               	movlw	255
  9465  0C05  06B4               	xorwf	___ftadd@f2+1,f
  9466  0C06  30FF               	movlw	255
  9467  0C07  06B5               	xorwf	___ftadd@f2+2,f
  9468  0C08  3001               	movlw	1
  9469  0C09  07B3               	addwf	___ftadd@f2,f
  9470  0C0A  3000               	movlw	0
  9471  0C0B  1803               	skipnc
  9472  0C0C  3001               	movlw	1
  9473  0C0D  07B4               	addwf	___ftadd@f2+1,f
  9474  0C0E  3000               	movlw	0
  9475  0C0F  1803               	skipnc
  9476  0C10  3001               	movlw	1
  9477  0C11  07B5               	addwf	___ftadd@f2+2,f
  9478  0C12                     l2437:	
  9479  0C12  01BA               	clrf	___ftadd@sign
  9480  0C13  0830               	movf	___ftadd@f1,w
  9481  0C14  07B3               	addwf	___ftadd@f2,f
  9482  0C15  0831               	movf	___ftadd@f1+1,w
  9483  0C16  3DB4               	addwfc	___ftadd@f2+1,f
  9484  0C17  0832               	movf	___ftadd@f1+2,w
  9485  0C18  3DB5               	addwfc	___ftadd@f2+2,f
  9486  0C19  1FB5               	btfss	___ftadd@f2+2,7
  9487  0C1A  2C2D               	goto	l2447
  9488  0C1B  30FF               	movlw	255
  9489  0C1C  06B3               	xorwf	___ftadd@f2,f
  9490  0C1D  30FF               	movlw	255
  9491  0C1E  06B4               	xorwf	___ftadd@f2+1,f
  9492  0C1F  30FF               	movlw	255
  9493  0C20  06B5               	xorwf	___ftadd@f2+2,f
  9494  0C21  3001               	movlw	1
  9495  0C22  07B3               	addwf	___ftadd@f2,f
  9496  0C23  3000               	movlw	0
  9497  0C24  1803               	skipnc
  9498  0C25  3001               	movlw	1
  9499  0C26  07B4               	addwf	___ftadd@f2+1,f
  9500  0C27  3000               	movlw	0
  9501  0C28  1803               	skipnc
  9502  0C29  3001               	movlw	1
  9503  0C2A  07B5               	addwf	___ftadd@f2+2,f
  9504  0C2B  01BA               	clrf	___ftadd@sign
  9505  0C2C  0ABA               	incf	___ftadd@sign,f
  9506  0C2D                     l2447:	
  9507  0C2D  0833               	movf	___ftadd@f2,w
  9508  0C2E  00F0               	movwf	___ftpack@arg
  9509  0C2F  0834               	movf	___ftadd@f2+1,w
  9510  0C30  00F1               	movwf	___ftpack@arg+1
  9511  0C31  0835               	movf	___ftadd@f2+2,w
  9512  0C32  00F2               	movwf	___ftpack@arg+2
  9513  0C33  083C               	movf	___ftadd@exp1,w
  9514  0C34  00B6               	movwf	??___ftadd
  9515  0C35  0836               	movf	??___ftadd,w
  9516  0C36  00F3               	movwf	___ftpack@exp
  9517  0C37  083A               	movf	___ftadd@sign,w
  9518  0C38  00B7               	movwf	??___ftadd+1
  9519  0C39  0837               	movf	??___ftadd+1,w
  9520  0C3A  00F4               	movwf	___ftpack@sign
  9521  0C3B  3195  25EF         	fcall	___ftpack
  9522  0C3D  0870               	movf	?___ftpack,w
  9523  0C3E  0020               	movlb	0	; select bank0
  9524  0C3F  00B0               	movwf	?___ftadd
  9525  0C40  0871               	movf	?___ftpack+1,w
  9526  0C41  00B1               	movwf	?___ftadd+1
  9527  0C42  0872               	movf	?___ftpack+2,w
  9528  0C43  00B2               	movwf	?___ftadd+2
  9529  0C44  0008               	return
  9530  0C45                     __end_of___ftadd:	
  9531                           
  9532                           	psect	text8
  9533  0D83                     __ptext8:	
  9534 ;; *************** function _readVAnalog *****************
  9535 ;; Defined at:
  9536 ;;		line 104 in file "adc.c"
  9537 ;; Parameters:    Size  Location     Type
  9538 ;;  channel         2    6[BANK0 ] unsigned int 
  9539 ;; Auto vars:     Size  Location     Type
  9540 ;;  value           2   11[COMMON] int 
  9541 ;;  analog_chann    2    9[COMMON] unsigned int 
  9542 ;; Return value:  Size  Location     Type
  9543 ;;                  2    6[BANK0 ] int 
  9544 ;; Registers used:
  9545 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9546 ;; Tracked objects:
  9547 ;;		On entry : 0/0
  9548 ;;		On exit  : 0/0
  9549 ;;		Unchanged: 0/0
  9550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9551 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9552 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9553 ;;      Temps:          0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9554 ;;      Totals:         4      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9555 ;;Total ram usage:       24 bytes
  9556 ;; Hardware stack levels used:    1
  9557 ;; Hardware stack levels required when called:    1
  9558 ;; This function calls:
  9559 ;;		_ADCRead
  9560 ;;		___aldiv
  9561 ;;		___wmul
  9562 ;; This function is called by:
  9563 ;;		_main
  9564 ;; This function uses a non-reentrant model
  9565 ;;
  9566                           
  9567                           
  9568                           ;psect for function _readVAnalog
  9569  0D83                     _readVAnalog:	
  9570                           
  9571                           ;adc.c: 106: int16_t value;
  9572                           ;adc.c: 108: uint16_t analog_channel = Vchannels[channel];
  9573                           
  9574                           ;incstack = 0
  9575                           ; Regs used in _readVAnalog: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9576  0D83  0020               	movlb	0	; select bank0
  9577  0D84  3526               	lslf	readVAnalog@channel,w
  9578  0D85  3E48               	addlw	(low (_Vchannels| (0+256)))& (0+255)
  9579  0D86  0086               	movwf	6
  9580  0D87  3001               	movlw	1	; select bank2/3
  9581  0D88  0087               	movwf	7
  9582  0D89  3F40               	moviw [0]fsr1
  9583  0D8A  00F9               	movwf	readVAnalog@analog_channel
  9584  0D8B  3F41               	moviw [1]fsr1
  9585  0D8C  00FA               	movwf	readVAnalog@analog_channel+1
  9586                           
  9587                           ;adc.c: 110: value = ADCRead(analog_channel);
  9588  0D8D  0879               	movf	readVAnalog@analog_channel,w
  9589  0D8E  3191  2146  318D   	fcall	_ADCRead
  9590  0D91  0871               	movf	?_ADCRead+1,w
  9591  0D92  00FC               	movwf	readVAnalog@value+1
  9592  0D93  0870               	movf	?_ADCRead,w
  9593  0D94  00FB               	movwf	readVAnalog@value
  9594                           
  9595                           ;adc.c: 112: Vtotals[channel] = Vtotals[channel]-Vsamples[channel][VsampleIndex];
  9596  0D95  0020               	movlb	0	; select bank0
  9597  0D96  0826               	movf	readVAnalog@channel,w
  9598  0D97  00A8               	movwf	??_readVAnalog
  9599  0D98  3001               	movlw	1
  9600  0D99                     u3375:	
  9601  0D99  35A8               	lslf	??_readVAnalog,f
  9602  0D9A  3EFF               	addlw	-1
  9603  0D9B  1D03               	skipz
  9604  0D9C  2D99               	goto	u3375
  9605  0D9D  3528               	lslf	??_readVAnalog,w
  9606  0D9E  3E20               	addlw	(low (_Vtotals| (0+256)))& (0+255)
  9607  0D9F  0086               	movwf	6
  9608  0DA0  3001               	movlw	1	; select bank2/3
  9609  0DA1  0087               	movwf	7
  9610  0DA2  3F40               	moviw [0]fsr1
  9611  0DA3  00A9               	movwf	??_readVAnalog+1
  9612  0DA4  3F41               	moviw [1]fsr1
  9613  0DA5  00AA               	movwf	??_readVAnalog+2
  9614  0DA6  3F42               	moviw [2]fsr1
  9615  0DA7  00AB               	movwf	??_readVAnalog+3
  9616  0DA8  3F43               	moviw [3]fsr1
  9617  0DA9  00AC               	movwf	??_readVAnalog+4
  9618  0DAA  0867               	movf	_VsampleIndex+1,w
  9619  0DAB  00AE               	movwf	??_readVAnalog+6
  9620  0DAC  0866               	movf	_VsampleIndex,w
  9621  0DAD  00AD               	movwf	??_readVAnalog+5
  9622  0DAE  35AD               	lslf	??_readVAnalog+5,f
  9623  0DAF  0DAE               	rlf	??_readVAnalog+6,f
  9624  0DB0  0827               	movf	readVAnalog@channel+1,w
  9625  0DB1  00F1               	movwf	___wmul@multiplier+1
  9626  0DB2  0826               	movf	readVAnalog@channel,w
  9627  0DB3  00F0               	movwf	___wmul@multiplier
  9628  0DB4  301E               	movlw	30
  9629  0DB5  00F2               	movwf	___wmul@multiplicand
  9630  0DB6  3000               	movlw	0
  9631  0DB7  00F3               	movwf	___wmul@multiplicand+1
  9632  0DB8  3191  2187  318D   	fcall	___wmul
  9633  0DBB  3078               	movlw	120
  9634  0DBC  0020               	movlb	0	; select bank0
  9635  0DBD  00AF               	movwf	??_readVAnalog+7
  9636  0DBE  3023               	movlw	35
  9637  0DBF  00B0               	movwf	??_readVAnalog+8
  9638  0DC0  0870               	movf	?___wmul,w
  9639  0DC1  072F               	addwf	??_readVAnalog+7,w
  9640  0DC2  00B1               	movwf	??_readVAnalog+9
  9641  0DC3  0871               	movf	?___wmul+1,w
  9642  0DC4  3D30               	addwfc	??_readVAnalog+8,w
  9643  0DC5  00B2               	movwf	??_readVAnalog+10
  9644  0DC6  082D               	movf	??_readVAnalog+5,w
  9645  0DC7  0731               	addwf	??_readVAnalog+9,w
  9646  0DC8  0086               	movwf	6
  9647  0DC9  082E               	movf	??_readVAnalog+6,w
  9648  0DCA  3D32               	addwfc	??_readVAnalog+10,w
  9649  0DCB  0087               	movwf	7
  9650  0DCC  3F40               	moviw [0]fsr1
  9651  0DCD  00B3               	movwf	??_readVAnalog+11
  9652  0DCE  3F41               	moviw [1]fsr1
  9653  0DCF  00B4               	movwf	??_readVAnalog+12
  9654  0DD0  0833               	movf	??_readVAnalog+11,w
  9655  0DD1  00B5               	movwf	??_readVAnalog+13
  9656  0DD2  0834               	movf	??_readVAnalog+12,w
  9657  0DD3  00B6               	movwf	??_readVAnalog+14
  9658  0DD4  3000               	movlw	0
  9659  0DD5  1BB6               	btfsc	??_readVAnalog+14,7
  9660  0DD6  30FF               	movlw	255
  9661  0DD7  00B7               	movwf	??_readVAnalog+15
  9662  0DD8  00B8               	movwf	??_readVAnalog+16
  9663  0DD9  09B5               	comf	??_readVAnalog+13,f
  9664  0DDA  09B6               	comf	??_readVAnalog+14,f
  9665  0DDB  09B7               	comf	??_readVAnalog+15,f
  9666  0DDC  09B8               	comf	??_readVAnalog+16,f
  9667  0DDD  0AB5               	incf	??_readVAnalog+13,f
  9668  0DDE  1903               	skipnz
  9669  0DDF  0AB6               	incf	??_readVAnalog+14,f
  9670  0DE0  1903               	skipnz
  9671  0DE1  0AB7               	incf	??_readVAnalog+15,f
  9672  0DE2  1903               	skipnz
  9673  0DE3  0AB8               	incf	??_readVAnalog+16,f
  9674  0DE4  0835               	movf	??_readVAnalog+13,w
  9675  0DE5  07A9               	addwf	??_readVAnalog+1,f
  9676  0DE6  0836               	movf	??_readVAnalog+14,w
  9677  0DE7  3DAA               	addwfc	??_readVAnalog+2,f
  9678  0DE8  0837               	movf	??_readVAnalog+15,w
  9679  0DE9  3DAB               	addwfc	??_readVAnalog+3,f
  9680  0DEA  0838               	movf	??_readVAnalog+16,w
  9681  0DEB  3DAC               	addwfc	??_readVAnalog+4,f
  9682  0DEC  0826               	movf	readVAnalog@channel,w
  9683  0DED  00B9               	movwf	??_readVAnalog+17
  9684  0DEE  3001               	movlw	1
  9685  0DEF                     u3385:	
  9686  0DEF  35B9               	lslf	??_readVAnalog+17,f
  9687  0DF0  3EFF               	addlw	-1
  9688  0DF1  1D03               	skipz
  9689  0DF2  2DEF               	goto	u3385
  9690  0DF3  3539               	lslf	??_readVAnalog+17,w
  9691  0DF4  3E20               	addlw	(low (_Vtotals| (0+256)))& (0+255)
  9692  0DF5  0086               	movwf	6
  9693  0DF6  3001               	movlw	1	; select bank2/3
  9694  0DF7  0087               	movwf	7
  9695  0DF8  0829               	movf	??_readVAnalog+1,w
  9696  0DF9  3FC0               	movwi [0]fsr1
  9697  0DFA  082A               	movf	??_readVAnalog+2,w
  9698  0DFB  3FC1               	movwi [1]fsr1
  9699  0DFC  082B               	movf	??_readVAnalog+3,w
  9700  0DFD  3FC2               	movwi [2]fsr1
  9701  0DFE  082C               	movf	??_readVAnalog+4,w
  9702  0DFF  3FC3               	movwi [3]fsr1
  9703                           
  9704                           ;adc.c: 114: Vsamples[channel][VsampleIndex] = value;
  9705  0E00  0867               	movf	_VsampleIndex+1,w
  9706  0E01  00A9               	movwf	??_readVAnalog+1
  9707  0E02  0866               	movf	_VsampleIndex,w
  9708  0E03  00A8               	movwf	??_readVAnalog
  9709  0E04  35A8               	lslf	??_readVAnalog,f
  9710  0E05  0DA9               	rlf	??_readVAnalog+1,f
  9711  0E06  0827               	movf	readVAnalog@channel+1,w
  9712  0E07  00F1               	movwf	___wmul@multiplier+1
  9713  0E08  0826               	movf	readVAnalog@channel,w
  9714  0E09  00F0               	movwf	___wmul@multiplier
  9715  0E0A  301E               	movlw	30
  9716  0E0B  00F2               	movwf	___wmul@multiplicand
  9717  0E0C  3000               	movlw	0
  9718  0E0D  00F3               	movwf	___wmul@multiplicand+1
  9719  0E0E  3191  2187  318D   	fcall	___wmul
  9720  0E11  3078               	movlw	120
  9721  0E12  0020               	movlb	0	; select bank0
  9722  0E13  00AA               	movwf	??_readVAnalog+2
  9723  0E14  3023               	movlw	35
  9724  0E15  00AB               	movwf	??_readVAnalog+3
  9725  0E16  0870               	movf	?___wmul,w
  9726  0E17  072A               	addwf	??_readVAnalog+2,w
  9727  0E18  00AC               	movwf	??_readVAnalog+4
  9728  0E19  0871               	movf	?___wmul+1,w
  9729  0E1A  3D2B               	addwfc	??_readVAnalog+3,w
  9730  0E1B  00AD               	movwf	??_readVAnalog+5
  9731  0E1C  0828               	movf	??_readVAnalog,w
  9732  0E1D  072C               	addwf	??_readVAnalog+4,w
  9733  0E1E  0086               	movwf	6
  9734  0E1F  0829               	movf	??_readVAnalog+1,w
  9735  0E20  3D2D               	addwfc	??_readVAnalog+5,w
  9736  0E21  0087               	movwf	7
  9737  0E22  087B               	movf	readVAnalog@value,w
  9738  0E23  3FC0               	movwi [0]fsr1
  9739  0E24  087C               	movf	readVAnalog@value+1,w
  9740  0E25  3FC1               	movwi [1]fsr1
  9741                           
  9742                           ;adc.c: 116: Vtotals[channel] = Vtotals[channel]+Vsamples[channel][VsampleIndex];
  9743  0E26  0826               	movf	readVAnalog@channel,w
  9744  0E27  00A8               	movwf	??_readVAnalog
  9745  0E28  3001               	movlw	1
  9746  0E29                     u3395:	
  9747  0E29  35A8               	lslf	??_readVAnalog,f
  9748  0E2A  3EFF               	addlw	-1
  9749  0E2B  1D03               	skipz
  9750  0E2C  2E29               	goto	u3395
  9751  0E2D  3528               	lslf	??_readVAnalog,w
  9752  0E2E  3E20               	addlw	(low (_Vtotals| (0+256)))& (0+255)
  9753  0E2F  0086               	movwf	6
  9754  0E30  3001               	movlw	1	; select bank2/3
  9755  0E31  0087               	movwf	7
  9756  0E32  3F40               	moviw [0]fsr1
  9757  0E33  00A9               	movwf	??_readVAnalog+1
  9758  0E34  3F41               	moviw [1]fsr1
  9759  0E35  00AA               	movwf	??_readVAnalog+2
  9760  0E36  3F42               	moviw [2]fsr1
  9761  0E37  00AB               	movwf	??_readVAnalog+3
  9762  0E38  3F43               	moviw [3]fsr1
  9763  0E39  00AC               	movwf	??_readVAnalog+4
  9764  0E3A  0867               	movf	_VsampleIndex+1,w
  9765  0E3B  00AE               	movwf	??_readVAnalog+6
  9766  0E3C  0866               	movf	_VsampleIndex,w
  9767  0E3D  00AD               	movwf	??_readVAnalog+5
  9768  0E3E  35AD               	lslf	??_readVAnalog+5,f
  9769  0E3F  0DAE               	rlf	??_readVAnalog+6,f
  9770  0E40  0827               	movf	readVAnalog@channel+1,w
  9771  0E41  00F1               	movwf	___wmul@multiplier+1
  9772  0E42  0826               	movf	readVAnalog@channel,w
  9773  0E43  00F0               	movwf	___wmul@multiplier
  9774  0E44  301E               	movlw	30
  9775  0E45  00F2               	movwf	___wmul@multiplicand
  9776  0E46  3000               	movlw	0
  9777  0E47  00F3               	movwf	___wmul@multiplicand+1
  9778  0E48  3191  2187  318D   	fcall	___wmul
  9779  0E4B  3078               	movlw	120
  9780  0E4C  0020               	movlb	0	; select bank0
  9781  0E4D  00AF               	movwf	??_readVAnalog+7
  9782  0E4E  3023               	movlw	35
  9783  0E4F  00B0               	movwf	??_readVAnalog+8
  9784  0E50  0870               	movf	?___wmul,w
  9785  0E51  072F               	addwf	??_readVAnalog+7,w
  9786  0E52  00B1               	movwf	??_readVAnalog+9
  9787  0E53  0871               	movf	?___wmul+1,w
  9788  0E54  3D30               	addwfc	??_readVAnalog+8,w
  9789  0E55  00B2               	movwf	??_readVAnalog+10
  9790  0E56  082D               	movf	??_readVAnalog+5,w
  9791  0E57  0731               	addwf	??_readVAnalog+9,w
  9792  0E58  0086               	movwf	6
  9793  0E59  082E               	movf	??_readVAnalog+6,w
  9794  0E5A  3D32               	addwfc	??_readVAnalog+10,w
  9795  0E5B  0087               	movwf	7
  9796  0E5C  3F40               	moviw [0]fsr1
  9797  0E5D  00B3               	movwf	??_readVAnalog+11
  9798  0E5E  3F41               	moviw [1]fsr1
  9799  0E5F  00B4               	movwf	??_readVAnalog+12
  9800  0E60  0833               	movf	??_readVAnalog+11,w
  9801  0E61  00B5               	movwf	??_readVAnalog+13
  9802  0E62  0834               	movf	??_readVAnalog+12,w
  9803  0E63  00B6               	movwf	??_readVAnalog+14
  9804  0E64  3000               	movlw	0
  9805  0E65  1BB6               	btfsc	??_readVAnalog+14,7
  9806  0E66  30FF               	movlw	255
  9807  0E67  00B7               	movwf	??_readVAnalog+15
  9808  0E68  00B8               	movwf	??_readVAnalog+16
  9809  0E69  0835               	movf	??_readVAnalog+13,w
  9810  0E6A  07A9               	addwf	??_readVAnalog+1,f
  9811  0E6B  0836               	movf	??_readVAnalog+14,w
  9812  0E6C  3DAA               	addwfc	??_readVAnalog+2,f
  9813  0E6D  0837               	movf	??_readVAnalog+15,w
  9814  0E6E  3DAB               	addwfc	??_readVAnalog+3,f
  9815  0E6F  0838               	movf	??_readVAnalog+16,w
  9816  0E70  3DAC               	addwfc	??_readVAnalog+4,f
  9817  0E71  0826               	movf	readVAnalog@channel,w
  9818  0E72  00B9               	movwf	??_readVAnalog+17
  9819  0E73  3001               	movlw	1
  9820  0E74                     u3405:	
  9821  0E74  35B9               	lslf	??_readVAnalog+17,f
  9822  0E75  3EFF               	addlw	-1
  9823  0E76  1D03               	skipz
  9824  0E77  2E74               	goto	u3405
  9825  0E78  3539               	lslf	??_readVAnalog+17,w
  9826  0E79  3E20               	addlw	(low (_Vtotals| (0+256)))& (0+255)
  9827  0E7A  0086               	movwf	6
  9828  0E7B  3001               	movlw	1	; select bank2/3
  9829  0E7C  0087               	movwf	7
  9830  0E7D  0829               	movf	??_readVAnalog+1,w
  9831  0E7E  3FC0               	movwi [0]fsr1
  9832  0E7F  082A               	movf	??_readVAnalog+2,w
  9833  0E80  3FC1               	movwi [1]fsr1
  9834  0E81  082B               	movf	??_readVAnalog+3,w
  9835  0E82  3FC2               	movwi [2]fsr1
  9836  0E83  082C               	movf	??_readVAnalog+4,w
  9837  0E84  3FC3               	movwi [3]fsr1
  9838                           
  9839                           ;adc.c: 118: if(channel>=(4-1))
  9840  0E85  3000               	movlw	0
  9841  0E86  0227               	subwf	readVAnalog@channel+1,w
  9842  0E87  3003               	movlw	3
  9843  0E88  1903               	skipnz
  9844  0E89  0226               	subwf	readVAnalog@channel,w
  9845  0E8A  1C03               	skipc
  9846  0E8B  2E99               	goto	l2995
  9847                           
  9848                           ;adc.c: 119: {
  9849                           ;adc.c: 120: VsampleIndex+=1;
  9850  0E8C  3001               	movlw	1
  9851  0E8D  07E6               	addwf	_VsampleIndex,f
  9852  0E8E  3000               	movlw	0
  9853  0E8F  3DE7               	addwfc	_VsampleIndex+1,f
  9854                           
  9855                           ;adc.c: 121: if(VsampleIndex >= 15)VsampleIndex = 0;
  9856  0E90  3000               	movlw	0
  9857  0E91  0267               	subwf	_VsampleIndex+1,w
  9858  0E92  300F               	movlw	15
  9859  0E93  1903               	skipnz
  9860  0E94  0266               	subwf	_VsampleIndex,w
  9861  0E95  1C03               	skipc
  9862  0E96  2E99               	goto	l2995
  9863  0E97  01E6               	clrf	_VsampleIndex
  9864  0E98  01E7               	clrf	_VsampleIndex+1
  9865  0E99                     l2995:	
  9866                           
  9867                           ;adc.c: 122: }
  9868                           ;adc.c: 124: value = Vtotals[channel]/15;
  9869  0E99  3000               	movlw	0
  9870  0E9A  00F3               	movwf	___aldiv@divisor+3
  9871  0E9B  3000               	movlw	0
  9872  0E9C  00F2               	movwf	___aldiv@divisor+2
  9873  0E9D  3000               	movlw	0
  9874  0E9E  00F1               	movwf	___aldiv@divisor+1
  9875  0E9F  300F               	movlw	15
  9876  0EA0  00F0               	movwf	___aldiv@divisor
  9877  0EA1  0826               	movf	readVAnalog@channel,w
  9878  0EA2  00A8               	movwf	??_readVAnalog
  9879  0EA3  3001               	movlw	1
  9880  0EA4                     u3435:	
  9881  0EA4  35A8               	lslf	??_readVAnalog,f
  9882  0EA5  3EFF               	addlw	-1
  9883  0EA6  1D03               	skipz
  9884  0EA7  2EA4               	goto	u3435
  9885  0EA8  3528               	lslf	??_readVAnalog,w
  9886  0EA9  3E20               	addlw	(low (_Vtotals| (0+256)))& (0+255)
  9887  0EAA  0086               	movwf	6
  9888  0EAB  3001               	movlw	1	; select bank2/3
  9889  0EAC  0087               	movwf	7
  9890  0EAD  3F40               	moviw [0]fsr1
  9891  0EAE  00F4               	movwf	___aldiv@dividend
  9892  0EAF  3F41               	moviw [1]fsr1
  9893  0EB0  00F5               	movwf	___aldiv@dividend+1
  9894  0EB1  3F42               	moviw [2]fsr1
  9895  0EB2  00F6               	movwf	___aldiv@dividend+2
  9896  0EB3  3F43               	moviw [3]fsr1
  9897  0EB4  00F7               	movwf	___aldiv@dividend+3
  9898  0EB5  3196  26D5         	fcall	___aldiv
  9899  0EB7  0871               	movf	?___aldiv+1,w
  9900  0EB8  00FC               	movwf	readVAnalog@value+1
  9901  0EB9  0870               	movf	?___aldiv,w
  9902  0EBA  00FB               	movwf	readVAnalog@value
  9903                           
  9904                           ;adc.c: 126: return value;
  9905  0EBB  087C               	movf	readVAnalog@value+1,w
  9906  0EBC  0020               	movlb	0	; select bank0
  9907  0EBD  00A7               	movwf	?_readVAnalog+1
  9908  0EBE  087B               	movf	readVAnalog@value,w
  9909  0EBF  00A6               	movwf	?_readVAnalog
  9910  0EC0  0008               	return
  9911  0EC1                     __end_of_readVAnalog:	
  9912                           
  9913                           	psect	text9
  9914  0C45                     __ptext9:	
  9915 ;; *************** function _readIAnalog *****************
  9916 ;; Defined at:
  9917 ;;		line 78 in file "adc.c"
  9918 ;; Parameters:    Size  Location     Type
  9919 ;;  channel         2    6[BANK0 ] unsigned int 
  9920 ;; Auto vars:     Size  Location     Type
  9921 ;;  value           2   11[COMMON] int 
  9922 ;;  analog_chann    2    9[COMMON] unsigned int 
  9923 ;; Return value:  Size  Location     Type
  9924 ;;                  2    6[BANK0 ] int 
  9925 ;; Registers used:
  9926 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9927 ;; Tracked objects:
  9928 ;;		On entry : 0/0
  9929 ;;		On exit  : 0/0
  9930 ;;		Unchanged: 0/0
  9931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9932 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9933 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9934 ;;      Temps:          0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9935 ;;      Totals:         4      20       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9936 ;;Total ram usage:       24 bytes
  9937 ;; Hardware stack levels used:    1
  9938 ;; Hardware stack levels required when called:    1
  9939 ;; This function calls:
  9940 ;;		_ADCRead
  9941 ;;		___aldiv
  9942 ;;		___wmul
  9943 ;; This function is called by:
  9944 ;;		_main
  9945 ;; This function uses a non-reentrant model
  9946 ;;
  9947                           
  9948                           
  9949                           ;psect for function _readIAnalog
  9950  0C45                     _readIAnalog:	
  9951                           
  9952                           ;adc.c: 80: int16_t value;
  9953                           ;adc.c: 82: uint16_t analog_channel = Ichannels[channel];
  9954                           
  9955                           ;incstack = 0
  9956                           ; Regs used in _readIAnalog: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9957  0C45  0020               	movlb	0	; select bank0
  9958  0C46  3526               	lslf	readIAnalog@channel,w
  9959  0C47  3E50               	addlw	(low (_Ichannels| (0+256)))& (0+255)
  9960  0C48  0086               	movwf	6
  9961  0C49  3001               	movlw	1	; select bank2/3
  9962  0C4A  0087               	movwf	7
  9963  0C4B  3F40               	moviw [0]fsr1
  9964  0C4C  00F9               	movwf	readIAnalog@analog_channel
  9965  0C4D  3F41               	moviw [1]fsr1
  9966  0C4E  00FA               	movwf	readIAnalog@analog_channel+1
  9967                           
  9968                           ;adc.c: 84: value = ADCRead(analog_channel);
  9969  0C4F  0879               	movf	readIAnalog@analog_channel,w
  9970  0C50  3191  2146  318C   	fcall	_ADCRead
  9971  0C53  0871               	movf	?_ADCRead+1,w
  9972  0C54  00FC               	movwf	readIAnalog@value+1
  9973  0C55  0870               	movf	?_ADCRead,w
  9974  0C56  00FB               	movwf	readIAnalog@value
  9975                           
  9976                           ;adc.c: 86: Itotals[channel] = Itotals[channel]-Isamples[channel][IsampleIndex];
  9977  0C57  0020               	movlb	0	; select bank0
  9978  0C58  0826               	movf	readIAnalog@channel,w
  9979  0C59  00A8               	movwf	??_readIAnalog
  9980  0C5A  3001               	movlw	1
  9981  0C5B                     u3305:	
  9982  0C5B  35A8               	lslf	??_readIAnalog,f
  9983  0C5C  3EFF               	addlw	-1
  9984  0C5D  1D03               	skipz
  9985  0C5E  2C5B               	goto	u3305
  9986  0C5F  3528               	lslf	??_readIAnalog,w
  9987  0C60  3E30               	addlw	(low (_Itotals| (0+256)))& (0+255)
  9988  0C61  0086               	movwf	6
  9989  0C62  3001               	movlw	1	; select bank2/3
  9990  0C63  0087               	movwf	7
  9991  0C64  3F40               	moviw [0]fsr1
  9992  0C65  00A9               	movwf	??_readIAnalog+1
  9993  0C66  3F41               	moviw [1]fsr1
  9994  0C67  00AA               	movwf	??_readIAnalog+2
  9995  0C68  3F42               	moviw [2]fsr1
  9996  0C69  00AB               	movwf	??_readIAnalog+3
  9997  0C6A  3F43               	moviw [3]fsr1
  9998  0C6B  00AC               	movwf	??_readIAnalog+4
  9999  0C6C  0869               	movf	_IsampleIndex+1,w
 10000  0C6D  00AE               	movwf	??_readIAnalog+6
 10001  0C6E  0868               	movf	_IsampleIndex,w
 10002  0C6F  00AD               	movwf	??_readIAnalog+5
 10003  0C70  35AD               	lslf	??_readIAnalog+5,f
 10004  0C71  0DAE               	rlf	??_readIAnalog+6,f
 10005  0C72  0827               	movf	readIAnalog@channel+1,w
 10006  0C73  00F1               	movwf	___wmul@multiplier+1
 10007  0C74  0826               	movf	readIAnalog@channel,w
 10008  0C75  00F0               	movwf	___wmul@multiplier
 10009  0C76  3064               	movlw	100
 10010  0C77  00F2               	movwf	___wmul@multiplicand
 10011  0C78  3000               	movlw	0
 10012  0C79  00F3               	movwf	___wmul@multiplicand+1
 10013  0C7A  3191  2187  318C   	fcall	___wmul
 10014  0C7D  30E8               	movlw	232
 10015  0C7E  0020               	movlb	0	; select bank0
 10016  0C7F  00AF               	movwf	??_readIAnalog+7
 10017  0C80  3021               	movlw	33
 10018  0C81  00B0               	movwf	??_readIAnalog+8
 10019  0C82  0870               	movf	?___wmul,w
 10020  0C83  072F               	addwf	??_readIAnalog+7,w
 10021  0C84  00B1               	movwf	??_readIAnalog+9
 10022  0C85  0871               	movf	?___wmul+1,w
 10023  0C86  3D30               	addwfc	??_readIAnalog+8,w
 10024  0C87  00B2               	movwf	??_readIAnalog+10
 10025  0C88  082D               	movf	??_readIAnalog+5,w
 10026  0C89  0731               	addwf	??_readIAnalog+9,w
 10027  0C8A  0086               	movwf	6
 10028  0C8B  082E               	movf	??_readIAnalog+6,w
 10029  0C8C  3D32               	addwfc	??_readIAnalog+10,w
 10030  0C8D  0087               	movwf	7
 10031  0C8E  3F40               	moviw [0]fsr1
 10032  0C8F  00B3               	movwf	??_readIAnalog+11
 10033  0C90  3F41               	moviw [1]fsr1
 10034  0C91  00B4               	movwf	??_readIAnalog+12
 10035  0C92  0833               	movf	??_readIAnalog+11,w
 10036  0C93  00B5               	movwf	??_readIAnalog+13
 10037  0C94  0834               	movf	??_readIAnalog+12,w
 10038  0C95  00B6               	movwf	??_readIAnalog+14
 10039  0C96  3000               	movlw	0
 10040  0C97  1BB6               	btfsc	??_readIAnalog+14,7
 10041  0C98  30FF               	movlw	255
 10042  0C99  00B7               	movwf	??_readIAnalog+15
 10043  0C9A  00B8               	movwf	??_readIAnalog+16
 10044  0C9B  09B5               	comf	??_readIAnalog+13,f
 10045  0C9C  09B6               	comf	??_readIAnalog+14,f
 10046  0C9D  09B7               	comf	??_readIAnalog+15,f
 10047  0C9E  09B8               	comf	??_readIAnalog+16,f
 10048  0C9F  0AB5               	incf	??_readIAnalog+13,f
 10049  0CA0  1903               	skipnz
 10050  0CA1  0AB6               	incf	??_readIAnalog+14,f
 10051  0CA2  1903               	skipnz
 10052  0CA3  0AB7               	incf	??_readIAnalog+15,f
 10053  0CA4  1903               	skipnz
 10054  0CA5  0AB8               	incf	??_readIAnalog+16,f
 10055  0CA6  0835               	movf	??_readIAnalog+13,w
 10056  0CA7  07A9               	addwf	??_readIAnalog+1,f
 10057  0CA8  0836               	movf	??_readIAnalog+14,w
 10058  0CA9  3DAA               	addwfc	??_readIAnalog+2,f
 10059  0CAA  0837               	movf	??_readIAnalog+15,w
 10060  0CAB  3DAB               	addwfc	??_readIAnalog+3,f
 10061  0CAC  0838               	movf	??_readIAnalog+16,w
 10062  0CAD  3DAC               	addwfc	??_readIAnalog+4,f
 10063  0CAE  0826               	movf	readIAnalog@channel,w
 10064  0CAF  00B9               	movwf	??_readIAnalog+17
 10065  0CB0  3001               	movlw	1
 10066  0CB1                     u3315:	
 10067  0CB1  35B9               	lslf	??_readIAnalog+17,f
 10068  0CB2  3EFF               	addlw	-1
 10069  0CB3  1D03               	skipz
 10070  0CB4  2CB1               	goto	u3315
 10071  0CB5  3539               	lslf	??_readIAnalog+17,w
 10072  0CB6  3E30               	addlw	(low (_Itotals| (0+256)))& (0+255)
 10073  0CB7  0086               	movwf	6
 10074  0CB8  3001               	movlw	1	; select bank2/3
 10075  0CB9  0087               	movwf	7
 10076  0CBA  0829               	movf	??_readIAnalog+1,w
 10077  0CBB  3FC0               	movwi [0]fsr1
 10078  0CBC  082A               	movf	??_readIAnalog+2,w
 10079  0CBD  3FC1               	movwi [1]fsr1
 10080  0CBE  082B               	movf	??_readIAnalog+3,w
 10081  0CBF  3FC2               	movwi [2]fsr1
 10082  0CC0  082C               	movf	??_readIAnalog+4,w
 10083  0CC1  3FC3               	movwi [3]fsr1
 10084                           
 10085                           ;adc.c: 88: Isamples[channel][IsampleIndex] = value;
 10086  0CC2  0869               	movf	_IsampleIndex+1,w
 10087  0CC3  00A9               	movwf	??_readIAnalog+1
 10088  0CC4  0868               	movf	_IsampleIndex,w
 10089  0CC5  00A8               	movwf	??_readIAnalog
 10090  0CC6  35A8               	lslf	??_readIAnalog,f
 10091  0CC7  0DA9               	rlf	??_readIAnalog+1,f
 10092  0CC8  0827               	movf	readIAnalog@channel+1,w
 10093  0CC9  00F1               	movwf	___wmul@multiplier+1
 10094  0CCA  0826               	movf	readIAnalog@channel,w
 10095  0CCB  00F0               	movwf	___wmul@multiplier
 10096  0CCC  3064               	movlw	100
 10097  0CCD  00F2               	movwf	___wmul@multiplicand
 10098  0CCE  3000               	movlw	0
 10099  0CCF  00F3               	movwf	___wmul@multiplicand+1
 10100  0CD0  3191  2187  318C   	fcall	___wmul
 10101  0CD3  30E8               	movlw	232
 10102  0CD4  0020               	movlb	0	; select bank0
 10103  0CD5  00AA               	movwf	??_readIAnalog+2
 10104  0CD6  3021               	movlw	33
 10105  0CD7  00AB               	movwf	??_readIAnalog+3
 10106  0CD8  0870               	movf	?___wmul,w
 10107  0CD9  072A               	addwf	??_readIAnalog+2,w
 10108  0CDA  00AC               	movwf	??_readIAnalog+4
 10109  0CDB  0871               	movf	?___wmul+1,w
 10110  0CDC  3D2B               	addwfc	??_readIAnalog+3,w
 10111  0CDD  00AD               	movwf	??_readIAnalog+5
 10112  0CDE  0828               	movf	??_readIAnalog,w
 10113  0CDF  072C               	addwf	??_readIAnalog+4,w
 10114  0CE0  0086               	movwf	6
 10115  0CE1  0829               	movf	??_readIAnalog+1,w
 10116  0CE2  3D2D               	addwfc	??_readIAnalog+5,w
 10117  0CE3  0087               	movwf	7
 10118  0CE4  087B               	movf	readIAnalog@value,w
 10119  0CE5  3FC0               	movwi [0]fsr1
 10120  0CE6  087C               	movf	readIAnalog@value+1,w
 10121  0CE7  3FC1               	movwi [1]fsr1
 10122                           
 10123                           ;adc.c: 90: Itotals[channel] = Itotals[channel]+Isamples[channel][IsampleIndex];
 10124  0CE8  0826               	movf	readIAnalog@channel,w
 10125  0CE9  00A8               	movwf	??_readIAnalog
 10126  0CEA  3001               	movlw	1
 10127  0CEB                     u3325:	
 10128  0CEB  35A8               	lslf	??_readIAnalog,f
 10129  0CEC  3EFF               	addlw	-1
 10130  0CED  1D03               	skipz
 10131  0CEE  2CEB               	goto	u3325
 10132  0CEF  3528               	lslf	??_readIAnalog,w
 10133  0CF0  3E30               	addlw	(low (_Itotals| (0+256)))& (0+255)
 10134  0CF1  0086               	movwf	6
 10135  0CF2  3001               	movlw	1	; select bank2/3
 10136  0CF3  0087               	movwf	7
 10137  0CF4  3F40               	moviw [0]fsr1
 10138  0CF5  00A9               	movwf	??_readIAnalog+1
 10139  0CF6  3F41               	moviw [1]fsr1
 10140  0CF7  00AA               	movwf	??_readIAnalog+2
 10141  0CF8  3F42               	moviw [2]fsr1
 10142  0CF9  00AB               	movwf	??_readIAnalog+3
 10143  0CFA  3F43               	moviw [3]fsr1
 10144  0CFB  00AC               	movwf	??_readIAnalog+4
 10145  0CFC  0869               	movf	_IsampleIndex+1,w
 10146  0CFD  00AE               	movwf	??_readIAnalog+6
 10147  0CFE  0868               	movf	_IsampleIndex,w
 10148  0CFF  00AD               	movwf	??_readIAnalog+5
 10149  0D00  35AD               	lslf	??_readIAnalog+5,f
 10150  0D01  0DAE               	rlf	??_readIAnalog+6,f
 10151  0D02  0827               	movf	readIAnalog@channel+1,w
 10152  0D03  00F1               	movwf	___wmul@multiplier+1
 10153  0D04  0826               	movf	readIAnalog@channel,w
 10154  0D05  00F0               	movwf	___wmul@multiplier
 10155  0D06  3064               	movlw	100
 10156  0D07  00F2               	movwf	___wmul@multiplicand
 10157  0D08  3000               	movlw	0
 10158  0D09  00F3               	movwf	___wmul@multiplicand+1
 10159  0D0A  3191  2187  318C   	fcall	___wmul
 10160  0D0D  30E8               	movlw	232
 10161  0D0E  0020               	movlb	0	; select bank0
 10162  0D0F  00AF               	movwf	??_readIAnalog+7
 10163  0D10  3021               	movlw	33
 10164  0D11  00B0               	movwf	??_readIAnalog+8
 10165  0D12  0870               	movf	?___wmul,w
 10166  0D13  072F               	addwf	??_readIAnalog+7,w
 10167  0D14  00B1               	movwf	??_readIAnalog+9
 10168  0D15  0871               	movf	?___wmul+1,w
 10169  0D16  3D30               	addwfc	??_readIAnalog+8,w
 10170  0D17  00B2               	movwf	??_readIAnalog+10
 10171  0D18  082D               	movf	??_readIAnalog+5,w
 10172  0D19  0731               	addwf	??_readIAnalog+9,w
 10173  0D1A  0086               	movwf	6
 10174  0D1B  082E               	movf	??_readIAnalog+6,w
 10175  0D1C  3D32               	addwfc	??_readIAnalog+10,w
 10176  0D1D  0087               	movwf	7
 10177  0D1E  3F40               	moviw [0]fsr1
 10178  0D1F  00B3               	movwf	??_readIAnalog+11
 10179  0D20  3F41               	moviw [1]fsr1
 10180  0D21  00B4               	movwf	??_readIAnalog+12
 10181  0D22  0833               	movf	??_readIAnalog+11,w
 10182  0D23  00B5               	movwf	??_readIAnalog+13
 10183  0D24  0834               	movf	??_readIAnalog+12,w
 10184  0D25  00B6               	movwf	??_readIAnalog+14
 10185  0D26  3000               	movlw	0
 10186  0D27  1BB6               	btfsc	??_readIAnalog+14,7
 10187  0D28  30FF               	movlw	255
 10188  0D29  00B7               	movwf	??_readIAnalog+15
 10189  0D2A  00B8               	movwf	??_readIAnalog+16
 10190  0D2B  0835               	movf	??_readIAnalog+13,w
 10191  0D2C  07A9               	addwf	??_readIAnalog+1,f
 10192  0D2D  0836               	movf	??_readIAnalog+14,w
 10193  0D2E  3DAA               	addwfc	??_readIAnalog+2,f
 10194  0D2F  0837               	movf	??_readIAnalog+15,w
 10195  0D30  3DAB               	addwfc	??_readIAnalog+3,f
 10196  0D31  0838               	movf	??_readIAnalog+16,w
 10197  0D32  3DAC               	addwfc	??_readIAnalog+4,f
 10198  0D33  0826               	movf	readIAnalog@channel,w
 10199  0D34  00B9               	movwf	??_readIAnalog+17
 10200  0D35  3001               	movlw	1
 10201  0D36                     u3335:	
 10202  0D36  35B9               	lslf	??_readIAnalog+17,f
 10203  0D37  3EFF               	addlw	-1
 10204  0D38  1D03               	skipz
 10205  0D39  2D36               	goto	u3335
 10206  0D3A  3539               	lslf	??_readIAnalog+17,w
 10207  0D3B  3E30               	addlw	(low (_Itotals| (0+256)))& (0+255)
 10208  0D3C  0086               	movwf	6
 10209  0D3D  3001               	movlw	1	; select bank2/3
 10210  0D3E  0087               	movwf	7
 10211  0D3F  0829               	movf	??_readIAnalog+1,w
 10212  0D40  3FC0               	movwi [0]fsr1
 10213  0D41  082A               	movf	??_readIAnalog+2,w
 10214  0D42  3FC1               	movwi [1]fsr1
 10215  0D43  082B               	movf	??_readIAnalog+3,w
 10216  0D44  3FC2               	movwi [2]fsr1
 10217  0D45  082C               	movf	??_readIAnalog+4,w
 10218  0D46  3FC3               	movwi [3]fsr1
 10219                           
 10220                           ;adc.c: 92: if(channel>=(4-1))
 10221  0D47  3000               	movlw	0
 10222  0D48  0227               	subwf	readIAnalog@channel+1,w
 10223  0D49  3003               	movlw	3
 10224  0D4A  1903               	skipnz
 10225  0D4B  0226               	subwf	readIAnalog@channel,w
 10226  0D4C  1C03               	skipc
 10227  0D4D  2D5B               	goto	l2975
 10228                           
 10229                           ;adc.c: 93: {
 10230                           ;adc.c: 94: IsampleIndex+=1;
 10231  0D4E  3001               	movlw	1
 10232  0D4F  07E8               	addwf	_IsampleIndex,f
 10233  0D50  3000               	movlw	0
 10234  0D51  3DE9               	addwfc	_IsampleIndex+1,f
 10235                           
 10236                           ;adc.c: 95: if(IsampleIndex >= 50)IsampleIndex = 0;
 10237  0D52  3000               	movlw	0
 10238  0D53  0269               	subwf	_IsampleIndex+1,w
 10239  0D54  3032               	movlw	50
 10240  0D55  1903               	skipnz
 10241  0D56  0268               	subwf	_IsampleIndex,w
 10242  0D57  1C03               	skipc
 10243  0D58  2D5B               	goto	l2975
 10244  0D59  01E8               	clrf	_IsampleIndex
 10245  0D5A  01E9               	clrf	_IsampleIndex+1
 10246  0D5B                     l2975:	
 10247                           
 10248                           ;adc.c: 96: }
 10249                           ;adc.c: 98: value = Itotals[channel]/50;
 10250  0D5B  3000               	movlw	0
 10251  0D5C  00F3               	movwf	___aldiv@divisor+3
 10252  0D5D  3000               	movlw	0
 10253  0D5E  00F2               	movwf	___aldiv@divisor+2
 10254  0D5F  3000               	movlw	0
 10255  0D60  00F1               	movwf	___aldiv@divisor+1
 10256  0D61  3032               	movlw	50
 10257  0D62  00F0               	movwf	___aldiv@divisor
 10258  0D63  0826               	movf	readIAnalog@channel,w
 10259  0D64  00A8               	movwf	??_readIAnalog
 10260  0D65  3001               	movlw	1
 10261  0D66                     u3365:	
 10262  0D66  35A8               	lslf	??_readIAnalog,f
 10263  0D67  3EFF               	addlw	-1
 10264  0D68  1D03               	skipz
 10265  0D69  2D66               	goto	u3365
 10266  0D6A  3528               	lslf	??_readIAnalog,w
 10267  0D6B  3E30               	addlw	(low (_Itotals| (0+256)))& (0+255)
 10268  0D6C  0086               	movwf	6
 10269  0D6D  3001               	movlw	1	; select bank2/3
 10270  0D6E  0087               	movwf	7
 10271  0D6F  3F40               	moviw [0]fsr1
 10272  0D70  00F4               	movwf	___aldiv@dividend
 10273  0D71  3F41               	moviw [1]fsr1
 10274  0D72  00F5               	movwf	___aldiv@dividend+1
 10275  0D73  3F42               	moviw [2]fsr1
 10276  0D74  00F6               	movwf	___aldiv@dividend+2
 10277  0D75  3F43               	moviw [3]fsr1
 10278  0D76  00F7               	movwf	___aldiv@dividend+3
 10279  0D77  3196  26D5         	fcall	___aldiv
 10280  0D79  0871               	movf	?___aldiv+1,w
 10281  0D7A  00FC               	movwf	readIAnalog@value+1
 10282  0D7B  0870               	movf	?___aldiv,w
 10283  0D7C  00FB               	movwf	readIAnalog@value
 10284                           
 10285                           ;adc.c: 100: return value;
 10286  0D7D  087C               	movf	readIAnalog@value+1,w
 10287  0D7E  0020               	movlb	0	; select bank0
 10288  0D7F  00A7               	movwf	?_readIAnalog+1
 10289  0D80  087B               	movf	readIAnalog@value,w
 10290  0D81  00A6               	movwf	?_readIAnalog
 10291  0D82  0008               	return
 10292  0D83                     __end_of_readIAnalog:	
 10293                           
 10294                           	psect	text10
 10295  16D5                     __ptext10:	
 10296 ;; *************** function ___aldiv *****************
 10297 ;; Defined at:
 10298 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\aldiv.c"
 10299 ;; Parameters:    Size  Location     Type
 10300 ;;  divisor         4    0[COMMON] long 
 10301 ;;  dividend        4    4[COMMON] long 
 10302 ;; Auto vars:     Size  Location     Type
 10303 ;;  quotient        4    2[BANK0 ] long 
 10304 ;;  sign            1    1[BANK0 ] unsigned char 
 10305 ;;  counter         1    0[BANK0 ] unsigned char 
 10306 ;; Return value:  Size  Location     Type
 10307 ;;                  4    0[COMMON] long 
 10308 ;; Registers used:
 10309 ;;		wreg, status,2, status,0
 10310 ;; Tracked objects:
 10311 ;;		On entry : 0/0
 10312 ;;		On exit  : 0/0
 10313 ;;		Unchanged: 0/0
 10314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10315 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10316 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10317 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10318 ;;      Totals:         9       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10319 ;;Total ram usage:       15 bytes
 10320 ;; Hardware stack levels used:    1
 10321 ;; This function calls:
 10322 ;;		Nothing
 10323 ;; This function is called by:
 10324 ;;		_readIAnalog
 10325 ;;		_readVAnalog
 10326 ;; This function uses a non-reentrant model
 10327 ;;
 10328                           
 10329                           
 10330                           ;psect for function ___aldiv
 10331  16D5                     ___aldiv:	
 10332                           
 10333                           ;incstack = 0
 10334                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
 10335  16D5  0020               	movlb	0	; select bank0
 10336  16D6  01A1               	clrf	___aldiv@sign
 10337  16D7  1FF3               	btfss	___aldiv@divisor+3,7
 10338  16D8  2EE6               	goto	l680
 10339  16D9  09F0               	comf	___aldiv@divisor,f
 10340  16DA  09F1               	comf	___aldiv@divisor+1,f
 10341  16DB  09F2               	comf	___aldiv@divisor+2,f
 10342  16DC  09F3               	comf	___aldiv@divisor+3,f
 10343  16DD  0AF0               	incf	___aldiv@divisor,f
 10344  16DE  1903               	skipnz
 10345  16DF  0AF1               	incf	___aldiv@divisor+1,f
 10346  16E0  1903               	skipnz
 10347  16E1  0AF2               	incf	___aldiv@divisor+2,f
 10348  16E2  1903               	skipnz
 10349  16E3  0AF3               	incf	___aldiv@divisor+3,f
 10350  16E4  01A1               	clrf	___aldiv@sign
 10351  16E5  0AA1               	incf	___aldiv@sign,f
 10352  16E6                     l680:	
 10353  16E6  1FF7               	btfss	___aldiv@dividend+3,7
 10354  16E7  2EF7               	goto	l2815
 10355  16E8  09F4               	comf	___aldiv@dividend,f
 10356  16E9  09F5               	comf	___aldiv@dividend+1,f
 10357  16EA  09F6               	comf	___aldiv@dividend+2,f
 10358  16EB  09F7               	comf	___aldiv@dividend+3,f
 10359  16EC  0AF4               	incf	___aldiv@dividend,f
 10360  16ED  1903               	skipnz
 10361  16EE  0AF5               	incf	___aldiv@dividend+1,f
 10362  16EF  1903               	skipnz
 10363  16F0  0AF6               	incf	___aldiv@dividend+2,f
 10364  16F1  1903               	skipnz
 10365  16F2  0AF7               	incf	___aldiv@dividend+3,f
 10366  16F3  3001               	movlw	1
 10367  16F4  00F8               	movwf	??___aldiv
 10368  16F5  0878               	movf	??___aldiv,w
 10369  16F6  06A1               	xorwf	___aldiv@sign,f
 10370  16F7                     l2815:	
 10371  16F7  3000               	movlw	0
 10372  16F8  00A5               	movwf	___aldiv@quotient+3
 10373  16F9  3000               	movlw	0
 10374  16FA  00A4               	movwf	___aldiv@quotient+2
 10375  16FB  3000               	movlw	0
 10376  16FC  00A3               	movwf	___aldiv@quotient+1
 10377  16FD  3000               	movlw	0
 10378  16FE  00A2               	movwf	___aldiv@quotient
 10379  16FF  0873               	movf	___aldiv@divisor+3,w
 10380  1700  0472               	iorwf	___aldiv@divisor+2,w
 10381  1701  0471               	iorwf	___aldiv@divisor+1,w
 10382  1702  0470               	iorwf	___aldiv@divisor,w
 10383  1703  1903               	skipnz
 10384  1704  2F40               	goto	l2837
 10385  1705  01A0               	clrf	___aldiv@counter
 10386  1706  0AA0               	incf	___aldiv@counter,f
 10387  1707                     l2823:	
 10388  1707  1BF3               	btfsc	___aldiv@divisor+3,7
 10389  1708  2F15               	goto	l2825
 10390  1709  3001               	movlw	1
 10391  170A                     u2985:	
 10392  170A  35F0               	lslf	___aldiv@divisor,f
 10393  170B  0DF1               	rlf	___aldiv@divisor+1,f
 10394  170C  0DF2               	rlf	___aldiv@divisor+2,f
 10395  170D  0DF3               	rlf	___aldiv@divisor+3,f
 10396  170E  0B89               	decfsz	9,f
 10397  170F  2F0A               	goto	u2985
 10398  1710  3001               	movlw	1
 10399  1711  00F8               	movwf	??___aldiv
 10400  1712  0878               	movf	??___aldiv,w
 10401  1713  07A0               	addwf	___aldiv@counter,f
 10402  1714  2F07               	goto	l2823
 10403  1715                     l2825:	
 10404  1715  3001               	movlw	1
 10405  1716                     u3005:	
 10406  1716  35A2               	lslf	___aldiv@quotient,f
 10407  1717  0DA3               	rlf	___aldiv@quotient+1,f
 10408  1718  0DA4               	rlf	___aldiv@quotient+2,f
 10409  1719  0DA5               	rlf	___aldiv@quotient+3,f
 10410  171A  0B89               	decfsz	9,f
 10411  171B  2F16               	goto	u3005
 10412  171C  0873               	movf	___aldiv@divisor+3,w
 10413  171D  0277               	subwf	___aldiv@dividend+3,w
 10414  171E  1D03               	skipz
 10415  171F  2F2A               	goto	u3015
 10416  1720  0872               	movf	___aldiv@divisor+2,w
 10417  1721  0276               	subwf	___aldiv@dividend+2,w
 10418  1722  1D03               	skipz
 10419  1723  2F2A               	goto	u3015
 10420  1724  0871               	movf	___aldiv@divisor+1,w
 10421  1725  0275               	subwf	___aldiv@dividend+1,w
 10422  1726  1D03               	skipz
 10423  1727  2F2A               	goto	u3015
 10424  1728  0870               	movf	___aldiv@divisor,w
 10425  1729  0274               	subwf	___aldiv@dividend,w
 10426  172A                     u3015:	
 10427  172A  1C03               	skipc
 10428  172B  2F35               	goto	l2833
 10429  172C  0870               	movf	___aldiv@divisor,w
 10430  172D  02F4               	subwf	___aldiv@dividend,f
 10431  172E  0871               	movf	___aldiv@divisor+1,w
 10432  172F  3BF5               	subwfb	___aldiv@dividend+1,f
 10433  1730  0872               	movf	___aldiv@divisor+2,w
 10434  1731  3BF6               	subwfb	___aldiv@dividend+2,f
 10435  1732  0873               	movf	___aldiv@divisor+3,w
 10436  1733  3BF7               	subwfb	___aldiv@dividend+3,f
 10437  1734  1422               	bsf	___aldiv@quotient,0
 10438  1735                     l2833:	
 10439  1735  3001               	movlw	1
 10440  1736                     u3025:	
 10441  1736  36F3               	lsrf	___aldiv@divisor+3,f
 10442  1737  0CF2               	rrf	___aldiv@divisor+2,f
 10443  1738  0CF1               	rrf	___aldiv@divisor+1,f
 10444  1739  0CF0               	rrf	___aldiv@divisor,f
 10445  173A  0B89               	decfsz	9,f
 10446  173B  2F36               	goto	u3025
 10447  173C  3001               	movlw	1
 10448  173D  02A0               	subwf	___aldiv@counter,f
 10449  173E  1D03               	btfss	3,2
 10450  173F  2F15               	goto	l2825
 10451  1740                     l2837:	
 10452  1740  0821               	movf	___aldiv@sign,w
 10453  1741  1903               	btfsc	3,2
 10454  1742  2F4E               	goto	l2841
 10455  1743  09A2               	comf	___aldiv@quotient,f
 10456  1744  09A3               	comf	___aldiv@quotient+1,f
 10457  1745  09A4               	comf	___aldiv@quotient+2,f
 10458  1746  09A5               	comf	___aldiv@quotient+3,f
 10459  1747  0AA2               	incf	___aldiv@quotient,f
 10460  1748  1903               	skipnz
 10461  1749  0AA3               	incf	___aldiv@quotient+1,f
 10462  174A  1903               	skipnz
 10463  174B  0AA4               	incf	___aldiv@quotient+2,f
 10464  174C  1903               	skipnz
 10465  174D  0AA5               	incf	___aldiv@quotient+3,f
 10466  174E                     l2841:	
 10467  174E  0825               	movf	___aldiv@quotient+3,w
 10468  174F  00F3               	movwf	?___aldiv+3
 10469  1750  0824               	movf	___aldiv@quotient+2,w
 10470  1751  00F2               	movwf	?___aldiv+2
 10471  1752  0823               	movf	___aldiv@quotient+1,w
 10472  1753  00F1               	movwf	?___aldiv+1
 10473  1754  0822               	movf	___aldiv@quotient,w
 10474  1755  00F0               	movwf	?___aldiv
 10475  1756  0008               	return
 10476  1757                     __end_of___aldiv:	
 10477                           
 10478                           	psect	text11
 10479  1653                     __ptext11:	
 10480 ;; *************** function _readButton *****************
 10481 ;; Defined at:
 10482 ;;		line 9 in file "buttons.c"
 10483 ;; Parameters:    Size  Location     Type
 10484 ;;		None
 10485 ;; Auto vars:     Size  Location     Type
 10486 ;;		None
 10487 ;; Return value:  Size  Location     Type
 10488 ;;                  1    wreg      unsigned char 
 10489 ;; Registers used:
 10490 ;;		wreg, status,2, status,0, pclath, cstack
 10491 ;; Tracked objects:
 10492 ;;		On entry : 0/0
 10493 ;;		On exit  : 0/0
 10494 ;;		Unchanged: 0/0
 10495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10497 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10498 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10499 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10500 ;;Total ram usage:        2 bytes
 10501 ;; Hardware stack levels used:    1
 10502 ;; Hardware stack levels required when called:    1
 10503 ;; This function calls:
 10504 ;;		_ADCRead
 10505 ;; This function is called by:
 10506 ;;		_main
 10507 ;; This function uses a non-reentrant model
 10508 ;;
 10509                           
 10510                           
 10511                           ;psect for function _readButton
 10512  1653                     _readButton:	
 10513                           
 10514                           ;buttons.c: 11: readButtons=ADCRead(11);
 10515                           
 10516                           ;incstack = 0
 10517                           ; Regs used in _readButton: [wreg+status,2+status,0+pclath+cstack]
 10518  1653  300B               	movlw	11
 10519  1654  3191  2146  3196   	fcall	_ADCRead
 10520  1657  0871               	movf	?_ADCRead+1,w
 10521  1658  0020               	movlb	0	; select bank0
 10522  1659  00DF               	movwf	_readButtons+1
 10523  165A  0870               	movf	?_ADCRead,w
 10524  165B  00DE               	movwf	_readButtons
 10525                           
 10526                           ;buttons.c: 13: if(readButtons>=365&&readButtons<405)
 10527  165C  085F               	movf	_readButtons+1,w
 10528  165D  3A80               	xorlw	128
 10529  165E  00F4               	movwf	??_readButton
 10530  165F  3081               	movlw	129
 10531  1660  0274               	subwf	??_readButton,w
 10532  1661  1D03               	skipz
 10533  1662  2E65               	goto	u3655
 10534  1663  306D               	movlw	109
 10535  1664  025E               	subwf	_readButtons,w
 10536  1665                     u3655:	
 10537  1665  1C03               	skipc
 10538  1666  2E77               	goto	l3083
 10539  1667  0020               	movlb	0	; select bank0
 10540  1668  085F               	movf	_readButtons+1,w
 10541  1669  3A80               	xorlw	128
 10542  166A  00F4               	movwf	??_readButton
 10543  166B  3081               	movlw	129
 10544  166C  0274               	subwf	??_readButton,w
 10545  166D  1D03               	skipz
 10546  166E  2E71               	goto	u3665
 10547  166F  3095               	movlw	149
 10548  1670  025E               	subwf	_readButtons,w
 10549  1671                     u3665:	
 10550  1671  1803               	skipnc
 10551  1672  2E77               	goto	l3083
 10552                           
 10553                           ;buttons.c: 14: {
 10554                           ;buttons.c: 15: button=1;
 10555  1673  0020               	movlb	0	; select bank0
 10556  1674  01EC               	clrf	_button
 10557  1675  0AEC               	incf	_button,f
 10558                           
 10559                           ;buttons.c: 16: }
 10560  1676  2EA5               	goto	l3095
 10561  1677                     l3083:	
 10562                           
 10563                           ;buttons.c: 18: else if(readButtons>=535&&readButtons<590)
 10564  1677  0020               	movlb	0	; select bank0
 10565  1678  085F               	movf	_readButtons+1,w
 10566  1679  3A80               	xorlw	128
 10567  167A  00F4               	movwf	??_readButton
 10568  167B  3082               	movlw	130
 10569  167C  0274               	subwf	??_readButton,w
 10570  167D  1D03               	skipz
 10571  167E  2E81               	goto	u3675
 10572  167F  3017               	movlw	23
 10573  1680  025E               	subwf	_readButtons,w
 10574  1681                     u3675:	
 10575  1681  1C03               	skipc
 10576  1682  2E91               	goto	l3089
 10577  1683  0020               	movlb	0	; select bank0
 10578  1684  085F               	movf	_readButtons+1,w
 10579  1685  3A80               	xorlw	128
 10580  1686  00F4               	movwf	??_readButton
 10581  1687  3082               	movlw	130
 10582  1688  0274               	subwf	??_readButton,w
 10583  1689  1D03               	skipz
 10584  168A  2E8D               	goto	u3685
 10585  168B  304E               	movlw	78
 10586  168C  025E               	subwf	_readButtons,w
 10587  168D                     u3685:	
 10588  168D  1803               	skipnc
 10589  168E  2E91               	goto	l3089
 10590                           
 10591                           ;buttons.c: 19: {
 10592                           ;buttons.c: 20: button=2;
 10593  168F  3002               	movlw	2
 10594  1690  2E9E               	goto	L8
 10595  1691                     l3089:	
 10596                           ;buttons.c: 21: }
 10597                           
 10598                           
 10599                           ;buttons.c: 23: else if(readButtons>745)
 10600  1691  0020               	movlb	0	; select bank0
 10601  1692  085F               	movf	_readButtons+1,w
 10602  1693  3A80               	xorlw	128
 10603  1694  00F4               	movwf	??_readButton
 10604  1695  3082               	movlw	130
 10605  1696  0274               	subwf	??_readButton,w
 10606  1697  1D03               	skipz
 10607  1698  2E9B               	goto	u3695
 10608  1699  30EA               	movlw	234
 10609  169A  025E               	subwf	_readButtons,w
 10610  169B                     u3695:	
 10611  169B  1C03               	skipc
 10612  169C  2EA3               	goto	l3093
 10613                           
 10614                           ;buttons.c: 24: {
 10615                           ;buttons.c: 25: button=3;
 10616  169D  3003               	movlw	3
 10617  169E                     L8:	
 10618  169E  00F4               	movwf	??_readButton
 10619  169F  0874               	movf	??_readButton,w
 10620  16A0  0020               	movlb	0	; select bank0
 10621  16A1  00EC               	movwf	_button
 10622                           
 10623                           ;buttons.c: 26: }
 10624  16A2  2EA5               	goto	l3095
 10625  16A3                     l3093:	
 10626                           
 10627                           ;buttons.c: 28: else
 10628                           ;buttons.c: 29: {
 10629                           ;buttons.c: 30: button=0;
 10630  16A3  0020               	movlb	0	; select bank0
 10631  16A4  01EC               	clrf	_button
 10632  16A5                     l3095:	
 10633                           
 10634                           ;buttons.c: 31: }
 10635                           ;buttons.c: 33: if (button!=0)
 10636  16A5  086C               	movf	_button,w
 10637  16A6  1903               	btfsc	3,2
 10638  16A7  2ED2               	goto	l3115
 10639                           
 10640                           ;buttons.c: 34: {
 10641                           ;buttons.c: 35: if (button!=lastButton)
 10642  16A8  086C               	movf	_button,w
 10643  16A9  066B               	xorwf	_lastButton,w
 10644  16AA  1903               	skipnz
 10645  16AB  2EB1               	goto	l3103
 10646                           
 10647                           ;buttons.c: 36: {
 10648                           ;buttons.c: 37: lastButton=button;
 10649  16AC  086C               	movf	_button,w
 10650  16AD  00F4               	movwf	??_readButton
 10651  16AE  0874               	movf	??_readButton,w
 10652  16AF  00EB               	movwf	_lastButton
 10653  16B0  2ED2               	goto	l3115
 10654  16B1                     l3103:	
 10655                           ;buttons.c: 39: }
 10656                           
 10657                           ;buttons.c: 38: j=0;
 10658                           
 10659                           
 10660                           ;buttons.c: 40: else
 10661                           ;buttons.c: 41: {
 10662                           ;buttons.c: 42: j+=1;
 10663  16B1  3001               	movlw	1
 10664  16B2  00F4               	movwf	??_readButton
 10665  16B3  0874               	movf	??_readButton,w
 10666  16B4  07EA               	addwf	_j,f
 10667                           
 10668                           ;buttons.c: 44: if(j==1)
 10669  16B5  036A               	decf	_j,w
 10670  16B6  1D03               	btfss	3,2
 10671  16B7  2EBA               	goto	l3109
 10672                           
 10673                           ;buttons.c: 45: {
 10674                           ;buttons.c: 46: return (lastButton);
 10675  16B8  086B               	movf	_lastButton,w
 10676  16B9  0008               	return
 10677  16BA                     l3109:	
 10678                           
 10679                           ;buttons.c: 47: }
 10680                           ;buttons.c: 49: if (j>10)
 10681  16BA  086A               	movf	_j,w
 10682  16BB  3A80               	xorlw	128
 10683  16BC  3E75               	addlw	-139
 10684  16BD  1C03               	skipc
 10685  16BE  2ED3               	goto	l3117
 10686                           
 10687                           ;buttons.c: 50: {
 10688                           ;buttons.c: 51: _delay((unsigned long)((25)*(32000000/4000.0)));
 10689  16BF  3002               	movlw	2
 10690  16C0  00F5               	movwf	??_readButton+1
 10691  16C1  3004               	movlw	4
 10692  16C2  00F4               	movwf	??_readButton
 10693  16C3  30BA               	movlw	186
 10694  16C4                     u4337:	
 10695  16C4  0B89               	decfsz	9,f
 10696  16C5  2EC4               	goto	u4337
 10697  16C6  0BF4               	decfsz	??_readButton,f
 10698  16C7  2EC4               	goto	u4337
 10699  16C8  0BF5               	decfsz	??_readButton+1,f
 10700  16C9  2EC4               	goto	u4337
 10701  16CA  3200               	nop2
 10702                           
 10703                           ;buttons.c: 52: j=10;
 10704  16CB  300A               	movlw	10
 10705  16CC  00F4               	movwf	??_readButton
 10706  16CD  0874               	movf	??_readButton,w
 10707  16CE  0020               	movlb	0	; select bank0
 10708  16CF  00EA               	movwf	_j
 10709                           
 10710                           ;buttons.c: 53: return (lastButton);
 10711  16D0  086B               	movf	_lastButton,w
 10712  16D1  0008               	return
 10713  16D2                     l3115:	
 10714                           ;buttons.c: 54: }
 10715                           ;buttons.c: 55: }
 10716                           ;buttons.c: 56: goto end;
 10717                           
 10718                           
 10719                           ;buttons.c: 57: }
 10720                           ;buttons.c: 59: j=0;
 10721  16D2  01EA               	clrf	_j
 10722  16D3                     l3117:	
 10723                           ;buttons.c: 61: end:
 10724                           
 10725                           
 10726                           ;buttons.c: 63: return (0);
 10727  16D3  3000               	movlw	0
 10728  16D4  0008               	return
 10729  16D5                     __end_of_readButton:	
 10730                           
 10731                           	psect	text12
 10732  1146                     __ptext12:	
 10733 ;; *************** function _ADCRead *****************
 10734 ;; Defined at:
 10735 ;;		line 22 in file "adc.c"
 10736 ;; Parameters:    Size  Location     Type
 10737 ;;  channel         1    wreg     enum E14315
 10738 ;; Auto vars:     Size  Location     Type
 10739 ;;  channel         1    3[COMMON] enum E14315
 10740 ;; Return value:  Size  Location     Type
 10741 ;;                  2    0[COMMON] int 
 10742 ;; Registers used:
 10743 ;;		wreg
 10744 ;; Tracked objects:
 10745 ;;		On entry : 0/0
 10746 ;;		On exit  : 0/0
 10747 ;;		Unchanged: 0/0
 10748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10749 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10750 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10751 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10752 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10753 ;;Total ram usage:        4 bytes
 10754 ;; Hardware stack levels used:    1
 10755 ;; This function calls:
 10756 ;;		Nothing
 10757 ;; This function is called by:
 10758 ;;		_readIAnalog
 10759 ;;		_readVAnalog
 10760 ;;		_readButton
 10761 ;;		_main
 10762 ;; This function uses a non-reentrant model
 10763 ;;
 10764                           
 10765                           
 10766                           ;psect for function _ADCRead
 10767  1146                     _ADCRead:	
 10768                           
 10769                           ;incstack = 0
 10770                           ; Regs used in _ADCRead: [wreg]
 10771                           ;ADCRead@channel stored from wreg
 10772  1146  00F3               	movwf	ADCRead@channel
 10773                           
 10774                           ;adc.c: 24: ADPCH = channel_VSS;
 10775  1147  303C               	movlw	60
 10776  1148  0021               	movlb	1	; select bank1
 10777  1149  009E               	movwf	30	;volatile
 10778                           
 10779                           ;adc.c: 26: ADCON0bits.ADON = 1;
 10780  114A  1793               	bsf	19,7	;volatile
 10781                           
 10782                           ;adc.c: 28: ADCON0bits.ADCONT = 0;
 10783  114B  1313               	bcf	19,6	;volatile
 10784                           
 10785                           ;adc.c: 30: ADCON0bits.ADGO = 1;
 10786  114C  1413               	bsf	19,0	;volatile
 10787  114D                     l65:	
 10788                           ;adc.c: 33: {
 10789                           
 10790                           ;adc.c: 32: while(ADCON0bits.ADGO)
 10791                           
 10792  114D  1813               	btfsc	19,0	;volatile
 10793  114E  294D               	goto	l65
 10794                           
 10795                           ;adc.c: 34: }
 10796                           ;adc.c: 36: ADPCH = channel;
 10797  114F  0873               	movf	ADCRead@channel,w
 10798  1150  009E               	movwf	30	;volatile
 10799                           
 10800                           ;adc.c: 38: ADCON0bits.ADON = 1;
 10801  1151  1793               	bsf	19,7	;volatile
 10802                           
 10803                           ;adc.c: 40: ADCON0bits.ADCONT = 0;
 10804  1152  1313               	bcf	19,6	;volatile
 10805                           
 10806                           ;adc.c: 42: ADCON0bits.ADGO = 1;
 10807  1153  1413               	bsf	19,0	;volatile
 10808  1154                     l68:	
 10809                           ;adc.c: 45: {
 10810                           
 10811                           ;adc.c: 44: while(ADCON0bits.ADGO)
 10812                           
 10813  1154  1813               	btfsc	19,0	;volatile
 10814  1155  2954               	goto	l68
 10815                           
 10816                           ;adc.c: 46: }
 10817                           ;adc.c: 48: return ((ADRESH<<8)+ADRESL);
 10818  1156  080D               	movf	13,w	;volatile
 10819  1157  00F1               	movwf	?_ADCRead+1
 10820  1158  080C               	movf	12,w	;volatile
 10821  1159  00F0               	movwf	?_ADCRead
 10822  115A  0008               	return
 10823  115B                     __end_of_ADCRead:	
 10824                           
 10825                           	psect	text13
 10826  0EC1                     __ptext13:	
 10827 ;; *************** function _cc_cv_mode *****************
 10828 ;; Defined at:
 10829 ;;		line 83 in file "battery_charger.c"
 10830 ;; Parameters:    Size  Location     Type
 10831 ;;  z               1    wreg     unsigned char 
 10832 ;; Auto vars:     Size  Location     Type
 10833 ;;  z               1   37[BANK0 ] unsigned char 
 10834 ;; Return value:  Size  Location     Type
 10835 ;;                  1    wreg      void 
 10836 ;; Registers used:
 10837 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10838 ;; Tracked objects:
 10839 ;;		On entry : 0/0
 10840 ;;		On exit  : 0/0
 10841 ;;		Unchanged: 0/0
 10842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10843 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10844 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10845 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10846 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10847 ;;Total ram usage:        8 bytes
 10848 ;; Hardware stack levels used:    1
 10849 ;; Hardware stack levels required when called:    2
 10850 ;; This function calls:
 10851 ;;		___awtoft
 10852 ;;		___ftmul
 10853 ;;		___fttol
 10854 ;; This function is called by:
 10855 ;;		_main
 10856 ;; This function uses a non-reentrant model
 10857 ;;
 10858                           
 10859                           
 10860                           ;psect for function _cc_cv_mode
 10861  0EC1                     _cc_cv_mode:	
 10862                           
 10863                           ;incstack = 0
 10864                           ; Regs used in _cc_cv_mode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10865                           ;cc_cv_mode@z stored from wreg
 10866  0EC1  0020               	movlb	0	; select bank0
 10867  0EC2  00C5               	movwf	cc_cv_mode@z
 10868                           
 10869                           ;battery_charger.c: 85: if(voltage[z]>=Vref[z])
 10870  0EC3  3545               	lslf	cc_cv_mode@z,w
 10871  0EC4  3E5A               	addlw	(low (_Vref| 0))& (0+255)
 10872  0EC5  0086               	movwf	6
 10873  0EC6  0187               	clrf	7
 10874  0EC7  3F40               	moviw [0]fsr1
 10875  0EC8  00BE               	movwf	??_cc_cv_mode
 10876  0EC9  3F41               	moviw [1]fsr1
 10877  0ECA  00BF               	movwf	??_cc_cv_mode+1
 10878  0ECB  3545               	lslf	cc_cv_mode@z,w
 10879  0ECC  3EA8               	addlw	(low (_voltage| 0))& (0+255)
 10880  0ECD  0086               	movwf	6
 10881  0ECE  0187               	clrf	7
 10882  0ECF  3F40               	moviw [0]fsr1
 10883  0ED0  00C0               	movwf	??_cc_cv_mode+2
 10884  0ED1  3F41               	moviw [1]fsr1
 10885  0ED2  00C1               	movwf	??_cc_cv_mode+3
 10886  0ED3  0841               	movf	??_cc_cv_mode+3,w
 10887  0ED4  3A80               	xorlw	128
 10888  0ED5  00C2               	movwf	??_cc_cv_mode+4
 10889  0ED6  083F               	movf	??_cc_cv_mode+1,w
 10890  0ED7  3A80               	xorlw	128
 10891  0ED8  0242               	subwf	??_cc_cv_mode+4,w
 10892  0ED9  1D03               	skipz
 10893  0EDA  2EDD               	goto	u3555
 10894  0EDB  083E               	movf	??_cc_cv_mode,w
 10895  0EDC  0240               	subwf	??_cc_cv_mode+2,w
 10896  0EDD                     u3555:	
 10897  0EDD  1C03               	skipc
 10898  0EDE  2F1D               	goto	l3059
 10899                           
 10900                           ;battery_charger.c: 86: {
 10901                           ;battery_charger.c: 87: if(VHoldMode[z]<9)VHoldMode[z]+=1;
 10902  0EDF  0020               	movlb	0	; select bank0
 10903  0EE0  0845               	movf	cc_cv_mode@z,w
 10904  0EE1  3E60               	addlw	(low (_VHoldMode| 0))& (0+255)
 10905  0EE2  0086               	movwf	6
 10906  0EE3  0187               	clrf	7
 10907  0EE4  0801               	movf	1,w
 10908  0EE5  3A80               	xorlw	128
 10909  0EE6  3E77               	addlw	-137
 10910  0EE7  1803               	skipnc
 10911  0EE8  2EF1               	goto	l140
 10912  0EE9  3001               	movlw	1
 10913  0EEA  00BE               	movwf	??_cc_cv_mode
 10914  0EEB  0845               	movf	cc_cv_mode@z,w
 10915  0EEC  3E60               	addlw	(low (_VHoldMode| 0))& (0+255)
 10916  0EED  0086               	movwf	6
 10917  0EEE  0187               	clrf	7
 10918  0EEF  083E               	movf	??_cc_cv_mode,w
 10919  0EF0  0781               	addwf	1,f
 10920  0EF1                     l140:	
 10921                           
 10922                           ;battery_charger.c: 88: if(VHoldMode[z]<9)VHoldMode[z]+=1;
 10923  0EF1  0845               	movf	cc_cv_mode@z,w
 10924  0EF2  3E60               	addlw	(low (_VHoldMode| 0))& (0+255)
 10925  0EF3  0086               	movwf	6
 10926  0EF4  0187               	clrf	7
 10927  0EF5  0801               	movf	1,w
 10928  0EF6  3A80               	xorlw	128
 10929  0EF7  3E77               	addlw	-137
 10930  0EF8  1803               	skipnc
 10931  0EF9  2F02               	goto	l141
 10932  0EFA  3001               	movlw	1
 10933  0EFB  00BE               	movwf	??_cc_cv_mode
 10934  0EFC  0845               	movf	cc_cv_mode@z,w
 10935  0EFD  3E60               	addlw	(low (_VHoldMode| 0))& (0+255)
 10936  0EFE  0086               	movwf	6
 10937  0EFF  0187               	clrf	7
 10938  0F00  083E               	movf	??_cc_cv_mode,w
 10939  0F01  0781               	addwf	1,f
 10940  0F02                     l141:	
 10941                           
 10942                           ;battery_charger.c: 90: if(cc_cv[z])
 10943  0F02  0845               	movf	cc_cv_mode@z,w
 10944  0F03  3ED1               	addlw	(low (_cc_cv| 0))& (0+255)
 10945  0F04  0086               	movwf	6
 10946  0F05  0187               	clrf	7
 10947  0F06  0801               	movf	1,w
 10948  0F07  1903               	btfsc	3,2
 10949  0F08  2F10               	goto	l3055
 10950                           
 10951                           ;battery_charger.c: 91: {
 10952                           ;battery_charger.c: 92: cc_cv[z]-=1;
 10953  0F09  0845               	movf	cc_cv_mode@z,w
 10954  0F0A  3ED1               	addlw	(low (_cc_cv| 0))& (0+255)
 10955  0F0B  0086               	movwf	6
 10956  0F0C  0187               	clrf	7
 10957  0F0D  3001               	movlw	1
 10958  0F0E  0281               	subwf	1,f
 10959                           
 10960                           ;battery_charger.c: 93: }
 10961  0F0F  2F45               	goto	l145
 10962  0F10                     l3055:	
 10963                           
 10964                           ;battery_charger.c: 94: else
 10965                           ;battery_charger.c: 95: {
 10966                           ;battery_charger.c: 96: if(Imode[z])
 10967  0F10  0845               	movf	cc_cv_mode@z,w
 10968  0F11  3E62               	addlw	(low (_Imode| 0))& (0+255)
 10969  0F12  0086               	movwf	6
 10970  0F13  0187               	clrf	7
 10971  0F14  0801               	movf	1,w
 10972  0F15  1903               	btfsc	3,2
 10973  0F16  2F45               	goto	l145
 10974                           
 10975                           ;battery_charger.c: 97: {
 10976                           ;battery_charger.c: 98: Imode[z]=0;
 10977  0F17  0845               	movf	cc_cv_mode@z,w
 10978  0F18  3E62               	addlw	(low (_Imode| 0))& (0+255)
 10979  0F19  0086               	movwf	6
 10980  0F1A  0187               	clrf	7
 10981  0F1B  0181               	clrf	1
 10982                           
 10983                           ;battery_charger.c: 99: }
 10984                           ;battery_charger.c: 100: }
 10985                           ;battery_charger.c: 101: }
 10986  0F1C  2F45               	goto	l145
 10987  0F1D                     l3059:	
 10988                           
 10989                           ;battery_charger.c: 102: else
 10990                           ;battery_charger.c: 103: {
 10991                           ;battery_charger.c: 104: VHoldMode[z]-=1;
 10992  0F1D  30FF               	movlw	255
 10993  0F1E  0020               	movlb	0	; select bank0
 10994  0F1F  00BE               	movwf	??_cc_cv_mode
 10995  0F20  0845               	movf	cc_cv_mode@z,w
 10996  0F21  3E60               	addlw	(low (_VHoldMode| 0))& (0+255)
 10997  0F22  0086               	movwf	6
 10998  0F23  0187               	clrf	7
 10999  0F24  083E               	movf	??_cc_cv_mode,w
 11000  0F25  0781               	addwf	1,f
 11001                           
 11002                           ;battery_charger.c: 105: if(VHoldMode[z]<(9*-1))
 11003  0F26  0845               	movf	cc_cv_mode@z,w
 11004  0F27  3E60               	addlw	(low (_VHoldMode| 0))& (0+255)
 11005  0F28  0086               	movwf	6
 11006  0F29  0187               	clrf	7
 11007  0F2A  0801               	movf	1,w
 11008  0F2B  3A80               	xorlw	128
 11009  0F2C  3E89               	addlw	137
 11010  0F2D  1803               	skipnc
 11011  0F2E  2F45               	goto	l145
 11012                           
 11013                           ;battery_charger.c: 106: {
 11014                           ;battery_charger.c: 107: Imode[z]=1;
 11015  0F2F  0845               	movf	cc_cv_mode@z,w
 11016  0F30  3E62               	addlw	(low (_Imode| 0))& (0+255)
 11017  0F31  0086               	movwf	6
 11018  0F32  0187               	clrf	7
 11019  0F33  0181               	clrf	1
 11020  0F34  0A81               	incf	1,f
 11021                           
 11022                           ;battery_charger.c: 108: cc_cv[z]=(9*2);
 11023  0F35  3012               	movlw	18
 11024  0F36  00BE               	movwf	??_cc_cv_mode
 11025  0F37  0845               	movf	cc_cv_mode@z,w
 11026  0F38  3ED1               	addlw	(low (_cc_cv| 0))& (0+255)
 11027  0F39  0086               	movwf	6
 11028  0F3A  0187               	clrf	7
 11029  0F3B  083E               	movf	??_cc_cv_mode,w
 11030  0F3C  0081               	movwf	1
 11031                           
 11032                           ;battery_charger.c: 109: VHoldMode[z]=(9*-1);
 11033  0F3D  30F7               	movlw	247
 11034  0F3E  00BE               	movwf	??_cc_cv_mode
 11035  0F3F  0845               	movf	cc_cv_mode@z,w
 11036  0F40  3E60               	addlw	(low (_VHoldMode| 0))& (0+255)
 11037  0F41  0086               	movwf	6
 11038  0F42  0187               	clrf	7
 11039  0F43  083E               	movf	??_cc_cv_mode,w
 11040  0F44  0081               	movwf	1
 11041  0F45                     l145:	
 11042                           
 11043                           ;battery_charger.c: 110: }
 11044                           ;battery_charger.c: 111: }
 11045                           ;battery_charger.c: 113: if(current[z]>Iref[z])
 11046  0F45  3545               	lslf	cc_cv_mode@z,w
 11047  0F46  3EB0               	addlw	(low (_current| 0))& (0+255)
 11048  0F47  0086               	movwf	6
 11049  0F48  0187               	clrf	7
 11050  0F49  3F40               	moviw [0]fsr1
 11051  0F4A  00BE               	movwf	??_cc_cv_mode
 11052  0F4B  3F41               	moviw [1]fsr1
 11053  0F4C  00BF               	movwf	??_cc_cv_mode+1
 11054  0F4D  3545               	lslf	cc_cv_mode@z,w
 11055  0F4E  3EC1               	addlw	(low (_Iref| 0))& (0+255)
 11056  0F4F  0086               	movwf	6
 11057  0F50  0187               	clrf	7
 11058  0F51  3F40               	moviw [0]fsr1
 11059  0F52  00C0               	movwf	??_cc_cv_mode+2
 11060  0F53  3F41               	moviw [1]fsr1
 11061  0F54  00C1               	movwf	??_cc_cv_mode+3
 11062  0F55  0841               	movf	??_cc_cv_mode+3,w
 11063  0F56  3A80               	xorlw	128
 11064  0F57  00C2               	movwf	??_cc_cv_mode+4
 11065  0F58  083F               	movf	??_cc_cv_mode+1,w
 11066  0F59  3A80               	xorlw	128
 11067  0F5A  0242               	subwf	??_cc_cv_mode+4,w
 11068  0F5B  1D03               	skipz
 11069  0F5C  2F5F               	goto	u3615
 11070  0F5D  083E               	movf	??_cc_cv_mode,w
 11071  0F5E  0240               	subwf	??_cc_cv_mode+2,w
 11072  0F5F                     u3615:	
 11073  0F5F  1803               	skipnc
 11074  0F60  0008               	return
 11075                           
 11076                           ;battery_charger.c: 114: {
 11077                           ;battery_charger.c: 115: if(!(Imode[z]))
 11078  0F61  0020               	movlb	0	; select bank0
 11079  0F62  0845               	movf	cc_cv_mode@z,w
 11080  0F63  3E62               	addlw	(low (_Imode| 0))& (0+255)
 11081  0F64  0086               	movwf	6
 11082  0F65  0187               	clrf	7
 11083  0F66  0801               	movf	1,w
 11084  0F67  1D03               	btfss	3,2
 11085  0F68  0008               	return
 11086                           
 11087                           ;battery_charger.c: 116: {
 11088                           ;battery_charger.c: 117: if(batteryState[z]==FLOAT)
 11089  0F69  0845               	movf	cc_cv_mode@z,w
 11090  0F6A  3E64               	addlw	(low (_batteryState| 0))& (0+255)
 11091  0F6B  0086               	movwf	6
 11092  0F6C  0187               	clrf	7
 11093  0F6D  3005               	movlw	5
 11094  0F6E  0601               	xorwf	1,w
 11095  0F6F  1D03               	btfss	3,2
 11096  0F70  0008               	return
 11097                           
 11098                           ;battery_charger.c: 118: {
 11099                           ;battery_charger.c: 119: if(voltage[z]<1350+(int16_t)((250-batteryTemp)*.24)-70)
 11100  0F71  096D               	comf	_batteryTemp,w
 11101  0F72  00BE               	movwf	??_cc_cv_mode
 11102  0F73  096E               	comf	_batteryTemp+1,w
 11103  0F74  00BF               	movwf	??_cc_cv_mode+1
 11104  0F75  0ABE               	incf	??_cc_cv_mode,f
 11105  0F76  1903               	skipnz
 11106  0F77  0ABF               	incf	??_cc_cv_mode+1,f
 11107  0F78  083E               	movf	??_cc_cv_mode,w
 11108  0F79  3EFA               	addlw	250
 11109  0F7A  00F8               	movwf	___awtoft@c
 11110  0F7B  3000               	movlw	0
 11111  0F7C  3D3F               	addwfc	??_cc_cv_mode+1,w
 11112  0F7D  00F9               	movwf	___awtoft@c+1
 11113  0F7E  3191  21FE  318E   	fcall	___awtoft
 11114  0F81  0878               	movf	?___awtoft,w
 11115  0F82  0020               	movlb	0	; select bank0
 11116  0F83  00A3               	movwf	___ftmul@f2
 11117  0F84  0879               	movf	?___awtoft+1,w
 11118  0F85  00A4               	movwf	___ftmul@f2+1
 11119  0F86  087A               	movf	?___awtoft+2,w
 11120  0F87  00A5               	movwf	___ftmul@f2+2
 11121  0F88  30C3               	movlw	195
 11122  0F89  00A0               	movwf	___ftmul@f1
 11123  0F8A  3075               	movlw	117
 11124  0F8B  00A1               	movwf	___ftmul@f1+1
 11125  0F8C  303E               	movlw	62
 11126  0F8D  00A2               	movwf	___ftmul@f1+2
 11127  0F8E  3188  20FB  318E   	fcall	___ftmul
 11128  0F91  0020               	movlb	0	; select bank0
 11129  0F92  0820               	movf	?___ftmul,w
 11130  0F93  00B0               	movwf	___fttol@f1
 11131  0F94  0821               	movf	?___ftmul+1,w
 11132  0F95  00B1               	movwf	___fttol@f1+1
 11133  0F96  0822               	movf	?___ftmul+2,w
 11134  0F97  00B2               	movwf	___fttol@f1+2
 11135  0F98  3180  201A  318E   	fcall	___fttol
 11136  0F9B  0020               	movlb	0	; select bank0
 11137  0F9C  0830               	movf	?___fttol,w
 11138  0F9D  3E00               	addlw	0
 11139  0F9E  00C0               	movwf	??_cc_cv_mode+2
 11140  0F9F  3005               	movlw	5
 11141  0FA0  3D31               	addwfc	?___fttol+1,w
 11142  0FA1  00C1               	movwf	??_cc_cv_mode+3
 11143  0FA2  3545               	lslf	cc_cv_mode@z,w
 11144  0FA3  3EA8               	addlw	(low (_voltage| 0))& (0+255)
 11145  0FA4  0086               	movwf	6
 11146  0FA5  0187               	clrf	7
 11147  0FA6  3F40               	moviw [0]fsr1
 11148  0FA7  00C2               	movwf	??_cc_cv_mode+4
 11149  0FA8  3F41               	moviw [1]fsr1
 11150  0FA9  00C3               	movwf	??_cc_cv_mode+5
 11151  0FAA  0843               	movf	??_cc_cv_mode+5,w
 11152  0FAB  3A80               	xorlw	128
 11153  0FAC  00C4               	movwf	??_cc_cv_mode+6
 11154  0FAD  0841               	movf	??_cc_cv_mode+3,w
 11155  0FAE  3A80               	xorlw	128
 11156  0FAF  0244               	subwf	??_cc_cv_mode+6,w
 11157  0FB0  1D03               	skipz
 11158  0FB1  2FB4               	goto	u3645
 11159  0FB2  0840               	movf	??_cc_cv_mode+2,w
 11160  0FB3  0242               	subwf	??_cc_cv_mode+4,w
 11161  0FB4                     u3645:	
 11162  0FB4  1803               	skipnc
 11163  0FB5  0008               	return
 11164                           
 11165                           ;battery_charger.c: 120: {
 11166                           ;battery_charger.c: 121: batteryState[z]=CHARGE;
 11167  0FB6  3004               	movlw	4
 11168  0FB7  0020               	movlb	0	; select bank0
 11169  0FB8  00BE               	movwf	??_cc_cv_mode
 11170  0FB9  0845               	movf	cc_cv_mode@z,w
 11171  0FBA  3E64               	addlw	(low (_batteryState| 0))& (0+255)
 11172  0FBB  0086               	movwf	6
 11173  0FBC  0187               	clrf	7
 11174  0FBD  083E               	movf	??_cc_cv_mode,w
 11175  0FBE  0081               	movwf	1
 11176                           
 11177                           ;battery_charger.c: 122: Vref[z]=1425+(int16_t)((250-batteryTemp)*.24);
 11178  0FBF  096D               	comf	_batteryTemp,w
 11179  0FC0  00BE               	movwf	??_cc_cv_mode
 11180  0FC1  096E               	comf	_batteryTemp+1,w
 11181  0FC2  00BF               	movwf	??_cc_cv_mode+1
 11182  0FC3  0ABE               	incf	??_cc_cv_mode,f
 11183  0FC4  1903               	skipnz
 11184  0FC5  0ABF               	incf	??_cc_cv_mode+1,f
 11185  0FC6  083E               	movf	??_cc_cv_mode,w
 11186  0FC7  3EFA               	addlw	250
 11187  0FC8  00F8               	movwf	___awtoft@c
 11188  0FC9  3000               	movlw	0
 11189  0FCA  3D3F               	addwfc	??_cc_cv_mode+1,w
 11190  0FCB  00F9               	movwf	___awtoft@c+1
 11191  0FCC  3191  21FE  318E   	fcall	___awtoft
 11192  0FCF  0878               	movf	?___awtoft,w
 11193  0FD0  0020               	movlb	0	; select bank0
 11194  0FD1  00A3               	movwf	___ftmul@f2
 11195  0FD2  0879               	movf	?___awtoft+1,w
 11196  0FD3  00A4               	movwf	___ftmul@f2+1
 11197  0FD4  087A               	movf	?___awtoft+2,w
 11198  0FD5  00A5               	movwf	___ftmul@f2+2
 11199  0FD6  30C3               	movlw	195
 11200  0FD7  00A0               	movwf	___ftmul@f1
 11201  0FD8  3075               	movlw	117
 11202  0FD9  00A1               	movwf	___ftmul@f1+1
 11203  0FDA  303E               	movlw	62
 11204  0FDB  00A2               	movwf	___ftmul@f1+2
 11205  0FDC  3188  20FB  318E   	fcall	___ftmul
 11206  0FDF  0020               	movlb	0	; select bank0
 11207  0FE0  0820               	movf	?___ftmul,w
 11208  0FE1  00B0               	movwf	___fttol@f1
 11209  0FE2  0821               	movf	?___ftmul+1,w
 11210  0FE3  00B1               	movwf	___fttol@f1+1
 11211  0FE4  0822               	movf	?___ftmul+2,w
 11212  0FE5  00B2               	movwf	___fttol@f1+2
 11213  0FE6  3180  201A         	fcall	___fttol
 11214  0FE8  0020               	movlb	0	; select bank0
 11215  0FE9  0830               	movf	?___fttol,w
 11216  0FEA  3E91               	addlw	145
 11217  0FEB  00C0               	movwf	??_cc_cv_mode+2
 11218  0FEC  3005               	movlw	5
 11219  0FED  3D31               	addwfc	?___fttol+1,w
 11220  0FEE  00C1               	movwf	??_cc_cv_mode+3
 11221  0FEF  3545               	lslf	cc_cv_mode@z,w
 11222  0FF0  3E5A               	addlw	(low (_Vref| 0))& (0+255)
 11223  0FF1  0086               	movwf	6
 11224  0FF2  0187               	clrf	7
 11225  0FF3  0840               	movf	??_cc_cv_mode+2,w
 11226  0FF4  3FC0               	movwi [0]fsr1
 11227  0FF5  0841               	movf	??_cc_cv_mode+3,w
 11228  0FF6  3FC1               	movwi [1]fsr1
 11229                           
 11230                           ;battery_charger.c: 123: Iref[z]=35;
 11231  0FF7  3545               	lslf	cc_cv_mode@z,w
 11232  0FF8  3EC1               	addlw	(low (_Iref| 0))& (0+255)
 11233  0FF9  0086               	movwf	6
 11234  0FFA  0187               	clrf	7
 11235  0FFB  3023               	movlw	35
 11236  0FFC  3FC0               	movwi [0]fsr1
 11237  0FFD  3000               	movlw	0
 11238  0FFE  3FC1               	movwi [1]fsr1
 11239  0FFF  0008               	return
 11240  1000                     __end_of_cc_cv_mode:	
 11241                           
 11242                           	psect	text14
 11243  0806                     __ptext14:	
 11244 ;; *************** function _calculateCurrent3 *****************
 11245 ;; Defined at:
 11246 ;;		line 430 in file "main.c"
 11247 ;; Parameters:    Size  Location     Type
 11248 ;;		None
 11249 ;; Auto vars:     Size  Location     Type
 11250 ;;		None
 11251 ;; Return value:  Size  Location     Type
 11252 ;;                  1    wreg      void 
 11253 ;; Registers used:
 11254 ;;		wreg, status,2, status,0, pclath, cstack
 11255 ;; Tracked objects:
 11256 ;;		On entry : 0/0
 11257 ;;		On exit  : 0/0
 11258 ;;		Unchanged: 0/0
 11259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11260 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11261 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11262 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11263 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11264 ;;Total ram usage:        3 bytes
 11265 ;; Hardware stack levels used:    1
 11266 ;; Hardware stack levels required when called:    2
 11267 ;; This function calls:
 11268 ;;		___awtoft
 11269 ;;		___ftdiv
 11270 ;;		___fttol
 11271 ;; This function is called by:
 11272 ;;		_main
 11273 ;; This function uses a non-reentrant model
 11274 ;;
 11275                           
 11276                           
 11277                           ;psect for function _calculateCurrent3
 11278  0806                     _calculateCurrent3:	
 11279                           
 11280                           ;main.c: 432: if(Ianalogs[3]-559<=0)
 11281                           
 11282                           ;incstack = 0
 11283                           ; Regs used in _calculateCurrent3: [wreg+status,2+status,0+pclath+cstack]
 11284  0806  0021               	movlb	1	; select bank1
 11285  0807  0826               	movf	(_Ianalogs^(0+128)+6),w
 11286  0808  3ED1               	addlw	209
 11287  0809  0020               	movlb	0	; select bank0
 11288  080A  00BE               	movwf	??_calculateCurrent3
 11289  080B  30FD               	movlw	253
 11290  080C  0021               	movlb	1	; select bank1
 11291  080D  3D27               	addwfc	((_Ianalogs+1)^(0+128)+6),w
 11292  080E  0020               	movlb	0	; select bank0
 11293  080F  00BF               	movwf	??_calculateCurrent3+1
 11294  0810  083F               	movf	??_calculateCurrent3+1,w
 11295  0811  3A80               	xorlw	128
 11296  0812  00C0               	movwf	??_calculateCurrent3+2
 11297  0813  3080               	movlw	128
 11298  0814  0240               	subwf	??_calculateCurrent3+2,w
 11299  0815  1D03               	skipz
 11300  0816  2819               	goto	u3905
 11301  0817  3001               	movlw	1
 11302  0818  023E               	subwf	??_calculateCurrent3,w
 11303  0819                     u3905:	
 11304  0819  1803               	skipnc
 11305  081A  281F               	goto	l3235
 11306                           
 11307                           ;main.c: 433: {
 11308                           ;main.c: 434: current[3]=0;
 11309  081B  0021               	movlb	1	; select bank1
 11310  081C  01B6               	clrf	(_current^(0+128)+6)
 11311  081D  01B7               	clrf	((_current+1)^(0+128)+6)
 11312                           
 11313                           ;main.c: 435: }
 11314  081E  0008               	return
 11315  081F                     l3235:	
 11316                           
 11317                           ;main.c: 436: else
 11318                           ;main.c: 437: {
 11319                           ;main.c: 438: current[3]=(int16_t)((Ianalogs[3]-559)/1.60575);
 11320  081F  0021               	movlb	1	; select bank1
 11321  0820  0826               	movf	(_Ianalogs^(0+128)+6),w
 11322  0821  3ED1               	addlw	209
 11323  0822  00F8               	movwf	___awtoft@c
 11324  0823  30FD               	movlw	253
 11325  0824  3D27               	addwfc	((_Ianalogs+1)^(0+128)+6),w
 11326  0825  00F9               	movwf	___awtoft@c+1
 11327  0826  3191  21FE  3188   	fcall	___awtoft
 11328  0829  0878               	movf	?___awtoft,w
 11329  082A  0020               	movlb	0	; select bank0
 11330  082B  00A3               	movwf	___ftdiv@f1
 11331  082C  0879               	movf	?___awtoft+1,w
 11332  082D  00A4               	movwf	___ftdiv@f1+1
 11333  082E  087A               	movf	?___awtoft+2,w
 11334  082F  00A5               	movwf	___ftdiv@f1+2
 11335  0830  3089               	movlw	137
 11336  0831  00A0               	movwf	___ftdiv@f2
 11337  0832  30CD               	movlw	205
 11338  0833  00A1               	movwf	___ftdiv@f2+1
 11339  0834  303F               	movlw	63
 11340  0835  00A2               	movwf	___ftdiv@f2+2
 11341  0836  3197  2757  3188   	fcall	___ftdiv
 11342  0839  0020               	movlb	0	; select bank0
 11343  083A  0820               	movf	?___ftdiv,w
 11344  083B  00B0               	movwf	___fttol@f1
 11345  083C  0821               	movf	?___ftdiv+1,w
 11346  083D  00B1               	movwf	___fttol@f1+1
 11347  083E  0822               	movf	?___ftdiv+2,w
 11348  083F  00B2               	movwf	___fttol@f1+2
 11349  0840  3180  201A         	fcall	___fttol
 11350  0842  0020               	movlb	0	; select bank0
 11351  0843  0831               	movf	?___fttol+1,w
 11352  0844  0021               	movlb	1	; select bank1
 11353  0845  00B7               	movwf	((_current+1)^(0+128)+6)
 11354  0846  0020               	movlb	0	; select bank0
 11355  0847  0830               	movf	?___fttol,w
 11356  0848  0021               	movlb	1	; select bank1
 11357  0849  00B6               	movwf	(_current^(0+128)+6)
 11358  084A  0008               	return
 11359  084B                     __end_of_calculateCurrent3:	
 11360                           
 11361                           	psect	text15
 11362  1442                     __ptext15:	
 11363 ;; *************** function _calculateCurrent2 *****************
 11364 ;; Defined at:
 11365 ;;		line 418 in file "main.c"
 11366 ;; Parameters:    Size  Location     Type
 11367 ;;		None
 11368 ;; Auto vars:     Size  Location     Type
 11369 ;;		None
 11370 ;; Return value:  Size  Location     Type
 11371 ;;                  1    wreg      void 
 11372 ;; Registers used:
 11373 ;;		wreg, status,2, status,0, pclath, cstack
 11374 ;; Tracked objects:
 11375 ;;		On entry : 0/0
 11376 ;;		On exit  : 0/0
 11377 ;;		Unchanged: 0/0
 11378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11379 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11380 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11381 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11382 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11383 ;;Total ram usage:        3 bytes
 11384 ;; Hardware stack levels used:    1
 11385 ;; Hardware stack levels required when called:    2
 11386 ;; This function calls:
 11387 ;;		___awtoft
 11388 ;;		___ftdiv
 11389 ;;		___fttol
 11390 ;; This function is called by:
 11391 ;;		_main
 11392 ;; This function uses a non-reentrant model
 11393 ;;
 11394                           
 11395                           
 11396                           ;psect for function _calculateCurrent2
 11397  1442                     _calculateCurrent2:	
 11398                           
 11399                           ;main.c: 420: if(Ianalogs[2]-589<=0)
 11400                           
 11401                           ;incstack = 0
 11402                           ; Regs used in _calculateCurrent2: [wreg+status,2+status,0+pclath+cstack]
 11403  1442  0021               	movlb	1	; select bank1
 11404  1443  0824               	movf	(_Ianalogs^(0+128)+4),w
 11405  1444  3EB3               	addlw	179
 11406  1445  0020               	movlb	0	; select bank0
 11407  1446  00BE               	movwf	??_calculateCurrent2
 11408  1447  30FD               	movlw	253
 11409  1448  0021               	movlb	1	; select bank1
 11410  1449  3D25               	addwfc	((_Ianalogs+1)^(0+128)+4),w
 11411  144A  0020               	movlb	0	; select bank0
 11412  144B  00BF               	movwf	??_calculateCurrent2+1
 11413  144C  083F               	movf	??_calculateCurrent2+1,w
 11414  144D  3A80               	xorlw	128
 11415  144E  00C0               	movwf	??_calculateCurrent2+2
 11416  144F  3080               	movlw	128
 11417  1450  0240               	subwf	??_calculateCurrent2+2,w
 11418  1451  1D03               	skipz
 11419  1452  2C55               	goto	u3895
 11420  1453  3001               	movlw	1
 11421  1454  023E               	subwf	??_calculateCurrent2,w
 11422  1455                     u3895:	
 11423  1455  1803               	skipnc
 11424  1456  2C5B               	goto	l3229
 11425                           
 11426                           ;main.c: 421: {
 11427                           ;main.c: 422: current[2]=0;
 11428  1457  0021               	movlb	1	; select bank1
 11429  1458  01B4               	clrf	(_current^(0+128)+4)
 11430  1459  01B5               	clrf	((_current+1)^(0+128)+4)
 11431                           
 11432                           ;main.c: 423: }
 11433  145A  0008               	return
 11434  145B                     l3229:	
 11435                           
 11436                           ;main.c: 424: else
 11437                           ;main.c: 425: {
 11438                           ;main.c: 426: current[2]=(int16_t)((Ianalogs[2]-589)/1.3165);
 11439  145B  0021               	movlb	1	; select bank1
 11440  145C  0824               	movf	(_Ianalogs^(0+128)+4),w
 11441  145D  3EB3               	addlw	179
 11442  145E  00F8               	movwf	___awtoft@c
 11443  145F  30FD               	movlw	253
 11444  1460  3D25               	addwfc	((_Ianalogs+1)^(0+128)+4),w
 11445  1461  00F9               	movwf	___awtoft@c+1
 11446  1462  3191  21FE  3194   	fcall	___awtoft
 11447  1465  0878               	movf	?___awtoft,w
 11448  1466  0020               	movlb	0	; select bank0
 11449  1467  00A3               	movwf	___ftdiv@f1
 11450  1468  0879               	movf	?___awtoft+1,w
 11451  1469  00A4               	movwf	___ftdiv@f1+1
 11452  146A  087A               	movf	?___awtoft+2,w
 11453  146B  00A5               	movwf	___ftdiv@f1+2
 11454  146C  3083               	movlw	131
 11455  146D  00A0               	movwf	___ftdiv@f2
 11456  146E  30A8               	movlw	168
 11457  146F  00A1               	movwf	___ftdiv@f2+1
 11458  1470  303F               	movlw	63
 11459  1471  00A2               	movwf	___ftdiv@f2+2
 11460  1472  3197  2757  3194   	fcall	___ftdiv
 11461  1475  0020               	movlb	0	; select bank0
 11462  1476  0820               	movf	?___ftdiv,w
 11463  1477  00B0               	movwf	___fttol@f1
 11464  1478  0821               	movf	?___ftdiv+1,w
 11465  1479  00B1               	movwf	___fttol@f1+1
 11466  147A  0822               	movf	?___ftdiv+2,w
 11467  147B  00B2               	movwf	___fttol@f1+2
 11468  147C  3180  201A         	fcall	___fttol
 11469  147E  0020               	movlb	0	; select bank0
 11470  147F  0831               	movf	?___fttol+1,w
 11471  1480  0021               	movlb	1	; select bank1
 11472  1481  00B5               	movwf	((_current+1)^(0+128)+4)
 11473  1482  0020               	movlb	0	; select bank0
 11474  1483  0830               	movf	?___fttol,w
 11475  1484  0021               	movlb	1	; select bank1
 11476  1485  00B4               	movwf	(_current^(0+128)+4)
 11477  1486  0008               	return
 11478  1487                     __end_of_calculateCurrent2:	
 11479                           
 11480                           	psect	text16
 11481  13FD                     __ptext16:	
 11482 ;; *************** function _calculateCurrent1 *****************
 11483 ;; Defined at:
 11484 ;;		line 406 in file "main.c"
 11485 ;; Parameters:    Size  Location     Type
 11486 ;;		None
 11487 ;; Auto vars:     Size  Location     Type
 11488 ;;		None
 11489 ;; Return value:  Size  Location     Type
 11490 ;;                  1    wreg      void 
 11491 ;; Registers used:
 11492 ;;		wreg, status,2, status,0, pclath, cstack
 11493 ;; Tracked objects:
 11494 ;;		On entry : 0/0
 11495 ;;		On exit  : 0/0
 11496 ;;		Unchanged: 0/0
 11497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11499 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11500 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11501 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11502 ;;Total ram usage:        3 bytes
 11503 ;; Hardware stack levels used:    1
 11504 ;; Hardware stack levels required when called:    2
 11505 ;; This function calls:
 11506 ;;		___awtoft
 11507 ;;		___ftdiv
 11508 ;;		___fttol
 11509 ;; This function is called by:
 11510 ;;		_main
 11511 ;; This function uses a non-reentrant model
 11512 ;;
 11513                           
 11514                           
 11515                           ;psect for function _calculateCurrent1
 11516  13FD                     _calculateCurrent1:	
 11517                           
 11518                           ;main.c: 408: if(Ianalogs[1]-561<=0)
 11519                           
 11520                           ;incstack = 0
 11521                           ; Regs used in _calculateCurrent1: [wreg+status,2+status,0+pclath+cstack]
 11522  13FD  0021               	movlb	1	; select bank1
 11523  13FE  0822               	movf	(_Ianalogs^(0+128)+2),w
 11524  13FF  3ECF               	addlw	207
 11525  1400  0020               	movlb	0	; select bank0
 11526  1401  00BE               	movwf	??_calculateCurrent1
 11527  1402  30FD               	movlw	253
 11528  1403  0021               	movlb	1	; select bank1
 11529  1404  3D23               	addwfc	((_Ianalogs+1)^(0+128)+2),w
 11530  1405  0020               	movlb	0	; select bank0
 11531  1406  00BF               	movwf	??_calculateCurrent1+1
 11532  1407  083F               	movf	??_calculateCurrent1+1,w
 11533  1408  3A80               	xorlw	128
 11534  1409  00C0               	movwf	??_calculateCurrent1+2
 11535  140A  3080               	movlw	128
 11536  140B  0240               	subwf	??_calculateCurrent1+2,w
 11537  140C  1D03               	skipz
 11538  140D  2C10               	goto	u3885
 11539  140E  3001               	movlw	1
 11540  140F  023E               	subwf	??_calculateCurrent1,w
 11541  1410                     u3885:	
 11542  1410  1803               	skipnc
 11543  1411  2C16               	goto	l3223
 11544                           
 11545                           ;main.c: 409: {
 11546                           ;main.c: 410: current[1]=0;
 11547  1412  0021               	movlb	1	; select bank1
 11548  1413  01B2               	clrf	(_current^(0+128)+2)
 11549  1414  01B3               	clrf	((_current+1)^(0+128)+2)
 11550                           
 11551                           ;main.c: 411: }
 11552  1415  0008               	return
 11553  1416                     l3223:	
 11554                           
 11555                           ;main.c: 412: else
 11556                           ;main.c: 413: {
 11557                           ;main.c: 414: current[1]=(int16_t)((Ianalogs[1]-561)/1.99055);
 11558  1416  0021               	movlb	1	; select bank1
 11559  1417  0822               	movf	(_Ianalogs^(0+128)+2),w
 11560  1418  3ECF               	addlw	207
 11561  1419  00F8               	movwf	___awtoft@c
 11562  141A  30FD               	movlw	253
 11563  141B  3D23               	addwfc	((_Ianalogs+1)^(0+128)+2),w
 11564  141C  00F9               	movwf	___awtoft@c+1
 11565  141D  3191  21FE  3193   	fcall	___awtoft
 11566  1420  0878               	movf	?___awtoft,w
 11567  1421  0020               	movlb	0	; select bank0
 11568  1422  00A3               	movwf	___ftdiv@f1
 11569  1423  0879               	movf	?___awtoft+1,w
 11570  1424  00A4               	movwf	___ftdiv@f1+1
 11571  1425  087A               	movf	?___awtoft+2,w
 11572  1426  00A5               	movwf	___ftdiv@f1+2
 11573  1427  30CA               	movlw	202
 11574  1428  00A0               	movwf	___ftdiv@f2
 11575  1429  30FE               	movlw	254
 11576  142A  00A1               	movwf	___ftdiv@f2+1
 11577  142B  303F               	movlw	63
 11578  142C  00A2               	movwf	___ftdiv@f2+2
 11579  142D  3197  2757  3193   	fcall	___ftdiv
 11580  1430  0020               	movlb	0	; select bank0
 11581  1431  0820               	movf	?___ftdiv,w
 11582  1432  00B0               	movwf	___fttol@f1
 11583  1433  0821               	movf	?___ftdiv+1,w
 11584  1434  00B1               	movwf	___fttol@f1+1
 11585  1435  0822               	movf	?___ftdiv+2,w
 11586  1436  00B2               	movwf	___fttol@f1+2
 11587  1437  3180  201A         	fcall	___fttol
 11588  1439  0020               	movlb	0	; select bank0
 11589  143A  0831               	movf	?___fttol+1,w
 11590  143B  0021               	movlb	1	; select bank1
 11591  143C  00B3               	movwf	((_current+1)^(0+128)+2)
 11592  143D  0020               	movlb	0	; select bank0
 11593  143E  0830               	movf	?___fttol,w
 11594  143F  0021               	movlb	1	; select bank1
 11595  1440  00B2               	movwf	(_current^(0+128)+2)
 11596  1441  0008               	return
 11597  1442                     __end_of_calculateCurrent1:	
 11598                           
 11599                           	psect	text17
 11600  13B8                     __ptext17:	
 11601 ;; *************** function _calculateCurrent0 *****************
 11602 ;; Defined at:
 11603 ;;		line 394 in file "main.c"
 11604 ;; Parameters:    Size  Location     Type
 11605 ;;		None
 11606 ;; Auto vars:     Size  Location     Type
 11607 ;;		None
 11608 ;; Return value:  Size  Location     Type
 11609 ;;                  1    wreg      void 
 11610 ;; Registers used:
 11611 ;;		wreg, status,2, status,0, pclath, cstack
 11612 ;; Tracked objects:
 11613 ;;		On entry : 0/0
 11614 ;;		On exit  : 0/0
 11615 ;;		Unchanged: 0/0
 11616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11617 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11618 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11619 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11620 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11621 ;;Total ram usage:        3 bytes
 11622 ;; Hardware stack levels used:    1
 11623 ;; Hardware stack levels required when called:    2
 11624 ;; This function calls:
 11625 ;;		___awtoft
 11626 ;;		___ftdiv
 11627 ;;		___fttol
 11628 ;; This function is called by:
 11629 ;;		_main
 11630 ;; This function uses a non-reentrant model
 11631 ;;
 11632                           
 11633                           
 11634                           ;psect for function _calculateCurrent0
 11635  13B8                     _calculateCurrent0:	
 11636                           
 11637                           ;main.c: 396: if(Ianalogs[0]-578<=0)
 11638                           
 11639                           ;incstack = 0
 11640                           ; Regs used in _calculateCurrent0: [wreg+status,2+status,0+pclath+cstack]
 11641  13B8  0021               	movlb	1	; select bank1
 11642  13B9  0820               	movf	_Ianalogs^(0+128),w
 11643  13BA  3EBE               	addlw	190
 11644  13BB  0020               	movlb	0	; select bank0
 11645  13BC  00BE               	movwf	??_calculateCurrent0
 11646  13BD  30FD               	movlw	253
 11647  13BE  0021               	movlb	1	; select bank1
 11648  13BF  3D21               	addwfc	(_Ianalogs+1)^(0+128),w
 11649  13C0  0020               	movlb	0	; select bank0
 11650  13C1  00BF               	movwf	??_calculateCurrent0+1
 11651  13C2  083F               	movf	??_calculateCurrent0+1,w
 11652  13C3  3A80               	xorlw	128
 11653  13C4  00C0               	movwf	??_calculateCurrent0+2
 11654  13C5  3080               	movlw	128
 11655  13C6  0240               	subwf	??_calculateCurrent0+2,w
 11656  13C7  1D03               	skipz
 11657  13C8  2BCB               	goto	u3875
 11658  13C9  3001               	movlw	1
 11659  13CA  023E               	subwf	??_calculateCurrent0,w
 11660  13CB                     u3875:	
 11661  13CB  1803               	skipnc
 11662  13CC  2BD1               	goto	l3217
 11663                           
 11664                           ;main.c: 397: {
 11665                           ;main.c: 398: current[0]=0;
 11666  13CD  0021               	movlb	1	; select bank1
 11667  13CE  01B0               	clrf	_current^(0+128)
 11668  13CF  01B1               	clrf	(_current+1)^(0+128)
 11669                           
 11670                           ;main.c: 399: }
 11671  13D0  0008               	return
 11672  13D1                     l3217:	
 11673                           
 11674                           ;main.c: 400: else
 11675                           ;main.c: 401: {
 11676                           ;main.c: 402: current[0]=(int16_t)((Ianalogs[0]-578)/3.2323);
 11677  13D1  0021               	movlb	1	; select bank1
 11678  13D2  0820               	movf	_Ianalogs^(0+128),w
 11679  13D3  3EBE               	addlw	190
 11680  13D4  00F8               	movwf	___awtoft@c
 11681  13D5  30FD               	movlw	253
 11682  13D6  3D21               	addwfc	(_Ianalogs+1)^(0+128),w
 11683  13D7  00F9               	movwf	___awtoft@c+1
 11684  13D8  3191  21FE  3193   	fcall	___awtoft
 11685  13DB  0878               	movf	?___awtoft,w
 11686  13DC  0020               	movlb	0	; select bank0
 11687  13DD  00A3               	movwf	___ftdiv@f1
 11688  13DE  0879               	movf	?___awtoft+1,w
 11689  13DF  00A4               	movwf	___ftdiv@f1+1
 11690  13E0  087A               	movf	?___awtoft+2,w
 11691  13E1  00A5               	movwf	___ftdiv@f1+2
 11692  13E2  30DE               	movlw	222
 11693  13E3  00A0               	movwf	___ftdiv@f2
 11694  13E4  304E               	movlw	78
 11695  13E5  00A1               	movwf	___ftdiv@f2+1
 11696  13E6  3040               	movlw	64
 11697  13E7  00A2               	movwf	___ftdiv@f2+2
 11698  13E8  3197  2757  3193   	fcall	___ftdiv
 11699  13EB  0020               	movlb	0	; select bank0
 11700  13EC  0820               	movf	?___ftdiv,w
 11701  13ED  00B0               	movwf	___fttol@f1
 11702  13EE  0821               	movf	?___ftdiv+1,w
 11703  13EF  00B1               	movwf	___fttol@f1+1
 11704  13F0  0822               	movf	?___ftdiv+2,w
 11705  13F1  00B2               	movwf	___fttol@f1+2
 11706  13F2  3180  201A         	fcall	___fttol
 11707  13F4  0020               	movlb	0	; select bank0
 11708  13F5  0831               	movf	?___fttol+1,w
 11709  13F6  0021               	movlb	1	; select bank1
 11710  13F7  00B1               	movwf	(_current+1)^(0+128)
 11711  13F8  0020               	movlb	0	; select bank0
 11712  13F9  0830               	movf	?___fttol,w
 11713  13FA  0021               	movlb	1	; select bank1
 11714  13FB  00B0               	movwf	_current^(0+128)
 11715  13FC  0008               	return
 11716  13FD                     __end_of_calculateCurrent0:	
 11717                           
 11718                           	psect	text18
 11719  1757                     __ptext18:	
 11720 ;; *************** function ___ftdiv *****************
 11721 ;; Defined at:
 11722 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftdiv.c"
 11723 ;; Parameters:    Size  Location     Type
 11724 ;;  f2              3    0[BANK0 ] float 
 11725 ;;  f1              3    3[BANK0 ] float 
 11726 ;; Auto vars:     Size  Location     Type
 11727 ;;  f3              3   11[BANK0 ] float 
 11728 ;;  sign            1   15[BANK0 ] unsigned char 
 11729 ;;  exp             1   14[BANK0 ] unsigned char 
 11730 ;;  cntr            1   10[BANK0 ] unsigned char 
 11731 ;; Return value:  Size  Location     Type
 11732 ;;                  3    0[BANK0 ] float 
 11733 ;; Registers used:
 11734 ;;		wreg, status,2, status,0, pclath, cstack
 11735 ;; Tracked objects:
 11736 ;;		On entry : 0/0
 11737 ;;		On exit  : 0/0
 11738 ;;		Unchanged: 0/0
 11739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11740 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11741 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11742 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11743 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11744 ;;Total ram usage:       16 bytes
 11745 ;; Hardware stack levels used:    1
 11746 ;; Hardware stack levels required when called:    1
 11747 ;; This function calls:
 11748 ;;		___ftpack
 11749 ;; This function is called by:
 11750 ;;		_tempCalc
 11751 ;;		_main
 11752 ;;		_calculateCurrent0
 11753 ;;		_calculateCurrent1
 11754 ;;		_calculateCurrent2
 11755 ;;		_calculateCurrent3
 11756 ;; This function uses a non-reentrant model
 11757 ;;
 11758                           
 11759                           
 11760                           ;psect for function ___ftdiv
 11761  1757                     ___ftdiv:	
 11762                           
 11763                           ;incstack = 0
 11764                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 11765  1757  0020               	movlb	0	; select bank0
 11766  1758  0823               	movf	___ftdiv@f1,w
 11767  1759  00A6               	movwf	??___ftdiv
 11768  175A  0824               	movf	___ftdiv@f1+1,w
 11769  175B  00A7               	movwf	??___ftdiv+1
 11770  175C  0825               	movf	___ftdiv@f1+2,w
 11771  175D  00A8               	movwf	??___ftdiv+2
 11772  175E  1003               	clrc
 11773  175F  0D27               	rlf	??___ftdiv+1,w
 11774  1760  0D28               	rlf	??___ftdiv+2,w
 11775  1761  00A9               	movwf	??___ftdiv+3
 11776  1762  0829               	movf	??___ftdiv+3,w
 11777  1763  00AE               	movwf	___ftdiv@exp
 11778  1764  082E               	movf	___ftdiv@exp,w
 11779  1765  1D03               	btfss	3,2
 11780  1766  2F6E               	goto	l2895
 11781  1767  3000               	movlw	0
 11782  1768  00A0               	movwf	?___ftdiv
 11783  1769  3000               	movlw	0
 11784  176A  00A1               	movwf	?___ftdiv+1
 11785  176B  3000               	movlw	0
 11786  176C  00A2               	movwf	?___ftdiv+2
 11787  176D  0008               	return
 11788  176E                     l2895:	
 11789  176E  0820               	movf	___ftdiv@f2,w
 11790  176F  00A6               	movwf	??___ftdiv
 11791  1770  0821               	movf	___ftdiv@f2+1,w
 11792  1771  00A7               	movwf	??___ftdiv+1
 11793  1772  0822               	movf	___ftdiv@f2+2,w
 11794  1773  00A8               	movwf	??___ftdiv+2
 11795  1774  1003               	clrc
 11796  1775  0D27               	rlf	??___ftdiv+1,w
 11797  1776  0D28               	rlf	??___ftdiv+2,w
 11798  1777  00A9               	movwf	??___ftdiv+3
 11799  1778  0829               	movf	??___ftdiv+3,w
 11800  1779  00AF               	movwf	___ftdiv@sign
 11801  177A  082F               	movf	___ftdiv@sign,w
 11802  177B  1D03               	btfss	3,2
 11803  177C  2F84               	goto	l2901
 11804  177D  3000               	movlw	0
 11805  177E  00A0               	movwf	?___ftdiv
 11806  177F  3000               	movlw	0
 11807  1780  00A1               	movwf	?___ftdiv+1
 11808  1781  3000               	movlw	0
 11809  1782  00A2               	movwf	?___ftdiv+2
 11810  1783  0008               	return
 11811  1784                     l2901:	
 11812  1784  3000               	movlw	0
 11813  1785  00AB               	movwf	___ftdiv@f3
 11814  1786  3000               	movlw	0
 11815  1787  00AC               	movwf	___ftdiv@f3+1
 11816  1788  3000               	movlw	0
 11817  1789  00AD               	movwf	___ftdiv@f3+2
 11818  178A  3089               	movlw	137
 11819  178B  072F               	addwf	___ftdiv@sign,w
 11820  178C  00A6               	movwf	??___ftdiv
 11821  178D  0826               	movf	??___ftdiv,w
 11822  178E  02AE               	subwf	___ftdiv@exp,f
 11823  178F  0823               	movf	___ftdiv@f1,w
 11824  1790  00A6               	movwf	??___ftdiv
 11825  1791  0824               	movf	___ftdiv@f1+1,w
 11826  1792  00A7               	movwf	??___ftdiv+1
 11827  1793  0825               	movf	___ftdiv@f1+2,w
 11828  1794  00A8               	movwf	??___ftdiv+2
 11829  1795  3010               	movlw	16
 11830  1796                     u3175:	
 11831  1796  36A8               	lsrf	??___ftdiv+2,f
 11832  1797  0CA7               	rrf	??___ftdiv+1,f
 11833  1798  0CA6               	rrf	??___ftdiv,f
 11834  1799  0B89               	decfsz	9,f
 11835  179A  2F96               	goto	u3175
 11836  179B  0826               	movf	??___ftdiv,w
 11837  179C  00A9               	movwf	??___ftdiv+3
 11838  179D  0829               	movf	??___ftdiv+3,w
 11839  179E  00AF               	movwf	___ftdiv@sign
 11840  179F  0820               	movf	___ftdiv@f2,w
 11841  17A0  00A6               	movwf	??___ftdiv
 11842  17A1  0821               	movf	___ftdiv@f2+1,w
 11843  17A2  00A7               	movwf	??___ftdiv+1
 11844  17A3  0822               	movf	___ftdiv@f2+2,w
 11845  17A4  00A8               	movwf	??___ftdiv+2
 11846  17A5  3010               	movlw	16
 11847  17A6                     u3185:	
 11848  17A6  36A8               	lsrf	??___ftdiv+2,f
 11849  17A7  0CA7               	rrf	??___ftdiv+1,f
 11850  17A8  0CA6               	rrf	??___ftdiv,f
 11851  17A9  0B89               	decfsz	9,f
 11852  17AA  2FA6               	goto	u3185
 11853  17AB  0826               	movf	??___ftdiv,w
 11854  17AC  00A9               	movwf	??___ftdiv+3
 11855  17AD  0829               	movf	??___ftdiv+3,w
 11856  17AE  06AF               	xorwf	___ftdiv@sign,f
 11857  17AF  3080               	movlw	128
 11858  17B0  00A6               	movwf	??___ftdiv
 11859  17B1  0826               	movf	??___ftdiv,w
 11860  17B2  05AF               	andwf	___ftdiv@sign,f
 11861  17B3  17A4               	bsf	___ftdiv@f1+1,7
 11862  17B4  30FF               	movlw	255
 11863  17B5  05A3               	andwf	___ftdiv@f1,f
 11864  17B6  30FF               	movlw	255
 11865  17B7  05A4               	andwf	___ftdiv@f1+1,f
 11866  17B8  3000               	movlw	0
 11867  17B9  05A5               	andwf	___ftdiv@f1+2,f
 11868  17BA  17A1               	bsf	___ftdiv@f2+1,7
 11869  17BB  30FF               	movlw	255
 11870  17BC  05A0               	andwf	___ftdiv@f2,f
 11871  17BD  30FF               	movlw	255
 11872  17BE  05A1               	andwf	___ftdiv@f2+1,f
 11873  17BF  3000               	movlw	0
 11874  17C0  05A2               	andwf	___ftdiv@f2+2,f
 11875  17C1  3018               	movlw	24
 11876  17C2  00A6               	movwf	??___ftdiv
 11877  17C3  0826               	movf	??___ftdiv,w
 11878  17C4  00AA               	movwf	___ftdiv@cntr
 11879  17C5                     l2915:	
 11880  17C5  3001               	movlw	1
 11881  17C6                     u3195:	
 11882  17C6  35AB               	lslf	___ftdiv@f3,f
 11883  17C7  0DAC               	rlf	___ftdiv@f3+1,f
 11884  17C8  0DAD               	rlf	___ftdiv@f3+2,f
 11885  17C9  0B89               	decfsz	9,f
 11886  17CA  2FC6               	goto	u3195
 11887  17CB  0822               	movf	___ftdiv@f2+2,w
 11888  17CC  0225               	subwf	___ftdiv@f1+2,w
 11889  17CD  1D03               	skipz
 11890  17CE  2FD5               	goto	u3205
 11891  17CF  0821               	movf	___ftdiv@f2+1,w
 11892  17D0  0224               	subwf	___ftdiv@f1+1,w
 11893  17D1  1D03               	skipz
 11894  17D2  2FD5               	goto	u3205
 11895  17D3  0820               	movf	___ftdiv@f2,w
 11896  17D4  0223               	subwf	___ftdiv@f1,w
 11897  17D5                     u3205:	
 11898  17D5  1C03               	skipc
 11899  17D6  2FDE               	goto	l2923
 11900  17D7  0820               	movf	___ftdiv@f2,w
 11901  17D8  02A3               	subwf	___ftdiv@f1,f
 11902  17D9  0821               	movf	___ftdiv@f2+1,w
 11903  17DA  3BA4               	subwfb	___ftdiv@f1+1,f
 11904  17DB  0822               	movf	___ftdiv@f2+2,w
 11905  17DC  3BA5               	subwfb	___ftdiv@f1+2,f
 11906  17DD  142B               	bsf	___ftdiv@f3,0
 11907  17DE                     l2923:	
 11908  17DE  3001               	movlw	1
 11909  17DF                     u3215:	
 11910  17DF  35A3               	lslf	___ftdiv@f1,f
 11911  17E0  0DA4               	rlf	___ftdiv@f1+1,f
 11912  17E1  0DA5               	rlf	___ftdiv@f1+2,f
 11913  17E2  0B89               	decfsz	9,f
 11914  17E3  2FDF               	goto	u3215
 11915  17E4  3001               	movlw	1
 11916  17E5  02AA               	subwf	___ftdiv@cntr,f
 11917  17E6  1D03               	btfss	3,2
 11918  17E7  2FC5               	goto	l2915
 11919  17E8  082B               	movf	___ftdiv@f3,w
 11920  17E9  00F0               	movwf	___ftpack@arg
 11921  17EA  082C               	movf	___ftdiv@f3+1,w
 11922  17EB  00F1               	movwf	___ftpack@arg+1
 11923  17EC  082D               	movf	___ftdiv@f3+2,w
 11924  17ED  00F2               	movwf	___ftpack@arg+2
 11925  17EE  082E               	movf	___ftdiv@exp,w
 11926  17EF  00A6               	movwf	??___ftdiv
 11927  17F0  0826               	movf	??___ftdiv,w
 11928  17F1  00F3               	movwf	___ftpack@exp
 11929  17F2  082F               	movf	___ftdiv@sign,w
 11930  17F3  00A7               	movwf	??___ftdiv+1
 11931  17F4  0827               	movf	??___ftdiv+1,w
 11932  17F5  00F4               	movwf	___ftpack@sign
 11933  17F6  3195  25EF         	fcall	___ftpack
 11934  17F8  0870               	movf	?___ftpack,w
 11935  17F9  0020               	movlb	0	; select bank0
 11936  17FA  00A0               	movwf	?___ftdiv
 11937  17FB  0871               	movf	?___ftpack+1,w
 11938  17FC  00A1               	movwf	?___ftdiv+1
 11939  17FD  0872               	movf	?___ftpack+2,w
 11940  17FE  00A2               	movwf	?___ftdiv+2
 11941  17FF  0008               	return
 11942  1800                     __end_of___ftdiv:	
 11943                           
 11944                           	psect	text19
 11945  1307                     __ptext19:	
 11946 ;; *************** function _SYSTEM_Initialize *****************
 11947 ;; Defined at:
 11948 ;;		line 71 in file "system.c"
 11949 ;; Parameters:    Size  Location     Type
 11950 ;;		None
 11951 ;; Auto vars:     Size  Location     Type
 11952 ;;		None
 11953 ;; Return value:  Size  Location     Type
 11954 ;;                  1    wreg      void 
 11955 ;; Registers used:
 11956 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11957 ;; Tracked objects:
 11958 ;;		On entry : 0/0
 11959 ;;		On exit  : 0/0
 11960 ;;		Unchanged: 0/0
 11961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11963 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11964 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11965 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11966 ;;Total ram usage:        2 bytes
 11967 ;; Hardware stack levels used:    1
 11968 ;; Hardware stack levels required when called:    3
 11969 ;; This function calls:
 11970 ;;		_ADC_Initialize
 11971 ;;		_Init_Battery_State_Machine
 11972 ;;		_LCDClear
 11973 ;;		_LCDInit
 11974 ;;		_OSCILLATOR_Initialize
 11975 ;;		_PIN_MANAGER_Initialize
 11976 ;;		_PWM_Initialize
 11977 ;;		_TMR2_Initialize
 11978 ;;		_TMR4_Initialize
 11979 ;; This function is called by:
 11980 ;;		_main
 11981 ;; This function uses a non-reentrant model
 11982 ;;
 11983                           
 11984                           
 11985                           ;psect for function _SYSTEM_Initialize
 11986  1307                     _SYSTEM_Initialize:	
 11987                           
 11988                           ;system.c: 73: PIN_MANAGER_Initialize();
 11989                           
 11990                           ;incstack = 0
 11991                           ; Regs used in _SYSTEM_Initialize: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11992  1307  3192  2295  3193   	fcall	_PIN_MANAGER_Initialize
 11993                           
 11994                           ;system.c: 74: OSCILLATOR_Initialize();
 11995  130A  319F  27A0  3193   	fcall	_OSCILLATOR_Initialize
 11996                           
 11997                           ;system.c: 76: ADC_Initialize();
 11998  130D  3191  21C0  3193   	fcall	_ADC_Initialize
 11999                           
 12000                           ;system.c: 77: PWM_Initialize();
 12001  1310  3191  21DF  3193   	fcall	_PWM_Initialize
 12002                           
 12003                           ;system.c: 79: TMR2_Initialize();
 12004  1313  319F  27C1  3193   	fcall	_TMR2_Initialize
 12005                           
 12006                           ;system.c: 80: TMR4_Initialize();
 12007  1316  319F  27CF  3193   	fcall	_TMR4_Initialize
 12008                           
 12009                           ;system.c: 81: Init_Battery_State_Machine(0);
 12010  1319  3000               	movlw	0
 12011  131A  3195  258C  3193   	fcall	_Init_Battery_State_Machine
 12012                           
 12013                           ;system.c: 82: Init_Battery_State_Machine(1);
 12014  131D  3001               	movlw	1
 12015  131E  3195  258C  3193   	fcall	_Init_Battery_State_Machine
 12016                           
 12017                           ;system.c: 83: LCDInit();
 12018  1321  3192  22CC  3193   	fcall	_LCDInit
 12019                           
 12020                           ;system.c: 84: _delay((unsigned long)((200)*(32000000/4000.0)));
 12021  1324  3009               	movlw	9
 12022  1325  0020               	movlb	0	; select bank0
 12023  1326  00C4               	movwf	??_SYSTEM_Initialize+1
 12024  1327  301E               	movlw	30
 12025  1328  00C3               	movwf	??_SYSTEM_Initialize
 12026  1329  30E4               	movlw	228
 12027  132A                     u4347:	
 12028  132A  0B89               	decfsz	9,f
 12029  132B  2B2A               	goto	u4347
 12030  132C  0BC3               	decfsz	??_SYSTEM_Initialize,f
 12031  132D  2B2A               	goto	u4347
 12032  132E  0BC4               	decfsz	??_SYSTEM_Initialize+1,f
 12033  132F  2B2A               	goto	u4347
 12034  1330  0000               	nop
 12035                           
 12036                           ;system.c: 85: LCDClear();
 12037  1331  3192  2243  3193   	fcall	_LCDClear
 12038                           
 12039                           ;system.c: 86: _delay((unsigned long)((200)*(32000000/4000.0)));
 12040  1334  3009               	movlw	9
 12041  1335  0020               	movlb	0	; select bank0
 12042  1336  00C4               	movwf	??_SYSTEM_Initialize+1
 12043  1337  301E               	movlw	30
 12044  1338  00C3               	movwf	??_SYSTEM_Initialize
 12045  1339  30E4               	movlw	228
 12046  133A                     u4357:	
 12047  133A  0B89               	decfsz	9,f
 12048  133B  2B3A               	goto	u4357
 12049  133C  0BC3               	decfsz	??_SYSTEM_Initialize,f
 12050  133D  2B3A               	goto	u4357
 12051  133E  0BC4               	decfsz	??_SYSTEM_Initialize+1,f
 12052  133F  2B3A               	goto	u4357
 12053  1340  0000               	nop
 12054  1341  0008               	return
 12055  1342                     __end_of_SYSTEM_Initialize:	
 12056                           
 12057                           	psect	text20
 12058  1FCF                     __ptext20:	
 12059 ;; *************** function _TMR4_Initialize *****************
 12060 ;; Defined at:
 12061 ;;		line 25 in file "tmr.c"
 12062 ;; Parameters:    Size  Location     Type
 12063 ;;		None
 12064 ;; Auto vars:     Size  Location     Type
 12065 ;;		None
 12066 ;; Return value:  Size  Location     Type
 12067 ;;                  1    wreg      void 
 12068 ;; Registers used:
 12069 ;;		wreg, status,2
 12070 ;; Tracked objects:
 12071 ;;		On entry : 0/0
 12072 ;;		On exit  : 0/0
 12073 ;;		Unchanged: 0/0
 12074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12075 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12076 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12077 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12078 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12079 ;;Total ram usage:        0 bytes
 12080 ;; Hardware stack levels used:    1
 12081 ;; This function calls:
 12082 ;;		Nothing
 12083 ;; This function is called by:
 12084 ;;		_SYSTEM_Initialize
 12085 ;; This function uses a non-reentrant model
 12086 ;;
 12087                           
 12088                           
 12089                           ;psect for function _TMR4_Initialize
 12090  1FCF                     _TMR4_Initialize:	
 12091                           
 12092                           ;tmr.c: 27: T4CON = 0x00;
 12093                           
 12094                           ;incstack = 0
 12095                           ; Regs used in _TMR4_Initialize: [wreg+status,2]
 12096  1FCF  0025               	movlb	5	; select bank5
 12097  1FD0  0194               	clrf	20	;volatile
 12098                           
 12099                           ;tmr.c: 29: T4CLKCON = 0x01;
 12100  1FD1  3001               	movlw	1
 12101  1FD2  0096               	movwf	22	;volatile
 12102                           
 12103                           ;tmr.c: 31: T4HLT = 0x00;
 12104  1FD3  0195               	clrf	21	;volatile
 12105                           
 12106                           ;tmr.c: 33: T4RST = 0x00;
 12107  1FD4  0197               	clrf	23	;volatile
 12108                           
 12109                           ;tmr.c: 35: T4PR = 0xFE;
 12110  1FD5  30FE               	movlw	254
 12111  1FD6  0093               	movwf	19	;volatile
 12112                           
 12113                           ;tmr.c: 39: T4TMR = 0x00;
 12114  1FD7  0192               	clrf	18	;volatile
 12115                           
 12116                           ;tmr.c: 41: PIR4bits.TMR4IF = 0;
 12117  1FD8  002E               	movlb	14	; select bank14
 12118  1FD9  1190               	bcf	16,3	;volatile
 12119                           
 12120                           ;tmr.c: 43: T4CONbits.TMR4ON = 1;
 12121  1FDA  0025               	movlb	5	; select bank5
 12122  1FDB  1794               	bsf	20,7	;volatile
 12123  1FDC  0008               	return
 12124  1FDD                     __end_of_TMR4_Initialize:	
 12125                           
 12126                           	psect	text21
 12127  1FC1                     __ptext21:	
 12128 ;; *************** function _TMR2_Initialize *****************
 12129 ;; Defined at:
 12130 ;;		line 3 in file "tmr.c"
 12131 ;; Parameters:    Size  Location     Type
 12132 ;;		None
 12133 ;; Auto vars:     Size  Location     Type
 12134 ;;		None
 12135 ;; Return value:  Size  Location     Type
 12136 ;;                  1    wreg      void 
 12137 ;; Registers used:
 12138 ;;		wreg, status,2
 12139 ;; Tracked objects:
 12140 ;;		On entry : 0/0
 12141 ;;		On exit  : 0/0
 12142 ;;		Unchanged: 0/0
 12143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12144 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12145 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12146 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12147 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12148 ;;Total ram usage:        0 bytes
 12149 ;; Hardware stack levels used:    1
 12150 ;; This function calls:
 12151 ;;		Nothing
 12152 ;; This function is called by:
 12153 ;;		_SYSTEM_Initialize
 12154 ;; This function uses a non-reentrant model
 12155 ;;
 12156                           
 12157                           
 12158                           ;psect for function _TMR2_Initialize
 12159  1FC1                     _TMR2_Initialize:	
 12160                           
 12161                           ;tmr.c: 5: T2CON = 0x00;
 12162                           
 12163                           ;incstack = 0
 12164                           ; Regs used in _TMR2_Initialize: [wreg+status,2]
 12165  1FC1  0025               	movlb	5	; select bank5
 12166  1FC2  018E               	clrf	14	;volatile
 12167                           
 12168                           ;tmr.c: 7: T2CLKCON = 0x01;
 12169  1FC3  3001               	movlw	1
 12170  1FC4  0090               	movwf	16	;volatile
 12171                           
 12172                           ;tmr.c: 9: T2HLT = 0x00;
 12173  1FC5  018F               	clrf	15	;volatile
 12174                           
 12175                           ;tmr.c: 11: T2RST = 0x00;
 12176  1FC6  0191               	clrf	17	;volatile
 12177                           
 12178                           ;tmr.c: 13: T2PR = 0xFE;
 12179  1FC7  30FE               	movlw	254
 12180  1FC8  008D               	movwf	13	;volatile
 12181                           
 12182                           ;tmr.c: 18: T2TMR = 0x00;
 12183  1FC9  018C               	clrf	12	;volatile
 12184                           
 12185                           ;tmr.c: 20: PIR4bits.TMR2IF = 0;
 12186  1FCA  002E               	movlb	14	; select bank14
 12187  1FCB  1090               	bcf	16,1	;volatile
 12188                           
 12189                           ;tmr.c: 22: T2CONbits.TMR2ON = 1;
 12190  1FCC  0025               	movlb	5	; select bank5
 12191  1FCD  178E               	bsf	14,7	;volatile
 12192  1FCE  0008               	return
 12193  1FCF                     __end_of_TMR2_Initialize:	
 12194                           
 12195                           	psect	text22
 12196  11DF                     __ptext22:	
 12197 ;; *************** function _PWM_Initialize *****************
 12198 ;; Defined at:
 12199 ;;		line 3 in file "pwm.c"
 12200 ;; Parameters:    Size  Location     Type
 12201 ;;		None
 12202 ;; Auto vars:     Size  Location     Type
 12203 ;;		None
 12204 ;; Return value:  Size  Location     Type
 12205 ;;                  1    wreg      void 
 12206 ;; Registers used:
 12207 ;;		wreg, status,2, status,0
 12208 ;; Tracked objects:
 12209 ;;		On entry : 0/0
 12210 ;;		On exit  : 0/0
 12211 ;;		Unchanged: 0/0
 12212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12214 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12215 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12216 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12217 ;;Total ram usage:        0 bytes
 12218 ;; Hardware stack levels used:    1
 12219 ;; This function calls:
 12220 ;;		Nothing
 12221 ;; This function is called by:
 12222 ;;		_SYSTEM_Initialize
 12223 ;; This function uses a non-reentrant model
 12224 ;;
 12225                           
 12226                           
 12227                           ;psect for function _PWM_Initialize
 12228  11DF                     _PWM_Initialize:	
 12229                           
 12230                           ;pwm.c: 5: PWM6CON = 0x80;
 12231                           
 12232                           ;incstack = 0
 12233                           ; Regs used in _PWM_Initialize: [wreg+status,2+status,0]
 12234  11DF  3080               	movlw	128
 12235  11E0  0027               	movlb	7	; select bank7
 12236  11E1  008E               	movwf	14	;volatile
 12237                           
 12238                           ;pwm.c: 7: PWM6DCH = 0x00;
 12239  11E2  018D               	clrf	13	;volatile
 12240                           
 12241                           ;pwm.c: 9: PWM6DCL = 0x00;
 12242  11E3  018C               	clrf	12	;volatile
 12243                           
 12244                           ;pwm.c: 11: CCPTMRS1bits.P6TSEL = 0x01;
 12245  11E4  0024               	movlb	4	; select bank4
 12246  11E5  081F               	movf	31,w	;volatile
 12247  11E6  39F3               	andlw	-13
 12248  11E7  3804               	iorlw	4
 12249  11E8  009F               	movwf	31	;volatile
 12250                           
 12251                           ;pwm.c: 14: PWM7CON = 0x80;
 12252  11E9  3080               	movlw	128
 12253  11EA  0027               	movlb	7	; select bank7
 12254  11EB  0092               	movwf	18	;volatile
 12255                           
 12256                           ;pwm.c: 16: PWM7DCH = 0x00;
 12257  11EC  0191               	clrf	17	;volatile
 12258                           
 12259                           ;pwm.c: 18: PWM7DCL = 0x00;
 12260  11ED  0190               	clrf	16	;volatile
 12261                           
 12262                           ;pwm.c: 20: CCPTMRS1bits.P7TSEL = 0x02;
 12263  11EE  0024               	movlb	4	; select bank4
 12264  11EF  081F               	movf	31,w	;volatile
 12265  11F0  39CF               	andlw	-49
 12266  11F1  3820               	iorlw	32
 12267  11F2  009F               	movwf	31	;volatile
 12268                           
 12269                           ;pwm.c: 23: CCP1CONbits.CCP1EN = 1;
 12270  11F3  0026               	movlb	6	; select bank6
 12271  11F4  178E               	bsf	14,7	;volatile
 12272                           
 12273                           ;pwm.c: 24: CCP1CONbits.CCP1FMT = 1;
 12274  11F5  160E               	bsf	14,4	;volatile
 12275                           
 12276                           ;pwm.c: 25: CCP1CONbits.CCP1MODE = 0xF;
 12277  11F6  300F               	movlw	15
 12278  11F7  048E               	iorwf	14,f	;volatile
 12279                           
 12280                           ;pwm.c: 26: CCPTMRS0bits.C1TSEL = 0x1;
 12281  11F8  0024               	movlb	4	; select bank4
 12282  11F9  081E               	movf	30,w	;volatile
 12283  11FA  39FC               	andlw	-4
 12284  11FB  3801               	iorlw	1
 12285  11FC  009E               	movwf	30	;volatile
 12286  11FD  0008               	return
 12287  11FE                     __end_of_PWM_Initialize:	
 12288                           
 12289                           	psect	text23
 12290  1295                     __ptext23:	
 12291 ;; *************** function _PIN_MANAGER_Initialize *****************
 12292 ;; Defined at:
 12293 ;;		line 5 in file "pin_manager.c"
 12294 ;; Parameters:    Size  Location     Type
 12295 ;;		None
 12296 ;; Auto vars:     Size  Location     Type
 12297 ;;  state           1    0[COMMON] char 
 12298 ;; Return value:  Size  Location     Type
 12299 ;;                  1    wreg      void 
 12300 ;; Registers used:
 12301 ;;		wreg, status,2
 12302 ;; Tracked objects:
 12303 ;;		On entry : 0/0
 12304 ;;		On exit  : 0/0
 12305 ;;		Unchanged: 0/0
 12306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12307 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12308 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12309 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12310 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12311 ;;Total ram usage:        1 bytes
 12312 ;; Hardware stack levels used:    1
 12313 ;; This function calls:
 12314 ;;		Nothing
 12315 ;; This function is called by:
 12316 ;;		_SYSTEM_Initialize
 12317 ;; This function uses a non-reentrant model
 12318 ;;
 12319                           
 12320                           
 12321                           ;psect for function _PIN_MANAGER_Initialize
 12322  1295                     _PIN_MANAGER_Initialize:	
 12323                           
 12324                           ;pin_manager.c: 7: LATA = 0x20;
 12325                           
 12326                           ;incstack = 0
 12327                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
 12328  1295  3020               	movlw	32
 12329  1296  0020               	movlb	0	; select bank0
 12330  1297  0096               	movwf	22	;volatile
 12331                           
 12332                           ;pin_manager.c: 8: LATB = 0x00;
 12333  1298  0197               	clrf	23	;volatile
 12334                           
 12335                           ;pin_manager.c: 9: LATC = 0x00;
 12336  1299  0198               	clrf	24	;volatile
 12337                           
 12338                           ;pin_manager.c: 11: WPUA = 0x00;
 12339  129A  003E               	movlb	30	; select bank30
 12340  129B  01B9               	clrf	57	;volatile
 12341                           
 12342                           ;pin_manager.c: 12: WPUB = 0x00;
 12343  129C  01C4               	clrf	68	;volatile
 12344                           
 12345                           ;pin_manager.c: 13: WPUC = 0x00;
 12346  129D  01CF               	clrf	79	;volatile
 12347                           
 12348                           ;pin_manager.c: 14: WPUE = 0x8;
 12349  129E  3008               	movlw	8
 12350  129F  00E5               	movwf	101	;volatile
 12351                           
 12352                           ;pin_manager.c: 16: TRISA = 0x00;
 12353  12A0  0020               	movlb	0	; select bank0
 12354  12A1  0191               	clrf	17	;volatile
 12355                           
 12356                           ;pin_manager.c: 17: TRISB = 0x0E;
 12357  12A2  300E               	movlw	14
 12358  12A3  0092               	movwf	18	;volatile
 12359                           
 12360                           ;pin_manager.c: 18: TRISC = 0xFF;
 12361  12A4  30FF               	movlw	255
 12362  12A5  0093               	movwf	19	;volatile
 12363                           
 12364                           ;pin_manager.c: 20: ANSELA = 0x00;
 12365  12A6  003E               	movlb	30	; select bank30
 12366  12A7  01B8               	clrf	56	;volatile
 12367                           
 12368                           ;pin_manager.c: 21: ANSELB = 0x0A;
 12369  12A8  300A               	movlw	10
 12370  12A9  00C3               	movwf	67	;volatile
 12371                           
 12372                           ;pin_manager.c: 22: ANSELC = 0xFF;
 12373  12AA  30FF               	movlw	255
 12374  12AB  00CE               	movwf	78	;volatile
 12375                           
 12376                           ;pin_manager.c: 25: PIE0bits.IOCIE = 0;
 12377  12AC  002E               	movlb	14	; select bank14
 12378  12AD  1216               	bcf	22,4	;volatile
 12379                           
 12380                           ;pin_manager.c: 26: int8_t state = GIE;
 12381  12AE  3000               	movlw	0
 12382  12AF  1B8B               	btfsc	11,7	;volatile
 12383  12B0  3001               	movlw	1
 12384  12B1  00F0               	movwf	PIN_MANAGER_Initialize@state
 12385                           
 12386                           ;pin_manager.c: 27: GIE = 0;
 12387  12B2  138B               	bcf	11,7	;volatile
 12388                           
 12389                           ;pin_manager.c: 28: PPSLOCK = 0x55;
 12390  12B3  3055               	movlw	85
 12391  12B4  003D               	movlb	29	; select bank29
 12392  12B5  008F               	movwf	15	;volsfr
 12393                           
 12394                           ;pin_manager.c: 29: PPSLOCK = 0xAA;
 12395  12B6  30AA               	movlw	170
 12396  12B7  008F               	movwf	15	;volsfr
 12397                           
 12398                           ;pin_manager.c: 30: PPSLOCKbits.PPSLOCKED = 0x00;
 12399  12B8  100F               	bcf	15,0	;volsfr
 12400                           
 12401                           ;pin_manager.c: 32: RA6PPS = 0x0E;
 12402  12B9  300E               	movlw	14
 12403  12BA  003E               	movlb	30	; select bank30
 12404  12BB  0096               	movwf	22	;volatile
 12405                           
 12406                           ;pin_manager.c: 33: RA7PPS = 0x0F;
 12407  12BC  300F               	movlw	15
 12408  12BD  0097               	movwf	23	;volatile
 12409                           
 12410                           ;pin_manager.c: 34: RB0PPS = 0x09;
 12411  12BE  3009               	movlw	9
 12412  12BF  0098               	movwf	24	;volatile
 12413                           
 12414                           ;pin_manager.c: 35: PPSLOCK = 0x55;
 12415  12C0  3055               	movlw	85
 12416  12C1  003D               	movlb	29	; select bank29
 12417  12C2  008F               	movwf	15	;volsfr
 12418                           
 12419                           ;pin_manager.c: 36: PPSLOCK = 0xAA;
 12420  12C3  30AA               	movlw	170
 12421  12C4  008F               	movwf	15	;volsfr
 12422                           
 12423                           ;pin_manager.c: 37: PPSLOCKbits.PPSLOCKED = 0x01;
 12424  12C5  140F               	bsf	15,0	;volsfr
 12425                           
 12426                           ;pin_manager.c: 38: GIE = state;
 12427  12C6  1C70               	btfss	PIN_MANAGER_Initialize@state,0
 12428  12C7  2ACA               	goto	u2910
 12429  12C8  178B               	bsf	11,7	;volatile
 12430  12C9  0008               	return
 12431  12CA                     u2910:	
 12432  12CA  138B               	bcf	11,7	;volatile
 12433  12CB  0008               	return
 12434  12CC                     __end_of_PIN_MANAGER_Initialize:	
 12435                           
 12436                           	psect	text24
 12437  1FA0                     __ptext24:	
 12438 ;; *************** function _OSCILLATOR_Initialize *****************
 12439 ;; Defined at:
 12440 ;;		line 89 in file "system.c"
 12441 ;; Parameters:    Size  Location     Type
 12442 ;;		None
 12443 ;; Auto vars:     Size  Location     Type
 12444 ;;		None
 12445 ;; Return value:  Size  Location     Type
 12446 ;;                  1    wreg      void 
 12447 ;; Registers used:
 12448 ;;		wreg, status,2
 12449 ;; Tracked objects:
 12450 ;;		On entry : 0/0
 12451 ;;		On exit  : 0/0
 12452 ;;		Unchanged: 0/0
 12453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12454 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12455 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12456 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12457 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12458 ;;Total ram usage:        0 bytes
 12459 ;; Hardware stack levels used:    1
 12460 ;; This function calls:
 12461 ;;		Nothing
 12462 ;; This function is called by:
 12463 ;;		_SYSTEM_Initialize
 12464 ;; This function uses a non-reentrant model
 12465 ;;
 12466                           
 12467                           
 12468                           ;psect for function _OSCILLATOR_Initialize
 12469  1FA0                     _OSCILLATOR_Initialize:	
 12470                           
 12471                           ;system.c: 91: OSCCON1 = 0x60;
 12472                           
 12473                           ;incstack = 0
 12474                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
 12475  1FA0  3060               	movlw	96
 12476  1FA1  0031               	movlb	17	; select bank17
 12477  1FA2  008D               	movwf	13	;volatile
 12478                           
 12479                           ;system.c: 92: OSCCON3 = 0x00;
 12480  1FA3  018F               	clrf	15	;volatile
 12481                           
 12482                           ;system.c: 93: OSCEN = 0x00;
 12483  1FA4  0191               	clrf	17	;volatile
 12484                           
 12485                           ;system.c: 94: OSCFRQ = 0x06;
 12486  1FA5  3006               	movlw	6
 12487  1FA6  0093               	movwf	19	;volatile
 12488                           
 12489                           ;system.c: 95: OSCTUNE = 0x00;
 12490  1FA7  0192               	clrf	18	;volatile
 12491  1FA8  0008               	return
 12492  1FA9                     __end_of_OSCILLATOR_Initialize:	
 12493                           
 12494                           	psect	text25
 12495  12CC                     __ptext25:	
 12496 ;; *************** function _LCDInit *****************
 12497 ;; Defined at:
 12498 ;;		line 247 in file "lcd.c"
 12499 ;; Parameters:    Size  Location     Type
 12500 ;;		None
 12501 ;; Auto vars:     Size  Location     Type
 12502 ;;		None
 12503 ;; Return value:  Size  Location     Type
 12504 ;;                  1    wreg      void 
 12505 ;; Registers used:
 12506 ;;		wreg, status,2, status,0, pclath, cstack
 12507 ;; Tracked objects:
 12508 ;;		On entry : 0/0
 12509 ;;		On exit  : 0/0
 12510 ;;		Unchanged: 0/0
 12511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12512 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12513 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12514 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12515 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12516 ;;Total ram usage:        1 bytes
 12517 ;; Hardware stack levels used:    1
 12518 ;; Hardware stack levels required when called:    1
 12519 ;; This function calls:
 12520 ;;		_LCDWrite
 12521 ;; This function is called by:
 12522 ;;		_SYSTEM_Initialize
 12523 ;;		_main
 12524 ;; This function uses a non-reentrant model
 12525 ;;
 12526                           
 12527                           
 12528                           ;psect for function _LCDInit
 12529  12CC                     _LCDInit:	
 12530                           
 12531                           ;lcd.c: 249: TRISAbits.TRISA0 = 0;
 12532                           
 12533                           ;incstack = 0
 12534                           ; Regs used in _LCDInit: [wreg+status,2+status,0+pclath+cstack]
 12535  12CC  0020               	movlb	0	; select bank0
 12536  12CD  1011               	bcf	17,0	;volatile
 12537                           
 12538                           ;lcd.c: 250: TRISAbits.TRISA1 = 0;
 12539  12CE  1091               	bcf	17,1	;volatile
 12540                           
 12541                           ;lcd.c: 251: TRISAbits.TRISA2 = 0;
 12542  12CF  1111               	bcf	17,2	;volatile
 12543                           
 12544                           ;lcd.c: 252: TRISAbits.TRISA3 = 0;
 12545  12D0  1191               	bcf	17,3	;volatile
 12546                           
 12547                           ;lcd.c: 253: TRISAbits.TRISA4 = 0;
 12548  12D1  1211               	bcf	17,4	;volatile
 12549                           
 12550                           ;lcd.c: 254: LATAbits.LATA3 = 0;
 12551  12D2  1196               	bcf	22,3	;volatile
 12552                           
 12553                           ;lcd.c: 255: LATAbits.LATA4 = 0;
 12554  12D3  1216               	bcf	22,4	;volatile
 12555                           
 12556                           ;lcd.c: 256: LATAbits.LATA2 = 0;
 12557  12D4  1116               	bcf	22,2	;volatile
 12558                           
 12559                           ;lcd.c: 257: LATAbits.LATA0 = 0;
 12560  12D5  1016               	bcf	22,0	;volatile
 12561                           
 12562                           ;lcd.c: 259: LATAbits.LATA0 = 1;
 12563  12D6  1416               	bsf	22,0	;volatile
 12564                           
 12565                           ;lcd.c: 261: LCDWrite(0, 0x21);
 12566  12D7  3021               	movlw	33
 12567  12D8  00F5               	movwf	??_LCDInit
 12568  12D9  0875               	movf	??_LCDInit,w
 12569  12DA  00F0               	movwf	LCDWrite@data
 12570  12DB  3000               	movlw	0
 12571  12DC  3192  221E  3192   	fcall	_LCDWrite
 12572                           
 12573                           ;lcd.c: 269: LCDWrite(0, 0XB9);
 12574  12DF  30B9               	movlw	185
 12575  12E0  00F5               	movwf	??_LCDInit
 12576  12E1  0875               	movf	??_LCDInit,w
 12577  12E2  00F0               	movwf	LCDWrite@data
 12578  12E3  3000               	movlw	0
 12579  12E4  3192  221E  3192   	fcall	_LCDWrite
 12580                           
 12581                           ;lcd.c: 271: LCDWrite(0, 0x04);
 12582  12E7  3004               	movlw	4
 12583  12E8  00F5               	movwf	??_LCDInit
 12584  12E9  0875               	movf	??_LCDInit,w
 12585  12EA  00F0               	movwf	LCDWrite@data
 12586  12EB  3000               	movlw	0
 12587  12EC  3192  221E  3192   	fcall	_LCDWrite
 12588                           
 12589                           ;lcd.c: 273: LCDWrite(0, 0x14);
 12590  12EF  3014               	movlw	20
 12591  12F0  00F5               	movwf	??_LCDInit
 12592  12F1  0875               	movf	??_LCDInit,w
 12593  12F2  00F0               	movwf	LCDWrite@data
 12594  12F3  3000               	movlw	0
 12595  12F4  3192  221E  3192   	fcall	_LCDWrite
 12596                           
 12597                           ;lcd.c: 275: LCDWrite(0, 0x20);
 12598  12F7  3020               	movlw	32
 12599  12F8  00F5               	movwf	??_LCDInit
 12600  12F9  0875               	movf	??_LCDInit,w
 12601  12FA  00F0               	movwf	LCDWrite@data
 12602  12FB  3000               	movlw	0
 12603  12FC  3192  221E  3192   	fcall	_LCDWrite
 12604                           
 12605                           ;lcd.c: 277: LCDWrite(0, 0x0C);
 12606  12FF  300C               	movlw	12
 12607  1300  00F5               	movwf	??_LCDInit
 12608  1301  0875               	movf	??_LCDInit,w
 12609  1302  00F0               	movwf	LCDWrite@data
 12610  1303  3000               	movlw	0
 12611  1304  3192  221E         	fcall	_LCDWrite
 12612  1306  0008               	return
 12613  1307                     __end_of_LCDInit:	
 12614                           
 12615                           	psect	text26
 12616  1243                     __ptext26:	
 12617 ;; *************** function _LCDClear *****************
 12618 ;; Defined at:
 12619 ;;		line 182 in file "lcd.c"
 12620 ;; Parameters:    Size  Location     Type
 12621 ;;		None
 12622 ;; Auto vars:     Size  Location     Type
 12623 ;;  index           2    9[COMMON] int 
 12624 ;; Return value:  Size  Location     Type
 12625 ;;                  1    wreg      void 
 12626 ;; Registers used:
 12627 ;;		wreg, status,2, status,0, pclath, cstack
 12628 ;; Tracked objects:
 12629 ;;		On entry : 0/0
 12630 ;;		On exit  : 0/0
 12631 ;;		Unchanged: 0/0
 12632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12633 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12634 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12635 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12636 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12637 ;;Total ram usage:        3 bytes
 12638 ;; Hardware stack levels used:    1
 12639 ;; Hardware stack levels required when called:    2
 12640 ;; This function calls:
 12641 ;;		_LCDWrite
 12642 ;;		_gotoXY
 12643 ;; This function is called by:
 12644 ;;		_SYSTEM_Initialize
 12645 ;;		_main
 12646 ;; This function uses a non-reentrant model
 12647 ;;
 12648                           
 12649                           
 12650                           ;psect for function _LCDClear
 12651  1243                     _LCDClear:	
 12652                           
 12653                           ;lcd.c: 184: int index;
 12654                           ;lcd.c: 185: for (index = 0 ; index < (84 * 48 / 8) ; index++)
 12655                           
 12656                           ;incstack = 0
 12657                           ; Regs used in _LCDClear: [wreg+status,2+status,0+pclath+cstack]
 12658  1243  01F9               	clrf	LCDClear@index
 12659  1244  01FA               	clrf	LCDClear@index+1
 12660  1245  087A               	movf	LCDClear@index+1,w
 12661  1246  3A80               	xorlw	128
 12662  1247  00F8               	movwf	??_LCDClear
 12663  1248  3081               	movlw	129
 12664  1249  0278               	subwf	??_LCDClear,w
 12665  124A  1D03               	skipz
 12666  124B  2A4E               	goto	u2895
 12667  124C  30F8               	movlw	248
 12668  124D  0279               	subwf	LCDClear@index,w
 12669  124E                     u2895:	
 12670  124E  1803               	btfsc	3,0
 12671  124F  2A64               	goto	l2689
 12672  1250                     l2683:	
 12673                           
 12674                           ;lcd.c: 186: LCDWrite(1, 0x00);
 12675  1250  01F0               	clrf	LCDWrite@data
 12676  1251  3001               	movlw	1
 12677  1252  3192  221E  3192   	fcall	_LCDWrite
 12678  1255  3001               	movlw	1
 12679  1256  07F9               	addwf	LCDClear@index,f
 12680  1257  3000               	movlw	0
 12681  1258  3DFA               	addwfc	LCDClear@index+1,f
 12682  1259  087A               	movf	LCDClear@index+1,w
 12683  125A  3A80               	xorlw	128
 12684  125B  00F8               	movwf	??_LCDClear
 12685  125C  3081               	movlw	129
 12686  125D  0278               	subwf	??_LCDClear,w
 12687  125E  1D03               	skipz
 12688  125F  2A62               	goto	u2905
 12689  1260  30F8               	movlw	248
 12690  1261  0279               	subwf	LCDClear@index,w
 12691  1262                     u2905:	
 12692  1262  1C03               	skipc
 12693  1263  2A50               	goto	l2683
 12694  1264                     l2689:	
 12695                           
 12696                           ;lcd.c: 187: gotoXY(0, 0);
 12697  1264  01F5               	clrf	gotoXY@y
 12698  1265  3000               	movlw	0
 12699  1266  319F  27ED         	fcall	_gotoXY
 12700  1268  0008               	return
 12701  1269                     __end_of_LCDClear:	
 12702                           
 12703                           	psect	text27
 12704  1FED                     __ptext27:	
 12705 ;; *************** function _gotoXY *****************
 12706 ;; Defined at:
 12707 ;;		line 124 in file "lcd.c"
 12708 ;; Parameters:    Size  Location     Type
 12709 ;;  x               1    wreg     unsigned char 
 12710 ;;  y               1    5[COMMON] unsigned char 
 12711 ;; Auto vars:     Size  Location     Type
 12712 ;;  x               1    7[COMMON] unsigned char 
 12713 ;; Return value:  Size  Location     Type
 12714 ;;                  1    wreg      void 
 12715 ;; Registers used:
 12716 ;;		wreg, status,2, status,0, pclath, cstack
 12717 ;; Tracked objects:
 12718 ;;		On entry : 0/0
 12719 ;;		On exit  : 0/0
 12720 ;;		Unchanged: 0/0
 12721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12722 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12723 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12724 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12725 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12726 ;;Total ram usage:        3 bytes
 12727 ;; Hardware stack levels used:    1
 12728 ;; Hardware stack levels required when called:    1
 12729 ;; This function calls:
 12730 ;;		_LCDWrite
 12731 ;; This function is called by:
 12732 ;;		_LCDClear
 12733 ;;		_main
 12734 ;; This function uses a non-reentrant model
 12735 ;;
 12736                           
 12737                           
 12738                           ;psect for function _gotoXY
 12739  1FED                     _gotoXY:	
 12740                           
 12741                           ;incstack = 0
 12742                           ; Regs used in _gotoXY: [wreg+status,2+status,0+pclath+cstack]
 12743                           ;gotoXY@x stored from wreg
 12744  1FED  00F7               	movwf	gotoXY@x
 12745                           
 12746                           ;lcd.c: 126: LCDWrite(0,(uint8_t)(0x80 | x));
 12747  1FEE  0877               	movf	gotoXY@x,w
 12748  1FEF  3880               	iorlw	128
 12749  1FF0  00F6               	movwf	??_gotoXY
 12750  1FF1  0876               	movf	??_gotoXY,w
 12751  1FF2  00F0               	movwf	LCDWrite@data
 12752  1FF3  3000               	movlw	0
 12753  1FF4  3192  221E  319F   	fcall	_LCDWrite
 12754                           
 12755                           ;lcd.c: 127: LCDWrite(0,(uint8_t)(0x40 | y));
 12756  1FF7  0875               	movf	gotoXY@y,w
 12757  1FF8  3840               	iorlw	64
 12758  1FF9  00F6               	movwf	??_gotoXY
 12759  1FFA  0876               	movf	??_gotoXY,w
 12760  1FFB  00F0               	movwf	LCDWrite@data
 12761  1FFC  3000               	movlw	0
 12762  1FFD  3192  221E         	fcall	_LCDWrite
 12763  1FFF  0008               	return
 12764  2000                     __end_of_gotoXY:	
 12765                           
 12766                           	psect	text28
 12767  158C                     __ptext28:	
 12768 ;; *************** function _Init_Battery_State_Machine *****************
 12769 ;; Defined at:
 12770 ;;		line 18 in file "battery_charger.c"
 12771 ;; Parameters:    Size  Location     Type
 12772 ;;  z               1    wreg     unsigned char 
 12773 ;; Auto vars:     Size  Location     Type
 12774 ;;  z               1   34[BANK0 ] unsigned char 
 12775 ;; Return value:  Size  Location     Type
 12776 ;;                  1    wreg      void 
 12777 ;; Registers used:
 12778 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12779 ;; Tracked objects:
 12780 ;;		On entry : 0/0
 12781 ;;		On exit  : 0/0
 12782 ;;		Unchanged: 0/0
 12783 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12784 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12785 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12786 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12787 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12788 ;;Total ram usage:        5 bytes
 12789 ;; Hardware stack levels used:    1
 12790 ;; Hardware stack levels required when called:    2
 12791 ;; This function calls:
 12792 ;;		___awtoft
 12793 ;;		___ftmul
 12794 ;;		___fttol
 12795 ;; This function is called by:
 12796 ;;		_SYSTEM_Initialize
 12797 ;; This function uses a non-reentrant model
 12798 ;;
 12799                           
 12800                           
 12801                           ;psect for function _Init_Battery_State_Machine
 12802  158C                     _Init_Battery_State_Machine:	
 12803                           
 12804                           ;incstack = 0
 12805                           ; Regs used in _Init_Battery_State_Machine: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 12806                           ;Init_Battery_State_Machine@z stored from wreg
 12807  158C  0020               	movlb	0	; select bank0
 12808  158D  00C2               	movwf	Init_Battery_State_Machine@z
 12809                           
 12810                           ;battery_charger.c: 20: batteryState[z] =PRECHARGE;
 12811  158E  3003               	movlw	3
 12812  158F  00BE               	movwf	??_Init_Battery_State_Machine
 12813  1590  0842               	movf	Init_Battery_State_Machine@z,w
 12814  1591  3E64               	addlw	(low (_batteryState| 0))& (0+255)
 12815  1592  0086               	movwf	6
 12816  1593  0187               	clrf	7
 12817  1594  083E               	movf	??_Init_Battery_State_Machine,w
 12818  1595  0081               	movwf	1
 12819                           
 12820                           ;battery_charger.c: 21: stateCounter[z] =5;
 12821  1596  3542               	lslf	Init_Battery_State_Machine@z,w
 12822  1597  3EBD               	addlw	(low (_stateCounter| 0))& (0+255)
 12823  1598  0086               	movwf	6
 12824  1599  0187               	clrf	7
 12825  159A  3005               	movlw	5
 12826  159B  3FC0               	movwi [0]fsr1
 12827  159C  3000               	movlw	0
 12828  159D  3FC1               	movwi [1]fsr1
 12829                           
 12830                           ;battery_charger.c: 22: Iref[z] =10;
 12831  159E  3542               	lslf	Init_Battery_State_Machine@z,w
 12832  159F  3EC1               	addlw	(low (_Iref| 0))& (0+255)
 12833  15A0  0086               	movwf	6
 12834  15A1  0187               	clrf	7
 12835  15A2  300A               	movlw	10
 12836  15A3  3FC0               	movwi [0]fsr1
 12837  15A4  3000               	movlw	0
 12838  15A5  3FC1               	movwi [1]fsr1
 12839                           
 12840                           ;battery_charger.c: 23: Vref[z] =1425+(int16_t)((250-batteryTemp)*.24);
 12841  15A6  096D               	comf	_batteryTemp,w
 12842  15A7  00BE               	movwf	??_Init_Battery_State_Machine
 12843  15A8  096E               	comf	_batteryTemp+1,w
 12844  15A9  00BF               	movwf	??_Init_Battery_State_Machine+1
 12845  15AA  0ABE               	incf	??_Init_Battery_State_Machine,f
 12846  15AB  1903               	skipnz
 12847  15AC  0ABF               	incf	??_Init_Battery_State_Machine+1,f
 12848  15AD  083E               	movf	??_Init_Battery_State_Machine,w
 12849  15AE  3EFA               	addlw	250
 12850  15AF  00F8               	movwf	___awtoft@c
 12851  15B0  3000               	movlw	0
 12852  15B1  3D3F               	addwfc	??_Init_Battery_State_Machine+1,w
 12853  15B2  00F9               	movwf	___awtoft@c+1
 12854  15B3  3191  21FE  3195   	fcall	___awtoft
 12855  15B6  0878               	movf	?___awtoft,w
 12856  15B7  0020               	movlb	0	; select bank0
 12857  15B8  00A3               	movwf	___ftmul@f2
 12858  15B9  0879               	movf	?___awtoft+1,w
 12859  15BA  00A4               	movwf	___ftmul@f2+1
 12860  15BB  087A               	movf	?___awtoft+2,w
 12861  15BC  00A5               	movwf	___ftmul@f2+2
 12862  15BD  30C3               	movlw	195
 12863  15BE  00A0               	movwf	___ftmul@f1
 12864  15BF  3075               	movlw	117
 12865  15C0  00A1               	movwf	___ftmul@f1+1
 12866  15C1  303E               	movlw	62
 12867  15C2  00A2               	movwf	___ftmul@f1+2
 12868  15C3  3188  20FB  3195   	fcall	___ftmul
 12869  15C6  0020               	movlb	0	; select bank0
 12870  15C7  0820               	movf	?___ftmul,w
 12871  15C8  00B0               	movwf	___fttol@f1
 12872  15C9  0821               	movf	?___ftmul+1,w
 12873  15CA  00B1               	movwf	___fttol@f1+1
 12874  15CB  0822               	movf	?___ftmul+2,w
 12875  15CC  00B2               	movwf	___fttol@f1+2
 12876  15CD  3180  201A         	fcall	___fttol
 12877  15CF  0020               	movlb	0	; select bank0
 12878  15D0  0830               	movf	?___fttol,w
 12879  15D1  3E91               	addlw	145
 12880  15D2  00C0               	movwf	??_Init_Battery_State_Machine+2
 12881  15D3  3005               	movlw	5
 12882  15D4  3D31               	addwfc	?___fttol+1,w
 12883  15D5  00C1               	movwf	??_Init_Battery_State_Machine+3
 12884  15D6  3542               	lslf	Init_Battery_State_Machine@z,w
 12885  15D7  3E5A               	addlw	(low (_Vref| 0))& (0+255)
 12886  15D8  0086               	movwf	6
 12887  15D9  0187               	clrf	7
 12888  15DA  0840               	movf	??_Init_Battery_State_Machine+2,w
 12889  15DB  3FC0               	movwi [0]fsr1
 12890  15DC  0841               	movf	??_Init_Battery_State_Machine+3,w
 12891  15DD  3FC1               	movwi [1]fsr1
 12892                           
 12893                           ;battery_charger.c: 24: Imin[z] =15;
 12894  15DE  3542               	lslf	Init_Battery_State_Machine@z,w
 12895  15DF  3EC9               	addlw	(low (_Imin| 0))& (0+255)
 12896  15E0  0086               	movwf	6
 12897  15E1  0187               	clrf	7
 12898  15E2  300F               	movlw	15
 12899  15E3  3FC0               	movwi [0]fsr1
 12900  15E4  3000               	movlw	0
 12901  15E5  3FC1               	movwi [1]fsr1
 12902                           
 12903                           ;battery_charger.c: 25: IminCount[z] = 600;
 12904  15E6  3542               	lslf	Init_Battery_State_Machine@z,w
 12905  15E7  3EC5               	addlw	(low (_IminCount| 0))& (0+255)
 12906  15E8  0086               	movwf	6
 12907  15E9  0187               	clrf	7
 12908  15EA  3058               	movlw	88
 12909  15EB  3FC0               	movwi [0]fsr1
 12910  15EC  3002               	movlw	2
 12911  15ED  3FC1               	movwi [1]fsr1
 12912  15EE  0008               	return
 12913  15EF                     __end_of_Init_Battery_State_Machine:	
 12914                           
 12915                           	psect	text29
 12916  11C0                     __ptext29:	
 12917 ;; *************** function _ADC_Initialize *****************
 12918 ;; Defined at:
 12919 ;;		line 139 in file "adc.c"
 12920 ;; Parameters:    Size  Location     Type
 12921 ;;		None
 12922 ;; Auto vars:     Size  Location     Type
 12923 ;;		None
 12924 ;; Return value:  Size  Location     Type
 12925 ;;                  1    wreg      void 
 12926 ;; Registers used:
 12927 ;;		wreg, status,2
 12928 ;; Tracked objects:
 12929 ;;		On entry : 0/0
 12930 ;;		On exit  : 0/0
 12931 ;;		Unchanged: 0/0
 12932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12933 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12934 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12935 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12936 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12937 ;;Total ram usage:        0 bytes
 12938 ;; Hardware stack levels used:    1
 12939 ;; This function calls:
 12940 ;;		Nothing
 12941 ;; This function is called by:
 12942 ;;		_SYSTEM_Initialize
 12943 ;; This function uses a non-reentrant model
 12944 ;;
 12945                           
 12946                           
 12947                           ;psect for function _ADC_Initialize
 12948  11C0                     _ADC_Initialize:	
 12949                           
 12950                           ;adc.c: 141: ADCON1 = 0x00;
 12951                           
 12952                           ;incstack = 0
 12953                           ; Regs used in _ADC_Initialize: [wreg+status,2]
 12954  11C0  0021               	movlb	1	; select bank1
 12955  11C1  0194               	clrf	20	;volatile
 12956                           
 12957                           ;adc.c: 143: ADCON2 = 0x00;
 12958  11C2  0195               	clrf	21	;volatile
 12959                           
 12960                           ;adc.c: 145: ADCON3 = 0x00;
 12961  11C3  0196               	clrf	22	;volatile
 12962                           
 12963                           ;adc.c: 147: ADACT = 0x00;
 12964  11C4  0199               	clrf	25	;volatile
 12965                           
 12966                           ;adc.c: 149: ADSTAT = 0x00;
 12967  11C5  0197               	clrf	23	;volatile
 12968                           
 12969                           ;adc.c: 151: FVRCON = 0b11000011;
 12970  11C6  30C3               	movlw	195
 12971  11C7  0032               	movlb	18	; select bank18
 12972  11C8  008C               	movwf	12	;volatile
 12973                           
 12974                           ;adc.c: 152: ADCLK = 0x3F;
 12975  11C9  303F               	movlw	63
 12976  11CA  0021               	movlb	1	; select bank1
 12977  11CB  0098               	movwf	24	;volatile
 12978                           
 12979                           ;adc.c: 159: ADREF = 0x03;
 12980  11CC  3003               	movlw	3
 12981  11CD  009A               	movwf	26	;volatile
 12982                           
 12983                           ;adc.c: 162: ADCAP = 0x00;
 12984  11CE  019B               	clrf	27	;volatile
 12985                           
 12986                           ;adc.c: 165: ADPRE = 0x07;
 12987  11CF  3007               	movlw	7
 12988  11D0  009C               	movwf	28	;volatile
 12989                           
 12990                           ;adc.c: 167: ADACQ = 0x00;
 12991  11D1  019D               	clrf	29	;volatile
 12992                           
 12993                           ;adc.c: 169: ADPCH = 0x00;
 12994  11D2  019E               	clrf	30	;volatile
 12995                           
 12996                           ;adc.c: 171: ADRPT = 0x00;
 12997  11D3  0022               	movlb	2	; select bank2
 12998  11D4  018D               	clrf	13	;volatile
 12999                           
 13000                           ;adc.c: 173: ADLTHL = 0x00;
 13001  11D5  018E               	clrf	14	;volatile
 13002                           
 13003                           ;adc.c: 175: ADLTHH = 0x00;
 13004  11D6  018F               	clrf	15	;volatile
 13005                           
 13006                           ;adc.c: 177: ADUTHL = 0x00;
 13007  11D7  0190               	clrf	16	;volatile
 13008                           
 13009                           ;adc.c: 179: ADUTHH = 0x00;
 13010  11D8  0191               	clrf	17	;volatile
 13011                           
 13012                           ;adc.c: 181: ADSTPTL = 0x00;
 13013  11D9  0192               	clrf	18	;volatile
 13014                           
 13015                           ;adc.c: 183: ADSTPTH = 0x00;
 13016  11DA  0193               	clrf	19	;volatile
 13017                           
 13018                           ;adc.c: 185: ADCON0 = 0x84;
 13019  11DB  3084               	movlw	132
 13020  11DC  0021               	movlb	1	; select bank1
 13021  11DD  0093               	movwf	19	;volatile
 13022  11DE  0008               	return
 13023  11DF                     __end_of_ADC_Initialize:	
 13024                           
 13025                           	psect	text30
 13026  0004                     __ptext30:	
 13027 ;; *************** function _PWM7_LoadDutyValue *****************
 13028 ;; Defined at:
 13029 ;;		line 37 in file "pwm.c"
 13030 ;; Parameters:    Size  Location     Type
 13031 ;;  dutyCycle7      2    0[COMMON] unsigned int 
 13032 ;; Auto vars:     Size  Location     Type
 13033 ;;		None
 13034 ;; Return value:  Size  Location     Type
 13035 ;;                  1    wreg      void 
 13036 ;; Registers used:
 13037 ;;		wreg, status,2, status,0
 13038 ;; Tracked objects:
 13039 ;;		On entry : 0/0
 13040 ;;		On exit  : 0/0
 13041 ;;		Unchanged: 0/0
 13042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13043 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13044 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13045 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13046 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13047 ;;Total ram usage:        4 bytes
 13048 ;; Hardware stack levels used:    1
 13049 ;; This function calls:
 13050 ;;		Nothing
 13051 ;; This function is called by:
 13052 ;;		_main
 13053 ;; This function uses a non-reentrant model
 13054 ;;
 13055                           
 13056                           
 13057                           ;psect for function _PWM7_LoadDutyValue
 13058  0004                     _PWM7_LoadDutyValue:	
 13059                           
 13060                           ;pwm.c: 39: PWM7DCH = (dutyCycle7 & 0x03FC)>>2;
 13061                           
 13062                           ;incstack = 0
 13063                           ; Regs used in _PWM7_LoadDutyValue: [wreg+status,2+status,0]
 13064  0004  0871               	movf	PWM7_LoadDutyValue@dutyCycle7+1,w
 13065  0005  00F3               	movwf	??_PWM7_LoadDutyValue+1
 13066  0006  0870               	movf	PWM7_LoadDutyValue@dutyCycle7,w
 13067  0007  00F2               	movwf	??_PWM7_LoadDutyValue
 13068  0008  36F3               	lsrf	??_PWM7_LoadDutyValue+1,f
 13069  0009  0CF2               	rrf	??_PWM7_LoadDutyValue,f
 13070  000A  36F3               	lsrf	??_PWM7_LoadDutyValue+1,f
 13071  000B  0CF2               	rrf	??_PWM7_LoadDutyValue,f
 13072  000C  0872               	movf	??_PWM7_LoadDutyValue,w
 13073  000D  0027               	movlb	7	; select bank7
 13074  000E  0091               	movwf	17	;volatile
 13075                           
 13076                           ;pwm.c: 41: PWM7DCL = (dutyCycle7 & 0x0003)<<6;
 13077  000F  0870               	movf	PWM7_LoadDutyValue@dutyCycle7,w
 13078  0010  3903               	andlw	3
 13079  0011  00F2               	movwf	??_PWM7_LoadDutyValue
 13080  0012  3005               	movlw	5
 13081  0013                     u3855:	
 13082  0013  35F2               	lslf	??_PWM7_LoadDutyValue,f
 13083  0014  3EFF               	addlw	-1
 13084  0015  1D03               	skipz
 13085  0016  2813               	goto	u3855
 13086  0017  3572               	lslf	??_PWM7_LoadDutyValue,w
 13087  0018  0090               	movwf	16	;volatile
 13088  0019  0008               	return
 13089  001A                     __end_of_PWM7_LoadDutyValue:	
 13090                           
 13091                           	psect	text31
 13092  1171                     __ptext31:	
 13093 ;; *************** function _PWM6_LoadDutyValue *****************
 13094 ;; Defined at:
 13095 ;;		line 30 in file "pwm.c"
 13096 ;; Parameters:    Size  Location     Type
 13097 ;;  dutyCycle6      2    0[COMMON] unsigned int 
 13098 ;; Auto vars:     Size  Location     Type
 13099 ;;		None
 13100 ;; Return value:  Size  Location     Type
 13101 ;;                  1    wreg      void 
 13102 ;; Registers used:
 13103 ;;		wreg, status,2, status,0
 13104 ;; Tracked objects:
 13105 ;;		On entry : 0/0
 13106 ;;		On exit  : 0/0
 13107 ;;		Unchanged: 0/0
 13108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13109 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13110 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13111 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13112 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13113 ;;Total ram usage:        4 bytes
 13114 ;; Hardware stack levels used:    1
 13115 ;; This function calls:
 13116 ;;		Nothing
 13117 ;; This function is called by:
 13118 ;;		_main
 13119 ;; This function uses a non-reentrant model
 13120 ;;
 13121                           
 13122                           
 13123                           ;psect for function _PWM6_LoadDutyValue
 13124  1171                     _PWM6_LoadDutyValue:	
 13125                           
 13126                           ;pwm.c: 32: PWM6DCH = (dutyCycle6 & 0x03FC)>>2;
 13127                           
 13128                           ;incstack = 0
 13129                           ; Regs used in _PWM6_LoadDutyValue: [wreg+status,2+status,0]
 13130  1171  0871               	movf	PWM6_LoadDutyValue@dutyCycle6+1,w
 13131  1172  00F3               	movwf	??_PWM6_LoadDutyValue+1
 13132  1173  0870               	movf	PWM6_LoadDutyValue@dutyCycle6,w
 13133  1174  00F2               	movwf	??_PWM6_LoadDutyValue
 13134  1175  36F3               	lsrf	??_PWM6_LoadDutyValue+1,f
 13135  1176  0CF2               	rrf	??_PWM6_LoadDutyValue,f
 13136  1177  36F3               	lsrf	??_PWM6_LoadDutyValue+1,f
 13137  1178  0CF2               	rrf	??_PWM6_LoadDutyValue,f
 13138  1179  0872               	movf	??_PWM6_LoadDutyValue,w
 13139  117A  0027               	movlb	7	; select bank7
 13140  117B  008D               	movwf	13	;volatile
 13141                           
 13142                           ;pwm.c: 34: PWM6DCL = (dutyCycle6 & 0x0003)<<6;
 13143  117C  0870               	movf	PWM6_LoadDutyValue@dutyCycle6,w
 13144  117D  3903               	andlw	3
 13145  117E  00F2               	movwf	??_PWM6_LoadDutyValue
 13146  117F  3005               	movlw	5
 13147  1180                     u3845:	
 13148  1180  35F2               	lslf	??_PWM6_LoadDutyValue,f
 13149  1181  3EFF               	addlw	-1
 13150  1182  1D03               	skipz
 13151  1183  2980               	goto	u3845
 13152  1184  3572               	lslf	??_PWM6_LoadDutyValue,w
 13153  1185  008C               	movwf	12	;volatile
 13154  1186  0008               	return
 13155  1187                     __end_of_PWM6_LoadDutyValue:	
 13156                           
 13157                           	psect	text32
 13158  115B                     __ptext32:	
 13159 ;; *************** function _PWM1_LoadDutyValue *****************
 13160 ;; Defined at:
 13161 ;;		line 44 in file "pwm.c"
 13162 ;; Parameters:    Size  Location     Type
 13163 ;;  dutyCycle1      2    0[COMMON] unsigned int 
 13164 ;; Auto vars:     Size  Location     Type
 13165 ;;		None
 13166 ;; Return value:  Size  Location     Type
 13167 ;;                  1    wreg      void 
 13168 ;; Registers used:
 13169 ;;		wreg, status,2, status,0
 13170 ;; Tracked objects:
 13171 ;;		On entry : 0/0
 13172 ;;		On exit  : 0/0
 13173 ;;		Unchanged: 0/0
 13174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13175 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13176 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13177 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13178 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13179 ;;Total ram usage:        4 bytes
 13180 ;; Hardware stack levels used:    1
 13181 ;; This function calls:
 13182 ;;		Nothing
 13183 ;; This function is called by:
 13184 ;;		_main
 13185 ;; This function uses a non-reentrant model
 13186 ;;
 13187                           
 13188                           
 13189                           ;psect for function _PWM1_LoadDutyValue
 13190  115B                     _PWM1_LoadDutyValue:	
 13191                           
 13192                           ;pwm.c: 46: CCPR1H = (dutyCycle1& 0x03FC)>>2;
 13193                           
 13194                           ;incstack = 0
 13195                           ; Regs used in _PWM1_LoadDutyValue: [wreg+status,2+status,0]
 13196  115B  0871               	movf	PWM1_LoadDutyValue@dutyCycle1+1,w
 13197  115C  00F3               	movwf	??_PWM1_LoadDutyValue+1
 13198  115D  0870               	movf	PWM1_LoadDutyValue@dutyCycle1,w
 13199  115E  00F2               	movwf	??_PWM1_LoadDutyValue
 13200  115F  36F3               	lsrf	??_PWM1_LoadDutyValue+1,f
 13201  1160  0CF2               	rrf	??_PWM1_LoadDutyValue,f
 13202  1161  36F3               	lsrf	??_PWM1_LoadDutyValue+1,f
 13203  1162  0CF2               	rrf	??_PWM1_LoadDutyValue,f
 13204  1163  0872               	movf	??_PWM1_LoadDutyValue,w
 13205  1164  0026               	movlb	6	; select bank6
 13206  1165  008D               	movwf	13	;volatile
 13207                           
 13208                           ;pwm.c: 47: CCPR1L = (dutyCycle1 & 0x0003)<<6;
 13209  1166  0870               	movf	PWM1_LoadDutyValue@dutyCycle1,w
 13210  1167  3903               	andlw	3
 13211  1168  00F2               	movwf	??_PWM1_LoadDutyValue
 13212  1169  3005               	movlw	5
 13213  116A                     u3865:	
 13214  116A  35F2               	lslf	??_PWM1_LoadDutyValue,f
 13215  116B  3EFF               	addlw	-1
 13216  116C  1D03               	skipz
 13217  116D  296A               	goto	u3865
 13218  116E  3572               	lslf	??_PWM1_LoadDutyValue,w
 13219  116F  008C               	movwf	12	;volatile
 13220  1170  0008               	return
 13221  1171                     __end_of_PWM1_LoadDutyValue:	
 13222                           
 13223                           	psect	text33
 13224  1132                     __ptext33:	
 13225 ;; *************** function _LCDWriteString *****************
 13226 ;; Defined at:
 13227 ;;		line 176 in file "lcd.c"
 13228 ;; Parameters:    Size  Location     Type
 13229 ;;  characters      2   12[COMMON] PTR const unsigned char 
 13230 ;;		 -> STR_3(5), STR_2(5), STR_1(4), 
 13231 ;; Auto vars:     Size  Location     Type
 13232 ;;		None
 13233 ;; Return value:  Size  Location     Type
 13234 ;;                  1    wreg      void 
 13235 ;; Registers used:
 13236 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13237 ;; Tracked objects:
 13238 ;;		On entry : 0/0
 13239 ;;		On exit  : 0/0
 13240 ;;		Unchanged: 0/0
 13241 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13242 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13243 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13244 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13245 ;;      Totals:         2       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13246 ;;Total ram usage:        3 bytes
 13247 ;; Hardware stack levels used:    1
 13248 ;; Hardware stack levels required when called:    2
 13249 ;; This function calls:
 13250 ;;		_LCDWriteCharacter
 13251 ;; This function is called by:
 13252 ;;		_main
 13253 ;; This function uses a non-reentrant model
 13254 ;;
 13255                           
 13256                           
 13257                           ;psect for function _LCDWriteString
 13258  1132                     _LCDWriteString:	
 13259  1132                     l3127:	
 13260                           ;lcd.c: 178: while (*characters)
 13261                           
 13262                           ;incstack = 0
 13263                           ; Regs used in _LCDWriteString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13264                           
 13265  1132  087C               	movf	LCDWriteString@characters,w
 13266  1133  0084               	movwf	4
 13267  1134  087D               	movf	LCDWriteString@characters+1,w
 13268  1135  0085               	movwf	5
 13269  1136  0012               	moviw fsr0++
 13270  1137  1903               	btfsc	3,2
 13271  1138  0008               	return
 13272                           
 13273                           ;lcd.c: 179: LCDWriteCharacter(*characters++);
 13274  1139  087C               	movf	LCDWriteString@characters,w
 13275  113A  0084               	movwf	4
 13276  113B  087D               	movf	LCDWriteString@characters+1,w
 13277  113C  0085               	movwf	5
 13278  113D  0800               	movf	0,w	;code access
 13279  113E  3194  24D8  3191   	fcall	_LCDWriteCharacter
 13280  1141  3001               	movlw	1
 13281  1142  07FC               	addwf	LCDWriteString@characters,f
 13282  1143  3000               	movlw	0
 13283  1144  3DFD               	addwfc	LCDWriteString@characters+1,f
 13284  1145  2932               	goto	l3127
 13285  1146                     __end_of_LCDWriteString:	
 13286                           
 13287                           	psect	text34
 13288  09AF                     __ptext34:	
 13289 ;; *************** function _LCDWriteInt *****************
 13290 ;; Defined at:
 13291 ;;		line 190 in file "lcd.c"
 13292 ;; Parameters:    Size  Location     Type
 13293 ;;  value           2    0[BANK0 ] int 
 13294 ;;  fieldLength     1    2[BANK0 ] char 
 13295 ;;  numPlaces       1    3[BANK0 ] unsigned char 
 13296 ;;  sign            1    4[BANK0 ] unsigned char 
 13297 ;; Auto vars:     Size  Location     Type
 13298 ;;  str             5    9[BANK0 ] unsigned char [5]
 13299 ;;  i               1   15[BANK0 ] unsigned char 
 13300 ;;  j               1   14[BANK0 ] unsigned char 
 13301 ;; Return value:  Size  Location     Type
 13302 ;;                  1    wreg      void 
 13303 ;; Registers used:
 13304 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13305 ;; Tracked objects:
 13306 ;;		On entry : 0/0
 13307 ;;		On exit  : 0/0
 13308 ;;		Unchanged: 0/0
 13309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13310 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13311 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13312 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13313 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13314 ;;Total ram usage:       16 bytes
 13315 ;; Hardware stack levels used:    1
 13316 ;; Hardware stack levels required when called:    2
 13317 ;; This function calls:
 13318 ;;		_LCDWriteCharacter
 13319 ;;		___awdiv
 13320 ;;		___lwmod
 13321 ;; This function is called by:
 13322 ;;		_main
 13323 ;; This function uses a non-reentrant model
 13324 ;;
 13325                           
 13326                           
 13327                           ;psect for function _LCDWriteInt
 13328  09AF                     _LCDWriteInt:	
 13329                           
 13330                           ;lcd.c: 192: uint8_t str[5]={0,0,0,0,0};
 13331                           
 13332                           ;incstack = 0
 13333                           ; Regs used in _LCDWriteInt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13334  09AF  30B8               	movlw	low LCDWriteInt@F14392
 13335  09B0  0086               	movwf	6
 13336  09B1  3000               	movlw	high LCDWriteInt@F14392
 13337  09B2  0087               	movwf	7
 13338  09B3  3029               	movlw	low LCDWriteInt@str
 13339  09B4  0084               	movwf	4
 13340  09B5  3000               	movlw	high LCDWriteInt@str
 13341  09B6  0085               	movwf	5
 13342  09B7  3005               	movlw	5
 13343  09B8  0020               	movlb	0	; select bank0
 13344  09B9  00A5               	movwf	??_LCDWriteInt
 13345  09BA                     u3750:	
 13346  09BA  0016               	moviw fsr1++
 13347  09BB  001A               	movwi fsr0++
 13348  09BC  0BA5               	decfsz	??_LCDWriteInt,f
 13349  09BD  29BA               	goto	u3750
 13350                           
 13351                           ;lcd.c: 193: uint8_t i=4,j=0;
 13352  09BE  3004               	movlw	4
 13353  09BF  00A5               	movwf	??_LCDWriteInt
 13354  09C0  0825               	movf	??_LCDWriteInt,w
 13355  09C1  00AF               	movwf	LCDWriteInt@i
 13356  09C2  01AE               	clrf	LCDWriteInt@j
 13357                           
 13358                           ;lcd.c: 195: if(value<0)
 13359  09C3  1FA1               	btfss	LCDWriteInt@value+1,7
 13360  09C4  29D0               	goto	l3141
 13361                           
 13362                           ;lcd.c: 196: {
 13363                           ;lcd.c: 197: LCDWriteCharacter('-');
 13364  09C5  302D               	movlw	45
 13365  09C6  3194  24D8  3189   	fcall	_LCDWriteCharacter
 13366                           
 13367                           ;lcd.c: 198: value=value*-1;
 13368  09C9  0020               	movlb	0	; select bank0
 13369  09CA  09A0               	comf	LCDWriteInt@value,f
 13370  09CB  09A1               	comf	LCDWriteInt@value+1,f
 13371  09CC  0AA0               	incf	LCDWriteInt@value,f
 13372  09CD  1903               	skipnz
 13373  09CE  0AA1               	incf	LCDWriteInt@value+1,f
 13374                           
 13375                           ;lcd.c: 199: }
 13376  09CF  29D7               	goto	l3151
 13377  09D0                     l3141:	
 13378                           
 13379                           ;lcd.c: 201: else
 13380                           ;lcd.c: 202: {
 13381                           ;lcd.c: 203: if(sign == 1)
 13382  09D0  0324               	decf	LCDWriteInt@sign,w
 13383  09D1  1D03               	btfss	3,2
 13384  09D2  29D7               	goto	l3151
 13385                           
 13386                           ;lcd.c: 204: {
 13387                           ;lcd.c: 205: LCDWriteCharacter('+');
 13388  09D3  302B               	movlw	43
 13389  09D4  3194  24D8  3189   	fcall	_LCDWriteCharacter
 13390  09D7                     l3151:	
 13391                           ;lcd.c: 206: }
 13392                           ;lcd.c: 207: }
 13393                           ;lcd.c: 209: while(value)
 13394                           
 13395  09D7  0020               	movlb	0	; select bank0
 13396  09D8  0820               	movf	LCDWriteInt@value,w
 13397  09D9  0421               	iorwf	LCDWriteInt@value+1,w
 13398  09DA  1903               	btfsc	3,2
 13399  09DB  2A04               	goto	l3153
 13400                           
 13401                           ;lcd.c: 210: {
 13402                           ;lcd.c: 211: str[i]=(uint16_t)value%10;
 13403  09DC  300A               	movlw	10
 13404  09DD  00F0               	movwf	___lwmod@divisor
 13405  09DE  3000               	movlw	0
 13406  09DF  00F1               	movwf	___lwmod@divisor+1
 13407  09E0  0020               	movlb	0	; select bank0
 13408  09E1  0821               	movf	LCDWriteInt@value+1,w
 13409  09E2  00F3               	movwf	___lwmod@dividend+1
 13410  09E3  0820               	movf	LCDWriteInt@value,w
 13411  09E4  00F2               	movwf	___lwmod@dividend
 13412  09E5  3192  2269  3189   	fcall	___lwmod
 13413  09E8  0870               	movf	?___lwmod,w
 13414  09E9  0020               	movlb	0	; select bank0
 13415  09EA  00A5               	movwf	??_LCDWriteInt
 13416  09EB  082F               	movf	LCDWriteInt@i,w
 13417  09EC  3E29               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
 13418  09ED  0086               	movwf	6
 13419  09EE  0187               	clrf	7
 13420  09EF  0825               	movf	??_LCDWriteInt,w
 13421  09F0  0081               	movwf	1
 13422                           
 13423                           ;lcd.c: 212: value=value/10;
 13424  09F1  300A               	movlw	10
 13425  09F2  00F0               	movwf	___awdiv@divisor
 13426  09F3  3000               	movlw	0
 13427  09F4  00F1               	movwf	___awdiv@divisor+1
 13428  09F5  0821               	movf	LCDWriteInt@value+1,w
 13429  09F6  00F3               	movwf	___awdiv@dividend+1
 13430  09F7  0820               	movf	LCDWriteInt@value,w
 13431  09F8  00F2               	movwf	___awdiv@dividend
 13432  09F9  3194  2487  3189   	fcall	___awdiv
 13433  09FC  0871               	movf	?___awdiv+1,w
 13434  09FD  0020               	movlb	0	; select bank0
 13435  09FE  00A1               	movwf	LCDWriteInt@value+1
 13436  09FF  0870               	movf	?___awdiv,w
 13437  0A00  00A0               	movwf	LCDWriteInt@value
 13438                           
 13439                           ;lcd.c: 213: i--;
 13440  0A01  3001               	movlw	1
 13441  0A02  02AF               	subwf	LCDWriteInt@i,f
 13442  0A03  29D7               	goto	l3151
 13443  0A04                     l3153:	
 13444                           
 13445                           ;lcd.c: 214: }
 13446                           ;lcd.c: 215: if(fieldLength==-1)
 13447  0A04  0A22               	incf	LCDWriteInt@fieldLength,w
 13448  0A05  1903               	btfsc	3,2
 13449  0A06  2A0C               	goto	l3159
 13450  0A07  2A14               	goto	l3161
 13451  0A08                     l3157:	
 13452                           ;lcd.c: 216: {
 13453                           ;lcd.c: 217: while(str[j]==0)
 13454                           
 13455                           
 13456                           ;lcd.c: 218: {
 13457                           ;lcd.c: 219: j++;
 13458  0A08  3001               	movlw	1
 13459  0A09  00A5               	movwf	??_LCDWriteInt
 13460  0A0A  0825               	movf	??_LCDWriteInt,w
 13461  0A0B  07AE               	addwf	LCDWriteInt@j,f
 13462  0A0C                     l3159:	
 13463  0A0C  082E               	movf	LCDWriteInt@j,w
 13464  0A0D  3E29               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
 13465  0A0E  0086               	movwf	6
 13466  0A0F  0187               	clrf	7
 13467  0A10  0801               	movf	1,w
 13468  0A11  1D03               	btfss	3,2
 13469  0A12  2A1A               	goto	l3163
 13470  0A13  2A08               	goto	l3157
 13471  0A14                     l3161:	
 13472                           ;lcd.c: 220: }
 13473                           ;lcd.c: 221: }
 13474                           
 13475                           
 13476                           ;lcd.c: 222: else
 13477                           ;lcd.c: 223: {
 13478                           ;lcd.c: 224: j=(uint8_t)(5-fieldLength);
 13479  0A14  0322               	decf	LCDWriteInt@fieldLength,w
 13480  0A15  3AFF               	xorlw	255
 13481  0A16  3E05               	addlw	5
 13482  0A17  00A5               	movwf	??_LCDWriteInt
 13483  0A18  0825               	movf	??_LCDWriteInt,w
 13484  0A19  00AE               	movwf	LCDWriteInt@j
 13485  0A1A                     l3163:	
 13486                           
 13487                           ;lcd.c: 225: }
 13488                           ;lcd.c: 227: for(i=j;i<(5-numPlaces);i++)
 13489  0A1A  082E               	movf	LCDWriteInt@j,w
 13490  0A1B  00A5               	movwf	??_LCDWriteInt
 13491  0A1C  0825               	movf	??_LCDWriteInt,w
 13492  0A1D  00AF               	movwf	LCDWriteInt@i
 13493  0A1E                     l3169:	
 13494  0A1E  0823               	movf	LCDWriteInt@numPlaces,w
 13495  0A1F  00A5               	movwf	??_LCDWriteInt
 13496  0A20  01A6               	clrf	??_LCDWriteInt+1
 13497  0A21  09A5               	comf	??_LCDWriteInt,f
 13498  0A22  09A6               	comf	??_LCDWriteInt+1,f
 13499  0A23  0AA5               	incf	??_LCDWriteInt,f
 13500  0A24  1903               	skipnz
 13501  0A25  0AA6               	incf	??_LCDWriteInt+1,f
 13502  0A26  0825               	movf	??_LCDWriteInt,w
 13503  0A27  3E05               	addlw	5
 13504  0A28  00A7               	movwf	??_LCDWriteInt+2
 13505  0A29  3000               	movlw	0
 13506  0A2A  3D26               	addwfc	??_LCDWriteInt+1,w
 13507  0A2B  00A8               	movwf	??_LCDWriteInt+3
 13508  0A2C  0828               	movf	??_LCDWriteInt+3,w
 13509  0A2D  3A80               	xorlw	128
 13510  0A2E  3C80               	sublw	128
 13511  0A2F  1D03               	skipz
 13512  0A30  2A33               	goto	u3815
 13513  0A31  0827               	movf	??_LCDWriteInt+2,w
 13514  0A32  022F               	subwf	LCDWriteInt@i,w
 13515  0A33                     u3815:	
 13516  0A33  1803               	btfsc	3,0
 13517  0A34  2A45               	goto	l3171
 13518                           
 13519                           ;lcd.c: 228: {
 13520                           ;lcd.c: 229: LCDWriteCharacter((uint8_t)(48+str[i]));
 13521  0A35  0020               	movlb	0	; select bank0
 13522  0A36  082F               	movf	LCDWriteInt@i,w
 13523  0A37  3E29               	addlw	(low (LCDWriteInt@str| 0))& (0+255)
 13524  0A38  0086               	movwf	6
 13525  0A39  0187               	clrf	7
 13526  0A3A  0801               	movf	1,w
 13527  0A3B  3E30               	addlw	48
 13528  0A3C  3194  24D8  3189   	fcall	_LCDWriteCharacter
 13529  0A3F  3001               	movlw	1
 13530  0A40  0020               	movlb	0	; select bank0
 13531  0A41  00A5               	movwf	??_LCDWriteInt
 13532  0A42  0825               	movf	??_LCDWriteInt,w
 13533  0A43  07AF               	addwf	LCDWriteInt@i,f
 13534  0A44  2A1E               	goto	l3169
 13535  0A45                     l3171:	
 13536                           
 13537                           ;lcd.c: 230: }
 13538                           ;lcd.c: 232: if(numPlaces == 1)
 13539  0A45  0020               	movlb	0	; select bank0
 13540  0A46  0323               	decf	LCDWriteInt@numPlaces,w
 13541  0A47  1D03               	btfss	3,2
 13542  0A48  2A53               	goto	l3175
 13543                           
 13544                           ;lcd.c: 233: {
 13545                           ;lcd.c: 234: LCDWriteCharacter(46);
 13546  0A49  302E               	movlw	46
 13547  0A4A  3194  24D8  3189   	fcall	_LCDWriteCharacter
 13548                           
 13549                           ;lcd.c: 235: LCDWriteCharacter ((uint8_t)(48+str[4]));
 13550  0A4D  0020               	movlb	0	; select bank0
 13551  0A4E  082D               	movf	LCDWriteInt@str+4,w
 13552  0A4F  3E30               	addlw	48
 13553  0A50  3194  24D8  3189   	fcall	_LCDWriteCharacter
 13554  0A53                     l3175:	
 13555                           
 13556                           ;lcd.c: 236: }
 13557                           ;lcd.c: 238: if(numPlaces == 2)
 13558  0A53  3002               	movlw	2
 13559  0A54  0020               	movlb	0	; select bank0
 13560  0A55  0623               	xorwf	LCDWriteInt@numPlaces,w
 13561  0A56  1D03               	btfss	3,2
 13562  0A57  0008               	return
 13563                           
 13564                           ;lcd.c: 239: {
 13565                           ;lcd.c: 240: LCDWriteCharacter(46);
 13566  0A58  302E               	movlw	46
 13567  0A59  3194  24D8  3189   	fcall	_LCDWriteCharacter
 13568                           
 13569                           ;lcd.c: 241: LCDWriteCharacter((uint8_t)(48+str[3]));
 13570  0A5C  0020               	movlb	0	; select bank0
 13571  0A5D  082C               	movf	LCDWriteInt@str+3,w
 13572  0A5E  3E30               	addlw	48
 13573  0A5F  3194  24D8  3189   	fcall	_LCDWriteCharacter
 13574                           
 13575                           ;lcd.c: 242: LCDWriteCharacter((uint8_t)(48+str[4]));
 13576  0A62  0020               	movlb	0	; select bank0
 13577  0A63  082D               	movf	LCDWriteInt@str+4,w
 13578  0A64  3E30               	addlw	48
 13579  0A65  3194  24D8         	fcall	_LCDWriteCharacter
 13580  0A67  0008               	return
 13581  0A68                     __end_of_LCDWriteInt:	
 13582                           
 13583                           	psect	text35
 13584  1269                     __ptext35:	
 13585 ;; *************** function ___lwmod *****************
 13586 ;; Defined at:
 13587 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
 13588 ;; Parameters:    Size  Location     Type
 13589 ;;  divisor         2    0[COMMON] unsigned int 
 13590 ;;  dividend        2    2[COMMON] unsigned int 
 13591 ;; Auto vars:     Size  Location     Type
 13592 ;;  counter         1    5[COMMON] unsigned char 
 13593 ;; Return value:  Size  Location     Type
 13594 ;;                  2    0[COMMON] unsigned int 
 13595 ;; Registers used:
 13596 ;;		wreg, status,2, status,0
 13597 ;; Tracked objects:
 13598 ;;		On entry : 0/0
 13599 ;;		On exit  : 0/0
 13600 ;;		Unchanged: 0/0
 13601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13602 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13603 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13604 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13605 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13606 ;;Total ram usage:        6 bytes
 13607 ;; Hardware stack levels used:    1
 13608 ;; This function calls:
 13609 ;;		Nothing
 13610 ;; This function is called by:
 13611 ;;		_LCDWriteInt
 13612 ;; This function uses a non-reentrant model
 13613 ;;
 13614                           
 13615                           
 13616                           ;psect for function ___lwmod
 13617  1269                     ___lwmod:	
 13618                           
 13619                           ;incstack = 0
 13620                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
 13621  1269  0870               	movf	___lwmod@divisor,w
 13622  126A  0471               	iorwf	___lwmod@divisor+1,w
 13623  126B  1903               	btfsc	3,2
 13624  126C  2A90               	goto	l2957
 13625  126D  01F5               	clrf	___lwmod@counter
 13626  126E  0AF5               	incf	___lwmod@counter,f
 13627  126F                     l2947:	
 13628  126F  1BF1               	btfsc	___lwmod@divisor+1,7
 13629  1270  2A7B               	goto	l2949
 13630  1271  3001               	movlw	1
 13631  1272                     u3255:	
 13632  1272  35F0               	lslf	___lwmod@divisor,f
 13633  1273  0DF1               	rlf	___lwmod@divisor+1,f
 13634  1274  0B89               	decfsz	9,f
 13635  1275  2A72               	goto	u3255
 13636  1276  3001               	movlw	1
 13637  1277  00F4               	movwf	??___lwmod
 13638  1278  0874               	movf	??___lwmod,w
 13639  1279  07F5               	addwf	___lwmod@counter,f
 13640  127A  2A6F               	goto	l2947
 13641  127B                     l2949:	
 13642  127B  0871               	movf	___lwmod@divisor+1,w
 13643  127C  0273               	subwf	___lwmod@dividend+1,w
 13644  127D  1D03               	skipz
 13645  127E  2A81               	goto	u3275
 13646  127F  0870               	movf	___lwmod@divisor,w
 13647  1280  0272               	subwf	___lwmod@dividend,w
 13648  1281                     u3275:	
 13649  1281  1C03               	skipc
 13650  1282  2A87               	goto	l2953
 13651  1283  0870               	movf	___lwmod@divisor,w
 13652  1284  02F2               	subwf	___lwmod@dividend,f
 13653  1285  0871               	movf	___lwmod@divisor+1,w
 13654  1286  3BF3               	subwfb	___lwmod@dividend+1,f
 13655  1287                     l2953:	
 13656  1287  3001               	movlw	1
 13657  1288                     u3285:	
 13658  1288  36F1               	lsrf	___lwmod@divisor+1,f
 13659  1289  0CF0               	rrf	___lwmod@divisor,f
 13660  128A  0B89               	decfsz	9,f
 13661  128B  2A88               	goto	u3285
 13662  128C  3001               	movlw	1
 13663  128D  02F5               	subwf	___lwmod@counter,f
 13664  128E  1D03               	btfss	3,2
 13665  128F  2A7B               	goto	l2949
 13666  1290                     l2957:	
 13667  1290  0873               	movf	___lwmod@dividend+1,w
 13668  1291  00F1               	movwf	?___lwmod+1
 13669  1292  0872               	movf	___lwmod@dividend,w
 13670  1293  00F0               	movwf	?___lwmod
 13671  1294  0008               	return
 13672  1295                     __end_of___lwmod:	
 13673                           
 13674                           	psect	text36
 13675  1487                     __ptext36:	
 13676 ;; *************** function ___awdiv *****************
 13677 ;; Defined at:
 13678 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awdiv.c"
 13679 ;; Parameters:    Size  Location     Type
 13680 ;;  divisor         2    0[COMMON] int 
 13681 ;;  dividend        2    2[COMMON] int 
 13682 ;; Auto vars:     Size  Location     Type
 13683 ;;  quotient        2    7[COMMON] int 
 13684 ;;  sign            1    6[COMMON] unsigned char 
 13685 ;;  counter         1    5[COMMON] unsigned char 
 13686 ;; Return value:  Size  Location     Type
 13687 ;;                  2    0[COMMON] int 
 13688 ;; Registers used:
 13689 ;;		wreg, status,2, status,0
 13690 ;; Tracked objects:
 13691 ;;		On entry : 0/0
 13692 ;;		On exit  : 0/0
 13693 ;;		Unchanged: 0/0
 13694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13695 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13696 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13697 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13698 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13699 ;;Total ram usage:        9 bytes
 13700 ;; Hardware stack levels used:    1
 13701 ;; This function calls:
 13702 ;;		Nothing
 13703 ;; This function is called by:
 13704 ;;		_LCDWriteInt
 13705 ;; This function uses a non-reentrant model
 13706 ;;
 13707                           
 13708                           
 13709                           ;psect for function ___awdiv
 13710  1487                     ___awdiv:	
 13711                           
 13712                           ;incstack = 0
 13713                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 13714  1487  01F6               	clrf	___awdiv@sign
 13715  1488  1FF1               	btfss	___awdiv@divisor+1,7
 13716  1489  2C91               	goto	l2853
 13717  148A  09F0               	comf	___awdiv@divisor,f
 13718  148B  09F1               	comf	___awdiv@divisor+1,f
 13719  148C  0AF0               	incf	___awdiv@divisor,f
 13720  148D  1903               	skipnz
 13721  148E  0AF1               	incf	___awdiv@divisor+1,f
 13722  148F  01F6               	clrf	___awdiv@sign
 13723  1490  0AF6               	incf	___awdiv@sign,f
 13724  1491                     l2853:	
 13725  1491  1FF3               	btfss	___awdiv@dividend+1,7
 13726  1492  2C9C               	goto	l2859
 13727  1493  09F2               	comf	___awdiv@dividend,f
 13728  1494  09F3               	comf	___awdiv@dividend+1,f
 13729  1495  0AF2               	incf	___awdiv@dividend,f
 13730  1496  1903               	skipnz
 13731  1497  0AF3               	incf	___awdiv@dividend+1,f
 13732  1498  3001               	movlw	1
 13733  1499  00F4               	movwf	??___awdiv
 13734  149A  0874               	movf	??___awdiv,w
 13735  149B  06F6               	xorwf	___awdiv@sign,f
 13736  149C                     l2859:	
 13737  149C  01F7               	clrf	___awdiv@quotient
 13738  149D  01F8               	clrf	___awdiv@quotient+1
 13739  149E  0870               	movf	___awdiv@divisor,w
 13740  149F  0471               	iorwf	___awdiv@divisor+1,w
 13741  14A0  1903               	btfsc	3,2
 13742  14A1  2CCB               	goto	l2881
 13743  14A2  01F5               	clrf	___awdiv@counter
 13744  14A3  0AF5               	incf	___awdiv@counter,f
 13745  14A4                     l2869:	
 13746  14A4  1BF1               	btfsc	___awdiv@divisor+1,7
 13747  14A5  2CB0               	goto	l2871
 13748  14A6  3001               	movlw	1
 13749  14A7                     u3085:	
 13750  14A7  35F0               	lslf	___awdiv@divisor,f
 13751  14A8  0DF1               	rlf	___awdiv@divisor+1,f
 13752  14A9  0B89               	decfsz	9,f
 13753  14AA  2CA7               	goto	u3085
 13754  14AB  3001               	movlw	1
 13755  14AC  00F4               	movwf	??___awdiv
 13756  14AD  0874               	movf	??___awdiv,w
 13757  14AE  07F5               	addwf	___awdiv@counter,f
 13758  14AF  2CA4               	goto	l2869
 13759  14B0                     l2871:	
 13760  14B0  3001               	movlw	1
 13761  14B1                     u3105:	
 13762  14B1  35F7               	lslf	___awdiv@quotient,f
 13763  14B2  0DF8               	rlf	___awdiv@quotient+1,f
 13764  14B3  0B89               	decfsz	9,f
 13765  14B4  2CB1               	goto	u3105
 13766  14B5  0871               	movf	___awdiv@divisor+1,w
 13767  14B6  0273               	subwf	___awdiv@dividend+1,w
 13768  14B7  1D03               	skipz
 13769  14B8  2CBB               	goto	u3115
 13770  14B9  0870               	movf	___awdiv@divisor,w
 13771  14BA  0272               	subwf	___awdiv@dividend,w
 13772  14BB                     u3115:	
 13773  14BB  1C03               	skipc
 13774  14BC  2CC2               	goto	l2877
 13775  14BD  0870               	movf	___awdiv@divisor,w
 13776  14BE  02F2               	subwf	___awdiv@dividend,f
 13777  14BF  0871               	movf	___awdiv@divisor+1,w
 13778  14C0  3BF3               	subwfb	___awdiv@dividend+1,f
 13779  14C1  1477               	bsf	___awdiv@quotient,0
 13780  14C2                     l2877:	
 13781  14C2  3001               	movlw	1
 13782  14C3                     u3125:	
 13783  14C3  36F1               	lsrf	___awdiv@divisor+1,f
 13784  14C4  0CF0               	rrf	___awdiv@divisor,f
 13785  14C5  0B89               	decfsz	9,f
 13786  14C6  2CC3               	goto	u3125
 13787  14C7  3001               	movlw	1
 13788  14C8  02F5               	subwf	___awdiv@counter,f
 13789  14C9  1D03               	btfss	3,2
 13790  14CA  2CB0               	goto	l2871
 13791  14CB                     l2881:	
 13792  14CB  0876               	movf	___awdiv@sign,w
 13793  14CC  1903               	btfsc	3,2
 13794  14CD  2CD3               	goto	l2885
 13795  14CE  09F7               	comf	___awdiv@quotient,f
 13796  14CF  09F8               	comf	___awdiv@quotient+1,f
 13797  14D0  0AF7               	incf	___awdiv@quotient,f
 13798  14D1  1903               	skipnz
 13799  14D2  0AF8               	incf	___awdiv@quotient+1,f
 13800  14D3                     l2885:	
 13801  14D3  0878               	movf	___awdiv@quotient+1,w
 13802  14D4  00F1               	movwf	?___awdiv+1
 13803  14D5  0877               	movf	___awdiv@quotient,w
 13804  14D6  00F0               	movwf	?___awdiv
 13805  14D7  0008               	return
 13806  14D8                     __end_of___awdiv:	
 13807                           
 13808                           	psect	text37
 13809  14D8                     __ptext37:	
 13810 ;; *************** function _LCDWriteCharacter *****************
 13811 ;; Defined at:
 13812 ;;		line 140 in file "lcd.c"
 13813 ;; Parameters:    Size  Location     Type
 13814 ;;  character       1    wreg     const unsigned char 
 13815 ;; Auto vars:     Size  Location     Type
 13816 ;;  character       1    9[COMMON] const unsigned char 
 13817 ;;  base            2   10[COMMON] unsigned int 
 13818 ;; Return value:  Size  Location     Type
 13819 ;;                  1    wreg      void 
 13820 ;; Registers used:
 13821 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13822 ;; Tracked objects:
 13823 ;;		On entry : 0/0
 13824 ;;		On exit  : 0/0
 13825 ;;		Unchanged: 0/0
 13826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13827 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13828 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13829 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13830 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13831 ;;Total ram usage:        6 bytes
 13832 ;; Hardware stack levels used:    1
 13833 ;; Hardware stack levels required when called:    1
 13834 ;; This function calls:
 13835 ;;		_LCDWrite
 13836 ;;		___wmul
 13837 ;; This function is called by:
 13838 ;;		_LCDWriteString
 13839 ;;		_LCDWriteInt
 13840 ;;		_main
 13841 ;; This function uses a non-reentrant model
 13842 ;;
 13843                           
 13844                           
 13845                           ;psect for function _LCDWriteCharacter
 13846  14D8                     _LCDWriteCharacter:	
 13847                           
 13848                           ;incstack = 0
 13849                           ; Regs used in _LCDWriteCharacter: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13850                           ;LCDWriteCharacter@character stored from wreg
 13851  14D8  00F9               	movwf	LCDWriteCharacter@character
 13852                           
 13853                           ;lcd.c: 142: uint16_t base;
 13854                           ;lcd.c: 143: base = character - 0x20;
 13855  14D9  0879               	movf	LCDWriteCharacter@character,w
 13856  14DA  3EE0               	addlw	224
 13857  14DB  00FA               	movwf	LCDWriteCharacter@base
 13858  14DC  30FF               	movlw	255
 13859  14DD  1803               	skipnc
 13860  14DE  3000               	movlw	0
 13861  14DF  00FB               	movwf	LCDWriteCharacter@base+1
 13862                           
 13863                           ;lcd.c: 144: base *= 3;
 13864  14E0  3003               	movlw	3
 13865  14E1  00F0               	movwf	___wmul@multiplier
 13866  14E2  3000               	movlw	0
 13867  14E3  00F1               	movwf	___wmul@multiplier+1
 13868  14E4  087B               	movf	LCDWriteCharacter@base+1,w
 13869  14E5  00F3               	movwf	___wmul@multiplicand+1
 13870  14E6  087A               	movf	LCDWriteCharacter@base,w
 13871  14E7  00F2               	movwf	___wmul@multiplicand
 13872  14E8  3191  2187  3194   	fcall	___wmul
 13873  14EB  0871               	movf	?___wmul+1,w
 13874  14EC  00FB               	movwf	LCDWriteCharacter@base+1
 13875  14ED  0870               	movf	?___wmul,w
 13876  14EE  00FA               	movwf	LCDWriteCharacter@base
 13877                           
 13878                           ;lcd.c: 145: LCDWrite(1,fonts[base]);
 13879  14EF  087B               	movf	LCDWriteCharacter@base+1,w
 13880  14F0  0085               	movwf	5
 13881  14F1  087A               	movf	LCDWriteCharacter@base,w
 13882  14F2  0084               	movwf	4
 13883  14F3  3000               	movlw	low (_fonts| (0+32768))
 13884  14F4  0784               	addwf	4,f
 13885  14F5  3090               	movlw	high (_fonts| (0+32768))
 13886  14F6  3D85               	addwfc	5,f
 13887  14F7  0800               	movf	0,w	;code access
 13888  14F8  00F6               	movwf	??_LCDWriteCharacter
 13889  14F9  0876               	movf	??_LCDWriteCharacter,w
 13890  14FA  00F0               	movwf	LCDWrite@data
 13891  14FB  3001               	movlw	1
 13892  14FC  3192  221E  3194   	fcall	_LCDWrite
 13893                           
 13894                           ;lcd.c: 146: LCDWrite(1,fonts[base + 1]);
 13895  14FF  087A               	movf	LCDWriteCharacter@base,w
 13896  1500  3E01               	addlw	1
 13897  1501  00F6               	movwf	??_LCDWriteCharacter
 13898  1502  3000               	movlw	0
 13899  1503  3D7B               	addwfc	LCDWriteCharacter@base+1,w
 13900  1504  00F7               	movwf	??_LCDWriteCharacter+1
 13901  1505  3000               	movlw	low (_fonts| (0+32768))
 13902  1506  0776               	addwf	??_LCDWriteCharacter,w
 13903  1507  0084               	movwf	4
 13904  1508  3090               	movlw	high (_fonts| (0+32768))
 13905  1509  3D77               	addwfc	??_LCDWriteCharacter+1,w
 13906  150A  0085               	movwf	5
 13907  150B  0800               	movf	0,w	;code access
 13908  150C  00F8               	movwf	??_LCDWriteCharacter+2
 13909  150D  0878               	movf	??_LCDWriteCharacter+2,w
 13910  150E  00F0               	movwf	LCDWrite@data
 13911  150F  3001               	movlw	1
 13912  1510  3192  221E  3194   	fcall	_LCDWrite
 13913                           
 13914                           ;lcd.c: 147: LCDWrite(1,fonts[base + 2]);
 13915  1513  087A               	movf	LCDWriteCharacter@base,w
 13916  1514  3E02               	addlw	2
 13917  1515  00F6               	movwf	??_LCDWriteCharacter
 13918  1516  3000               	movlw	0
 13919  1517  3D7B               	addwfc	LCDWriteCharacter@base+1,w
 13920  1518  00F7               	movwf	??_LCDWriteCharacter+1
 13921  1519  3000               	movlw	low (_fonts| (0+32768))
 13922  151A  0776               	addwf	??_LCDWriteCharacter,w
 13923  151B  0084               	movwf	4
 13924  151C  3090               	movlw	high (_fonts| (0+32768))
 13925  151D  3D77               	addwfc	??_LCDWriteCharacter+1,w
 13926  151E  0085               	movwf	5
 13927  151F  0800               	movf	0,w	;code access
 13928  1520  00F8               	movwf	??_LCDWriteCharacter+2
 13929  1521  0878               	movf	??_LCDWriteCharacter+2,w
 13930  1522  00F0               	movwf	LCDWrite@data
 13931  1523  3001               	movlw	1
 13932  1524  3192  221E  3194   	fcall	_LCDWrite
 13933                           
 13934                           ;lcd.c: 148: LCDWrite(1, 0x00);
 13935  1527  01F0               	clrf	LCDWrite@data
 13936  1528  3001               	movlw	1
 13937  1529  3192  221E         	fcall	_LCDWrite
 13938  152B  0008               	return
 13939  152C                     __end_of_LCDWriteCharacter:	
 13940                           
 13941                           	psect	text38
 13942  1187                     __ptext38:	
 13943 ;; *************** function ___wmul *****************
 13944 ;; Defined at:
 13945 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\Umul16.c"
 13946 ;; Parameters:    Size  Location     Type
 13947 ;;  multiplier      2    0[COMMON] unsigned int 
 13948 ;;  multiplicand    2    2[COMMON] unsigned int 
 13949 ;; Auto vars:     Size  Location     Type
 13950 ;;  product         2    4[COMMON] unsigned int 
 13951 ;; Return value:  Size  Location     Type
 13952 ;;                  2    0[COMMON] unsigned int 
 13953 ;; Registers used:
 13954 ;;		wreg, status,2, status,0
 13955 ;; Tracked objects:
 13956 ;;		On entry : 0/0
 13957 ;;		On exit  : 0/0
 13958 ;;		Unchanged: 0/0
 13959 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13960 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13961 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13962 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13963 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13964 ;;Total ram usage:        6 bytes
 13965 ;; Hardware stack levels used:    1
 13966 ;; This function calls:
 13967 ;;		Nothing
 13968 ;; This function is called by:
 13969 ;;		_readIAnalog
 13970 ;;		_readVAnalog
 13971 ;;		_LCDWriteCharacter
 13972 ;;		_eval_poly
 13973 ;; This function uses a non-reentrant model
 13974 ;;
 13975                           
 13976                           
 13977                           ;psect for function ___wmul
 13978  1187                     ___wmul:	
 13979                           
 13980                           ;incstack = 0
 13981                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 13982  1187  01F4               	clrf	___wmul@product
 13983  1188  01F5               	clrf	___wmul@product+1
 13984  1189                     l2369:	
 13985  1189  1C70               	btfss	___wmul@multiplier,0
 13986  118A  298F               	goto	l625
 13987  118B  0872               	movf	___wmul@multiplicand,w
 13988  118C  07F4               	addwf	___wmul@product,f
 13989  118D  0873               	movf	___wmul@multiplicand+1,w
 13990  118E  3DF5               	addwfc	___wmul@product+1,f
 13991  118F                     l625:	
 13992  118F  3001               	movlw	1
 13993  1190                     u2335:	
 13994  1190  35F2               	lslf	___wmul@multiplicand,f
 13995  1191  0DF3               	rlf	___wmul@multiplicand+1,f
 13996  1192  0B89               	decfsz	9,f
 13997  1193  2990               	goto	u2335
 13998  1194  3001               	movlw	1
 13999  1195                     u2345:	
 14000  1195  36F1               	lsrf	___wmul@multiplier+1,f
 14001  1196  0CF0               	rrf	___wmul@multiplier,f
 14002  1197  0B89               	decfsz	9,f
 14003  1198  2995               	goto	u2345
 14004  1199  0870               	movf	___wmul@multiplier,w
 14005  119A  0471               	iorwf	___wmul@multiplier+1,w
 14006  119B  1D03               	btfss	3,2
 14007  119C  2989               	goto	l2369
 14008  119D  0875               	movf	___wmul@product+1,w
 14009  119E  00F1               	movwf	?___wmul+1
 14010  119F  0874               	movf	___wmul@product,w
 14011  11A0  00F0               	movwf	?___wmul
 14012  11A1  0008               	return
 14013  11A2                     __end_of___wmul:	
 14014                           
 14015                           	psect	text39
 14016  121E                     __ptext39:	
 14017 ;; *************** function _LCDWrite *****************
 14018 ;; Defined at:
 14019 ;;		line 281 in file "lcd.c"
 14020 ;; Parameters:    Size  Location     Type
 14021 ;;  data_or_comm    1    wreg     unsigned char 
 14022 ;;  data            1    0[COMMON] unsigned char 
 14023 ;; Auto vars:     Size  Location     Type
 14024 ;;  data_or_comm    1    2[COMMON] unsigned char 
 14025 ;;  i               1    4[COMMON] unsigned char 
 14026 ;;  d               1    3[COMMON] unsigned char 
 14027 ;; Return value:  Size  Location     Type
 14028 ;;                  1    wreg      void 
 14029 ;; Registers used:
 14030 ;;		wreg, status,2, status,0
 14031 ;; Tracked objects:
 14032 ;;		On entry : 0/0
 14033 ;;		On exit  : 0/0
 14034 ;;		Unchanged: 0/0
 14035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14036 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14037 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14038 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14039 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14040 ;;Total ram usage:        5 bytes
 14041 ;; Hardware stack levels used:    1
 14042 ;; This function calls:
 14043 ;;		Nothing
 14044 ;; This function is called by:
 14045 ;;		_gotoXY
 14046 ;;		_LCDWriteCharacter
 14047 ;;		_LCDClear
 14048 ;;		_LCDInit
 14049 ;; This function uses a non-reentrant model
 14050 ;;
 14051                           
 14052                           
 14053                           ;psect for function _LCDWrite
 14054  121E                     _LCDWrite:	
 14055                           
 14056                           ;incstack = 0
 14057                           ; Regs used in _LCDWrite: [wreg+status,2+status,0]
 14058                           ;LCDWrite@data_or_command stored from wreg
 14059  121E  00F2               	movwf	LCDWrite@data_or_command
 14060                           
 14061                           ;lcd.c: 283: uint8_t i,d;
 14062                           ;lcd.c: 285: d=data;
 14063  121F  0870               	movf	LCDWrite@data,w
 14064  1220  00F1               	movwf	??_LCDWrite
 14065  1221  0871               	movf	??_LCDWrite,w
 14066  1222  00F3               	movwf	LCDWrite@d
 14067                           
 14068                           ;lcd.c: 287: if(data_or_command == 0)
 14069  1223  0872               	movf	LCDWrite@data_or_command,w
 14070  1224  1D03               	btfss	3,2
 14071  1225  2A29               	goto	l230
 14072                           
 14073                           ;lcd.c: 288: {
 14074                           ;lcd.c: 289: LATAbits.LATA2 = 0;
 14075  1226  0020               	movlb	0	; select bank0
 14076  1227  1116               	bcf	22,2	;volatile
 14077                           
 14078                           ;lcd.c: 290: }
 14079  1228  2A2B               	goto	l231
 14080  1229                     l230:	
 14081                           
 14082                           ;lcd.c: 291: else
 14083                           ;lcd.c: 292: {
 14084                           ;lcd.c: 293: LATAbits.LATA2 = 1;
 14085  1229  0020               	movlb	0	; select bank0
 14086  122A  1516               	bsf	22,2	;volatile
 14087  122B                     l231:	
 14088                           
 14089                           ;lcd.c: 294: }
 14090                           ;lcd.c: 296: LATAbits.LATA1 = 0;
 14091  122B  1096               	bcf	22,1	;volatile
 14092                           
 14093                           ;lcd.c: 298: for(i=0;i<8;i++)
 14094  122C  01F4               	clrf	LCDWrite@i
 14095  122D  3008               	movlw	8
 14096  122E  0274               	subwf	LCDWrite@i,w
 14097  122F  1803               	btfsc	3,0
 14098  1230  2A41               	goto	l233
 14099  1231                     l232:	
 14100                           
 14101                           ;lcd.c: 299: {
 14102                           ;lcd.c: 300: LATAbits.LATA3 = 0;
 14103  1231  1196               	bcf	22,3	;volatile
 14104                           
 14105                           ;lcd.c: 302: if(d&0x80)
 14106  1232  1FF3               	btfss	LCDWrite@d,7
 14107  1233  2A35               	goto	l234
 14108                           
 14109                           ;lcd.c: 303: {
 14110                           ;lcd.c: 304: LATAbits.LATA3 = 1;
 14111  1234  1596               	bsf	22,3	;volatile
 14112  1235                     l234:	
 14113                           
 14114                           ;lcd.c: 305: }
 14115                           ;lcd.c: 307: LATAbits.LATA4 = 1;
 14116  1235  1616               	bsf	22,4	;volatile
 14117                           
 14118                           ;lcd.c: 309: d<<=1;
 14119  1236  1003               	clrc
 14120  1237  0DF3               	rlf	LCDWrite@d,f
 14121                           
 14122                           ;lcd.c: 311: LATAbits.LATA4=0;
 14123  1238  1216               	bcf	22,4	;volatile
 14124  1239  3001               	movlw	1
 14125  123A  00F1               	movwf	??_LCDWrite
 14126  123B  0871               	movf	??_LCDWrite,w
 14127  123C  07F4               	addwf	LCDWrite@i,f
 14128  123D  3008               	movlw	8
 14129  123E  0274               	subwf	LCDWrite@i,w
 14130  123F  1C03               	skipc
 14131  1240  2A31               	goto	l232
 14132  1241                     l233:	
 14133                           
 14134                           ;lcd.c: 312: }
 14135                           ;lcd.c: 314: LATAbits.LATA1 = 1;
 14136  1241  1496               	bsf	22,1	;volatile
 14137  1242  0008               	return
 14138  1243                     __end_of_LCDWrite:	
 14139                           
 14140                           	psect	text40
 14141  00A1                     __ptext40:	
 14142 ;; *************** function _Battery_State_Machine *****************
 14143 ;; Defined at:
 14144 ;;		line 28 in file "battery_charger.c"
 14145 ;; Parameters:    Size  Location     Type
 14146 ;;  z               1    wreg     unsigned char 
 14147 ;; Auto vars:     Size  Location     Type
 14148 ;;  z               1   35[BANK0 ] unsigned char 
 14149 ;; Return value:  Size  Location     Type
 14150 ;;                  1    wreg      void 
 14151 ;; Registers used:
 14152 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14153 ;; Tracked objects:
 14154 ;;		On entry : 0/0
 14155 ;;		On exit  : 0/0
 14156 ;;		Unchanged: 0/0
 14157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14158 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14159 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14160 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14161 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14162 ;;Total ram usage:        6 bytes
 14163 ;; Hardware stack levels used:    1
 14164 ;; Hardware stack levels required when called:    2
 14165 ;; This function calls:
 14166 ;;		___awtoft
 14167 ;;		___ftmul
 14168 ;;		___fttol
 14169 ;; This function is called by:
 14170 ;;		_main
 14171 ;; This function uses a non-reentrant model
 14172 ;;
 14173                           
 14174                           
 14175                           ;psect for function _Battery_State_Machine
 14176  00A1                     _Battery_State_Machine:	
 14177                           
 14178                           ;incstack = 0
 14179                           ; Regs used in _Battery_State_Machine: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 14180                           ;Battery_State_Machine@z stored from wreg
 14181  00A1  0020               	movlb	0	; select bank0
 14182  00A2  00C3               	movwf	Battery_State_Machine@z
 14183                           
 14184                           ;battery_charger.c: 30: if(batteryState[z]==PRECHARGE)
 14185  00A3  0843               	movf	Battery_State_Machine@z,w
 14186  00A4  3E64               	addlw	(low (_batteryState| 0))& (0+255)
 14187  00A5  0086               	movwf	6
 14188  00A6  0187               	clrf	7
 14189  00A7  3003               	movlw	3
 14190  00A8  0601               	xorwf	1,w
 14191  00A9  1D03               	btfss	3,2
 14192  00AA  28F8               	goto	l3013
 14193                           
 14194                           ;battery_charger.c: 31: {
 14195                           ;battery_charger.c: 32: if(voltage[z]<1075)
 14196  00AB  3543               	lslf	Battery_State_Machine@z,w
 14197  00AC  3EA8               	addlw	(low (_voltage| 0))& (0+255)
 14198  00AD  0086               	movwf	6
 14199  00AE  0187               	clrf	7
 14200  00AF  3F40               	moviw [0]fsr1
 14201  00B0  00BE               	movwf	??_Battery_State_Machine
 14202  00B1  3F41               	moviw [1]fsr1
 14203  00B2  00BF               	movwf	??_Battery_State_Machine+1
 14204  00B3  083F               	movf	??_Battery_State_Machine+1,w
 14205  00B4  3A80               	xorlw	128
 14206  00B5  00C0               	movwf	??_Battery_State_Machine+2
 14207  00B6  3084               	movlw	132
 14208  00B7  0240               	subwf	??_Battery_State_Machine+2,w
 14209  00B8  1D03               	skipz
 14210  00B9  28BC               	goto	u3455
 14211  00BA  3033               	movlw	51
 14212  00BB  023E               	subwf	??_Battery_State_Machine,w
 14213  00BC                     u3455:	
 14214  00BC  1803               	skipnc
 14215  00BD  28E6               	goto	l3011
 14216                           
 14217                           ;battery_charger.c: 33: {
 14218                           ;battery_charger.c: 34: if(stateCounter[z]>0)
 14219  00BE  0020               	movlb	0	; select bank0
 14220  00BF  3543               	lslf	Battery_State_Machine@z,w
 14221  00C0  3EBD               	addlw	(low (_stateCounter| 0))& (0+255)
 14222  00C1  0086               	movwf	6
 14223  00C2  0187               	clrf	7
 14224  00C3  3F40               	moviw [0]fsr1
 14225  00C4  00BE               	movwf	??_Battery_State_Machine
 14226  00C5  3F41               	moviw [1]fsr1
 14227  00C6  00BF               	movwf	??_Battery_State_Machine+1
 14228  00C7  083F               	movf	??_Battery_State_Machine+1,w
 14229  00C8  3A80               	xorlw	128
 14230  00C9  00C0               	movwf	??_Battery_State_Machine+2
 14231  00CA  3080               	movlw	128
 14232  00CB  0240               	subwf	??_Battery_State_Machine+2,w
 14233  00CC  1D03               	skipz
 14234  00CD  28D0               	goto	u3465
 14235  00CE  3001               	movlw	1
 14236  00CF  023E               	subwf	??_Battery_State_Machine,w
 14237  00D0                     u3465:	
 14238  00D0  1C03               	skipc
 14239  00D1  28DE               	goto	l3009
 14240                           
 14241                           ;battery_charger.c: 35: {
 14242                           ;battery_charger.c: 36: stateCounter[z]-=1;
 14243  00D2  0020               	movlb	0	; select bank0
 14244  00D3  3543               	lslf	Battery_State_Machine@z,w
 14245  00D4  3EBD               	addlw	(low (_stateCounter| 0))& (0+255)
 14246  00D5  0086               	movwf	6
 14247  00D6  0187               	clrf	7
 14248  00D7  30FF               	movlw	255
 14249  00D8  0781               	addwf	1,f
 14250  00D9  3141               	addfsr 1,1
 14251  00DA  30FF               	movlw	255
 14252  00DB  3D81               	addwfc	1,f
 14253  00DC  317F               	addfsr 1,-1
 14254                           
 14255                           ;battery_charger.c: 37: }
 14256  00DD  0008               	return
 14257  00DE                     l3009:	
 14258                           
 14259                           ;battery_charger.c: 38: else
 14260                           ;battery_charger.c: 39: {
 14261                           ;battery_charger.c: 40: batteryState[z]=FAULT;
 14262  00DE  0020               	movlb	0	; select bank0
 14263  00DF  0843               	movf	Battery_State_Machine@z,w
 14264  00E0  3E64               	addlw	(low (_batteryState| 0))& (0+255)
 14265  00E1  0086               	movwf	6
 14266  00E2  0187               	clrf	7
 14267  00E3  0181               	clrf	1
 14268  00E4  0A81               	incf	1,f
 14269                           
 14270                           ;battery_charger.c: 41: }
 14271                           ;battery_charger.c: 42: }
 14272  00E5  0008               	return
 14273  00E6                     l3011:	
 14274                           
 14275                           ;battery_charger.c: 43: else
 14276                           ;battery_charger.c: 44: {
 14277                           ;battery_charger.c: 45: batteryState[z]=CHARGE;
 14278  00E6  3004               	movlw	4
 14279  00E7  0020               	movlb	0	; select bank0
 14280  00E8  00BE               	movwf	??_Battery_State_Machine
 14281  00E9  0843               	movf	Battery_State_Machine@z,w
 14282  00EA  3E64               	addlw	(low (_batteryState| 0))& (0+255)
 14283  00EB  0086               	movwf	6
 14284  00EC  0187               	clrf	7
 14285  00ED  083E               	movf	??_Battery_State_Machine,w
 14286  00EE  0081               	movwf	1
 14287                           
 14288                           ;battery_charger.c: 46: Iref[z]=35;
 14289  00EF  3543               	lslf	Battery_State_Machine@z,w
 14290  00F0  3EC1               	addlw	(low (_Iref| 0))& (0+255)
 14291  00F1  0086               	movwf	6
 14292  00F2  0187               	clrf	7
 14293  00F3  3023               	movlw	35
 14294  00F4  3FC0               	movwi [0]fsr1
 14295  00F5  3000               	movlw	0
 14296  00F6  3FC1               	movwi [1]fsr1
 14297                           
 14298                           ;battery_charger.c: 47: }
 14299                           ;battery_charger.c: 48: }
 14300  00F7  0008               	return
 14301  00F8                     l3013:	
 14302                           
 14303                           ;battery_charger.c: 49: else if(batteryState[z]==CHARGE)
 14304  00F8  0843               	movf	Battery_State_Machine@z,w
 14305  00F9  3E64               	addlw	(low (_batteryState| 0))& (0+255)
 14306  00FA  0086               	movwf	6
 14307  00FB  0187               	clrf	7
 14308  00FC  3004               	movlw	4
 14309  00FD  0601               	xorwf	1,w
 14310  00FE  1D03               	btfss	3,2
 14311  00FF  29BA               	goto	l3033
 14312                           
 14313                           ;battery_charger.c: 50: {
 14314                           ;battery_charger.c: 51: Vref[z]=1425+(int16_t)((250-batteryTemp)*.24);
 14315  0100  096D               	comf	_batteryTemp,w
 14316  0101  00BE               	movwf	??_Battery_State_Machine
 14317  0102  096E               	comf	_batteryTemp+1,w
 14318  0103  00BF               	movwf	??_Battery_State_Machine+1
 14319  0104  0ABE               	incf	??_Battery_State_Machine,f
 14320  0105  1903               	skipnz
 14321  0106  0ABF               	incf	??_Battery_State_Machine+1,f
 14322  0107  083E               	movf	??_Battery_State_Machine,w
 14323  0108  3EFA               	addlw	250
 14324  0109  00F8               	movwf	___awtoft@c
 14325  010A  3000               	movlw	0
 14326  010B  3D3F               	addwfc	??_Battery_State_Machine+1,w
 14327  010C  00F9               	movwf	___awtoft@c+1
 14328  010D  3191  21FE  3180   	fcall	___awtoft
 14329  0110  0878               	movf	?___awtoft,w
 14330  0111  0020               	movlb	0	; select bank0
 14331  0112  00A3               	movwf	___ftmul@f2
 14332  0113  0879               	movf	?___awtoft+1,w
 14333  0114  00A4               	movwf	___ftmul@f2+1
 14334  0115  087A               	movf	?___awtoft+2,w
 14335  0116  00A5               	movwf	___ftmul@f2+2
 14336  0117  30C3               	movlw	195
 14337  0118  00A0               	movwf	___ftmul@f1
 14338  0119  3075               	movlw	117
 14339  011A  00A1               	movwf	___ftmul@f1+1
 14340  011B  303E               	movlw	62
 14341  011C  00A2               	movwf	___ftmul@f1+2
 14342  011D  3188  20FB  3180   	fcall	___ftmul
 14343  0120  0020               	movlb	0	; select bank0
 14344  0121  0820               	movf	?___ftmul,w
 14345  0122  00B0               	movwf	___fttol@f1
 14346  0123  0821               	movf	?___ftmul+1,w
 14347  0124  00B1               	movwf	___fttol@f1+1
 14348  0125  0822               	movf	?___ftmul+2,w
 14349  0126  00B2               	movwf	___fttol@f1+2
 14350  0127  3180  201A  3180   	fcall	___fttol
 14351  012A  0020               	movlb	0	; select bank0
 14352  012B  0830               	movf	?___fttol,w
 14353  012C  3E91               	addlw	145
 14354  012D  00C0               	movwf	??_Battery_State_Machine+2
 14355  012E  3005               	movlw	5
 14356  012F  3D31               	addwfc	?___fttol+1,w
 14357  0130  00C1               	movwf	??_Battery_State_Machine+3
 14358  0131  3543               	lslf	Battery_State_Machine@z,w
 14359  0132  3E5A               	addlw	(low (_Vref| 0))& (0+255)
 14360  0133  0086               	movwf	6
 14361  0134  0187               	clrf	7
 14362  0135  0840               	movf	??_Battery_State_Machine+2,w
 14363  0136  3FC0               	movwi [0]fsr1
 14364  0137  0841               	movf	??_Battery_State_Machine+3,w
 14365  0138  3FC1               	movwi [1]fsr1
 14366                           
 14367                           ;battery_charger.c: 52: if(!(Imode[z]))
 14368  0139  0843               	movf	Battery_State_Machine@z,w
 14369  013A  3E62               	addlw	(low (_Imode| 0))& (0+255)
 14370  013B  0086               	movwf	6
 14371  013C  0187               	clrf	7
 14372  013D  0801               	movf	1,w
 14373  013E  1D03               	btfss	3,2
 14374  013F  29A1               	goto	l3029
 14375                           
 14376                           ;battery_charger.c: 53: {
 14377                           ;battery_charger.c: 54: if(current[z] < Imin[z])
 14378  0140  3543               	lslf	Battery_State_Machine@z,w
 14379  0141  3EC9               	addlw	(low (_Imin| 0))& (0+255)
 14380  0142  0086               	movwf	6
 14381  0143  0187               	clrf	7
 14382  0144  3F40               	moviw [0]fsr1
 14383  0145  00BE               	movwf	??_Battery_State_Machine
 14384  0146  3F41               	moviw [1]fsr1
 14385  0147  00BF               	movwf	??_Battery_State_Machine+1
 14386  0148  3543               	lslf	Battery_State_Machine@z,w
 14387  0149  3EB0               	addlw	(low (_current| 0))& (0+255)
 14388  014A  0086               	movwf	6
 14389  014B  0187               	clrf	7
 14390  014C  3F40               	moviw [0]fsr1
 14391  014D  00C0               	movwf	??_Battery_State_Machine+2
 14392  014E  3F41               	moviw [1]fsr1
 14393  014F  00C1               	movwf	??_Battery_State_Machine+3
 14394  0150  0841               	movf	??_Battery_State_Machine+3,w
 14395  0151  3A80               	xorlw	128
 14396  0152  00C2               	movwf	??_Battery_State_Machine+4
 14397  0153  083F               	movf	??_Battery_State_Machine+1,w
 14398  0154  3A80               	xorlw	128
 14399  0155  0242               	subwf	??_Battery_State_Machine+4,w
 14400  0156  1D03               	skipz
 14401  0157  295A               	goto	u3495
 14402  0158  083E               	movf	??_Battery_State_Machine,w
 14403  0159  0240               	subwf	??_Battery_State_Machine+2,w
 14404  015A                     u3495:	
 14405  015A  1803               	skipnc
 14406  015B  2987               	goto	l3025
 14407                           
 14408                           ;battery_charger.c: 55: {
 14409                           ;battery_charger.c: 56: IminCount[z]-=2;
 14410  015C  0020               	movlb	0	; select bank0
 14411  015D  3543               	lslf	Battery_State_Machine@z,w
 14412  015E  3EC5               	addlw	(low (_IminCount| 0))& (0+255)
 14413  015F  0086               	movwf	6
 14414  0160  0187               	clrf	7
 14415  0161  3002               	movlw	2
 14416  0162  0281               	subwf	1,f
 14417  0163  3141               	addfsr 1,1
 14418  0164  3000               	movlw	0
 14419  0165  3B81               	subwfb	1,f
 14420  0166  317F               	addfsr 1,-1
 14421                           
 14422                           ;battery_charger.c: 57: if(IminCount[z]<10)
 14423  0167  3543               	lslf	Battery_State_Machine@z,w
 14424  0168  3EC5               	addlw	(low (_IminCount| 0))& (0+255)
 14425  0169  0086               	movwf	6
 14426  016A  0187               	clrf	7
 14427  016B  3F40               	moviw [0]fsr1
 14428  016C  00BE               	movwf	??_Battery_State_Machine
 14429  016D  3F41               	moviw [1]fsr1
 14430  016E  00BF               	movwf	??_Battery_State_Machine+1
 14431  016F  3000               	movlw	0
 14432  0170  023F               	subwf	??_Battery_State_Machine+1,w
 14433  0171  300A               	movlw	10
 14434  0172  1903               	skipnz
 14435  0173  023E               	subwf	??_Battery_State_Machine,w
 14436  0174  1803               	skipnc
 14437  0175  0008               	return
 14438                           
 14439                           ;battery_charger.c: 58: {
 14440                           ;battery_charger.c: 59: batteryState[z] = FLOAT;
 14441  0176  3005               	movlw	5
 14442  0177  00BE               	movwf	??_Battery_State_Machine
 14443  0178  0843               	movf	Battery_State_Machine@z,w
 14444  0179  3E64               	addlw	(low (_batteryState| 0))& (0+255)
 14445  017A  0086               	movwf	6
 14446  017B  0187               	clrf	7
 14447  017C  083E               	movf	??_Battery_State_Machine,w
 14448  017D  0081               	movwf	1
 14449                           
 14450                           ;battery_charger.c: 60: IminCount[z]=10;
 14451  017E  3543               	lslf	Battery_State_Machine@z,w
 14452  017F  3EC5               	addlw	(low (_IminCount| 0))& (0+255)
 14453  0180  0086               	movwf	6
 14454  0181  0187               	clrf	7
 14455  0182  300A               	movlw	10
 14456  0183  3FC0               	movwi [0]fsr1
 14457  0184  3000               	movlw	0
 14458  0185  3FC1               	movwi [1]fsr1
 14459                           
 14460                           ;battery_charger.c: 61: }
 14461                           ;battery_charger.c: 62: }
 14462  0186  0008               	return
 14463  0187                     l3025:	
 14464                           
 14465                           ;battery_charger.c: 63: else
 14466                           ;battery_charger.c: 64: {
 14467                           ;battery_charger.c: 65: if(IminCount[z]<600)IminCount[z]+=1;
 14468  0187  0020               	movlb	0	; select bank0
 14469  0188  3543               	lslf	Battery_State_Machine@z,w
 14470  0189  3EC5               	addlw	(low (_IminCount| 0))& (0+255)
 14471  018A  0086               	movwf	6
 14472  018B  0187               	clrf	7
 14473  018C  3F40               	moviw [0]fsr1
 14474  018D  00BE               	movwf	??_Battery_State_Machine
 14475  018E  3F41               	moviw [1]fsr1
 14476  018F  00BF               	movwf	??_Battery_State_Machine+1
 14477  0190  3002               	movlw	2
 14478  0191  023F               	subwf	??_Battery_State_Machine+1,w
 14479  0192  3058               	movlw	88
 14480  0193  1903               	skipnz
 14481  0194  023E               	subwf	??_Battery_State_Machine,w
 14482  0195  1803               	skipnc
 14483  0196  0008               	return
 14484  0197  3543               	lslf	Battery_State_Machine@z,w
 14485  0198  3EC5               	addlw	(low (_IminCount| 0))& (0+255)
 14486  0199  0086               	movwf	6
 14487  019A  0187               	clrf	7
 14488  019B  3001               	movlw	1
 14489  019C  0781               	addwf	1,f
 14490  019D  3141               	addfsr 1,1
 14491  019E  1803               	skipnc
 14492  019F  0A81               	incf	1,f
 14493                           
 14494                           ;battery_charger.c: 66: }
 14495                           ;battery_charger.c: 67: }
 14496  01A0  0008               	return
 14497  01A1                     l3029:	
 14498                           
 14499                           ;battery_charger.c: 68: else if(IminCount[z]<600)IminCount[z]+=1;
 14500  01A1  3543               	lslf	Battery_State_Machine@z,w
 14501  01A2  3EC5               	addlw	(low (_IminCount| 0))& (0+255)
 14502  01A3  0086               	movwf	6
 14503  01A4  0187               	clrf	7
 14504  01A5  3F40               	moviw [0]fsr1
 14505  01A6  00BE               	movwf	??_Battery_State_Machine
 14506  01A7  3F41               	moviw [1]fsr1
 14507  01A8  00BF               	movwf	??_Battery_State_Machine+1
 14508  01A9  3002               	movlw	2
 14509  01AA  023F               	subwf	??_Battery_State_Machine+1,w
 14510  01AB  3058               	movlw	88
 14511  01AC  1903               	skipnz
 14512  01AD  023E               	subwf	??_Battery_State_Machine,w
 14513  01AE  1803               	skipnc
 14514  01AF  0008               	return
 14515  01B0  3543               	lslf	Battery_State_Machine@z,w
 14516  01B1  3EC5               	addlw	(low (_IminCount| 0))& (0+255)
 14517  01B2  0086               	movwf	6
 14518  01B3  0187               	clrf	7
 14519  01B4  3001               	movlw	1
 14520  01B5  0781               	addwf	1,f
 14521  01B6  3141               	addfsr 1,1
 14522  01B7  1803               	skipnc
 14523  01B8  0A81               	incf	1,f
 14524                           
 14525                           ;battery_charger.c: 69: }
 14526  01B9  0008               	return
 14527  01BA                     l3033:	
 14528                           
 14529                           ;battery_charger.c: 70: else if(batteryState[z] == FLOAT)
 14530  01BA  0843               	movf	Battery_State_Machine@z,w
 14531  01BB  3E64               	addlw	(low (_batteryState| 0))& (0+255)
 14532  01BC  0086               	movwf	6
 14533  01BD  0187               	clrf	7
 14534  01BE  3005               	movlw	5
 14535  01BF  0601               	xorwf	1,w
 14536  01C0  1D03               	btfss	3,2
 14537  01C1  2A08               	goto	l3041
 14538                           
 14539                           ;battery_charger.c: 71: {
 14540                           ;battery_charger.c: 72: Vref[z]=1350+(int16_t)((250-batteryTemp)*.24);
 14541  01C2  096D               	comf	_batteryTemp,w
 14542  01C3  00BE               	movwf	??_Battery_State_Machine
 14543  01C4  096E               	comf	_batteryTemp+1,w
 14544  01C5  00BF               	movwf	??_Battery_State_Machine+1
 14545  01C6  0ABE               	incf	??_Battery_State_Machine,f
 14546  01C7  1903               	skipnz
 14547  01C8  0ABF               	incf	??_Battery_State_Machine+1,f
 14548  01C9  083E               	movf	??_Battery_State_Machine,w
 14549  01CA  3EFA               	addlw	250
 14550  01CB  00F8               	movwf	___awtoft@c
 14551  01CC  3000               	movlw	0
 14552  01CD  3D3F               	addwfc	??_Battery_State_Machine+1,w
 14553  01CE  00F9               	movwf	___awtoft@c+1
 14554  01CF  3191  21FE  3180   	fcall	___awtoft
 14555  01D2  0878               	movf	?___awtoft,w
 14556  01D3  0020               	movlb	0	; select bank0
 14557  01D4  00A3               	movwf	___ftmul@f2
 14558  01D5  0879               	movf	?___awtoft+1,w
 14559  01D6  00A4               	movwf	___ftmul@f2+1
 14560  01D7  087A               	movf	?___awtoft+2,w
 14561  01D8  00A5               	movwf	___ftmul@f2+2
 14562  01D9  30C3               	movlw	195
 14563  01DA  00A0               	movwf	___ftmul@f1
 14564  01DB  3075               	movlw	117
 14565  01DC  00A1               	movwf	___ftmul@f1+1
 14566  01DD  303E               	movlw	62
 14567  01DE  00A2               	movwf	___ftmul@f1+2
 14568  01DF  3188  20FB  3180   	fcall	___ftmul
 14569  01E2  0020               	movlb	0	; select bank0
 14570  01E3  0820               	movf	?___ftmul,w
 14571  01E4  00B0               	movwf	___fttol@f1
 14572  01E5  0821               	movf	?___ftmul+1,w
 14573  01E6  00B1               	movwf	___fttol@f1+1
 14574  01E7  0822               	movf	?___ftmul+2,w
 14575  01E8  00B2               	movwf	___fttol@f1+2
 14576  01E9  3180  201A         	fcall	___fttol
 14577  01EB  0020               	movlb	0	; select bank0
 14578  01EC  0830               	movf	?___fttol,w
 14579  01ED  3E46               	addlw	70
 14580  01EE  00C0               	movwf	??_Battery_State_Machine+2
 14581  01EF  3005               	movlw	5
 14582  01F0  3D31               	addwfc	?___fttol+1,w
 14583  01F1  00C1               	movwf	??_Battery_State_Machine+3
 14584  01F2  3543               	lslf	Battery_State_Machine@z,w
 14585  01F3  3E5A               	addlw	(low (_Vref| 0))& (0+255)
 14586  01F4  0086               	movwf	6
 14587  01F5  0187               	clrf	7
 14588  01F6  0840               	movf	??_Battery_State_Machine+2,w
 14589  01F7  3FC0               	movwi [0]fsr1
 14590  01F8  0841               	movf	??_Battery_State_Machine+3,w
 14591  01F9  3FC1               	movwi [1]fsr1
 14592                           
 14593                           ;battery_charger.c: 73: Iref[z]=15;
 14594  01FA  3543               	lslf	Battery_State_Machine@z,w
 14595  01FB  3EC1               	addlw	(low (_Iref| 0))& (0+255)
 14596  01FC  0086               	movwf	6
 14597  01FD  0187               	clrf	7
 14598  01FE  300F               	movlw	15
 14599  01FF  3FC0               	movwi [0]fsr1
 14600  0200  3000               	movlw	0
 14601  0201  3FC1               	movwi [1]fsr1
 14602                           
 14603                           ;battery_charger.c: 74: Imode[z]=0;
 14604  0202  0843               	movf	Battery_State_Machine@z,w
 14605  0203  3E62               	addlw	(low (_Imode| 0))& (0+255)
 14606  0204  0086               	movwf	6
 14607  0205  0187               	clrf	7
 14608  0206  0181               	clrf	1
 14609                           
 14610                           ;battery_charger.c: 75: }
 14611  0207  0008               	return
 14612  0208                     l3041:	
 14613                           
 14614                           ;battery_charger.c: 76: else
 14615                           ;battery_charger.c: 77: if(batteryState[z] == FAULT)
 14616  0208  0843               	movf	Battery_State_Machine@z,w
 14617  0209  3E64               	addlw	(low (_batteryState| 0))& (0+255)
 14618  020A  0086               	movwf	6
 14619  020B  0187               	clrf	7
 14620  020C  0301               	decf	1,w
 14621  020D  1D03               	btfss	3,2
 14622  020E  0008               	return
 14623                           
 14624                           ;battery_charger.c: 78: {
 14625                           ;battery_charger.c: 79: batteryState[z]=PRECHARGE;
 14626  020F  3003               	movlw	3
 14627  0210  00BE               	movwf	??_Battery_State_Machine
 14628  0211  0843               	movf	Battery_State_Machine@z,w
 14629  0212  3E64               	addlw	(low (_batteryState| 0))& (0+255)
 14630  0213  0086               	movwf	6
 14631  0214  0187               	clrf	7
 14632  0215  083E               	movf	??_Battery_State_Machine,w
 14633  0216  0081               	movwf	1
 14634  0217  0008               	return
 14635  0218                     __end_of_Battery_State_Machine:	
 14636                           
 14637                           	psect	text41
 14638  001A                     __ptext41:	
 14639 ;; *************** function ___fttol *****************
 14640 ;; Defined at:
 14641 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fttol.c"
 14642 ;; Parameters:    Size  Location     Type
 14643 ;;  f1              3   16[BANK0 ] float 
 14644 ;; Auto vars:     Size  Location     Type
 14645 ;;  lval            4   25[BANK0 ] unsigned long 
 14646 ;;  exp1            1   29[BANK0 ] unsigned char 
 14647 ;;  sign1           1   24[BANK0 ] unsigned char 
 14648 ;; Return value:  Size  Location     Type
 14649 ;;                  4   16[BANK0 ] long 
 14650 ;; Registers used:
 14651 ;;		wreg, status,2, status,0
 14652 ;; Tracked objects:
 14653 ;;		On entry : 0/0
 14654 ;;		On exit  : 0/0
 14655 ;;		Unchanged: 0/0
 14656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14657 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14658 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14659 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14660 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14661 ;;Total ram usage:       14 bytes
 14662 ;; Hardware stack levels used:    1
 14663 ;; This function calls:
 14664 ;;		Nothing
 14665 ;; This function is called by:
 14666 ;;		_tempCalc
 14667 ;;		_main
 14668 ;;		_calculateCurrent0
 14669 ;;		_calculateCurrent1
 14670 ;;		_calculateCurrent2
 14671 ;;		_calculateCurrent3
 14672 ;;		_Init_Battery_State_Machine
 14673 ;;		_Battery_State_Machine
 14674 ;;		_cc_cv_mode
 14675 ;; This function uses a non-reentrant model
 14676 ;;
 14677                           
 14678                           
 14679                           ;psect for function ___fttol
 14680  001A                     ___fttol:	
 14681                           
 14682                           ;incstack = 0
 14683                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 14684  001A  0020               	movlb	0	; select bank0
 14685  001B  0830               	movf	___fttol@f1,w
 14686  001C  00B4               	movwf	??___fttol
 14687  001D  0831               	movf	___fttol@f1+1,w
 14688  001E  00B5               	movwf	??___fttol+1
 14689  001F  0832               	movf	___fttol@f1+2,w
 14690  0020  00B6               	movwf	??___fttol+2
 14691  0021  1003               	clrc
 14692  0022  0D35               	rlf	??___fttol+1,w
 14693  0023  0D36               	rlf	??___fttol+2,w
 14694  0024  00B7               	movwf	??___fttol+3
 14695  0025  0837               	movf	??___fttol+3,w
 14696  0026  00BD               	movwf	___fttol@exp1
 14697  0027  083D               	movf	___fttol@exp1,w
 14698  0028  1D03               	btfss	3,2
 14699  0029  2833               	goto	l2541
 14700  002A  3000               	movlw	0
 14701  002B  00B3               	movwf	?___fttol+3
 14702  002C  3000               	movlw	0
 14703  002D  00B2               	movwf	?___fttol+2
 14704  002E  3000               	movlw	0
 14705  002F  00B1               	movwf	?___fttol+1
 14706  0030  3000               	movlw	0
 14707  0031  00B0               	movwf	?___fttol
 14708  0032  0008               	return
 14709  0033                     l2541:	
 14710  0033  0830               	movf	___fttol@f1,w
 14711  0034  00B4               	movwf	??___fttol
 14712  0035  0831               	movf	___fttol@f1+1,w
 14713  0036  00B5               	movwf	??___fttol+1
 14714  0037  0832               	movf	___fttol@f1+2,w
 14715  0038  00B6               	movwf	??___fttol+2
 14716  0039  3017               	movlw	23
 14717  003A                     u2765:	
 14718  003A  36B6               	lsrf	??___fttol+2,f
 14719  003B  0CB5               	rrf	??___fttol+1,f
 14720  003C  0CB4               	rrf	??___fttol,f
 14721  003D  0B89               	decfsz	9,f
 14722  003E  283A               	goto	u2765
 14723  003F  0834               	movf	??___fttol,w
 14724  0040  00B7               	movwf	??___fttol+3
 14725  0041  0837               	movf	??___fttol+3,w
 14726  0042  00B8               	movwf	___fttol@sign1
 14727  0043  17B1               	bsf	___fttol@f1+1,7
 14728  0044  30FF               	movlw	255
 14729  0045  05B0               	andwf	___fttol@f1,f
 14730  0046  30FF               	movlw	255
 14731  0047  05B1               	andwf	___fttol@f1+1,f
 14732  0048  3000               	movlw	0
 14733  0049  05B2               	andwf	___fttol@f1+2,f
 14734  004A  0830               	movf	___fttol@f1,w
 14735  004B  00B9               	movwf	___fttol@lval
 14736  004C  0831               	movf	___fttol@f1+1,w
 14737  004D  00BA               	movwf	___fttol@lval+1
 14738  004E  0832               	movf	___fttol@f1+2,w
 14739  004F  00BB               	movwf	___fttol@lval+2
 14740  0050  01BC               	clrf	___fttol@lval+3
 14741  0051  308E               	movlw	142
 14742  0052  02BD               	subwf	___fttol@exp1,f
 14743  0053  1FBD               	btfss	___fttol@exp1,7
 14744  0054  2871               	goto	l2561
 14745  0055  083D               	movf	___fttol@exp1,w
 14746  0056  3A80               	xorlw	128
 14747  0057  3E8F               	addlw	143
 14748  0058  1803               	skipnc
 14749  0059  2863               	goto	l2559
 14750  005A  3000               	movlw	0
 14751  005B  00B3               	movwf	?___fttol+3
 14752  005C  3000               	movlw	0
 14753  005D  00B2               	movwf	?___fttol+2
 14754  005E  3000               	movlw	0
 14755  005F  00B1               	movwf	?___fttol+1
 14756  0060  3000               	movlw	0
 14757  0061  00B0               	movwf	?___fttol
 14758  0062  0008               	return
 14759  0063                     l2559:	
 14760  0063  3001               	movlw	1
 14761  0064                     u2795:	
 14762  0064  36BC               	lsrf	___fttol@lval+3,f
 14763  0065  0CBB               	rrf	___fttol@lval+2,f
 14764  0066  0CBA               	rrf	___fttol@lval+1,f
 14765  0067  0CB9               	rrf	___fttol@lval,f
 14766  0068  0B89               	decfsz	9,f
 14767  0069  2864               	goto	u2795
 14768  006A  3001               	movlw	1
 14769  006B  00B4               	movwf	??___fttol
 14770  006C  0834               	movf	??___fttol,w
 14771  006D  07BD               	addwf	___fttol@exp1,f
 14772  006E  1903               	btfsc	3,2
 14773  006F  288A               	goto	l2569
 14774  0070  2863               	goto	l2559
 14775  0071                     l2561:	
 14776  0071  3018               	movlw	24
 14777  0072  023D               	subwf	___fttol@exp1,w
 14778  0073  1C03               	skipc
 14779  0074  2887               	goto	l877
 14780  0075  3000               	movlw	0
 14781  0076  00B3               	movwf	?___fttol+3
 14782  0077  3000               	movlw	0
 14783  0078  00B2               	movwf	?___fttol+2
 14784  0079  3000               	movlw	0
 14785  007A  00B1               	movwf	?___fttol+1
 14786  007B  3000               	movlw	0
 14787  007C  00B0               	movwf	?___fttol
 14788  007D  0008               	return
 14789  007E                     l2567:	
 14790  007E  3001               	movlw	1
 14791  007F                     u2825:	
 14792  007F  35B9               	lslf	___fttol@lval,f
 14793  0080  0DBA               	rlf	___fttol@lval+1,f
 14794  0081  0DBB               	rlf	___fttol@lval+2,f
 14795  0082  0DBC               	rlf	___fttol@lval+3,f
 14796  0083  0B89               	decfsz	9,f
 14797  0084  287F               	goto	u2825
 14798  0085  3001               	movlw	1
 14799  0086  02BD               	subwf	___fttol@exp1,f
 14800  0087                     l877:	
 14801  0087  083D               	movf	___fttol@exp1,w
 14802  0088  1D03               	btfss	3,2
 14803  0089  287E               	goto	l2567
 14804  008A                     l2569:	
 14805  008A  0838               	movf	___fttol@sign1,w
 14806  008B  1903               	btfsc	3,2
 14807  008C  2898               	goto	l2573
 14808  008D  09B9               	comf	___fttol@lval,f
 14809  008E  09BA               	comf	___fttol@lval+1,f
 14810  008F  09BB               	comf	___fttol@lval+2,f
 14811  0090  09BC               	comf	___fttol@lval+3,f
 14812  0091  0AB9               	incf	___fttol@lval,f
 14813  0092  1903               	skipnz
 14814  0093  0ABA               	incf	___fttol@lval+1,f
 14815  0094  1903               	skipnz
 14816  0095  0ABB               	incf	___fttol@lval+2,f
 14817  0096  1903               	skipnz
 14818  0097  0ABC               	incf	___fttol@lval+3,f
 14819  0098                     l2573:	
 14820  0098  083C               	movf	___fttol@lval+3,w
 14821  0099  00B3               	movwf	?___fttol+3
 14822  009A  083B               	movf	___fttol@lval+2,w
 14823  009B  00B2               	movwf	?___fttol+2
 14824  009C  083A               	movf	___fttol@lval+1,w
 14825  009D  00B1               	movwf	?___fttol+1
 14826  009E  0839               	movf	___fttol@lval,w
 14827  009F  00B0               	movwf	?___fttol
 14828  00A0  0008               	return
 14829  00A1                     __end_of___fttol:	
 14830                           
 14831                           	psect	text42
 14832  08FB                     __ptext42:	
 14833 ;; *************** function ___ftmul *****************
 14834 ;; Defined at:
 14835 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\ftmul.c"
 14836 ;; Parameters:    Size  Location     Type
 14837 ;;  f1              3    0[BANK0 ] float 
 14838 ;;  f2              3    3[BANK0 ] float 
 14839 ;; Auto vars:     Size  Location     Type
 14840 ;;  f3_as_produc    3   11[BANK0 ] unsigned um
 14841 ;;  sign            1   15[BANK0 ] unsigned char 
 14842 ;;  cntr            1   14[BANK0 ] unsigned char 
 14843 ;;  exp             1   10[BANK0 ] unsigned char 
 14844 ;; Return value:  Size  Location     Type
 14845 ;;                  3    0[BANK0 ] float 
 14846 ;; Registers used:
 14847 ;;		wreg, status,2, status,0, pclath, cstack
 14848 ;; Tracked objects:
 14849 ;;		On entry : 0/0
 14850 ;;		On exit  : 0/0
 14851 ;;		Unchanged: 0/0
 14852 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14853 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14854 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14855 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14856 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14857 ;;Total ram usage:       16 bytes
 14858 ;; Hardware stack levels used:    1
 14859 ;; Hardware stack levels required when called:    1
 14860 ;; This function calls:
 14861 ;;		___ftpack
 14862 ;; This function is called by:
 14863 ;;		_Init_Battery_State_Machine
 14864 ;;		_Battery_State_Machine
 14865 ;;		_cc_cv_mode
 14866 ;;		_tempCalc
 14867 ;;		_log
 14868 ;;		_eval_poly
 14869 ;; This function uses a non-reentrant model
 14870 ;;
 14871                           
 14872                           
 14873                           ;psect for function ___ftmul
 14874  08FB                     ___ftmul:	
 14875                           
 14876                           ;incstack = 0
 14877                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 14878  08FB  0020               	movlb	0	; select bank0
 14879  08FC  0820               	movf	___ftmul@f1,w
 14880  08FD  00A6               	movwf	??___ftmul
 14881  08FE  0821               	movf	___ftmul@f1+1,w
 14882  08FF  00A7               	movwf	??___ftmul+1
 14883  0900  0822               	movf	___ftmul@f1+2,w
 14884  0901  00A8               	movwf	??___ftmul+2
 14885  0902  1003               	clrc
 14886  0903  0D27               	rlf	??___ftmul+1,w
 14887  0904  0D28               	rlf	??___ftmul+2,w
 14888  0905  00A9               	movwf	??___ftmul+3
 14889  0906  0829               	movf	??___ftmul+3,w
 14890  0907  00AA               	movwf	___ftmul@exp
 14891  0908  082A               	movf	___ftmul@exp,w
 14892  0909  1D03               	btfss	3,2
 14893  090A  2912               	goto	l2457
 14894  090B  3000               	movlw	0
 14895  090C  00A0               	movwf	?___ftmul
 14896  090D  3000               	movlw	0
 14897  090E  00A1               	movwf	?___ftmul+1
 14898  090F  3000               	movlw	0
 14899  0910  00A2               	movwf	?___ftmul+2
 14900  0911  0008               	return
 14901  0912                     l2457:	
 14902  0912  0823               	movf	___ftmul@f2,w
 14903  0913  00A6               	movwf	??___ftmul
 14904  0914  0824               	movf	___ftmul@f2+1,w
 14905  0915  00A7               	movwf	??___ftmul+1
 14906  0916  0825               	movf	___ftmul@f2+2,w
 14907  0917  00A8               	movwf	??___ftmul+2
 14908  0918  1003               	clrc
 14909  0919  0D27               	rlf	??___ftmul+1,w
 14910  091A  0D28               	rlf	??___ftmul+2,w
 14911  091B  00A9               	movwf	??___ftmul+3
 14912  091C  0829               	movf	??___ftmul+3,w
 14913  091D  00AF               	movwf	___ftmul@sign
 14914  091E  082F               	movf	___ftmul@sign,w
 14915  091F  1D03               	btfss	3,2
 14916  0920  2928               	goto	l2463
 14917  0921  3000               	movlw	0
 14918  0922  00A0               	movwf	?___ftmul
 14919  0923  3000               	movlw	0
 14920  0924  00A1               	movwf	?___ftmul+1
 14921  0925  3000               	movlw	0
 14922  0926  00A2               	movwf	?___ftmul+2
 14923  0927  0008               	return
 14924  0928                     l2463:	
 14925  0928  082F               	movf	___ftmul@sign,w
 14926  0929  3E7B               	addlw	123
 14927  092A  00A6               	movwf	??___ftmul
 14928  092B  0826               	movf	??___ftmul,w
 14929  092C  07AA               	addwf	___ftmul@exp,f
 14930  092D  0820               	movf	___ftmul@f1,w
 14931  092E  00A6               	movwf	??___ftmul
 14932  092F  0821               	movf	___ftmul@f1+1,w
 14933  0930  00A7               	movwf	??___ftmul+1
 14934  0931  0822               	movf	___ftmul@f1+2,w
 14935  0932  00A8               	movwf	??___ftmul+2
 14936  0933  3010               	movlw	16
 14937  0934                     u2615:	
 14938  0934  36A8               	lsrf	??___ftmul+2,f
 14939  0935  0CA7               	rrf	??___ftmul+1,f
 14940  0936  0CA6               	rrf	??___ftmul,f
 14941  0937  0B89               	decfsz	9,f
 14942  0938  2934               	goto	u2615
 14943  0939  0826               	movf	??___ftmul,w
 14944  093A  00A9               	movwf	??___ftmul+3
 14945  093B  0829               	movf	??___ftmul+3,w
 14946  093C  00AF               	movwf	___ftmul@sign
 14947  093D  0823               	movf	___ftmul@f2,w
 14948  093E  00A6               	movwf	??___ftmul
 14949  093F  0824               	movf	___ftmul@f2+1,w
 14950  0940  00A7               	movwf	??___ftmul+1
 14951  0941  0825               	movf	___ftmul@f2+2,w
 14952  0942  00A8               	movwf	??___ftmul+2
 14953  0943  3010               	movlw	16
 14954  0944                     u2625:	
 14955  0944  36A8               	lsrf	??___ftmul+2,f
 14956  0945  0CA7               	rrf	??___ftmul+1,f
 14957  0946  0CA6               	rrf	??___ftmul,f
 14958  0947  0B89               	decfsz	9,f
 14959  0948  2944               	goto	u2625
 14960  0949  0826               	movf	??___ftmul,w
 14961  094A  00A9               	movwf	??___ftmul+3
 14962  094B  0829               	movf	??___ftmul+3,w
 14963  094C  06AF               	xorwf	___ftmul@sign,f
 14964  094D  3080               	movlw	128
 14965  094E  00A6               	movwf	??___ftmul
 14966  094F  0826               	movf	??___ftmul,w
 14967  0950  05AF               	andwf	___ftmul@sign,f
 14968  0951  17A1               	bsf	___ftmul@f1+1,7
 14969  0952  17A4               	bsf	___ftmul@f2+1,7
 14970  0953  30FF               	movlw	255
 14971  0954  05A3               	andwf	___ftmul@f2,f
 14972  0955  30FF               	movlw	255
 14973  0956  05A4               	andwf	___ftmul@f2+1,f
 14974  0957  3000               	movlw	0
 14975  0958  05A5               	andwf	___ftmul@f2+2,f
 14976  0959  3000               	movlw	0
 14977  095A  00AB               	movwf	___ftmul@f3_as_product
 14978  095B  3000               	movlw	0
 14979  095C  00AC               	movwf	___ftmul@f3_as_product+1
 14980  095D  3000               	movlw	0
 14981  095E  00AD               	movwf	___ftmul@f3_as_product+2
 14982  095F  3007               	movlw	7
 14983  0960  00A6               	movwf	??___ftmul
 14984  0961  0826               	movf	??___ftmul,w
 14985  0962  00AE               	movwf	___ftmul@cntr
 14986  0963                     l2475:	
 14987  0963  1C20               	btfss	___ftmul@f1,0
 14988  0964  296B               	goto	l2479
 14989  0965  0823               	movf	___ftmul@f2,w
 14990  0966  07AB               	addwf	___ftmul@f3_as_product,f
 14991  0967  0824               	movf	___ftmul@f2+1,w
 14992  0968  3DAC               	addwfc	___ftmul@f3_as_product+1,f
 14993  0969  0825               	movf	___ftmul@f2+2,w
 14994  096A  3DAD               	addwfc	___ftmul@f3_as_product+2,f
 14995  096B                     l2479:	
 14996  096B  3001               	movlw	1
 14997  096C                     u2645:	
 14998  096C  36A2               	lsrf	___ftmul@f1+2,f
 14999  096D  0CA1               	rrf	___ftmul@f1+1,f
 15000  096E  0CA0               	rrf	___ftmul@f1,f
 15001  096F  0B89               	decfsz	9,f
 15002  0970  296C               	goto	u2645
 15003  0971  3001               	movlw	1
 15004  0972                     u2655:	
 15005  0972  35A3               	lslf	___ftmul@f2,f
 15006  0973  0DA4               	rlf	___ftmul@f2+1,f
 15007  0974  0DA5               	rlf	___ftmul@f2+2,f
 15008  0975  0B89               	decfsz	9,f
 15009  0976  2972               	goto	u2655
 15010  0977  3001               	movlw	1
 15011  0978  02AE               	subwf	___ftmul@cntr,f
 15012  0979  1D03               	btfss	3,2
 15013  097A  2963               	goto	l2475
 15014  097B  3009               	movlw	9
 15015  097C  00A6               	movwf	??___ftmul
 15016  097D  0826               	movf	??___ftmul,w
 15017  097E  00AE               	movwf	___ftmul@cntr
 15018  097F                     l2487:	
 15019  097F  1C20               	btfss	___ftmul@f1,0
 15020  0980  2987               	goto	l2491
 15021  0981  0823               	movf	___ftmul@f2,w
 15022  0982  07AB               	addwf	___ftmul@f3_as_product,f
 15023  0983  0824               	movf	___ftmul@f2+1,w
 15024  0984  3DAC               	addwfc	___ftmul@f3_as_product+1,f
 15025  0985  0825               	movf	___ftmul@f2+2,w
 15026  0986  3DAD               	addwfc	___ftmul@f3_as_product+2,f
 15027  0987                     l2491:	
 15028  0987  3001               	movlw	1
 15029  0988                     u2685:	
 15030  0988  36A2               	lsrf	___ftmul@f1+2,f
 15031  0989  0CA1               	rrf	___ftmul@f1+1,f
 15032  098A  0CA0               	rrf	___ftmul@f1,f
 15033  098B  0B89               	decfsz	9,f
 15034  098C  2988               	goto	u2685
 15035  098D  3001               	movlw	1
 15036  098E                     u2695:	
 15037  098E  36AD               	lsrf	___ftmul@f3_as_product+2,f
 15038  098F  0CAC               	rrf	___ftmul@f3_as_product+1,f
 15039  0990  0CAB               	rrf	___ftmul@f3_as_product,f
 15040  0991  0B89               	decfsz	9,f
 15041  0992  298E               	goto	u2695
 15042  0993  3001               	movlw	1
 15043  0994  02AE               	subwf	___ftmul@cntr,f
 15044  0995  1D03               	btfss	3,2
 15045  0996  297F               	goto	l2487
 15046  0997  082B               	movf	___ftmul@f3_as_product,w
 15047  0998  00F0               	movwf	___ftpack@arg
 15048  0999  082C               	movf	___ftmul@f3_as_product+1,w
 15049  099A  00F1               	movwf	___ftpack@arg+1
 15050  099B  082D               	movf	___ftmul@f3_as_product+2,w
 15051  099C  00F2               	movwf	___ftpack@arg+2
 15052  099D  082A               	movf	___ftmul@exp,w
 15053  099E  00A6               	movwf	??___ftmul
 15054  099F  0826               	movf	??___ftmul,w
 15055  09A0  00F3               	movwf	___ftpack@exp
 15056  09A1  082F               	movf	___ftmul@sign,w
 15057  09A2  00A7               	movwf	??___ftmul+1
 15058  09A3  0827               	movf	??___ftmul+1,w
 15059  09A4  00F4               	movwf	___ftpack@sign
 15060  09A5  3195  25EF         	fcall	___ftpack
 15061  09A7  0870               	movf	?___ftpack,w
 15062  09A8  0020               	movlb	0	; select bank0
 15063  09A9  00A0               	movwf	?___ftmul
 15064  09AA  0871               	movf	?___ftpack+1,w
 15065  09AB  00A1               	movwf	?___ftmul+1
 15066  09AC  0872               	movf	?___ftpack+2,w
 15067  09AD  00A2               	movwf	?___ftmul+2
 15068  09AE  0008               	return
 15069  09AF                     __end_of___ftmul:	
 15070                           
 15071                           	psect	text43
 15072  11FE                     __ptext43:	
 15073 ;; *************** function ___awtoft *****************
 15074 ;; Defined at:
 15075 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\awtoft.c"
 15076 ;; Parameters:    Size  Location     Type
 15077 ;;  c               2    8[COMMON] int 
 15078 ;; Auto vars:     Size  Location     Type
 15079 ;;  sign            1   13[COMMON] unsigned char 
 15080 ;; Return value:  Size  Location     Type
 15081 ;;                  3    8[COMMON] float 
 15082 ;; Registers used:
 15083 ;;		wreg, status,2, status,0, pclath, cstack
 15084 ;; Tracked objects:
 15085 ;;		On entry : 0/0
 15086 ;;		On exit  : 0/0
 15087 ;;		Unchanged: 0/0
 15088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15089 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15090 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15091 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15092 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15093 ;;Total ram usage:        6 bytes
 15094 ;; Hardware stack levels used:    1
 15095 ;; Hardware stack levels required when called:    1
 15096 ;; This function calls:
 15097 ;;		___ftpack
 15098 ;; This function is called by:
 15099 ;;		_Init_Battery_State_Machine
 15100 ;;		_Battery_State_Machine
 15101 ;;		_cc_cv_mode
 15102 ;;		_tempCalc
 15103 ;;		_main
 15104 ;;		_calculateCurrent0
 15105 ;;		_calculateCurrent1
 15106 ;;		_calculateCurrent2
 15107 ;;		_calculateCurrent3
 15108 ;;		_log
 15109 ;; This function uses a non-reentrant model
 15110 ;;
 15111                           
 15112                           
 15113                           ;psect for function ___awtoft
 15114  11FE                     ___awtoft:	
 15115                           
 15116                           ;incstack = 0
 15117                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 15118  11FE  01FD               	clrf	___awtoft@sign
 15119  11FF  1FF9               	btfss	___awtoft@c+1,7
 15120  1200  2A08               	goto	l2511
 15121  1201  09F8               	comf	___awtoft@c,f
 15122  1202  09F9               	comf	___awtoft@c+1,f
 15123  1203  0AF8               	incf	___awtoft@c,f
 15124  1204  1903               	skipnz
 15125  1205  0AF9               	incf	___awtoft@c+1,f
 15126  1206  01FD               	clrf	___awtoft@sign
 15127  1207  0AFD               	incf	___awtoft@sign,f
 15128  1208                     l2511:	
 15129  1208  0878               	movf	___awtoft@c,w
 15130  1209  00F0               	movwf	___ftpack@arg
 15131  120A  0879               	movf	___awtoft@c+1,w
 15132  120B  00F1               	movwf	___ftpack@arg+1
 15133  120C  01F2               	clrf	___ftpack@arg+2
 15134  120D  308E               	movlw	142
 15135  120E  00FB               	movwf	??___awtoft
 15136  120F  087B               	movf	??___awtoft,w
 15137  1210  00F3               	movwf	___ftpack@exp
 15138  1211  087D               	movf	___awtoft@sign,w
 15139  1212  00FC               	movwf	??___awtoft+1
 15140  1213  087C               	movf	??___awtoft+1,w
 15141  1214  00F4               	movwf	___ftpack@sign
 15142  1215  3195  25EF         	fcall	___ftpack
 15143  1217  0870               	movf	?___ftpack,w
 15144  1218  00F8               	movwf	?___awtoft
 15145  1219  0871               	movf	?___ftpack+1,w
 15146  121A  00F9               	movwf	?___awtoft+1
 15147  121B  0872               	movf	?___ftpack+2,w
 15148  121C  00FA               	movwf	?___awtoft+2
 15149  121D  0008               	return
 15150  121E                     __end_of___awtoft:	
 15151                           
 15152                           	psect	text44
 15153  15EF                     __ptext44:	
 15154 ;; *************** function ___ftpack *****************
 15155 ;; Defined at:
 15156 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\float.c"
 15157 ;; Parameters:    Size  Location     Type
 15158 ;;  arg             3    0[COMMON] unsigned um
 15159 ;;  exp             1    3[COMMON] unsigned char 
 15160 ;;  sign            1    4[COMMON] unsigned char 
 15161 ;; Auto vars:     Size  Location     Type
 15162 ;;		None
 15163 ;; Return value:  Size  Location     Type
 15164 ;;                  3    0[COMMON] float 
 15165 ;; Registers used:
 15166 ;;		wreg, status,2, status,0
 15167 ;; Tracked objects:
 15168 ;;		On entry : 0/0
 15169 ;;		On exit  : 0/0
 15170 ;;		Unchanged: 0/0
 15171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15172 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15173 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15174 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15175 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15176 ;;Total ram usage:        8 bytes
 15177 ;; Hardware stack levels used:    1
 15178 ;; This function calls:
 15179 ;;		Nothing
 15180 ;; This function is called by:
 15181 ;;		___awtoft
 15182 ;;		___ftadd
 15183 ;;		___ftdiv
 15184 ;;		___ftmul
 15185 ;; This function uses a non-reentrant model
 15186 ;;
 15187                           
 15188                           
 15189                           ;psect for function ___ftpack
 15190  15EF                     ___ftpack:	
 15191                           
 15192                           ;incstack = 0
 15193                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 15194  15EF  0873               	movf	___ftpack@exp,w
 15195  15F0  1903               	btfsc	3,2
 15196  15F1  2DF7               	goto	l2317
 15197  15F2  0872               	movf	___ftpack@arg+2,w
 15198  15F3  0471               	iorwf	___ftpack@arg+1,w
 15199  15F4  0470               	iorwf	___ftpack@arg,w
 15200  15F5  1D03               	skipz
 15201  15F6  2E08               	goto	l2323
 15202  15F7                     l2317:	
 15203  15F7  3000               	movlw	0
 15204  15F8  00F0               	movwf	?___ftpack
 15205  15F9  3000               	movlw	0
 15206  15FA  00F1               	movwf	?___ftpack+1
 15207  15FB  3000               	movlw	0
 15208  15FC  00F2               	movwf	?___ftpack+2
 15209  15FD  0008               	return
 15210  15FE                     l2321:	
 15211  15FE  3001               	movlw	1
 15212  15FF  00F5               	movwf	??___ftpack
 15213  1600  0875               	movf	??___ftpack,w
 15214  1601  07F3               	addwf	___ftpack@exp,f
 15215  1602  3001               	movlw	1
 15216  1603                     u2185:	
 15217  1603  36F2               	lsrf	___ftpack@arg+2,f
 15218  1604  0CF1               	rrf	___ftpack@arg+1,f
 15219  1605  0CF0               	rrf	___ftpack@arg,f
 15220  1606  0B89               	decfsz	9,f
 15221  1607  2E03               	goto	u2185
 15222  1608                     l2323:	
 15223  1608  30FE               	movlw	254
 15224  1609  0572               	andwf	___ftpack@arg+2,w
 15225  160A  1903               	btfsc	3,2
 15226  160B  2E21               	goto	l786
 15227  160C  2DFE               	goto	l2321
 15228  160D                     l2325:	
 15229  160D  3001               	movlw	1
 15230  160E  00F5               	movwf	??___ftpack
 15231  160F  0875               	movf	??___ftpack,w
 15232  1610  07F3               	addwf	___ftpack@exp,f
 15233  1611  3001               	movlw	1
 15234  1612  07F0               	addwf	___ftpack@arg,f
 15235  1613  3000               	movlw	0
 15236  1614  1803               	skipnc
 15237  1615  3001               	movlw	1
 15238  1616  07F1               	addwf	___ftpack@arg+1,f
 15239  1617  3000               	movlw	0
 15240  1618  1803               	skipnc
 15241  1619  3001               	movlw	1
 15242  161A  07F2               	addwf	___ftpack@arg+2,f
 15243  161B  3001               	movlw	1
 15244  161C                     u2205:	
 15245  161C  36F2               	lsrf	___ftpack@arg+2,f
 15246  161D  0CF1               	rrf	___ftpack@arg+1,f
 15247  161E  0CF0               	rrf	___ftpack@arg,f
 15248  161F  0B89               	decfsz	9,f
 15249  1620  2E1C               	goto	u2205
 15250  1621                     l786:	
 15251  1621  30FF               	movlw	255
 15252  1622  0572               	andwf	___ftpack@arg+2,w
 15253  1623  1903               	btfsc	3,2
 15254  1624  2E2E               	goto	l2333
 15255  1625  2E0D               	goto	l2325
 15256  1626                     l2331:	
 15257  1626  3001               	movlw	1
 15258  1627  02F3               	subwf	___ftpack@exp,f
 15259  1628  3001               	movlw	1
 15260  1629                     u2225:	
 15261  1629  35F0               	lslf	___ftpack@arg,f
 15262  162A  0DF1               	rlf	___ftpack@arg+1,f
 15263  162B  0DF2               	rlf	___ftpack@arg+2,f
 15264  162C  0B89               	decfsz	9,f
 15265  162D  2E29               	goto	u2225
 15266  162E                     l2333:	
 15267  162E  1BF1               	btfsc	___ftpack@arg+1,7
 15268  162F  2E34               	goto	l793
 15269  1630  3002               	movlw	2
 15270  1631  0273               	subwf	___ftpack@exp,w
 15271  1632  1803               	skipnc
 15272  1633  2E26               	goto	l2331
 15273  1634                     l793:	
 15274  1634  1873               	btfsc	___ftpack@exp,0
 15275  1635  2E3C               	goto	l794
 15276  1636  30FF               	movlw	255
 15277  1637  05F0               	andwf	___ftpack@arg,f
 15278  1638  307F               	movlw	127
 15279  1639  05F1               	andwf	___ftpack@arg+1,f
 15280  163A  30FF               	movlw	255
 15281  163B  05F2               	andwf	___ftpack@arg+2,f
 15282  163C                     l794:	
 15283  163C  1003               	clrc
 15284  163D  0CF3               	rrf	___ftpack@exp,f
 15285  163E  0873               	movf	___ftpack@exp,w
 15286  163F  00F5               	movwf	??___ftpack
 15287  1640  01F6               	clrf	??___ftpack+1
 15288  1641  01F7               	clrf	??___ftpack+2
 15289  1642  3010               	movlw	16
 15290  1643                     u2265:	
 15291  1643  35F5               	lslf	??___ftpack,f
 15292  1644  0DF6               	rlf	??___ftpack+1,f
 15293  1645  0DF7               	rlf	??___ftpack+2,f
 15294  1646  0B89               	decfsz	9,f
 15295  1647  2E43               	goto	u2265
 15296  1648  0875               	movf	??___ftpack,w
 15297  1649  04F0               	iorwf	___ftpack@arg,f
 15298  164A  0876               	movf	??___ftpack+1,w
 15299  164B  04F1               	iorwf	___ftpack@arg+1,f
 15300  164C  0877               	movf	??___ftpack+2,w
 15301  164D  04F2               	iorwf	___ftpack@arg+2,f
 15302  164E  0874               	movf	___ftpack@sign,w
 15303  164F  1903               	btfsc	3,2
 15304  1650  0008               	return
 15305  1651  17F2               	bsf	___ftpack@arg+2,7
 15306  1652  0008               	return
 15307  1653                     __end_of___ftpack:	
 15308  007E                     btemp	set	126	;btemp
 15309  007E                     wtemp0	set	126


Data Sizes:
    Strings     14
    Constant    330
    Data        18
    BSS         111
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     58      79
    BANK1            80     26      78
    BANK2            80      0      56
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6             8      0       0
    BANK7             0      0       0
    BANK8             0      0       0
    BANK9             0      0       0
    BANK10            0      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(BANK0[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 27
		 -> log@coeff(CODE[27]), 

    LCDWriteString@characters	PTR const unsigned char  size(2) Largest target is 5
		 -> STR_3(CODE[5]), STR_2(CODE[5]), STR_1(CODE[4]), 


Critical Paths under _main in COMMON

    _main->_LCDWriteString
    _main->___awtoft
    _tempCalc->___awtoft
    _log->___awtoft
    ___ftadd->___awtoft
    _readVAnalog->___aldiv
    _readIAnalog->___aldiv
    _readButton->_ADCRead
    _cc_cv_mode->___awtoft
    _calculateCurrent3->___awtoft
    _calculateCurrent2->___awtoft
    _calculateCurrent1->___awtoft
    _calculateCurrent0->___awtoft
    ___ftdiv->___awtoft
    _LCDInit->_LCDWrite
    _LCDClear->_gotoXY
    _gotoXY->_LCDWrite
    _Init_Battery_State_Machine->___awtoft
    _LCDWriteString->_LCDWriteCharacter
    _LCDWriteInt->_LCDWriteCharacter
    _LCDWriteCharacter->___wmul
    _Battery_State_Machine->___awtoft
    ___fttol->___awtoft
    ___ftmul->___awtoft
    ___awtoft->___ftpack

Critical Paths under _main in BANK0

    _main->_tempCalc
    _tempCalc->_log
    _log->_eval_poly
    _eval_poly->___ftadd
    ___ftsub->___ftadd
    ___ftadd->___ftdiv
    ___ftadd->___ftmul
    _readVAnalog->___aldiv
    _readIAnalog->___aldiv
    _cc_cv_mode->___fttol
    _calculateCurrent3->___fttol
    _calculateCurrent2->___fttol
    _calculateCurrent1->___fttol
    _calculateCurrent0->___fttol
    _SYSTEM_Initialize->_Init_Battery_State_Machine
    _Init_Battery_State_Machine->___fttol
    _Battery_State_Machine->___fttol
    ___fttol->___ftdiv
    ___fttol->___ftmul

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                28    28      0  114501
                                             56 BANK0      2     2      0
                                              0 BANK1     26    26      0
                            _ADCRead
              _Battery_State_Machine
                           _LCDClear
                            _LCDInit
                  _LCDWriteCharacter
                        _LCDWriteInt
                     _LCDWriteString
                 _PWM1_LoadDutyValue
                 _PWM6_LoadDutyValue
                 _PWM7_LoadDutyValue
                  _SYSTEM_Initialize
                           ___awtoft
                            ___ftdiv
                            ___fttol
                  _calculateCurrent0
                  _calculateCurrent1
                  _calculateCurrent2
                  _calculateCurrent3
                         _cc_cv_mode
                             _gotoXY
                         _readButton
                        _readIAnalog
                        _readVAnalog
                           _tempCalc
 ---------------------------------------------------------------------------------
 (1) _tempCalc                                            11     9      2   33966
                                             45 BANK0     11     9      2
                            _ADCRead (ARG)
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftsub
                            ___fttol
                                _log
 ---------------------------------------------------------------------------------
 (2) _log                                                  6     3      3   17386
                                             39 BANK0      6     3      3
                           ___awtoft
                            ___ftadd
                             ___ftge
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (3) _frexp                                                6     2      4     330
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           10     3      7    7633
                                             29 BANK0     10     3      7
                            ___ftadd
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     322
                                              0 COMMON     9     3      6
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    3356
                                             29 BANK0      6     0      6
                            ___ftadd
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             13     7      6    3183
                                             16 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             ___wmul (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (1) _readVAnalog                                         24    22      2    1922
                                              9 COMMON     4     4      0
                                              6 BANK0     20    18      2
                            _ADCRead
                            ___aldiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _readIAnalog                                         24    22      2    1922
                                              9 COMMON     4     4      0
                                              6 BANK0     20    18      2
                            _ADCRead
                            ___aldiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     512
                                              0 COMMON     9     1      8
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _readButton                                           2     2      0      22
                                              4 COMMON     2     2      0
                            _ADCRead
 ---------------------------------------------------------------------------------
 (2) _ADCRead                                              4     1      3      22
                                              0 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (1) _cc_cv_mode                                           8     8      0    6900
                                             30 BANK0      8     8      0
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _calculateCurrent3                                    3     3      0    6692
                                             30 BANK0      3     3      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _calculateCurrent2                                    3     3      0    6692
                                             30 BANK0      3     3      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _calculateCurrent1                                    3     3      0    6692
                                             30 BANK0      3     3      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (1) _calculateCurrent0                                    3     3      0    6692
                                             30 BANK0      3     3      0
                           ___awtoft
                            ___ftdiv
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             16    10      6    3365
                                              0 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    2     2      0   10373
                                             35 BANK0      2     2      0
                     _ADC_Initialize
         _Init_Battery_State_Machine
                           _LCDClear
                            _LCDInit
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PWM_Initialize
                    _TMR2_Initialize
                    _TMR4_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR4_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0      23
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LCDInit                                              1     1      0     803
                                              5 COMMON     1     1      0
                           _LCDWrite
 ---------------------------------------------------------------------------------
 (2) _LCDClear                                             3     3      0    3021
                                              8 COMMON     3     3      0
                           _LCDWrite
                             _gotoXY
 ---------------------------------------------------------------------------------
 (1) _gotoXY                                               3     2      1    2172
                                              5 COMMON     3     2      1
                           _LCDWrite
 ---------------------------------------------------------------------------------
 (2) _Init_Battery_State_Machine                           5     5      0    6526
                                             30 BANK0      5     5      0
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PWM7_LoadDutyValue                                   4     2      2      97
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _PWM6_LoadDutyValue                                   4     2      2      97
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _PWM1_LoadDutyValue                                   4     2      2      97
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _LCDWriteString                                       3     1      2    2165
                                             12 COMMON     2     0      2
                                              0 BANK0      1     1      0
                  _LCDWriteCharacter
 ---------------------------------------------------------------------------------
 (1) _LCDWriteInt                                         16    11      5    7585
                                              0 BANK0     16    11      5
                  _LCDWriteCharacter
                            ___awdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     265
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     406
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (2) _LCDWriteCharacter                                    6     6      0    1961
                                              6 COMMON     6     6      0
                           _LCDWrite
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    1046
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) _LCDWrite                                             5     4      1     803
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (1) _Battery_State_Machine                                6     6      0    6966
                                             30 BANK0      6     6      0
                           ___awtoft
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             14    10      4     734
                                             16 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             16    10      6    3067
                                              0 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             6     3      3    2593
                                              8 COMMON     6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    1707
                                              0 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCRead
   _Battery_State_Machine
     ___awtoft
       ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
   _LCDClear
     _LCDWrite
     _gotoXY
       _LCDWrite
   _LCDInit
     _LCDWrite
   _LCDWriteCharacter
     _LCDWrite
     ___wmul
   _LCDWriteInt
     _LCDWriteCharacter
       _LCDWrite
       ___wmul
     ___awdiv
     ___lwmod
   _LCDWriteString
     _LCDWriteCharacter
       _LCDWrite
       ___wmul
   _PWM1_LoadDutyValue
   _PWM6_LoadDutyValue
   _PWM7_LoadDutyValue
   _SYSTEM_Initialize
     _ADC_Initialize
     _Init_Battery_State_Machine
       ___awtoft
         ___ftpack
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
     _LCDClear
       _LCDWrite
       _gotoXY
         _LCDWrite
     _LCDInit
       _LCDWrite
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM_Initialize
     _TMR2_Initialize
     _TMR4_Initialize
   ___awtoft
     ___ftpack
   ___ftdiv
     ___awtoft (ARG)
       ___ftpack
     ___ftpack (ARG)
     ___ftpack (ARG)
   ___fttol
     ___awtoft (ARG)
       ___ftpack
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
   _calculateCurrent0
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
   _calculateCurrent1
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
   _calculateCurrent2
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
   _calculateCurrent3
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
   _cc_cv_mode
     ___awtoft
       ___ftpack
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
   _gotoXY
     _LCDWrite
   _readButton
     _ADCRead
   _readIAnalog
     _ADCRead
     ___aldiv
     ___wmul
   _readVAnalog
     _ADCRead
     ___aldiv
     ___wmul
   _tempCalc
     _ADCRead (ARG)
     ___awtoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
       _frexp (ARG)
     ___ftdiv (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
     ___ftsub (ARG)
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
     ___fttol (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
     _log (ARG)
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
         _frexp (ARG)
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       _eval_poly
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
           _frexp (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___wmul
       _frexp

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     3A      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     1A      4E       7       97.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      38       9       70.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6                8      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      E3      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BANK8                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BANK9                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BANK10               0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11               0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      E3      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Aug 17 16:46:38 2018

                       _stateCounter 00BD                                    _j 006A  
                                  _x 00D3               LCDWriteInt@fieldLength 0022  
            __size_of_PWM_Initialize 001F                          __CFG_CP$OFF 0000  
                                 l65 114D                                   l68 1154  
                       ___awdiv@sign 0076                  ___wmul@multiplicand 0072  
        __size_of_PWM6_LoadDutyValue 0016                         ___ftadd@exp1 003C  
                       ___ftadd@exp2 003B                          __CFG_LVP$ON 0000  
                       ___ftadd@sign 003A                                  l140 0EF1  
                                l141 0F02                                  l230 1229  
                                l231 122B                                  l232 1231  
                                l233 1241                                  l145 0F45  
                                l234 1235                                  l513 04E4  
                      LCDClear@index 0079                                  l471 02A9  
                                l472 02B1                                  l625 118F  
                                l680 16E6                                  l817 0BEE  
                                l793 1634                                  l794 163C  
                                l786 1621                                  l877 0087  
                                _GIE 005F                                  _RB2 006A  
                       __CFG_CPD$OFF 0000                         _VsampleIndex 0066  
                                _log 084B                      __end_of_ADCRead 115B  
                    _TMR2_Initialize 1FC1                         __CFG_BORV$LO 0000  
                                wreg 0009                      __end_of_LCDInit 1307  
                       ?_LCDWriteInt 0020                         __CFG_ZCD$OFF 0000  
                       ___ftdiv@cntr 002A                         ___ftdiv@sign 002F  
                               l3011 00E6                                 l3013 00F8  
                               l3103 16B1                                 l2321 15FE  
                               l3041 0208                                 l3025 0187  
                               l3033 01BA                                 l3009 00DE  
                               l2331 1626                                 l2323 1608  
                               l3115 16D2                                 l2333 162E  
                               l2325 160D                                 l2317 15F7  
                               l3029 01A1                                 l3141 09D0  
                               l3109 16BA                                 l3117 16D3  
                               l2421 0BCD                                 l2511 1208  
                               l3151 09D7                                 l3127 1132  
                               l3223 1416                                 l3055 0F10  
                               l2415 0BBA                                 l3161 0A14  
                               l3153 0A04                                 l3217 13D1  
                               l2433 0C00                                 l2417 0BC4  
                               l2409 0BA7                                 l3171 0A45  
                               l3163 0A1A                                 l3235 081F  
                               l3059 0F1D                                 l3083 1677  
                               l2427 0BE0                                 l2419 0BC9  
                               l2523 136E                                 l2603 1585  
                               l3411 04F0                                 l3331 03C5  
                               l2541 0033                                 l3157 0A08  
                               l3229 145B                                 l3093 16A3  
                               l2437 0C12                                 l2429 0BEA  
                               l3413 04F3                                 l3405 04DC  
                               l3325 03AD                                 l2463 0928  
                               l3175 0A53                                 l3159 0A0C  
                               l3095 16A5                                 l2447 0C2D  
                               l2391 0B7E                                 l2519 1358  
                               l3431 0529                                 l3343 03DB  
                               l3319 038F                                 l2457 0912  
                               l2561 0071                                 l2369 1189  
                               l3169 0A1E                                 l3089 1691  
                               l3417 0504                                 l2491 0987  
                               l2475 0963                                 l2387 0B77  
                               l3355 0411                                 l3283 0267  
                               l2573 0098                                 l2901 1784  
                               l2397 0B8D                                 l3381 046B  
                               l3349 03F9                                 l3357 0413  
                               l3277 0261                                 l3269 024D  
                               l2487 097F                                 l2479 096B  
                               l2567 007E                                 l2559 0063  
                               l2823 1707                                 l2815 16F7  
                               l3391 048C                                 l3375 0454  
                               l3295 028A                                 l2569 008A  
                               l2841 174E                                 l2833 1735  
                               l2825 1715                                 l2585 138F  
                               l3385 0472                                 l3289 0285  
                               l2683 1250                                 l2923 17DE  
                               l2915 17C5                                 l3571 07B9  
                               l2853 1491                                 l2837 1740  
                               l3397 04B8                                 l2871 14B0  
                               l2935 11AA                                 l3567 07B0  
                               l3399 04BC                                 l2881 14CB  
                               l2953 1287                                 l2689 1264  
                               l2859 149C                                 l2947 126F  
                               l2795 087D                                 l2885 14D3  
                               l2877 14C2                                 l2869 14A4  
                               l2949 127B                                 l2957 1290  
                               l2789 086A                                 l2895 176E  
                               l2975 0D5B                                 l2995 0E99  
                               ?_log 0047                                 STR_1 1825  
                               STR_2 1820                                 STR_3 181B  
                               u2205 161C                                 u3005 1716  
                               _LATA 0016                                 _LATB 0017  
                               u3015 172A                                 _LATC 0018  
                               u2225 1629                                 u3105 14B1  
                               u3025 1736                                 u3115 14BB  
                               u3125 14C3                                 u3205 17D5  
                               u2335 1190                                 u3215 17DF  
                               u2265 1643                                 u2185 1603  
                               u2345 1195                                 u3305 0C5B  
                               _T2PR 028D                                 u3315 0CB1  
                               u2515 0BCE                                 u4115 03EA  
                               u4035 039E                                 u3085 14A7  
                               u3325 0CEB                                 u3405 0E74  
                               u2615 0934                                 u3255 1272  
                               u3175 1796                                 u3335 0D36  
                               u2455 0BA8                                 u4215 0485  
                               u4135 0406                                 u4055 03BA  
                               u2625 0944                                 u3185 17A6  
                               u2545 0BE1                                 u4225 049C  
                               _T4PR 0293                                 u3275 1281  
                               u3195 17C6                                 u3435 0EA4  
                               u4235 04B1                                 u2645 096C  
                               u3285 1288                                 u3365 0D66  
                               u2485 0BBB                                 u4245 04CE  
                               u4165 044D                                 u4085 03D8  
                               u2910 12CA                                 u2655 0972  
                               u3455 00BC                                 u3615 0F5F  
                               u3375 0D99                                 u4327 0255  
                               u2825 007F                                 u3465 00D0  
                               u2905 1262                                 u4337 16C4  
                               u3385 0DEF                                 u4185 0464  
                               u4347 132A                                 u3555 0EDD  
                               u3395 0E29                                 u2685 0988  
                               u2765 003A                                 u4357 133A  
                               u3645 0FB4                                 u3750 09BA  
                               u2695 098E                                 u3495 015A  
                               u3815 0A33                                 u3655 1665  
                               u3905 0819                                 u3665 1671  
                               u2795 0064                                 u3675 1681  
                               u3845 1180                                 u3685 168D  
                               u3855 0013                                 u2895 124E  
                               u3695 169B                                 u3865 116A  
                               u2985 170A                                 u3875 13CB  
                               u3885 1410                                 u3895 1455  
                               u3995 037D                  tempCalc@analogValue 004D  
                               _WPUA 0F39                                 _WPUB 0F44  
                               _WPUC 0F4F                                 _WPUE 0F65  
                               _Imin 00C9                                 _Iref 00C1  
                               _Iout 00CF                         __CFG_WRT$OFF 0000  
                      __CFG_FCMEN$ON 0000                                 _Vref 005A  
                               _main 0218                         ___ftpack@arg 0070  
                       ___ftpack@exp 0073                                 fsr0h 0005  
                               fsr1h 0007                                 indf0 0000  
                               fsr0l 0004                                 indf1 0001  
                               fsr1l 0006                                 btemp 007E  
                               log@x 0047                         ?_readIAnalog 0026  
                      __CFG_BOREN$ON 0000                                 start 0002  
                      __CFG_CSWEN$ON 0000                        __CFG_MCLRE$ON 0000  
                       ___ftmul@cntr 002E                         ___ftmul@sign 002F  
                       ?_readVAnalog 0026                     __end_of_LCDClear 1269  
                       ___fttol@exp1 003D                                ??_log 004A  
                       ___fttol@lval 0039                         main@fastLoop 00DC  
__size_of_Init_Battery_State_Machine 0063       __size_of_OSCILLATOR_Initialize 0009  
                   __end_of_LCDWrite 1243        __end_of_OSCILLATOR_Initialize 1FA9  
                    __end_of___aldiv 1757                                _ADACQ 009D  
                              _ADACT 0099                                _ADCAP 009B  
                              ?_main 0070                                _ADCLK 0098  
                              _ADPCH 009E                                _ADREF 009A  
                    __end_of___awdiv 14D8                                _ADPRE 009C  
                    __end_of___ftadd 0C45                        __CFG_WDTE$OFF 0000  
                              _ADRPT 010D                      __end_of___ftdiv 1800  
                    __end_of___ftmul 09AF                      ___awdiv@divisor 0070  
                    __end_of___ftsub 11C0                      __end_of___fttol 00A1  
                              _T2CON 028E                                _LATA5 00B5  
                              _T4CON 0294                                _T2HLT 028F  
                              _T4HLT 0295                                _T2TMR 028C  
                              _T2RST 0291                      __end_of___lwmod 1295  
                              _T4TMR 0292                                _T4RST 0297  
                    ___awdiv@counter 0075                                _OSCEN 0891  
                              _TRISA 0011                                _TRISB 0012  
                              _TRISC 0013                      _TMR4_Initialize 1FCF  
                              _Imode 0062               ?_Battery_State_Machine 0070  
                              _cc_cv 00D1                        ___awtoft@sign 007D  
                              _frexp 137D                                _fonts 1000  
                              _errno 00CD                        ___ftpack@sign 0074  
                              main@j 00ED                         main@slowLoop 00DD  
                              status 0003                                wtemp0 007E  
                    __initialization 07BC                          log@exponent 004B  
                       __end_of_main 07BC              __end_of_TMR2_Initialize 1FCF  
                          ??_ADCRead 0073                               ??_main 0058  
                      ___fttol@sign1 0038                            ??_LCDInit 0075  
             Battery_State_Machine@z 0043              LCDWrite@data_or_command 0072  
                             _ADCON0 0093                               _ADCON1 0094  
                             _ADCON2 0095                               _ADCON3 0096  
                             ?_frexp 0070                               _ADLTHH 010F  
                             _ADLTHL 010E                               _ADRESH 008D  
                             _ADRESL 008C                               _CCPR1H 030D  
                             _CCPR1L 030C                               _ADSTAT 0097  
                             _ADUTHH 0111                     ___awdiv@dividend 0072  
                             _ADUTHL 0110                     __end_of___awtoft 121E  
                             _ANSELA 0F38                               _ANSELB 0F43  
                             _ANSELC 0F4E                     __end_of___ftpack 1653  
                             _RB0PPS 0F18                               _RA6PPS 0F16  
                             _RA7PPS 0F17                       __CFG_WDTCCS$SC 0000  
                             _FVRCON 090C                               _OSCFRQ 0893  
                     __CFG_PWRTE$OFF 0000                       _LCDWriteString 1132  
                       _CCPTMRS0bits 021E                         _CCPTMRS1bits 021F  
                             ___ftge 1342                            ??___aldiv 0078  
                             ___wmul 1187                            ??___awdiv 0074  
                          ??___ftadd 0036                       __CFG_STVREN$ON 0000  
                     _PWM_Initialize 11DF                            ??___ftdiv 0026  
                          ??___ftmul 0026                            ??___ftsub 007E  
                          ??___fttol 0034                            ??___lwmod 0074  
                             _gotoXY 1FED                               _button 006C  
            __end_of_TMR4_Initialize 1FDD                     ___awdiv@quotient 0077  
          readVAnalog@analog_channel 0079                ___ftmul@f3_as_product 002B  
                   __end_of_tempCalc 0B4F                         LCDWrite@data 0070  
                       LCDWriteInt@i 002F                         LCDWriteInt@j 002E  
                          ?_LCDClear 0070                    _SYSTEM_Initialize 1307  
               __size_of_LCDWriteInt 00B9                     __end_oflog@coeff 181B  
            __end_of__initialization 07FD                           ___ftadd@f1 0030  
                         ___ftadd@f2 0033                           ___ftge@ff1 0070  
                         ___ftge@ff2 0073                            ?_LCDWrite 0070  
                 ?_SYSTEM_Initialize 0070               __end_of_LCDWriteString 1146  
                       eval_poly@res 0044                           ___ftdiv@f1 0023  
                         ___ftdiv@f2 0020                           ___ftdiv@f3 002B  
                         ___awtoft@c 0078                           ___ftmul@f1 0020  
                         ___ftmul@f2 0023               __end_of_PWM_Initialize 11FE  
               __size_of_readIAnalog 013E                           ___ftsub@f1 0040  
                         ___ftsub@f2 003D                           ___fttol@f1 0030  
                     __pcstackCOMMON 0070                         __pidataBANK0 0804  
                       __pidataBANK2 1FDD                  ??_SYSTEM_Initialize 0043  
                      __end_of_frexp 13B8                        __end_of_fonts 112F  
                          LCDWrite@d 0073                            LCDWrite@i 0074  
               __size_of_readVAnalog 013E                   _PWM1_LoadDutyValue 115B  
                   ?_TMR2_Initialize 0070                           _cc_cv_mode 0EC1  
        __size_of_PWM7_LoadDutyValue 0016                       main@efficiency 00D4  
                ?_PWM1_LoadDutyValue 0070                    LCDWriteInt@F14392 00B8  
                  _calculateCurrent0 13B8                    _calculateCurrent1 13FD  
                  _calculateCurrent2 1442                    _calculateCurrent3 0806  
                            ??_frexp 0074            __end_of_SYSTEM_Initialize 1342  
                         __pbssBANK0 005A                           __pbssBANK1 00A0  
                         __pbssBANK2 0120                   ?_calculateCurrent0 0070  
                 ?_calculateCurrent1 0070                   ?_calculateCurrent2 0070  
                 ?_calculateCurrent3 0070                         _batteryState 0064  
                 __size_of_eval_poly 0060                           ??_LCDClear 0078  
                     main@faultCount 00D7                           ??_LCDWrite 0071  
                    ?_LCDWriteString 007C                 ??_PWM1_LoadDutyValue 0072  
                ??_calculateCurrent0 003E                  ??_calculateCurrent1 003E  
                ??_calculateCurrent2 003E                  ??_calculateCurrent3 003E  
                    ?_PWM_Initialize 0070                           __pmaintext 0218  
                            ?___ftge 0070                              ?___wmul 0070  
                    __CFG_PPS1WAY$ON 0000           __end_of_PWM6_LoadDutyValue 1187  
                            ?_gotoXY 0075                              _ADCRead 1146  
                   ?_TMR4_Initialize 0070                            ?___awtoft 0078  
                          ?___ftpack 0070                              _ADSTPTH 0113  
                            _ADSTPTL 0112             __CFG_SCANE$not_available 0000  
                __CFG_RSTOSC$HFINT32 0000              __size_of_ADC_Initialize 001F  
            ??_Battery_State_Machine 003E                       main@largerIOut 00E2  
                            _LCDInit 12CC            __end_of_calculateCurrent0 13FD  
          __end_of_calculateCurrent1 1442            __end_of_calculateCurrent2 1487  
          __end_of_calculateCurrent3 084B                              _OSCCON1 088D  
                            _OSCCON3 088F                              _OSCTUNE 0892  
                            _PWM6DCH 038D                              _PWM6DCL 038C  
                            _PWM7DCH 0391                              _PWM7DCL 0390  
                            _PWM6CON 038E                              _PWM7CON 0392  
                            _PPSLOCK 0E8F                       main@menuButton 00E4  
                     main@dutyCycle1 00E5                       main@dutyCycle6 00E9  
                     main@dutyCycle7 00EB                    main@tempFanOutput 00E7  
                         _lastButton 006B                            ?_tempCalc 004D  
                            _Itotals 0130                              ___aldiv 16D5  
                    __size_of___ftge 003B                              ___awdiv 1487  
                            ___ftadd 0B4F                           _readButton 1653  
                            ___ftdiv 1757                      __size_of___wmul 001B  
                            ___ftmul 08FB                              ___ftsub 11A2  
                            ___fttol 001A                   main@displayRefresh 00DB  
                            ___lwmod 1269                              _Vtotals 0120  
                    __size_of_gotoXY 0013                           ??___awtoft 007B  
                         ??___ftpack 0075                    __end_of_eval_poly 158C  
                            __ptext1 0A68                              __ptext2 084B  
                            __ptext3 137D                              __ptext4 152C  
                            __ptext5 1342                              __ptext6 11A2  
                            __ptext7 0B4F                              __ptext8 0D83  
                            __ptext9 0C45                          ?_cc_cv_mode 0070  
              _OSCILLATOR_Initialize 1FA0                            _T2CONbits 028E  
                            _current 00B0                         __size_of_log 00B0  
                     ADCRead@channel 0073                     ___aldiv@dividend 0074  
                          _T4CONbits 0294             ??_PIN_MANAGER_Initialize 0070  
         __size_of_SYSTEM_Initialize 003B                              clrloop0 1FAA  
                            _voltage 00A8         ??_Init_Battery_State_Machine 003E  
               end_of_initialization 07FD                LCDWriteCharacter@base 007A  
                            gotoXY@x 0077                              gotoXY@y 0075  
                            init_ram 1FB5                              initloop 1FB6  
                         ??_tempCalc 007E                     ___aldiv@quotient 0022  
                  _LCDWriteCharacter 14D8                __CFG_WDTCPS$WDTCPS_31 0000  
                 ?_LCDWriteCharacter 0070                   readVAnalog@channel 0026  
         __size_of_calculateCurrent0 0045           __size_of_calculateCurrent1 0045  
         __size_of_calculateCurrent2 0045           __size_of_calculateCurrent3 0045  
                          _TRISAbits 0011                  ??_LCDWriteCharacter 0076  
                   __CFG_FEXTOSC$OFF 0000         PWM1_LoadDutyValue@dutyCycle1 0070  
                        _CCP1CONbits 030E                          ___ftdiv@exp 002E  
                __size_of_cc_cv_mode 013F                    __size_of_LCDClear 0026  
         LCDWriteCharacter@character 0079                    __size_of_LCDWrite 0025  
                        ___ftmul@exp 002A            __end_of_LCDWriteCharacter 152C  
                        ?_readButton 0070                            _Ichannels 0150  
          readIAnalog@analog_channel 0079                       __end_of___ftge 137D  
                          _VHoldMode 0060                       __end_of___wmul 11A2  
                     _ADC_Initialize 11C0                       __end_of_gotoXY 2000  
             ?_OSCILLATOR_Initialize 0070                            _IminCount 00C5  
                start_initialization 07BC                           eval_poly@d 0040  
                         eval_poly@n 0042                           eval_poly@x 003D  
                  main@faultNotReset 00D9      __size_of_PIN_MANAGER_Initialize 0037  
                        __end_of_log 08FB                        ??_LCDWriteInt 0025  
                   ??_LCDWriteString 0020                           frexp@value 0070  
                       _IsampleIndex 0068                     ??_PWM_Initialize 0070  
                      ??_readIAnalog 0028                            _Vchannels 0148  
                   __CFG_LPBOREN$OFF 0000                        ??_readVAnalog 0028  
                           ??___ftge 0076                    tempCalc@steinhart 0055  
                           ??___wmul 0074               __end_of_ADC_Initialize 11DF  
                      _tempCalc$1311 0052                          __pdataBANK0 006D  
                        __pdataBANK2 0148           __end_of_PWM7_LoadDutyValue 001A  
                           ??_gotoXY 0076                             ?_ADCRead 0070  
       PWM7_LoadDutyValue@dutyCycle7 0070                    __size_of___awtoft 0020  
                           ?_LCDInit 0070                    __size_of___ftpack 0064  
                        __pbssBIGRAM 21E8                     readVAnalog@value 007B  
     __size_of_Battery_State_Machine 0177        __end_of_Battery_State_Machine 0218  
                          ___latbits 0002                        __pcstackBANK0 0020  
                      __pcstackBANK1 00D4                   _PWM6_LoadDutyValue 1171  
           __size_of_TMR2_Initialize 000E   __end_of_Init_Battery_State_Machine 15EF  
         _Init_Battery_State_Machine 158C                  __size_of_readButton 0082  
                ?_PWM6_LoadDutyValue 0070                  __end_of_LCDWriteInt 0A68  
                        _batteryTemp 006D          __size_of_PWM1_LoadDutyValue 0016  
             _PIN_MANAGER_Initialize 1295           __size_of_LCDWriteCharacter 0054  
                           ?___aldiv 0070                  __end_of_readIAnalog 0D83  
                  __size_of_tempCalc 00E7                             ?___awdiv 0070  
                           ?___ftadd 0030                             ?___ftdiv 0020  
                           ?___ftmul 0020                             ?___ftsub 003D  
                           ?___fttol 0030                     LCDWriteInt@value 0020  
                           ?___lwmod 0070                      ?_ADC_Initialize 0070  
               ??_PWM6_LoadDutyValue 0072                         ??_cc_cv_mode 003E  
                __end_of_readVAnalog 0EC1                            _eval_poly 152C  
           __size_of_TMR4_Initialize 000E                       __size_of_frexp 003B  
                           _T2CLKCON 0290                             _T4CLKCON 0296  
                        cc_cv_mode@z 0045                             _LCDClear 1243  
                    ___aldiv@divisor 0070                      ___aldiv@counter 0020  
                     ___wmul@product 0074                             _LATAbits 0016  
                           _LCDWrite 121E                            clear_ram0 1FA9  
                           _PIE0bits 0716                   __end_of_cc_cv_mode 1000  
                           _PIR4bits 0710                     readIAnalog@value 007B  
                          main@MPPT0 00E0                            main@MPPT1 00DE  
                   __size_of_ADCRead 0015                           _ADCON0bits 0093  
                  ___wmul@multiplier 0070                           ?_eval_poly 003D  
                   __size_of_LCDInit 003B                             _Ianalogs 00A0  
                        _LCDWriteInt 09AF          Init_Battery_State_Machine@z 0042  
                  ??_TMR2_Initialize 0070                             _Isamples 21E8  
                        _readIAnalog 0C45                            frexp@eptr 0073  
                           _Vanalogs 0140                          _readVAnalog 0D83  
                       ??_readButton 0074              ??_OSCILLATOR_Initialize 0070  
               LCDWriteInt@numPlaces 0023                     __size_of___aldiv 0082  
                   __size_of___awdiv 0051                     __size_of___ftadd 00F6  
                   __size_of___ftdiv 00A9                     __size_of___ftmul 00B4  
                   __size_of___ftsub 001E                     __size_of___fttol 0087  
                           _Vsamples 2378                     __size_of___lwmod 002C  
                        _readButtons 005E                             ___awtoft 11FE  
                           ___ftpack 15EF                             __ptext10 16D5  
                           __ptext11 1653                             __ptext20 1FCF  
                           __ptext12 1146                             __ptext21 1FC1  
                           __ptext13 0EC1                             __ptext30 0004  
                           __ptext22 11DF                             __ptext14 0806  
                           __ptext31 1171                             __ptext23 1295  
                           __ptext15 1442                             __ptext40 00A1  
                           __ptext32 115B                             __ptext24 1FA0  
                           __ptext16 13FD                             __ptext41 001A  
                           __ptext33 1132                             __ptext25 12CC  
                           __ptext17 13B8                             __ptext42 08FB  
                           __ptext34 09AF                             __ptext26 1243  
                           __ptext18 1757                             __ptext43 11FE  
                           __ptext35 1269                             __ptext27 1FED  
                           __ptext19 1307                             __ptext44 15EF  
                           __ptext36 1487                             __ptext28 158C  
                           __ptext37 14D8                             __ptext29 11C0  
                           __ptext38 1187                             __ptext39 121E  
                    LCDWriteInt@sign 0024                            tempCalc@R 004F  
                 __end_of_readButton 16D5                    ??_TMR4_Initialize 0070  
                      __size_of_main 05A4                 __CFG_WDTCWS$WDTCWS_7 0000  
                           _tempCalc 0A68          PIN_MANAGER_Initialize@state 0070  
                           log@coeff 1800                          ??_eval_poly 007E  
                 _PWM7_LoadDutyValue 0004          ?_Init_Battery_State_Machine 0070  
                   ___lwmod@dividend 0072                       LCDWriteInt@str 0029  
            ?_PIN_MANAGER_Initialize 0070                  ?_PWM7_LoadDutyValue 0070  
                  __CFG_CLKOUTEN$OFF 0000                          _PPSLOCKbits 0E8F  
                   ??_ADC_Initialize 0070         PWM6_LoadDutyValue@dutyCycle6 0070  
                      __pstringtext1 1000                        __pstringtext2 1800  
                      __pstringtext3 1820                        __pstringtext4 1825  
                      __pstringtext5 0000                 ??_PWM7_LoadDutyValue 0072  
                    ___lwmod@divisor 0070                      ___lwmod@counter 0075  
           LCDWriteString@characters 007C                         ___aldiv@sign 0021  
                 readIAnalog@channel 0026                _Battery_State_Machine 00A1  
     __end_of_PIN_MANAGER_Initialize 12CC           __end_of_PWM1_LoadDutyValue 1171  
            __size_of_LCDWriteString 0014  
